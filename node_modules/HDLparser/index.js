"use strict";

const utils   = require("./utils/utils");
exports.utils = utils;

const vlogParser = require("./parser_RegExp/vlogParser");
const vhdlParser = require("./parser_RegExp/vhdlParser");
exports.vlogParser = vlogParser;
exports.vhdlParser = vhdlParser;

class indexer {
    constructor() {
        this.HDLparam  = [];
    };

    removeCurrentFileParam(currentFilePath) {
        for (let index = 0; index < this.HDLparam.length; ) {
            const HDLelement = this.HDLparam[index];
            if (HDLelement.modulePath == currentFilePath) {
                this.HDLparam.splice(index,1);
            } else{
                index++;
            }
        }
    }

    /**
     * 更新所有模块下所例化模块的路径
    */
    refreshInstModulePath() {
        let len = this.HDLparam.length;
        for (let i = 0; i < len; i++) {
            // 每个模块
            const unitMoudule = this.HDLparam[i];
            let instLen = unitMoudule.instances.length;
            for (let x = 0; x < instLen; x++) {
                // 每个模块下的例化模块
                const unitInstanceModule = unitMoudule.instances[x];

                // 首先遍历include文件
                let isExistInclude = false;
                for (let y = 0; y < unitMoudule.includes.length; y++) {
                    const unitInclude = unitMoudule.includes[y];
                    const includeModule = utils.findModuleFromPath(this.HDLparam, unitInclude, "moduleName");
                    if (includeModule.includes(unitInstanceModule.instModule)) {
                        unitInstanceModule.instModPath = unitInclude;
                        isExistInclude = true;
                        break;
                    }
                }

                // 如果不在include中则进行全局遍历
                let isExist = false;
                if (!isExistInclude) {
                    for (let z = 0; z < len; z++) {
                        const unitHDLFileElement = this.HDLparam[z];
                        if (unitInstanceModule.instModule == unitHDLFileElement.moduleName) {
                            unitInstanceModule.instModPath = unitHDLFileElement.modulePath;
                            isExist = true;
                            break;
                        }
                    }
                }

                // 如果全局还不存在则设置为空
                if (!isExist && !isExistInclude) {
                    unitInstanceModule.instModPath = '';
                }
            }
        }
    }

    processFile(path) {
        let languageId = utils.getLanguageId(path);
        if (languageId == "systemverilog" || languageId == "verilog") {
            vlogParser.getFileParam(path, this.HDLparam, option);
        } 
        // else if (languageId == "vhdl") {
        //     vhdlParser.getFileParam(document, HDLSymbol, HDLparam);
        // }
    }

    async build_index(FileList) {
        await Promise.all(FileList.map((path, index) => {
            try {
                return this.processFile(path);
            } catch (error) {
                console.log(`${error}\n@ ${path}`);
            }
        }));
        this.refreshInstModulePath();
    }
}
exports.indexer = indexer;