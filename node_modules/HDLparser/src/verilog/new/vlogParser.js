// Generated from src/verilog/new/vlogParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var vlogParserListener = require('./vlogParserListener').vlogParserListener;
var grammarFileName = "vlogParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e7\u1155\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0003",
    "\u0002\u0007\u0002\u02cc\n\u0002\f\u0002\u000e\u0002\u02cf\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u02d6\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0007\u0004\u02dd\n\u0004\f\u0004\u000e\u0004\u02e0\u000b\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u02e6\n",
    "\u0004\f\u0004\u000e\u0004\u02e9\u000b\u0004\u0005\u0004\u02eb\n\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u02f7\n",
    "\u0007\u0003\b\u0007\b\u02fa\n\b\f\b\u000e\b\u02fd\u000b\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u0302\n\b\u0003\b\u0003\b\u0003\b\u0007\b\u0307\n",
    "\b\f\b\u000e\b\u030a\u000b\b\u0003\b\u0003\b\u0003\b\u0007\b\u030f\n",
    "\b\f\b\u000e\b\u0312\u000b\b\u0003\b\u0003\b\u0003\b\u0005\b\u0317\n",
    "\b\u0003\b\u0005\b\u031a\n\b\u0003\b\u0003\b\u0007\b\u031e\n\b\f\b\u000e",
    "\b\u0321\u000b\b\u0003\b\u0003\b\u0005\b\u0325\n\b\u0003\t\u0003\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u032e\n\n\f\n\u000e\n\u0331",
    "\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0007\u000b\u0339\n\u000b\f\u000b\u000e\u000b\u033c\u000b\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0344\n\f",
    "\f\f\u000e\f\u0347\u000b\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u034d",
    "\n\f\u0003\r\u0005\r\u0350\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0356\n\r\u0003\r\u0003\r\u0005\r\u035a\n\r\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0361\n\u000e\f\u000e",
    "\u000e\u000e\u0364\u000b\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0368",
    "\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u036f\n\u000f\u0003\u0010\u0007\u0010\u0372\n\u0010\f\u0010",
    "\u000e\u0010\u0375\u000b\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0379",
    "\n\u0010\f\u0010\u000e\u0010\u037c\u000b\u0010\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u0380\n\u0010\f\u0010\u000e\u0010\u0383\u000b\u0010\u0003",
    "\u0010\u0005\u0010\u0386\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u038c\n\u0011\u0003\u0012\u0007\u0012\u038f",
    "\n\u0012\f\u0012\u000e\u0012\u0392\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0007\u0012\u0396\n\u0012\f\u0012\u000e\u0012\u0399\u000b\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u039f\n\u0012",
    "\f\u0012\u000e\u0012\u03a2\u000b\u0012\u0003\u0012\u0003\u0012\u0007",
    "\u0012\u03a6\n\u0012\f\u0012\u000e\u0012\u03a9\u000b\u0012\u0003\u0012",
    "\u0003\u0012\u0007\u0012\u03ad\n\u0012\f\u0012\u000e\u0012\u03b0\u000b",
    "\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03b4\n\u0012\f\u0012\u000e",
    "\u0012\u03b7\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03bb\n",
    "\u0012\f\u0012\u000e\u0012\u03be\u000b\u0012\u0003\u0012\u0003\u0012",
    "\u0007\u0012\u03c2\n\u0012\f\u0012\u000e\u0012\u03c5\u000b\u0012\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u03c9\n\u0012\f\u0012\u000e\u0012\u03cc",
    "\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03d0\n\u0012\f\u0012",
    "\u000e\u0012\u03d3\u000b\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u03d7",
    "\n\u0012\f\u0012\u000e\u0012\u03da\u000b\u0012\u0003\u0012\u0005\u0012",
    "\u03dd\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u03e9\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0007\u0014\u03ef\n\u0014\f\u0014\u000e\u0014\u03f2\u000b\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u03f8\n\u0014",
    "\f\u0014\u000e\u0014\u03fb\u000b\u0014\u0003\u0014\u0005\u0014\u03fe",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u0409\n",
    "\u0016\f\u0016\u000e\u0016\u040c\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0414\n",
    "\u0017\u0003\u0017\u0007\u0017\u0417\n\u0017\f\u0017\u000e\u0017\u041a",
    "\u000b\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0432\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u043c\n\u001b",
    "\f\u001b\u000e\u001b\u043f\u000b\u001b\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u0445\n\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u044b\n\u001d\f\u001d\u000e\u001d",
    "\u044e\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u0454\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u0459\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u045d\n\u001f\u0003",
    "\u001f\u0005\u001f\u0460\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0467\n\u001f\u0003 \u0003 \u0005",
    " \u046b\n \u0003 \u0005 \u046e\n \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u0475\n \u0003!\u0003!\u0005!\u0479\n!\u0003!\u0003!\u0003",
    "!\u0003\"\u0003\"\u0003#\u0003#\u0005#\u0482\n#\u0003#\u0005#\u0485",
    "\n#\u0003#\u0005#\u0488\n#\u0003#\u0003#\u0003$\u0003$\u0005$\u048e",
    "\n$\u0003$\u0005$\u0491\n$\u0003$\u0005$\u0494\n$\u0003$\u0003$\u0003",
    "%\u0003%\u0005%\u049a\n%\u0003%\u0005%\u049d\n%\u0003%\u0005%\u04a0",
    "\n%\u0003%\u0003%\u0003%\u0003%\u0005%\u04a6\n%\u0003%\u0005%\u04a9",
    "\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u04b0\n%\u0003&\u0003",
    "&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0005",
    "(\u04bc\n(\u0003(\u0005(\u04bf\n(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0005(\u04c6\n(\u0003(\u0005(\u04c9\n(\u0003(\u0005(\u04cc\n(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0005(\u04d3\n(\u0003(\u0005(\u04d6\n",
    "(\u0003(\u0003(\u0005(\u04da\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005",
    "(\u04e1\n(\u0003(\u0005(\u04e4\n(\u0003(\u0005(\u04e7\n(\u0003(\u0003",
    "(\u0005(\u04eb\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u04f2\n",
    "(\u0003(\u0005(\u04f5\n(\u0003(\u0005(\u04f8\n(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0005(\u04ff\n(\u0003(\u0005(\u0502\n(\u0003(\u0005",
    "(\u0505\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u050c\n(\u0003",
    "(\u0005(\u050f\n(\u0003(\u0005(\u0512\n(\u0003(\u0003(\u0005(\u0516",
    "\n(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u051d\n(\u0003(\u0005",
    "(\u0520\n(\u0003(\u0005(\u0523\n(\u0003(\u0003(\u0005(\u0527\n(\u0003",
    "(\u0003(\u0003(\u0005(\u052c\n(\u0003)\u0003)\u0003)\u0003)\u0003*\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0005+\u0538\n+\u0003+\u0005+\u053b\n",
    "+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003",
    ".\u0003.\u0003/\u0003/\u0007/\u054a\n/\f/\u000e/\u054d\u000b/\u0003",
    "/\u0003/\u0003/\u0003/\u0005/\u0553\n/\u00030\u00030\u00070\u0557\n",
    "0\f0\u000e0\u055a\u000b0\u00030\u00030\u00030\u00030\u00050\u0560\n",
    "0\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0586\n1\u00032\u0003",
    "2\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u0595\n4\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00055\u05a0\n5\u00055\u05a2\n5\u00035\u00035\u0005",
    "5\u05a6\n5\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u05af",
    "\n6\u00036\u00036\u00056\u05b3\n6\u00037\u00037\u00037\u00057\u05b8",
    "\n7\u00038\u00038\u00038\u00078\u05bd\n8\f8\u000e8\u05c0\u000b8\u0003",
    "9\u00039\u00079\u05c4\n9\f9\u000e9\u05c7\u000b9\u00039\u00039\u0003",
    "9\u00079\u05cc\n9\f9\u000e9\u05cf\u000b9\u00079\u05d1\n9\f9\u000e9\u05d4",
    "\u000b9\u0003:\u0003:\u0003:\u0007:\u05d9\n:\f:\u000e:\u05dc\u000b:",
    "\u0003;\u0003;\u0007;\u05e0\n;\f;\u000e;\u05e3\u000b;\u0003;\u0003;",
    "\u0003;\u0007;\u05e8\n;\f;\u000e;\u05eb\u000b;\u0007;\u05ed\n;\f;\u000e",
    ";\u05f0\u000b;\u0003<\u0003<\u0003<\u0007<\u05f5\n<\f<\u000e<\u05f8",
    "\u000b<\u0003=\u0003=\u0003=\u0007=\u05fd\n=\f=\u000e=\u0600\u000b=",
    "\u0003>\u0003>\u0003>\u0007>\u0605\n>\f>\u000e>\u0608\u000b>\u0003?",
    "\u0003?\u0003?\u0007?\u060d\n?\f?\u000e?\u0610\u000b?\u0003@\u0003@",
    "\u0003@\u0007@\u0615\n@\f@\u000e@\u0618\u000b@\u0003A\u0003A\u0003A",
    "\u0005A\u061d\nA\u0003A\u0003A\u0003A\u0003A\u0005A\u0623\nA\u0007A",
    "\u0625\nA\fA\u000eA\u0628\u000bA\u0003B\u0003B\u0003B\u0003B\u0003C",
    "\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0005E\u063b\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u0643\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0005F\u0650\nF\u0003F\u0003F\u0005F\u0654\n",
    "F\u0003G\u0003G\u0003H\u0003H\u0003I\u0003I\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003L\u0003",
    "L\u0005L\u066a\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u0671\n",
    "L\fL\u000eL\u0674\u000bL\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u067b",
    "\nL\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0007L\u0684\n",
    "L\fL\u000eL\u0687\u000bL\u0003L\u0003L\u0003L\u0005L\u068c\nL\u0003",
    "M\u0003M\u0007M\u0690\nM\fM\u000eM\u0693\u000bM\u0003M\u0003M\u0003",
    "M\u0005M\u0698\nM\u0003N\u0007N\u069b\nN\fN\u000eN\u069e\u000bN\u0003",
    "N\u0003N\u0003N\u0007N\u06a3\nN\fN\u000eN\u06a6\u000bN\u0003N\u0007",
    "N\u06a9\nN\fN\u000eN\u06ac\u000bN\u0003O\u0005O\u06af\nO\u0003O\u0005",
    "O\u06b2\nO\u0003O\u0003O\u0003O\u0003O\u0005O\u06b8\nO\u0003P\u0003",
    "P\u0005P\u06bc\nP\u0003P\u0003P\u0003P\u0007P\u06c1\nP\fP\u000eP\u06c4",
    "\u000bP\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u06cb\nP\u0003P\u0003",
    "P\u0003P\u0005P\u06d0\nP\u0003P\u0003P\u0003P\u0007P\u06d5\nP\fP\u000e",
    "P\u06d8\u000bP\u0003P\u0003P\u0003P\u0005P\u06dd\nP\u0003Q\u0003Q\u0007",
    "Q\u06e1\nQ\fQ\u000eQ\u06e4\u000bQ\u0003Q\u0003Q\u0003Q\u0003Q\u0007",
    "Q\u06ea\nQ\fQ\u000eQ\u06ed\u000bQ\u0003Q\u0003Q\u0003Q\u0003Q\u0007",
    "Q\u06f3\nQ\fQ\u000eQ\u06f6\u000bQ\u0003Q\u0003Q\u0003Q\u0005Q\u06fb",
    "\nQ\u0003R\u0003R\u0003R\u0007R\u0700\nR\fR\u000eR\u0703\u000bR\u0003",
    "S\u0007S\u0706\nS\fS\u000eS\u0709\u000bS\u0003S\u0003S\u0007S\u070d",
    "\nS\fS\u000eS\u0710\u000bS\u0003S\u0003S\u0007S\u0714\nS\fS\u000eS\u0717",
    "\u000bS\u0003S\u0005S\u071a\nS\u0003T\u0003T\u0005T\u071e\nT\u0003T",
    "\u0005T\u0721\nT\u0003T\u0005T\u0724\nT\u0003T\u0003T\u0003T\u0003T",
    "\u0003T\u0005T\u072b\nT\u0003U\u0003U\u0005U\u072f\nU\u0003U\u0005U",
    "\u0732\nU\u0003U\u0005U\u0735\nU\u0003U\u0003U\u0003U\u0003U\u0003U",
    "\u0005U\u073c\nU\u0003V\u0003V\u0005V\u0740\nV\u0003V\u0005V\u0743\n",
    "V\u0003V\u0005V\u0746\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u074d",
    "\nV\u0003W\u0003W\u0003X\u0007X\u0752\nX\fX\u000eX\u0755\u000bX\u0003",
    "X\u0003X\u0005X\u0759\nX\u0003X\u0005X\u075c\nX\u0003X\u0003X\u0003",
    "X\u0003X\u0007X\u0762\nX\fX\u000eX\u0765\u000bX\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0007X\u076c\nX\fX\u000eX\u076f\u000bX\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0007X\u0776\nX\fX\u000eX\u0779\u000bX\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0007X\u0780\nX\fX\u000eX\u0783\u000b",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0007X\u078a\nX\fX\u000eX\u078d",
    "\u000bX\u0003X\u0003X\u0007X\u0791\nX\fX\u000eX\u0794\u000bX\u0003X",
    "\u0003X\u0003X\u0003X\u0007X\u079a\nX\fX\u000eX\u079d\u000bX\u0003X",
    "\u0003X\u0003X\u0005X\u07a2\nX\u0003Y\u0003Y\u0003Y\u0007Y\u07a7\nY",
    "\fY\u000eY\u07aa\u000bY\u0003Z\u0003Z\u0003Z\u0007Z\u07af\nZ\fZ\u000e",
    "Z\u07b2\u000bZ\u0003[\u0003[\u0007[\u07b6\n[\f[\u000e[\u07b9\u000b[",
    "\u0003\\\u0003\\\u0007\\\u07bd\n\\\f\\\u000e\\\u07c0\u000b\\\u0003]",
    "\u0003]\u0005]\u07c4\n]\u0003]\u0003]\u0003]\u0007]\u07c9\n]\f]\u000e",
    "]\u07cc\u000b]\u0003]\u0003]\u0003]\u0003]\u0005]\u07d2\n]\u0003]\u0005",
    "]\u07d5\n]\u0003]\u0003]\u0003]\u0007]\u07da\n]\f]\u000e]\u07dd\u000b",
    "]\u0003]\u0003]\u0003]\u0003]\u0005]\u07e3\n]\u0003]\u0003]\u0003]\u0007",
    "]\u07e8\n]\f]\u000e]\u07eb\u000b]\u0003]\u0003]\u0003]\u0003]\u0005",
    "]\u07f1\n]\u0003]\u0005]\u07f4\n]\u0003]\u0003]\u0003]\u0007]\u07f9",
    "\n]\f]\u000e]\u07fc\u000b]\u0003]\u0003]\u0003]\u0003]\u0005]\u0802",
    "\n]\u0003]\u0005]\u0805\n]\u0003]\u0003]\u0003]\u0007]\u080a\n]\f]\u000e",
    "]\u080d\u000b]\u0003]\u0003]\u0003]\u0003]\u0005]\u0813\n]\u0003]\u0003",
    "]\u0003]\u0007]\u0818\n]\f]\u000e]\u081b\u000b]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0007]\u0823\n]\f]\u000e]\u0826\u000b]\u0003",
    "]\u0003]\u0003]\u0003]\u0005]\u082c\n]\u0003]\u0003]\u0003]\u0007]\u0831",
    "\n]\f]\u000e]\u0834\u000b]\u0003]\u0003]\u0003]\u0003]\u0005]\u083a",
    "\n]\u0003]\u0003]\u0003]\u0007]\u083f\n]\f]\u000e]\u0842\u000b]\u0003",
    "]\u0003]\u0005]\u0846\n]\u0003^\u0005^\u0849\n^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003_\u0005_\u0856",
    "\n_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003`\u0005",
    "`\u0861\n`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "a\u0005a\u086c\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0007a\u0874",
    "\na\fa\u000ea\u0877\u000ba\u0003a\u0003a\u0003b\u0005b\u087c\nb\u0003",
    "b\u0003b\u0003b\u0003b\u0007b\u0882\nb\fb\u000eb\u0885\u000bb\u0003",
    "b\u0003b\u0003b\u0003b\u0003c\u0005c\u088c\nc\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003d\u0005d\u0895\nd\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003e\u0005e\u08a0\ne\u0003e\u0003e\u0003e\u0003",
    "e\u0003f\u0003f\u0005f\u08a8\nf\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0005g\u08ba\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u08cc",
    "\nh\u0003i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003m\u0003",
    "m\u0003n\u0003n\u0003o\u0003o\u0003p\u0003p\u0003q\u0003q\u0003r\u0003",
    "r\u0003s\u0003s\u0003t\u0003t\u0003u\u0003u\u0003v\u0003v\u0005v\u08ea",
    "\nv\u0003v\u0003v\u0003v\u0007v\u08ef\nv\fv\u000ev\u08f2\u000bv\u0003",
    "v\u0003v\u0003w\u0003w\u0003w\u0003w\u0003w\u0003x\u0003x\u0003x\u0007",
    "x\u08fe\nx\fx\u000ex\u0901\u000bx\u0003x\u0003x\u0003x\u0007x\u0906",
    "\nx\fx\u000ex\u0909\u000bx\u0005x\u090b\nx\u0003y\u0003y\u0003z\u0003",
    "z\u0003z\u0003z\u0005z\u0913\nz\u0003z\u0003z\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003|\u0003|\u0005|\u091e\n|\u0003}\u0003}\u0003}\u0007}\u0923",
    "\n}\f}\u000e}\u0926\u000b}\u0003}\u0003}\u0003}\u0007}\u092b\n}\f}\u000e",
    "}\u092e\u000b}\u0003}\u0003}\u0003}\u0007}\u0933\n}\f}\u000e}\u0936",
    "\u000b}\u0005}\u0938\n}\u0003~\u0007~\u093b\n~\f~\u000e~\u093e\u000b",
    "~\u0003~\u0005~\u0941\n~\u0003\u007f\u0007\u007f\u0944\n\u007f\f\u007f",
    "\u000e\u007f\u0947\u000b\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0005\u007f\u094d\n\u007f\u0003\u007f\u0003\u007f\u0003\u0080",
    "\u0003\u0080\u0007\u0080\u0953\n\u0080\f\u0080\u000e\u0080\u0956\u000b",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u0961\n\u0082",
    "\f\u0082\u000e\u0082\u0964\u000b\u0082\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u0978\n\u0085",
    "\f\u0085\u000e\u0085\u097b\u000b\u0085\u0003\u0085\u0003\u0085\u0005",
    "\u0085\u097f\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085",
    "\u0984\n\u0085\f\u0085\u000e\u0085\u0987\u000b\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u098e\n\u0085",
    "\f\u0085\u000e\u0085\u0991\u000b\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0007\u0085\u0997\n\u0085\f\u0085\u000e\u0085\u099a",
    "\u000b\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0087",
    "\u0003\u0087\u0005\u0087\u09a2\n\u0087\u0003\u0088\u0003\u0088\u0005",
    "\u0088\u09a6\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u09af\n\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0007\u008a\u09b6",
    "\n\u008a\f\u008a\u000e\u008a\u09b9\u000b\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0007\u008b\u09c0\n\u008b\f\u008b",
    "\u000e\u008b\u09c3\u000b\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0005\u008b\u09ca\n\u008b\u0003\u008b\u0005\u008b",
    "\u09cd\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005",
    "\u008c\u09d3\n\u008c\u0003\u008c\u0007\u008c\u09d6\n\u008c\f\u008c\u000e",
    "\u008c\u09d9\u000b\u008c\u0003\u008c\u0005\u008c\u09dc\n\u008c\u0003",
    "\u008d\u0003\u008d\u0005\u008d\u09e0\n\u008d\u0003\u008e\u0007\u008e",
    "\u09e3\n\u008e\f\u008e\u000e\u008e\u09e6\u000b\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0007",
    "\u008e\u09ef\n\u008e\f\u008e\u000e\u008e\u09f2\u000b\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0007\u008e\u09f8\n\u008e\f\u008e",
    "\u000e\u008e\u09fb\u000b\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0005",
    "\u008e\u0a06\n\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0007\u008f\u0a0d\n\u008f\f\u008f\u000e\u008f\u0a10\u000b",
    "\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0007",
    "\u0090\u0a17\n\u0090\f\u0090\u000e\u0090\u0a1a\u000b\u0090\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0005\u0091\u0a25\n\u0091\u0003\u0092\u0007",
    "\u0092\u0a28\n\u0092\f\u0092\u000e\u0092\u0a2b\u000b\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0007\u0092\u0a30\n\u0092\f\u0092\u000e\u0092",
    "\u0a33\u000b\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0005\u0092\u0a3a\n\u0092\u0005\u0092\u0a3c\n\u0092\u0003\u0093",
    "\u0007\u0093\u0a3f\n\u0093\f\u0093\u000e\u0093\u0a42\u000b\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0007\u0094\u0a48\n\u0094",
    "\f\u0094\u000e\u0094\u0a4b\u000b\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0095\u0003\u0095\u0005\u0095\u0a52\n\u0095\u0003\u0096",
    "\u0003\u0096\u0007\u0096\u0a56\n\u0096\f\u0096\u000e\u0096\u0a59\u000b",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0098\u0005\u0098\u0a63\n\u0098\u0003\u0098",
    "\u0003\u0098\u0007\u0098\u0a67\n\u0098\f\u0098\u000e\u0098\u0a6a\u000b",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003",
    "\u009c\u0003\u009c\u0005\u009c\u0a7f\n\u009c\u0003\u009d\u0007\u009d",
    "\u0a82\n\u009d\f\u009d\u000e\u009d\u0a85\u000b\u009d\u0003\u009e\u0007",
    "\u009e\u0a88\n\u009e\f\u009e\u000e\u009e\u0a8b\u000b\u009e\u0003\u009e",
    "\u0003\u009e\u0007\u009e\u0a8f\n\u009e\f\u009e\u000e\u009e\u0a92\u000b",
    "\u009e\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0005\u009f\u0a9a\n\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0005\u00a1\u0aa0\n\u00a1\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0005",
    "\u00a5\u0aaa\n\u00a5\u0003\u00a5\u0005\u00a5\u0aad\n\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0007\u00a5\u0ab2\n\u00a5\f\u00a5\u000e\u00a5",
    "\u0ab5\u000b\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0005\u00a6\u0aba",
    "\n\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0007\u00a6\u0ac2\n\u00a6\f\u00a6\u000e\u00a6\u0ac5\u000b",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0005\u00a7\u0acb",
    "\n\u00a7\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0acf\n\u00a8\u0003\u00a8",
    "\u0005\u00a8\u0ad2\n\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9\u0ada\n\u00a9\f\u00a9\u000e",
    "\u00a9\u0add\u000b\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0aec\n\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0af3",
    "\n\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u0b03\n\u00af\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1\u0003\u00b1\u0003",
    "\u00b1\u0003\u00b1\u0007\u00b1\u0b0d\n\u00b1\f\u00b1\u000e\u00b1\u0b10",
    "\u000b\u00b1\u0005\u00b1\u0b12\n\u00b1\u0003\u00b1\u0007\u00b1\u0b15",
    "\n\u00b1\f\u00b1\u000e\u00b1\u0b18\u000b\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0007\u00b2\u0b20\n",
    "\u00b2\f\u00b2\u000e\u00b2\u0b23\u000b\u00b2\u0005\u00b2\u0b25\n\u00b2",
    "\u0003\u00b2\u0007\u00b2\u0b28\n\u00b2\f\u00b2\u000e\u00b2\u0b2b\u000b",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0007\u00b3\u0b30\n\u00b3",
    "\f\u00b3\u000e\u00b3\u0b33\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0007\u00b3\u0b39\n\u00b3\f\u00b3\u000e\u00b3\u0b3c",
    "\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b40\n\u00b3\f\u00b3",
    "\u000e\u00b3\u0b43\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b47",
    "\n\u00b3\f\u00b3\u000e\u00b3\u0b4a\u000b\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0007\u00b3\u0b4e\n\u00b3\f\u00b3\u000e\u00b3\u0b51\u000b\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0007\u00b3\u0b55\n\u00b3\f\u00b3\u000e\u00b3\u0b58",
    "\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b5c\n\u00b3\f\u00b3",
    "\u000e\u00b3\u0b5f\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0007\u00b3\u0b65\n\u00b3\f\u00b3\u000e\u00b3\u0b68\u000b\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b6c\n\u00b3\f\u00b3\u000e\u00b3",
    "\u0b6f\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0007",
    "\u00b3\u0b75\n\u00b3\f\u00b3\u000e\u00b3\u0b78\u000b\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0007\u00b3\u0b7c\n\u00b3\f\u00b3\u000e\u00b3\u0b7f\u000b",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b83\n\u00b3\f\u00b3\u000e",
    "\u00b3\u0b86\u000b\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u0b8a\n",
    "\u00b3\f\u00b3\u000e\u00b3\u0b8d\u000b\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0007\u00b3\u0b91\n\u00b3\f\u00b3\u000e\u00b3\u0b94\u000b\u00b3\u0003",
    "\u00b3\u0005\u00b3\u0b97\n\u00b3\u0003\u00b4\u0003\u00b4\u0007\u00b4",
    "\u0b9b\n\u00b4\f\u00b4\u000e\u00b4\u0b9e\u000b\u00b4\u0003\u00b4\u0005",
    "\u00b4\u0ba1\n\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6",
    "\u0bac\n\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0bb6\n\u00b7",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0bc0\n\u00b8\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005",
    "\u00b9\u0bcf\n\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0007\u00ba\u0bd7\n\u00ba\f\u00ba\u000e\u00ba",
    "\u0bda\u000b\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0be4\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0007\u00bb\u0bec\n\u00bb\f\u00bb\u000e\u00bb\u0bef\u000b\u00bb\u0003",
    "\u00bc\u0003\u00bc\u0005\u00bc\u0bf3\n\u00bc\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0007\u00bf\u0c0a\n\u00bf\f\u00bf\u000e\u00bf\u0c0d\u000b",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u0c11\n\u00bf\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0007\u00c0\u0c18\n",
    "\u00c0\f\u00c0\u000e\u00c0\u0c1b\u000b\u00c0\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0007\u00c0",
    "\u0c24\n\u00c0\f\u00c0\u000e\u00c0\u0c27\u000b\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0007",
    "\u00c0\u0c30\n\u00c0\f\u00c0\u000e\u00c0\u0c33\u000b\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0005\u00c0\u0c37\n\u00c0\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0007\u00c1\u0c3c\n\u00c1\f\u00c1\u000e\u00c1\u0c3f\u000b\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1",
    "\u0c46\n\u00c1\u0003\u00c1\u0005\u00c1\u0c49\n\u00c1\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0c63",
    "\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0c68\n\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0005\u00c3\u0c6c\n\u00c3\u0007\u00c3\u0c6e",
    "\n\u00c3\f\u00c3\u000e\u00c3\u0c71\u000b\u00c3\u0003\u00c3\u0005\u00c3",
    "\u0c74\n\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u0c7d\n\u00c4\f\u00c4\u000e",
    "\u00c4\u0c80\u000b\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u0c84\n",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0003\u00c5\u0007\u00c5\u0c8a",
    "\n\u00c5\f\u00c5\u000e\u00c5\u0c8d\u000b\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6",
    "\u0c96\n\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0ca0\n\u00c7",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0005\u00c8\u0caa\n\u00c8\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0005\u00c9\u0cb5\n\u00c9\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0005\u00ca\u0cbf\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u0cc4\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0ccd\n\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0007\u00cd\u0cd6\n\u00cd\f\u00cd\u000e\u00cd\u0cd9\u000b\u00cd",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0007\u00ce\u0cde\n\u00ce\f\u00ce",
    "\u000e\u00ce\u0ce1\u000b\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0005\u00cf\u0ce8\n\u00cf\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0cef\n\u00d0\u0003",
    "\u00d1\u0003\u00d1\u0005\u00d1\u0cf3\n\u00d1\u0003\u00d2\u0003\u00d2",
    "\u0005\u00d2\u0cf7\n\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0005\u00d3\u0cfe\n\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0d2f\n\u00d4\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00da\u0003\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003",
    "\u00de\u0003\u00de\u0003\u00df\u0003\u00df\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005",
    "\u00e6\u0d5b\n\u00e6\u0003\u00e7\u0003\u00e7\u0005\u00e7\u0d5f\n\u00e7",
    "\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7",
    "\u0d66\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0d6f\n\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0d76\n",
    "\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003",
    "\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0005",
    "\u00eb\u0d8f\n\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0d9f\n",
    "\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0daa\n\u00ee",
    "\u0005\u00ee\u0dac\n\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0dba\n\u00ef\u0005\u00ef",
    "\u0dbc\n\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0dcc\n\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0dd0\n\u00f0\u0003\u00f0\u0003",
    "\u00f0\u0005\u00f0\u0dd4\n\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0",
    "\u0dd8\n\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0\u0ddc\n\u00f0\u0005",
    "\u00f0\u0dde\n\u00f0\u0005\u00f0\u0de0\n\u00f0\u0005\u00f0\u0de2\n\u00f0",
    "\u0005\u00f0\u0de4\n\u00f0\u0005\u00f0\u0de6\n\u00f0\u0003\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0005\u00f1\u0df4",
    "\n\u00f1\u0005\u00f1\u0df6\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u0e04\n\u00f2\u0005",
    "\u00f2\u0e06\n\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0e16\n",
    "\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0e1a\n\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0005\u00f3\u0e1e\n\u00f3\u0003\u00f3\u0003\u00f3\u0005",
    "\u00f3\u0e22\n\u00f3\u0003\u00f3\u0003\u00f3\u0005\u00f3\u0e26\n\u00f3",
    "\u0005\u00f3\u0e28\n\u00f3\u0005\u00f3\u0e2a\n\u00f3\u0005\u00f3\u0e2c",
    "\n\u00f3\u0005\u00f3\u0e2e\n\u00f3\u0005\u00f3\u0e30\n\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4",
    "\u0e3e\n\u00f4\u0005\u00f4\u0e40\n\u00f4\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003",
    "\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0e4e\n\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0e52\n\u00f5\u0003\u00f5\u0003",
    "\u00f5\u0005\u00f5\u0e56\n\u00f5\u0005\u00f5\u0e58\n\u00f5\u0005\u00f5",
    "\u0e5a\n\u00f5\u0005\u00f5\u0e5c\n\u00f5\u0003\u00f5\u0003\u00f5\u0003",
    "\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005",
    "\u00f6\u0e6c\n\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0e70\n\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0e74\n\u00f6\u0005\u00f6\u0e76",
    "\n\u00f6\u0005\u00f6\u0e78\n\u00f6\u0005\u00f6\u0e7a\n\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u0e86\n\u00f7\u0005",
    "\u00f7\u0e88\n\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0e96\n\u00f8\u0005\u00f8\u0e98",
    "\n\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0005\u00f9\u0ea8\n\u00f9\u0005",
    "\u00f9\u0eaa\n\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fd",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd",
    "\u0ebb\n\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003",
    "\u00fe\u0003\u00fe\u0005\u00fe\u0ec3\n\u00fe\u0003\u00ff\u0003\u00ff",
    "\u0003\u0100\u0003\u0100\u0003\u0101\u0003\u0101\u0003\u0102\u0003\u0102",
    "\u0003\u0103\u0003\u0103\u0003\u0104\u0003\u0104\u0003\u0105\u0003\u0105",
    "\u0003\u0106\u0003\u0106\u0003\u0107\u0003\u0107\u0003\u0108\u0005\u0108",
    "\u0ed8\n\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108\u0edd",
    "\n\u0108\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0005\u0109",
    "\u0ee3\n\u0109\u0003\u010a\u0003\u010a\u0003\u010a\u0005\u010a\u0ee8",
    "\n\u010a\u0003\u010b\u0003\u010b\u0005\u010b\u0eec\n\u010b\u0003\u010c",
    "\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010c\u0007\u010c\u0ef3\n",
    "\u010c\f\u010c\u000e\u010c\u0ef6\u000b\u010c\u0003\u010c\u0003\u010c",
    "\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e",
    "\u0003\u010e\u0005\u010e\u0f01\n\u010e\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0005\u010f\u0f16",
    "\n\u010f\u0003\u0110\u0003\u0110\u0003\u0111\u0003\u0111\u0003\u0111",
    "\u0003\u0111\u0007\u0111\u0f1e\n\u0111\f\u0111\u000e\u0111\u0f21\u000b",
    "\u0111\u0003\u0111\u0003\u0111\u0003\u0112\u0003\u0112\u0003\u0112\u0003",
    "\u0112\u0007\u0112\u0f29\n\u0112\f\u0112\u000e\u0112\u0f2c\u000b\u0112",
    "\u0003\u0112\u0003\u0112\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0113",
    "\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0114\u0003\u0114\u0007\u0114",
    "\u0f39\n\u0114\f\u0114\u000e\u0114\u0f3c\u000b\u0114\u0003\u0114\u0003",
    "\u0114\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0115\u0003",
    "\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0117\u0003",
    "\u0117\u0007\u0117\u0f4c\n\u0117\f\u0117\u000e\u0117\u0f4f\u000b\u0117",
    "\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0007\u0117\u0f55\n",
    "\u0117\f\u0117\u000e\u0117\u0f58\u000b\u0117\u0003\u0117\u0003\u0117",
    "\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0118\u0007\u0118",
    "\u0f61\n\u0118\f\u0118\u000e\u0118\u0f64\u000b\u0118\u0003\u0118\u0003",
    "\u0118\u0003\u0119\u0003\u0119\u0007\u0119\u0f6a\n\u0119\f\u0119\u000e",
    "\u0119\u0f6d\u000b\u0119\u0003\u0119\u0003\u0119\u0003\u0119\u0003\u0119",
    "\u0007\u0119\u0f73\n\u0119\f\u0119\u000e\u0119\u0f76\u000b\u0119\u0003",
    "\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0007\u011a\u0f7f\n\u011a\f\u011a\u000e\u011a\u0f82\u000b\u011a",
    "\u0003\u011a\u0003\u011a\u0005\u011a\u0f86\n\u011a\u0003\u011b\u0003",
    "\u011b\u0003\u011c\u0003\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0003",
    "\u011d\u0007\u011d\u0f90\n\u011d\f\u011d\u000e\u011d\u0f93\u000b\u011d",
    "\u0003\u011d\u0003\u011d\u0005\u011d\u0f97\n\u011d\u0003\u011d\u0003",
    "\u011d\u0003\u011d\u0007\u011d\u0f9c\n\u011d\f\u011d\u000e\u011d\u0f9f",
    "\u000b\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0007\u011d\u0fa6\n\u011d\f\u011d\u000e\u011d\u0fa9\u000b\u011d\u0003",
    "\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0007\u011d\u0faf\n\u011d",
    "\f\u011d\u000e\u011d\u0fb2\u000b\u011d\u0003\u011e\u0003\u011e\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0005\u011e\u0fbb",
    "\n\u011e\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f",
    "\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f",
    "\u0003\u011f\u0003\u011f\u0005\u011f\u0fca\n\u011f\u0003\u0120\u0003",
    "\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0007\u0121\u0fd2",
    "\n\u0121\f\u0121\u000e\u0121\u0fd5\u000b\u0121\u0003\u0121\u0003\u0121",
    "\u0005\u0121\u0fd9\n\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0007",
    "\u0121\u0fde\n\u0121\f\u0121\u000e\u0121\u0fe1\u000b\u0121\u0003\u0121",
    "\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0007\u0121\u0fe8\n",
    "\u0121\f\u0121\u000e\u0121\u0feb\u000b\u0121\u0003\u0121\u0003\u0121",
    "\u0003\u0121\u0003\u0121\u0007\u0121\u0ff1\n\u0121\f\u0121\u000e\u0121",
    "\u0ff4\u000b\u0121\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0003\u0123\u0005\u0123\u0fff",
    "\n\u0123\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0007\u0124",
    "\u1005\n\u0124\f\u0124\u000e\u0124\u1008\u000b\u0124\u0003\u0124\u0003",
    "\u0124\u0005\u0124\u100c\n\u0124\u0003\u0124\u0003\u0124\u0003\u0124",
    "\u0007\u0124\u1011\n\u0124\f\u0124\u000e\u0124\u1014\u000b\u0124\u0003",
    "\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0003\u0124\u0007\u0124\u101b",
    "\n\u0124\f\u0124\u000e\u0124\u101e\u000b\u0124\u0003\u0124\u0003\u0124",
    "\u0003\u0124\u0003\u0124\u0007\u0124\u1024\n\u0124\f\u0124\u000e\u0124",
    "\u1027\u000b\u0124\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0003\u0125\u0003\u0125\u0005\u0125\u1030\n\u0125\u0003\u0126",
    "\u0003\u0126\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127",
    "\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127",
    "\u0003\u0127\u0003\u0127\u0005\u0127\u1041\n\u0127\u0003\u0128\u0003",
    "\u0128\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0005\u0129\u104b\n\u0129\u0003\u0129\u0003\u0129\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0005\u0129\u1052\n\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u0129\u0003\u0129\u0005\u0129\u105d\n\u0129\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0005\u012a\u1069\n\u012a\u0003\u012b\u0003",
    "\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0007\u012b\u1071",
    "\n\u012b\f\u012b\u000e\u012b\u1074\u000b\u012b\u0003\u012b\u0003\u012b",
    "\u0003\u012b\u0003\u012b\u0005\u012b\u107a\n\u012b\u0003\u012b\u0003",
    "\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003",
    "\u012b\u0003\u012b\u0005\u012b\u1085\n\u012b\u0003\u012c\u0003\u012c",
    "\u0003\u012c\u0003\u012c\u0003\u012c\u0007\u012c\u108c\n\u012c\f\u012c",
    "\u000e\u012c\u108f\u000b\u012c\u0003\u012c\u0003\u012c\u0003\u012c\u0003",
    "\u012c\u0005\u012c\u1095\n\u012c\u0003\u012c\u0003\u012c\u0003\u012c",
    "\u0003\u012c\u0007\u012c\u109b\n\u012c\f\u012c\u000e\u012c\u109e\u000b",
    "\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u10a2\n\u012c\u0003\u012d",
    "\u0003\u012d\u0003\u012d\u0003\u012d\u0003\u012d\u0007\u012d\u10a9\n",
    "\u012d\f\u012d\u000e\u012d\u10ac\u000b\u012d\u0003\u012d\u0003\u012d",
    "\u0003\u012d\u0003\u012d\u0005\u012d\u10b2\n\u012d\u0003\u012d\u0003",
    "\u012d\u0003\u012d\u0003\u012d\u0007\u012d\u10b8\n\u012d\f\u012d\u000e",
    "\u012d\u10bb\u000b\u012d\u0003\u012d\u0003\u012d\u0005\u012d\u10bf\n",
    "\u012d\u0003\u012e\u0003\u012e\u0003\u012f\u0003\u012f\u0003\u0130\u0003",
    "\u0130\u0003\u0131\u0003\u0131\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u10ce\n\u0132\u0003\u0133\u0003\u0133",
    "\u0003\u0134\u0003\u0134\u0003\u0135\u0003\u0135\u0003\u0136\u0003\u0136",
    "\u0003\u0137\u0003\u0137\u0003\u0138\u0003\u0138\u0003\u0139\u0003\u0139",
    "\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0007\u013a",
    "\u10e3\n\u013a\f\u013a\u000e\u013a\u10e6\u000b\u013a\u0003\u013a\u0003",
    "\u013a\u0003\u013a\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u10ee",
    "\n\u013b\u0003\u013c\u0003\u013c\u0003\u013d\u0003\u013d\u0003\u013e",
    "\u0003\u013e\u0003\u013f\u0003\u013f\u0003\u0140\u0003\u0140\u0003\u0141",
    "\u0003\u0141\u0003\u0142\u0003\u0142\u0003\u0143\u0003\u0143\u0003\u0144",
    "\u0003\u0144\u0003\u0145\u0003\u0145\u0003\u0146\u0003\u0146\u0003\u0147",
    "\u0003\u0147\u0003\u0148\u0003\u0148\u0003\u0149\u0003\u0149\u0003\u0149",
    "\u0003\u0149\u0003\u0149\u0005\u0149\u110f\n\u0149\u0003\u0149\u0003",
    "\u0149\u0007\u0149\u1113\n\u0149\f\u0149\u000e\u0149\u1116\u000b\u0149",
    "\u0003\u0149\u0003\u0149\u0003\u014a\u0003\u014a\u0003\u014b\u0003\u014b",
    "\u0003\u014c\u0003\u014c\u0003\u014d\u0003\u014d\u0003\u014e\u0003\u014e",
    "\u0003\u014e\u0005\u014e\u1125\n\u014e\u0003\u014f\u0003\u014f\u0003",
    "\u0150\u0003\u0150\u0003\u0151\u0003\u0151\u0003\u0152\u0003\u0152\u0003",
    "\u0153\u0003\u0153\u0003\u0154\u0003\u0154\u0003\u0155\u0003\u0155\u0003",
    "\u0156\u0003\u0156\u0003\u0157\u0003\u0157\u0003\u0158\u0003\u0158\u0003",
    "\u0159\u0003\u0159\u0003\u015a\u0003\u015a\u0003\u015b\u0003\u015b\u0003",
    "\u015c\u0003\u015c\u0003\u015d\u0003\u015d\u0003\u015e\u0003\u015e\u0003",
    "\u015f\u0003\u015f\u0003\u0160\u0003\u0160\u0003\u0161\u0003\u0161\u0003",
    "\u0162\u0003\u0162\u0003\u0163\u0003\u0163\u0003\u0164\u0003\u0164\u0003",
    "\u0165\u0003\u0165\u0003\u0165\u0002\u0007\u0108\u0174\u0238\u0240\u0246",
    "\u0166\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0",
    "\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8",
    "\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0",
    "\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8",
    "\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200",
    "\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218",
    "\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230",
    "\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248",
    "\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260",
    "\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278",
    "\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290",
    "\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8",
    "\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0",
    "\u02c2\u02c4\u02c6\u02c8\u0002\u0018\u0004\u0002vvxx\u0005\u0002oo\u008e",
    "\u008f\u00a4\u00a4\u0004\u0002\u0098\u0098\u00b0\u00b0\b\u0002uu\u00a0",
    "\u00a1\u00a8\u00ac\u00af\u00af\u00b2\u00b2\u00b6\u00b7\u0004\u0002o",
    "o\u00a4\u00a4\u0006\u0002\u0087\u0087\u009e\u009e\u00a0\u00a0\u00b3",
    "\u00b3\u0006\u0002\u0088\u0088\u009f\u009f\u00a1\u00a1\u00b4\u00b4\u0004",
    "\u0002KK\u008d\u008d\u0004\u0002EF\u007f\u0080\u0005\u0002{{\u0084\u0084",
    "\u0093\u0094\u0007\u0002@@yy||\u0081\u0081\u00b8\u00b9\u0004\u0002D",
    "D~~\u0004\u0002\u0096\u0097\u00a6\u00a7\u0004\u0002\u0095\u0095\u00a5",
    "\u00a5\u0003\u0002\u00c2\u00c3\u0003\u0002\u00e4\u00e5\u0004\u0002z",
    "z\u0085\u0085\u0004\u0002  ##\t\u0002\u0003\u0003\u0016\u0016  ##=>",
    "\u00bb\u00bb\u00be\u00c1\u000e\u0002\u0004\u0005\u0015\u0017\u001c\u001d",
    "  ##\'\',/1247=>\u00bb\u00bc\u00c0\u00c0\u0007\u0002\u0003\u0003\u0016",
    "\u0016=>\u00bb\u00bb\u00be\u00c1\b\u0002\u0004\u0004\u0016\u001711=",
    ">\u00bb\u00bc\u00c0\u00c0\u0002\u1251\u0002\u02cd\u0003\u0002\u0002",
    "\u0002\u0004\u02d5\u0003\u0002\u0002\u0002\u0006\u02d7\u0003\u0002\u0002",
    "\u0002\b\u02ee\u0003\u0002\u0002\u0002\n\u02f1\u0003\u0002\u0002\u0002",
    "\f\u02f6\u0003\u0002\u0002\u0002\u000e\u0324\u0003\u0002\u0002\u0002",
    "\u0010\u0326\u0003\u0002\u0002\u0002\u0012\u0328\u0003\u0002\u0002\u0002",
    "\u0014\u0334\u0003\u0002\u0002\u0002\u0016\u034c\u0003\u0002\u0002\u0002",
    "\u0018\u0359\u0003\u0002\u0002\u0002\u001a\u0367\u0003\u0002\u0002\u0002",
    "\u001c\u0369\u0003\u0002\u0002\u0002\u001e\u0385\u0003\u0002\u0002\u0002",
    " \u038b\u0003\u0002\u0002\u0002\"\u03dc\u0003\u0002\u0002\u0002$\u03e8",
    "\u0003\u0002\u0002\u0002&\u03fd\u0003\u0002\u0002\u0002(\u03ff\u0003",
    "\u0002\u0002\u0002*\u0403\u0003\u0002\u0002\u0002,\u040f\u0003\u0002",
    "\u0002\u0002.\u0431\u0003\u0002\u0002\u00020\u0433\u0003\u0002\u0002",
    "\u00022\u0435\u0003\u0002\u0002\u00024\u0438\u0003\u0002\u0002\u0002",
    "6\u0440\u0003\u0002\u0002\u00028\u0448\u0003\u0002\u0002\u0002:\u044f",
    "\u0003\u0002\u0002\u0002<\u0466\u0003\u0002\u0002\u0002>\u0474\u0003",
    "\u0002\u0002\u0002@\u0476\u0003\u0002\u0002\u0002B\u047d\u0003\u0002",
    "\u0002\u0002D\u047f\u0003\u0002\u0002\u0002F\u048b\u0003\u0002\u0002",
    "\u0002H\u04af\u0003\u0002\u0002\u0002J\u04b1\u0003\u0002\u0002\u0002",
    "L\u04b5\u0003\u0002\u0002\u0002N\u052b\u0003\u0002\u0002\u0002P\u052d",
    "\u0003\u0002\u0002\u0002R\u0531\u0003\u0002\u0002\u0002T\u0535\u0003",
    "\u0002\u0002\u0002V\u053f\u0003\u0002\u0002\u0002X\u0543\u0003\u0002",
    "\u0002\u0002Z\u0545\u0003\u0002\u0002\u0002\\\u0552\u0003\u0002\u0002",
    "\u0002^\u055f\u0003\u0002\u0002\u0002`\u0585\u0003\u0002\u0002\u0002",
    "b\u0587\u0003\u0002\u0002\u0002d\u0589\u0003\u0002\u0002\u0002f\u0594",
    "\u0003\u0002\u0002\u0002h\u05a5\u0003\u0002\u0002\u0002j\u05b2\u0003",
    "\u0002\u0002\u0002l\u05b7\u0003\u0002\u0002\u0002n\u05b9\u0003\u0002",
    "\u0002\u0002p\u05c1\u0003\u0002\u0002\u0002r\u05d5\u0003\u0002\u0002",
    "\u0002t\u05dd\u0003\u0002\u0002\u0002v\u05f1\u0003\u0002\u0002\u0002",
    "x\u05f9\u0003\u0002\u0002\u0002z\u0601\u0003\u0002\u0002\u0002|\u0609",
    "\u0003\u0002\u0002\u0002~\u0611\u0003\u0002\u0002\u0002\u0080\u0619",
    "\u0003\u0002\u0002\u0002\u0082\u0629\u0003\u0002\u0002\u0002\u0084\u062d",
    "\u0003\u0002\u0002\u0002\u0086\u0631\u0003\u0002\u0002\u0002\u0088\u063a",
    "\u0003\u0002\u0002\u0002\u008a\u0653\u0003\u0002\u0002\u0002\u008c\u0655",
    "\u0003\u0002\u0002\u0002\u008e\u0657\u0003\u0002\u0002\u0002\u0090\u0659",
    "\u0003\u0002\u0002\u0002\u0092\u065b\u0003\u0002\u0002\u0002\u0094\u0661",
    "\u0003\u0002\u0002\u0002\u0096\u068b\u0003\u0002\u0002\u0002\u0098\u0697",
    "\u0003\u0002\u0002\u0002\u009a\u069c\u0003\u0002\u0002\u0002\u009c\u06b7",
    "\u0003\u0002\u0002\u0002\u009e\u06dc\u0003\u0002\u0002\u0002\u00a0\u06fa",
    "\u0003\u0002\u0002\u0002\u00a2\u06fc\u0003\u0002\u0002\u0002\u00a4\u0719",
    "\u0003\u0002\u0002\u0002\u00a6\u072a\u0003\u0002\u0002\u0002\u00a8\u073b",
    "\u0003\u0002\u0002\u0002\u00aa\u074c\u0003\u0002\u0002\u0002\u00ac\u074e",
    "\u0003\u0002\u0002\u0002\u00ae\u07a1\u0003\u0002\u0002\u0002\u00b0\u07a3",
    "\u0003\u0002\u0002\u0002\u00b2\u07ab\u0003\u0002\u0002\u0002\u00b4\u07b3",
    "\u0003\u0002\u0002\u0002\u00b6\u07ba\u0003\u0002\u0002\u0002\u00b8\u0845",
    "\u0003\u0002\u0002\u0002\u00ba\u0848\u0003\u0002\u0002\u0002\u00bc\u0855",
    "\u0003\u0002\u0002\u0002\u00be\u0860\u0003\u0002\u0002\u0002\u00c0\u086b",
    "\u0003\u0002\u0002\u0002\u00c2\u087b\u0003\u0002\u0002\u0002\u00c4\u088b",
    "\u0003\u0002\u0002\u0002\u00c6\u0894\u0003\u0002\u0002\u0002\u00c8\u089f",
    "\u0003\u0002\u0002\u0002\u00ca\u08a5\u0003\u0002\u0002\u0002\u00cc\u08b9",
    "\u0003\u0002\u0002\u0002\u00ce\u08cb\u0003\u0002\u0002\u0002\u00d0\u08cd",
    "\u0003\u0002\u0002\u0002\u00d2\u08cf\u0003\u0002\u0002\u0002\u00d4\u08d1",
    "\u0003\u0002\u0002\u0002\u00d6\u08d3\u0003\u0002\u0002\u0002\u00d8\u08d5",
    "\u0003\u0002\u0002\u0002\u00da\u08d7\u0003\u0002\u0002\u0002\u00dc\u08d9",
    "\u0003\u0002\u0002\u0002\u00de\u08db\u0003\u0002\u0002\u0002\u00e0\u08dd",
    "\u0003\u0002\u0002\u0002\u00e2\u08df\u0003\u0002\u0002\u0002\u00e4\u08e1",
    "\u0003\u0002\u0002\u0002\u00e6\u08e3\u0003\u0002\u0002\u0002\u00e8\u08e5",
    "\u0003\u0002\u0002\u0002\u00ea\u08e7\u0003\u0002\u0002\u0002\u00ec\u08f5",
    "\u0003\u0002\u0002\u0002\u00ee\u090a\u0003\u0002\u0002\u0002\u00f0\u090c",
    "\u0003\u0002\u0002\u0002\u00f2\u090e\u0003\u0002\u0002\u0002\u00f4\u0916",
    "\u0003\u0002\u0002\u0002\u00f6\u091b\u0003\u0002\u0002\u0002\u00f8\u0937",
    "\u0003\u0002\u0002\u0002\u00fa\u093c\u0003\u0002\u0002\u0002\u00fc\u0945",
    "\u0003\u0002\u0002\u0002\u00fe\u0950\u0003\u0002\u0002\u0002\u0100\u0959",
    "\u0003\u0002\u0002\u0002\u0102\u095d\u0003\u0002\u0002\u0002\u0104\u0965",
    "\u0003\u0002\u0002\u0002\u0106\u096f\u0003\u0002\u0002\u0002\u0108\u097e",
    "\u0003\u0002\u0002\u0002\u010a\u099b\u0003\u0002\u0002\u0002\u010c\u09a1",
    "\u0003\u0002\u0002\u0002\u010e\u09a5\u0003\u0002\u0002\u0002\u0110\u09a7",
    "\u0003\u0002\u0002\u0002\u0112\u09b0\u0003\u0002\u0002\u0002\u0114\u09cc",
    "\u0003\u0002\u0002\u0002\u0116\u09db\u0003\u0002\u0002\u0002\u0118\u09df",
    "\u0003\u0002\u0002\u0002\u011a\u0a05\u0003\u0002\u0002\u0002\u011c\u0a07",
    "\u0003\u0002\u0002\u0002\u011e\u0a11\u0003\u0002\u0002\u0002\u0120\u0a24",
    "\u0003\u0002\u0002\u0002\u0122\u0a3b\u0003\u0002\u0002\u0002\u0124\u0a40",
    "\u0003\u0002\u0002\u0002\u0126\u0a49\u0003\u0002\u0002\u0002\u0128\u0a51",
    "\u0003\u0002\u0002\u0002\u012a\u0a53\u0003\u0002\u0002\u0002\u012c\u0a5c",
    "\u0003\u0002\u0002\u0002\u012e\u0a62\u0003\u0002\u0002\u0002\u0130\u0a6d",
    "\u0003\u0002\u0002\u0002\u0132\u0a73\u0003\u0002\u0002\u0002\u0134\u0a75",
    "\u0003\u0002\u0002\u0002\u0136\u0a7e\u0003\u0002\u0002\u0002\u0138\u0a83",
    "\u0003\u0002\u0002\u0002\u013a\u0a89\u0003\u0002\u0002\u0002\u013c\u0a99",
    "\u0003\u0002\u0002\u0002\u013e\u0a9b\u0003\u0002\u0002\u0002\u0140\u0a9f",
    "\u0003\u0002\u0002\u0002\u0142\u0aa1\u0003\u0002\u0002\u0002\u0144\u0aa3",
    "\u0003\u0002\u0002\u0002\u0146\u0aa5\u0003\u0002\u0002\u0002\u0148\u0aa7",
    "\u0003\u0002\u0002\u0002\u014a\u0ab9\u0003\u0002\u0002\u0002\u014c\u0ac8",
    "\u0003\u0002\u0002\u0002\u014e\u0acc\u0003\u0002\u0002\u0002\u0150\u0ad6",
    "\u0003\u0002\u0002\u0002\u0152\u0ade\u0003\u0002\u0002\u0002\u0154\u0ae2",
    "\u0003\u0002\u0002\u0002\u0156\u0ae5\u0003\u0002\u0002\u0002\u0158\u0ae8",
    "\u0003\u0002\u0002\u0002\u015a\u0aef\u0003\u0002\u0002\u0002\u015c\u0b02",
    "\u0003\u0002\u0002\u0002\u015e\u0b04\u0003\u0002\u0002\u0002\u0160\u0b08",
    "\u0003\u0002\u0002\u0002\u0162\u0b1b\u0003\u0002\u0002\u0002\u0164\u0b96",
    "\u0003\u0002\u0002\u0002\u0166\u0ba0\u0003\u0002\u0002\u0002\u0168\u0ba2",
    "\u0003\u0002\u0002\u0002\u016a\u0bab\u0003\u0002\u0002\u0002\u016c\u0bb5",
    "\u0003\u0002\u0002\u0002\u016e\u0bbf\u0003\u0002\u0002\u0002\u0170\u0bce",
    "\u0003\u0002\u0002\u0002\u0172\u0bd0\u0003\u0002\u0002\u0002\u0174\u0be3",
    "\u0003\u0002\u0002\u0002\u0176\u0bf2\u0003\u0002\u0002\u0002\u0178\u0bf4",
    "\u0003\u0002\u0002\u0002\u017a\u0bf7\u0003\u0002\u0002\u0002\u017c\u0bfd",
    "\u0003\u0002\u0002\u0002\u017e\u0c36\u0003\u0002\u0002\u0002\u0180\u0c48",
    "\u0003\u0002\u0002\u0002\u0182\u0c62\u0003\u0002\u0002\u0002\u0184\u0c64",
    "\u0003\u0002\u0002\u0002\u0186\u0c77\u0003\u0002\u0002\u0002\u0188\u0c87",
    "\u0003\u0002\u0002\u0002\u018a\u0c95\u0003\u0002\u0002\u0002\u018c\u0c9f",
    "\u0003\u0002\u0002\u0002\u018e\u0ca9\u0003\u0002\u0002\u0002\u0190\u0cb4",
    "\u0003\u0002\u0002\u0002\u0192\u0cbe\u0003\u0002\u0002\u0002\u0194\u0cc0",
    "\u0003\u0002\u0002\u0002\u0196\u0cc9\u0003\u0002\u0002\u0002\u0198\u0cd2",
    "\u0003\u0002\u0002\u0002\u019a\u0cda\u0003\u0002\u0002\u0002\u019c\u0ce2",
    "\u0003\u0002\u0002\u0002\u019e\u0ce9\u0003\u0002\u0002\u0002\u01a0\u0cf2",
    "\u0003\u0002\u0002\u0002\u01a2\u0cf6\u0003\u0002\u0002\u0002\u01a4\u0cfd",
    "\u0003\u0002\u0002\u0002\u01a6\u0d2e\u0003\u0002\u0002\u0002\u01a8\u0d30",
    "\u0003\u0002\u0002\u0002\u01aa\u0d32\u0003\u0002\u0002\u0002\u01ac\u0d34",
    "\u0003\u0002\u0002\u0002\u01ae\u0d36\u0003\u0002\u0002\u0002\u01b0\u0d38",
    "\u0003\u0002\u0002\u0002\u01b2\u0d3a\u0003\u0002\u0002\u0002\u01b4\u0d3c",
    "\u0003\u0002\u0002\u0002\u01b6\u0d3e\u0003\u0002\u0002\u0002\u01b8\u0d40",
    "\u0003\u0002\u0002\u0002\u01ba\u0d42\u0003\u0002\u0002\u0002\u01bc\u0d44",
    "\u0003\u0002\u0002\u0002\u01be\u0d46\u0003\u0002\u0002\u0002\u01c0\u0d48",
    "\u0003\u0002\u0002\u0002\u01c2\u0d4a\u0003\u0002\u0002\u0002\u01c4\u0d4c",
    "\u0003\u0002\u0002\u0002\u01c6\u0d4e\u0003\u0002\u0002\u0002\u01c8\u0d50",
    "\u0003\u0002\u0002\u0002\u01ca\u0d5a\u0003\u0002\u0002\u0002\u01cc\u0d5c",
    "\u0003\u0002\u0002\u0002\u01ce\u0d6c\u0003\u0002\u0002\u0002\u01d0\u0d7c",
    "\u0003\u0002\u0002\u0002\u01d2\u0d7e\u0003\u0002\u0002\u0002\u01d4\u0d8e",
    "\u0003\u0002\u0002\u0002\u01d6\u0d90\u0003\u0002\u0002\u0002\u01d8\u0d9e",
    "\u0003\u0002\u0002\u0002\u01da\u0da0\u0003\u0002\u0002\u0002\u01dc\u0db0",
    "\u0003\u0002\u0002\u0002\u01de\u0dc0\u0003\u0002\u0002\u0002\u01e0\u0dea",
    "\u0003\u0002\u0002\u0002\u01e2\u0dfa\u0003\u0002\u0002\u0002\u01e4\u0e0a",
    "\u0003\u0002\u0002\u0002\u01e6\u0e34\u0003\u0002\u0002\u0002\u01e8\u0e44",
    "\u0003\u0002\u0002\u0002\u01ea\u0e60\u0003\u0002\u0002\u0002\u01ec\u0e7e",
    "\u0003\u0002\u0002\u0002\u01ee\u0e8c\u0003\u0002\u0002\u0002\u01f0\u0e9c",
    "\u0003\u0002\u0002\u0002\u01f2\u0eae\u0003\u0002\u0002\u0002\u01f4\u0eb0",
    "\u0003\u0002\u0002\u0002\u01f6\u0eb2\u0003\u0002\u0002\u0002\u01f8\u0eba",
    "\u0003\u0002\u0002\u0002\u01fa\u0ec2\u0003\u0002\u0002\u0002\u01fc\u0ec4",
    "\u0003\u0002\u0002\u0002\u01fe\u0ec6\u0003\u0002\u0002\u0002\u0200\u0ec8",
    "\u0003\u0002\u0002\u0002\u0202\u0eca\u0003\u0002\u0002\u0002\u0204\u0ecc",
    "\u0003\u0002\u0002\u0002\u0206\u0ece\u0003\u0002\u0002\u0002\u0208\u0ed0",
    "\u0003\u0002\u0002\u0002\u020a\u0ed2\u0003\u0002\u0002\u0002\u020c\u0ed4",
    "\u0003\u0002\u0002\u0002\u020e\u0ed7\u0003\u0002\u0002\u0002\u0210\u0ede",
    "\u0003\u0002\u0002\u0002\u0212\u0ee7\u0003\u0002\u0002\u0002\u0214\u0eeb",
    "\u0003\u0002\u0002\u0002\u0216\u0eed\u0003\u0002\u0002\u0002\u0218\u0ef9",
    "\u0003\u0002\u0002\u0002\u021a\u0f00\u0003\u0002\u0002\u0002\u021c\u0f15",
    "\u0003\u0002\u0002\u0002\u021e\u0f17\u0003\u0002\u0002\u0002\u0220\u0f19",
    "\u0003\u0002\u0002\u0002\u0222\u0f24\u0003\u0002\u0002\u0002\u0224\u0f2f",
    "\u0003\u0002\u0002\u0002\u0226\u0f34\u0003\u0002\u0002\u0002\u0228\u0f3f",
    "\u0003\u0002\u0002\u0002\u022a\u0f44\u0003\u0002\u0002\u0002\u022c\u0f49",
    "\u0003\u0002\u0002\u0002\u022e\u0f5b\u0003\u0002\u0002\u0002\u0230\u0f67",
    "\u0003\u0002\u0002\u0002\u0232\u0f79\u0003\u0002\u0002\u0002\u0234\u0f87",
    "\u0003\u0002\u0002\u0002\u0236\u0f89\u0003\u0002\u0002\u0002\u0238\u0f96",
    "\u0003\u0002\u0002\u0002\u023a\u0fba\u0003\u0002\u0002\u0002\u023c\u0fc9",
    "\u0003\u0002\u0002\u0002\u023e\u0fcb\u0003\u0002\u0002\u0002\u0240\u0fd8",
    "\u0003\u0002\u0002\u0002\u0242\u0ff5\u0003\u0002\u0002\u0002\u0244\u0ffe",
    "\u0003\u0002\u0002\u0002\u0246\u100b\u0003\u0002\u0002\u0002\u0248\u102f",
    "\u0003\u0002\u0002\u0002\u024a\u1031\u0003\u0002\u0002\u0002\u024c\u1040",
    "\u0003\u0002\u0002\u0002\u024e\u1042\u0003\u0002\u0002\u0002\u0250\u105c",
    "\u0003\u0002\u0002\u0002\u0252\u1068\u0003\u0002\u0002\u0002\u0254\u1084",
    "\u0003\u0002\u0002\u0002\u0256\u10a1\u0003\u0002\u0002\u0002\u0258\u10be",
    "\u0003\u0002\u0002\u0002\u025a\u10c0\u0003\u0002\u0002\u0002\u025c\u10c2",
    "\u0003\u0002\u0002\u0002\u025e\u10c4\u0003\u0002\u0002\u0002\u0260\u10c6",
    "\u0003\u0002\u0002\u0002\u0262\u10cd\u0003\u0002\u0002\u0002\u0264\u10cf",
    "\u0003\u0002\u0002\u0002\u0266\u10d1\u0003\u0002\u0002\u0002\u0268\u10d3",
    "\u0003\u0002\u0002\u0002\u026a\u10d5\u0003\u0002\u0002\u0002\u026c\u10d7",
    "\u0003\u0002\u0002\u0002\u026e\u10d9\u0003\u0002\u0002\u0002\u0270\u10db",
    "\u0003\u0002\u0002\u0002\u0272\u10dd\u0003\u0002\u0002\u0002\u0274\u10ea",
    "\u0003\u0002\u0002\u0002\u0276\u10ef\u0003\u0002\u0002\u0002\u0278\u10f1",
    "\u0003\u0002\u0002\u0002\u027a\u10f3\u0003\u0002\u0002\u0002\u027c\u10f5",
    "\u0003\u0002\u0002\u0002\u027e\u10f7\u0003\u0002\u0002\u0002\u0280\u10f9",
    "\u0003\u0002\u0002\u0002\u0282\u10fb\u0003\u0002\u0002\u0002\u0284\u10fd",
    "\u0003\u0002\u0002\u0002\u0286\u10ff\u0003\u0002\u0002\u0002\u0288\u1101",
    "\u0003\u0002\u0002\u0002\u028a\u1103\u0003\u0002\u0002\u0002\u028c\u1105",
    "\u0003\u0002\u0002\u0002\u028e\u1107\u0003\u0002\u0002\u0002\u0290\u1114",
    "\u0003\u0002\u0002\u0002\u0292\u1119\u0003\u0002\u0002\u0002\u0294\u111b",
    "\u0003\u0002\u0002\u0002\u0296\u111d\u0003\u0002\u0002\u0002\u0298\u111f",
    "\u0003\u0002\u0002\u0002\u029a\u1124\u0003\u0002\u0002\u0002\u029c\u1126",
    "\u0003\u0002\u0002\u0002\u029e\u1128\u0003\u0002\u0002\u0002\u02a0\u112a",
    "\u0003\u0002\u0002\u0002\u02a2\u112c\u0003\u0002\u0002\u0002\u02a4\u112e",
    "\u0003\u0002\u0002\u0002\u02a6\u1130\u0003\u0002\u0002\u0002\u02a8\u1132",
    "\u0003\u0002\u0002\u0002\u02aa\u1134\u0003\u0002\u0002\u0002\u02ac\u1136",
    "\u0003\u0002\u0002\u0002\u02ae\u1138\u0003\u0002\u0002\u0002\u02b0\u113a",
    "\u0003\u0002\u0002\u0002\u02b2\u113c\u0003\u0002\u0002\u0002\u02b4\u113e",
    "\u0003\u0002\u0002\u0002\u02b6\u1140\u0003\u0002\u0002\u0002\u02b8\u1142",
    "\u0003\u0002\u0002\u0002\u02ba\u1144\u0003\u0002\u0002\u0002\u02bc\u1146",
    "\u0003\u0002\u0002\u0002\u02be\u1148\u0003\u0002\u0002\u0002\u02c0\u114a",
    "\u0003\u0002\u0002\u0002\u02c2\u114c\u0003\u0002\u0002\u0002\u02c4\u114e",
    "\u0003\u0002\u0002\u0002\u02c6\u1150\u0003\u0002\u0002\u0002\u02c8\u1152",
    "\u0003\u0002\u0002\u0002\u02ca\u02cc\u0005\f\u0007\u0002\u02cb\u02ca",
    "\u0003\u0002\u0002\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb",
    "\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02d0",
    "\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d1",
    "\u0007\u0002\u0002\u0003\u02d1\u0003\u0003\u0002\u0002\u0002\u02d2\u02d6",
    "\u0005\u0006\u0004\u0002\u02d3\u02d6\u0005\b\u0005\u0002\u02d4\u02d6",
    "\u0005*\u0016\u0002\u02d5\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d3",
    "\u0003\u0002\u0002\u0002\u02d5\u02d4\u0003\u0002\u0002\u0002\u02d6\u0005",
    "\u0003\u0002\u0002\u0002\u02d7\u02d8\u0007s\u0002\u0002\u02d8\u02d9",
    "\u0005\u02a4\u0153\u0002\u02d9\u02de\u0005\n\u0006\u0002\u02da\u02db",
    "\u0007\"\u0002\u0002\u02db\u02dd\u0005\n\u0006\u0002\u02dc\u02da\u0003",
    "\u0002\u0002\u0002\u02dd\u02e0\u0003\u0002\u0002\u0002\u02de\u02dc\u0003",
    "\u0002\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df\u02ea\u0003",
    "\u0002\u0002\u0002\u02e0\u02de\u0003\u0002\u0002\u0002\u02e1\u02e2\u0007",
    "\u00e2\u0002\u0002\u02e2\u02e7\u0005\n\u0006\u0002\u02e3\u02e4\u0007",
    "\"\u0002\u0002\u02e4\u02e6\u0005\n\u0006\u0002\u02e5\u02e3\u0003\u0002",
    "\u0002\u0002\u02e6\u02e9\u0003\u0002\u0002\u0002\u02e7\u02e5\u0003\u0002",
    "\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02eb\u0003\u0002",
    "\u0002\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002\u02ea\u02e1\u0003\u0002",
    "\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb\u02ec\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\u0007+\u0002\u0002\u02ed\u0007\u0003\u0002",
    "\u0002\u0002\u02ee\u02ef\u0007j\u0002\u0002\u02ef\u02f0\u0005\n\u0006",
    "\u0002\u02f0\t\u0003\u0002\u0002\u0002\u02f1\u02f2\u0007\u00e3\u0002",
    "\u0002\u02f2\u000b\u0003\u0002\u0002\u0002\u02f3\u02f7\u0005\u000e\b",
    "\u0002\u02f4\u02f7\u0005\u011a\u008e\u0002\u02f5\u02f7\u0005*\u0016",
    "\u0002\u02f6\u02f3\u0003\u0002\u0002\u0002\u02f6\u02f4\u0003\u0002\u0002",
    "\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f7\r\u0003\u0002\u0002",
    "\u0002\u02f8\u02fa\u0005\u0272\u013a\u0002\u02f9\u02f8\u0003\u0002\u0002",
    "\u0002\u02fa\u02fd\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002",
    "\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fe\u0003\u0002\u0002",
    "\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u02ff\u0005\u0010\t",
    "\u0002\u02ff\u0301\u0005\u02a6\u0154\u0002\u0300\u0302\u0005\u0012\n",
    "\u0002\u0301\u0300\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002",
    "\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0304\u0005\u0014\u000b",
    "\u0002\u0304\u0308\u0007+\u0002\u0002\u0305\u0307\u0005 \u0011\u0002",
    "\u0306\u0305\u0003\u0002\u0002\u0002\u0307\u030a\u0003\u0002\u0002\u0002",
    "\u0308\u0306\u0003\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002",
    "\u0309\u030b\u0003\u0002\u0002\u0002\u030a\u0308\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0007Y\u0002\u0002\u030c\u0325\u0003\u0002\u0002\u0002",
    "\u030d\u030f\u0005\u0272\u013a\u0002\u030e\u030d\u0003\u0002\u0002\u0002",
    "\u030f\u0312\u0003\u0002\u0002\u0002\u0310\u030e\u0003\u0002\u0002\u0002",
    "\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002",
    "\u0312\u0310\u0003\u0002\u0002\u0002\u0313\u0314\u0005\u0010\t\u0002",
    "\u0314\u0316\u0005\u02a6\u0154\u0002\u0315\u0317\u0005\u0012\n\u0002",
    "\u0316\u0315\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002",
    "\u0317\u0319\u0003\u0002\u0002\u0002\u0318\u031a\u0005\u0016\f\u0002",
    "\u0319\u0318\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002",
    "\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031f\u0007+\u0002\u0002",
    "\u031c\u031e\u0005&\u0014\u0002\u031d\u031c\u0003\u0002\u0002\u0002",
    "\u031e\u0321\u0003\u0002\u0002\u0002\u031f\u031d\u0003\u0002\u0002\u0002",
    "\u031f\u0320\u0003\u0002\u0002\u0002\u0320\u0322\u0003\u0002\u0002\u0002",
    "\u0321\u031f\u0003\u0002\u0002\u0002\u0322\u0323\u0007Y\u0002\u0002",
    "\u0323\u0325\u0003\u0002\u0002\u0002\u0324\u02fb\u0003\u0002\u0002\u0002",
    "\u0324\u0310\u0003\u0002\u0002\u0002\u0325\u000f\u0003\u0002\u0002\u0002",
    "\u0326\u0327\t\u0002\u0002\u0002\u0327\u0011\u0003\u0002\u0002\u0002",
    "\u0328\u0329\u0007\u0007\u0002\u0002\u0329\u032a\u0007\u001a\u0002\u0002",
    "\u032a\u032f\u0005> \u0002\u032b\u032c\u0007\"\u0002\u0002\u032c\u032e",
    "\u0005> \u0002\u032d\u032b\u0003\u0002\u0002\u0002\u032e\u0331\u0003",
    "\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u032f\u0330\u0003",
    "\u0002\u0002\u0002\u0330\u0332\u0003\u0002\u0002\u0002\u0331\u032f\u0003",
    "\u0002\u0002\u0002\u0332\u0333\u0007\u001b\u0002\u0002\u0333\u0013\u0003",
    "\u0002\u0002\u0002\u0334\u0335\u0007\u001a\u0002\u0002\u0335\u033a\u0005",
    "\u0018\r\u0002\u0336\u0337\u0007\"\u0002\u0002\u0337\u0339\u0005\u0018",
    "\r\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0339\u033c\u0003\u0002",
    "\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033a\u033b\u0003\u0002",
    "\u0002\u0002\u033b\u033d\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002",
    "\u0002\u0002\u033d\u033e\u0007\u001b\u0002\u0002\u033e\u0015\u0003\u0002",
    "\u0002\u0002\u033f\u0340\u0007\u001a\u0002\u0002\u0340\u0345\u0005\u001e",
    "\u0010\u0002\u0341\u0342\u0007\"\u0002\u0002\u0342\u0344\u0005\u001e",
    "\u0010\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0344\u0347\u0003\u0002",
    "\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002",
    "\u0002\u0002\u0346\u0348\u0003\u0002\u0002\u0002\u0347\u0345\u0003\u0002",
    "\u0002\u0002\u0348\u0349\u0007\u001b\u0002\u0002\u0349\u034d\u0003\u0002",
    "\u0002\u0002\u034a\u034b\u0007\u001a\u0002\u0002\u034b\u034d\u0007\u001b",
    "\u0002\u0002\u034c\u033f\u0003\u0002\u0002\u0002\u034c\u034a\u0003\u0002",
    "\u0002\u0002\u034d\u0017\u0003\u0002\u0002\u0002\u034e\u0350\u0005\u001a",
    "\u000e\u0002\u034f\u034e\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002",
    "\u0002\u0002\u0350\u035a\u0003\u0002\u0002\u0002\u0351\u0352\u0007&",
    "\u0002\u0002\u0352\u0353\u0005\u02b0\u0159\u0002\u0353\u0355\u0007\u001a",
    "\u0002\u0002\u0354\u0356\u0005\u001a\u000e\u0002\u0355\u0354\u0003\u0002",
    "\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002",
    "\u0002\u0002\u0357\u0358\u0007\u001b\u0002\u0002\u0358\u035a\u0003\u0002",
    "\u0002\u0002\u0359\u034f\u0003\u0002\u0002\u0002\u0359\u0351\u0003\u0002",
    "\u0002\u0002\u035a\u0019\u0003\u0002\u0002\u0002\u035b\u0368\u0005\u001c",
    "\u000f\u0002\u035c\u035d\u0007\u00ba\u0002\u0002\u035d\u0362\u0005\u001c",
    "\u000f\u0002\u035e\u035f\u0007\"\u0002\u0002\u035f\u0361\u0005\u001c",
    "\u000f\u0002\u0360\u035e\u0003\u0002\u0002\u0002\u0361\u0364\u0003\u0002",
    "\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002\u0362\u0363\u0003\u0002",
    "\u0002\u0002\u0363\u0365\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002",
    "\u0002\u0002\u0365\u0366\u0007\u00bd\u0002\u0002\u0366\u0368\u0003\u0002",
    "\u0002\u0002\u0367\u035b\u0003\u0002\u0002\u0002\u0367\u035c\u0003\u0002",
    "\u0002\u0002\u0368\u001b\u0003\u0002\u0002\u0002\u0369\u036e\u0005\u02b0",
    "\u0159\u0002\u036a\u036b\u0007;\u0002\u0002\u036b\u036c\u0005\u023c",
    "\u011f\u0002\u036c\u036d\u0007<\u0002\u0002\u036d\u036f\u0003\u0002",
    "\u0002\u0002\u036e\u036a\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002",
    "\u0002\u0002\u036f\u001d\u0003\u0002\u0002\u0002\u0370\u0372\u0005\u0272",
    "\u013a\u0002\u0371\u0370\u0003\u0002\u0002\u0002\u0372\u0375\u0003\u0002",
    "\u0002\u0002\u0373\u0371\u0003\u0002\u0002\u0002\u0373\u0374\u0003\u0002",
    "\u0002\u0002\u0374\u0376\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002",
    "\u0002\u0002\u0376\u0386\u0005D#\u0002\u0377\u0379\u0005\u0272\u013a",
    "\u0002\u0378\u0377\u0003\u0002\u0002\u0002\u0379\u037c\u0003\u0002\u0002",
    "\u0002\u037a\u0378\u0003\u0002\u0002\u0002\u037a\u037b\u0003\u0002\u0002",
    "\u0002\u037b\u037d\u0003\u0002\u0002\u0002\u037c\u037a\u0003\u0002\u0002",
    "\u0002\u037d\u0386\u0005F$\u0002\u037e\u0380\u0005\u0272\u013a\u0002",
    "\u037f\u037e\u0003\u0002\u0002\u0002\u0380\u0383\u0003\u0002\u0002\u0002",
    "\u0381\u037f\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002",
    "\u0382\u0384\u0003\u0002\u0002\u0002\u0383\u0381\u0003\u0002\u0002\u0002",
    "\u0384\u0386\u0005H%\u0002\u0385\u0373\u0003\u0002\u0002\u0002\u0385",
    "\u037a\u0003\u0002\u0002\u0002\u0385\u0381\u0003\u0002\u0002\u0002\u0386",
    "\u001f\u0003\u0002\u0002\u0002\u0387\u0388\u0005\u001e\u0010\u0002\u0388",
    "\u0389\u0007+\u0002\u0002\u0389\u038c\u0003\u0002\u0002\u0002\u038a",
    "\u038c\u0005&\u0014\u0002\u038b\u0387\u0003\u0002\u0002\u0002\u038b",
    "\u038a\u0003\u0002\u0002\u0002\u038c!\u0003\u0002\u0002\u0002\u038d",
    "\u038f\u0005\u0272\u013a\u0002\u038e\u038d\u0003\u0002\u0002\u0002\u038f",
    "\u0392\u0003\u0002\u0002\u0002\u0390\u038e\u0003\u0002\u0002\u0002\u0390",
    "\u0391\u0003\u0002\u0002\u0002\u0391\u0393\u0003\u0002\u0002\u0002\u0392",
    "\u0390\u0003\u0002\u0002\u0002\u0393\u03dd\u0005$\u0013\u0002\u0394",
    "\u0396\u0005\u0272\u013a\u0002\u0395\u0394\u0003\u0002\u0002\u0002\u0396",
    "\u0399\u0003\u0002\u0002\u0002\u0397\u0395\u0003\u0002\u0002\u0002\u0397",
    "\u0398\u0003\u0002\u0002\u0002\u0398\u039a\u0003\u0002\u0002\u0002\u0399",
    "\u0397\u0003\u0002\u0002\u0002\u039a\u039b\u0005<\u001f\u0002\u039b",
    "\u039c\u0007+\u0002\u0002\u039c\u03dd\u0003\u0002\u0002\u0002\u039d",
    "\u039f\u0005\u0272\u013a\u0002\u039e\u039d\u0003\u0002\u0002\u0002\u039f",
    "\u03a2\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a0",
    "\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a3\u0003\u0002\u0002\u0002\u03a2",
    "\u03a0\u0003\u0002\u0002\u0002\u03a3\u03dd\u0005(\u0015\u0002\u03a4",
    "\u03a6\u0005\u0272\u013a\u0002\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a6",
    "\u03a9\u0003\u0002\u0002\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a7",
    "\u03a8\u0003\u0002\u0002\u0002\u03a8\u03aa\u0003\u0002\u0002\u0002\u03a9",
    "\u03a7\u0003\u0002\u0002\u0002\u03aa\u03dd\u0005\u014e\u00a8\u0002\u03ab",
    "\u03ad\u0005\u0272\u013a\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002\u03ad",
    "\u03b0\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03ae",
    "\u03af\u0003\u0002\u0002\u0002\u03af\u03b1\u0003\u0002\u0002\u0002\u03b0",
    "\u03ae\u0003\u0002\u0002\u0002\u03b1\u03dd\u0005\u00b8]\u0002\u03b2",
    "\u03b4\u0005\u0272\u013a\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b4",
    "\u03b7\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5",
    "\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002\u0002\u03b7",
    "\u03b5\u0003\u0002\u0002\u0002\u03b8\u03dd\u0005\u00eav\u0002\u03b9",
    "\u03bb\u0005\u0272\u013a\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03bb",
    "\u03be\u0003\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc",
    "\u03bd\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002\u03be",
    "\u03bc\u0003\u0002\u0002\u0002\u03bf\u03dd\u0005\u0148\u00a5\u0002\u03c0",
    "\u03c2\u0005\u0272\u013a\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c2",
    "\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3",
    "\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5",
    "\u03c3\u0003\u0002\u0002\u0002\u03c6\u03dd\u0005\u0154\u00ab\u0002\u03c7",
    "\u03c9\u0005\u0272\u013a\u0002\u03c8\u03c7\u0003\u0002\u0002\u0002\u03c9",
    "\u03cc\u0003\u0002\u0002\u0002\u03ca\u03c8\u0003\u0002\u0002\u0002\u03ca",
    "\u03cb\u0003\u0002\u0002\u0002\u03cb\u03cd\u0003\u0002\u0002\u0002\u03cc",
    "\u03ca\u0003\u0002\u0002\u0002\u03cd\u03dd\u0005\u0156\u00ac\u0002\u03ce",
    "\u03d0\u0005\u0272\u013a\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03d0",
    "\u03d3\u0003\u0002\u0002\u0002\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d1",
    "\u03d2\u0003\u0002\u0002\u0002\u03d2\u03d4\u0003\u0002\u0002\u0002\u03d3",
    "\u03d1\u0003\u0002\u0002\u0002\u03d4\u03dd\u0005\u0104\u0083\u0002\u03d5",
    "\u03d7\u0005\u0272\u013a\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002\u03d7",
    "\u03da\u0003\u0002\u0002\u0002\u03d8\u03d6\u0003\u0002\u0002\u0002\u03d8",
    "\u03d9\u0003\u0002\u0002\u0002\u03d9\u03db\u0003\u0002\u0002\u0002\u03da",
    "\u03d8\u0003\u0002\u0002\u0002\u03db\u03dd\u0005\u010e\u0088\u0002\u03dc",
    "\u0390\u0003\u0002\u0002\u0002\u03dc\u0397\u0003\u0002\u0002\u0002\u03dc",
    "\u03a0\u0003\u0002\u0002\u0002\u03dc\u03a7\u0003\u0002\u0002\u0002\u03dc",
    "\u03ae\u0003\u0002\u0002\u0002\u03dc\u03b5\u0003\u0002\u0002\u0002\u03dc",
    "\u03bc\u0003\u0002\u0002\u0002\u03dc\u03c3\u0003\u0002\u0002\u0002\u03dc",
    "\u03ca\u0003\u0002\u0002\u0002\u03dc\u03d1\u0003\u0002\u0002\u0002\u03dc",
    "\u03d8\u0003\u0002\u0002\u0002\u03dd#\u0003\u0002\u0002\u0002\u03de",
    "\u03e9\u0005N(\u0002\u03df\u03e9\u0005T+\u0002\u03e0\u03e9\u0005L\'",
    "\u0002\u03e1\u03e9\u0005P)\u0002\u03e2\u03e9\u0005V,\u0002\u03e3\u03e9",
    "\u0005R*\u0002\u03e4\u03e9\u0005J&\u0002\u03e5\u03e9\u0005\u0100\u0081",
    "\u0002\u03e6\u03e9\u0005\u009eP\u0002\u03e7\u03e9\u0005\u0096L\u0002",
    "\u03e8\u03de\u0003\u0002\u0002\u0002\u03e8\u03df\u0003\u0002\u0002\u0002",
    "\u03e8\u03e0\u0003\u0002\u0002\u0002\u03e8\u03e1\u0003\u0002\u0002\u0002",
    "\u03e8\u03e2\u0003\u0002\u0002\u0002\u03e8\u03e3\u0003\u0002\u0002\u0002",
    "\u03e8\u03e4\u0003\u0002\u0002\u0002\u03e8\u03e5\u0003\u0002\u0002\u0002",
    "\u03e8\u03e6\u0003\u0002\u0002\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002",
    "\u03e9%\u0003\u0002\u0002\u0002\u03ea\u03fe\u0005\"\u0012\u0002\u03eb",
    "\u03fe\u0005\u00fe\u0080\u0002\u03ec\u03fe\u0005\u0188\u00c5\u0002\u03ed",
    "\u03ef\u0005\u0272\u013a\u0002\u03ee\u03ed\u0003\u0002\u0002\u0002\u03ef",
    "\u03f2\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0",
    "\u03f1\u0003\u0002\u0002\u0002\u03f1\u03f3\u0003\u0002\u0002\u0002\u03f2",
    "\u03f0\u0003\u0002\u0002\u0002\u03f3\u03f4\u0005> \u0002\u03f4\u03f5",
    "\u0007+\u0002\u0002\u03f5\u03fe\u0003\u0002\u0002\u0002\u03f6\u03f8",
    "\u0005\u0272\u013a\u0002\u03f7\u03f6\u0003\u0002\u0002\u0002\u03f8\u03fb",
    "\u0003\u0002\u0002\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002\u03f9\u03fa",
    "\u0003\u0002\u0002\u0002\u03fa\u03fc\u0003\u0002\u0002\u0002\u03fb\u03f9",
    "\u0003\u0002\u0002\u0002\u03fc\u03fe\u0005@!\u0002\u03fd\u03ea\u0003",
    "\u0002\u0002\u0002\u03fd\u03eb\u0003\u0002\u0002\u0002\u03fd\u03ec\u0003",
    "\u0002\u0002\u0002\u03fd\u03f0\u0003\u0002\u0002\u0002\u03fd\u03f9\u0003",
    "\u0002\u0002\u0002\u03fe\'\u0003\u0002\u0002\u0002\u03ff\u0400\u0007",
    "O\u0002\u0002\u0400\u0401\u0005n8\u0002\u0401\u0402\u0007+\u0002\u0002",
    "\u0402)\u0003\u0002\u0002\u0002\u0403\u0404\u0007L\u0002\u0002\u0404",
    "\u0405\u0005\u027c\u013f\u0002\u0405\u0406\u0007+\u0002\u0002\u0406",
    "\u040a\u0005,\u0017\u0002\u0407\u0409\u0005.\u0018\u0002\u0408\u0407",
    "\u0003\u0002\u0002\u0002\u0409\u040c\u0003\u0002\u0002\u0002\u040a\u0408",
    "\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040d",
    "\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040d\u040e",
    "\u0007V\u0002\u0002\u040e+\u0003\u0002\u0002\u0002\u040f\u0418\u0007",
    "P\u0002\u0002\u0410\u0411\u0005\u02a4\u0153\u0002\u0411\u0412\u0007",
    "&\u0002\u0002\u0412\u0414\u0003\u0002\u0002\u0002\u0413\u0410\u0003",
    "\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0415\u0003",
    "\u0002\u0002\u0002\u0415\u0417\u0005\u027a\u013e\u0002\u0416\u0413\u0003",
    "\u0002\u0002\u0002\u0417\u041a\u0003\u0002\u0002\u0002\u0418\u0416\u0003",
    "\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041b\u0003",
    "\u0002\u0002\u0002\u041a\u0418\u0003\u0002\u0002\u0002\u041b\u041c\u0007",
    "+\u0002\u0002\u041c-\u0003\u0002\u0002\u0002\u041d\u041e\u00050\u0019",
    "\u0002\u041e\u041f\u00058\u001d\u0002\u041f\u0420\u0007+\u0002\u0002",
    "\u0420\u0432\u0003\u0002\u0002\u0002\u0421\u0422\u00052\u001a\u0002",
    "\u0422\u0423\u00058\u001d\u0002\u0423\u0424\u0007+\u0002\u0002\u0424",
    "\u0432\u0003\u0002\u0002\u0002\u0425\u0426\u00052\u001a\u0002\u0426",
    "\u0427\u0005:\u001e\u0002\u0427\u0428\u0007+\u0002\u0002\u0428\u0432",
    "\u0003\u0002\u0002\u0002\u0429\u042a\u00056\u001c\u0002\u042a\u042b",
    "\u00058\u001d\u0002\u042b\u042c\u0007+\u0002\u0002\u042c\u0432\u0003",
    "\u0002\u0002\u0002\u042d\u042e\u00056\u001c\u0002\u042e\u042f\u0005",
    ":\u001e\u0002\u042f\u0430\u0007+\u0002\u0002\u0430\u0432\u0003\u0002",
    "\u0002\u0002\u0431\u041d\u0003\u0002\u0002\u0002\u0431\u0421\u0003\u0002",
    "\u0002\u0002\u0431\u0425\u0003\u0002\u0002\u0002\u0431\u0429\u0003\u0002",
    "\u0002\u0002\u0431\u042d\u0003\u0002\u0002\u0002\u0432/\u0003\u0002",
    "\u0002\u0002\u0433\u0434\u0007N\u0002\u0002\u04341\u0003\u0002\u0002",
    "\u0002\u0435\u0436\u0007n\u0002\u0002\u0436\u0437\u00054\u001b\u0002",
    "\u04373\u0003\u0002\u0002\u0002\u0438\u043d\u0005\u02c2\u0162\u0002",
    "\u0439\u043a\u0007&\u0002\u0002\u043a\u043c\u0005\u02a2\u0152\u0002",
    "\u043b\u0439\u0003\u0002\u0002\u0002\u043c\u043f\u0003\u0002\u0002\u0002",
    "\u043d\u043b\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002",
    "\u043e5\u0003\u0002\u0002\u0002\u043f\u043d\u0003\u0002\u0002\u0002",
    "\u0440\u0444\u0007J\u0002\u0002\u0441\u0442\u0005\u02a4\u0153\u0002",
    "\u0442\u0443\u0007&\u0002\u0002\u0443\u0445\u0003\u0002\u0002\u0002",
    "\u0444\u0441\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002",
    "\u0445\u0446\u0003\u0002\u0002\u0002\u0446\u0447\u0005\u027a\u013e\u0002",
    "\u04477\u0003\u0002\u0002\u0002\u0448\u044c\u0007r\u0002\u0002\u0449",
    "\u044b\u0005\u02a4\u0153\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044b",
    "\u044e\u0003\u0002\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044c",
    "\u044d\u0003\u0002\u0002\u0002\u044d9\u0003\u0002\u0002\u0002\u044e",
    "\u044c\u0003\u0002\u0002\u0002\u044f\u0453\u0007\u00ae\u0002\u0002\u0450",
    "\u0451\u0005\u02a4\u0153\u0002\u0451\u0452\u0007&\u0002\u0002\u0452",
    "\u0454\u0003\u0002\u0002\u0002\u0453\u0450\u0003\u0002\u0002\u0002\u0453",
    "\u0454\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002\u0002\u0002\u0455",
    "\u0458\u0005\u027a\u013e\u0002\u0456\u0457\u0007*\u0002\u0002\u0457",
    "\u0459\u0007L\u0002\u0002\u0458\u0456\u0003\u0002\u0002\u0002\u0458",
    "\u0459\u0003\u0002\u0002\u0002\u0459;\u0003\u0002\u0002\u0002\u045a",
    "\u045c\u0007t\u0002\u0002\u045b\u045d\u0007\u009a\u0002\u0002\u045c",
    "\u045b\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002\u0002\u0002\u045d",
    "\u045f\u0003\u0002\u0002\u0002\u045e\u0460\u0005\u0094K\u0002\u045f",
    "\u045e\u0003\u0002\u0002\u0002\u045f\u0460\u0003\u0002\u0002\u0002\u0460",
    "\u0461\u0003\u0002\u0002\u0002\u0461\u0467\u0005v<\u0002\u0462\u0463",
    "\u0007t\u0002\u0002\u0463\u0464\u0005B\"\u0002\u0464\u0465\u0005v<\u0002",
    "\u0465\u0467\u0003\u0002\u0002\u0002\u0466\u045a\u0003\u0002\u0002\u0002",
    "\u0466\u0462\u0003\u0002\u0002\u0002\u0467=\u0003\u0002\u0002\u0002",
    "\u0468\u046a\u0007\u0083\u0002\u0002\u0469\u046b\u0007\u009a\u0002\u0002",
    "\u046a\u0469\u0003\u0002\u0002\u0002\u046a\u046b\u0003\u0002\u0002\u0002",
    "\u046b\u046d\u0003\u0002\u0002\u0002\u046c\u046e\u0005\u0094K\u0002",
    "\u046d\u046c\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002",
    "\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u0475\u0005v<\u0002\u0470",
    "\u0471\u0007\u0083\u0002\u0002\u0471\u0472\u0005B\"\u0002\u0472\u0473",
    "\u0005v<\u0002\u0473\u0475\u0003\u0002\u0002\u0002\u0474\u0468\u0003",
    "\u0002\u0002\u0002\u0474\u0470\u0003\u0002\u0002\u0002\u0475?\u0003",
    "\u0002\u0002\u0002\u0476\u0478\u0007\u009d\u0002\u0002\u0477\u0479\u0005",
    "\u0094K\u0002\u0478\u0477\u0003\u0002\u0002\u0002\u0478\u0479\u0003",
    "\u0002\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002\u047a\u047b\u0005",
    "|?\u0002\u047b\u047c\u0007+\u0002\u0002\u047cA\u0003\u0002\u0002\u0002",
    "\u047d\u047e\t\u0003\u0002\u0002\u047eC\u0003\u0002\u0002\u0002\u047f",
    "\u0481\u0007l\u0002\u0002\u0480\u0482\u0005X-\u0002\u0481\u0480\u0003",
    "\u0002\u0002\u0002\u0481\u0482\u0003\u0002\u0002\u0002\u0482\u0484\u0003",
    "\u0002\u0002\u0002\u0483\u0485\u0007\u009a\u0002\u0002\u0484\u0483\u0003",
    "\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0487\u0003",
    "\u0002\u0002\u0002\u0486\u0488\u0005\u0094K\u0002\u0487\u0486\u0003",
    "\u0002\u0002\u0002\u0487\u0488\u0003\u0002\u0002\u0002\u0488\u0489\u0003",
    "\u0002\u0002\u0002\u0489\u048a\u0005x=\u0002\u048aE\u0003\u0002\u0002",
    "\u0002\u048b\u048d\u0007m\u0002\u0002\u048c\u048e\u0005X-\u0002\u048d",
    "\u048c\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e",
    "\u0490\u0003\u0002\u0002\u0002\u048f\u0491\u0007\u009a\u0002\u0002\u0490",
    "\u048f\u0003\u0002\u0002\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491",
    "\u0493\u0003\u0002\u0002\u0002\u0492\u0494\u0005\u0094K\u0002\u0493",
    "\u0492\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494",
    "\u0495\u0003\u0002\u0002\u0002\u0495\u0496\u0005x=\u0002\u0496G\u0003",
    "\u0002\u0002\u0002\u0497\u0499\u0007\u0082\u0002\u0002\u0498\u049a\u0005",
    "X-\u0002\u0499\u0498\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002",
    "\u0002\u0002\u049a\u049c\u0003\u0002\u0002\u0002\u049b\u049d\u0007\u009a",
    "\u0002\u0002\u049c\u049b\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002",
    "\u0002\u0002\u049d\u049f\u0003\u0002\u0002\u0002\u049e\u04a0\u0005\u0094",
    "K\u0002\u049f\u049e\u0003\u0002\u0002\u0002\u049f\u04a0\u0003\u0002",
    "\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04b0\u0005x",
    "=\u0002\u04a2\u04a3\u0007\u0082\u0002\u0002\u04a3\u04a5\u0007\u0090",
    "\u0002\u0002\u04a4\u04a6\u0007\u009a\u0002\u0002\u04a5\u04a4\u0003\u0002",
    "\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6\u04a8\u0003\u0002",
    "\u0002\u0002\u04a7\u04a9\u0005\u0094K\u0002\u04a8\u04a7\u0003\u0002",
    "\u0002\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002",
    "\u0002\u0002\u04aa\u04b0\u0005\u0080A\u0002\u04ab\u04ac\u0007\u0082",
    "\u0002\u0002\u04ac\u04ad\u0005Z.\u0002\u04ad\u04ae\u0005\u0080A\u0002",
    "\u04ae\u04b0\u0003\u0002\u0002\u0002\u04af\u0497\u0003\u0002\u0002\u0002",
    "\u04af\u04a2\u0003\u0002\u0002\u0002\u04af\u04ab\u0003\u0002\u0002\u0002",
    "\u04b0I\u0003\u0002\u0002\u0002\u04b1\u04b2\u0007^\u0002\u0002\u04b2",
    "\u04b3\u0005p9\u0002\u04b3\u04b4\u0007+\u0002\u0002\u04b4K\u0003\u0002",
    "\u0002\u0002\u04b5\u04b6\u0007o\u0002\u0002\u04b6\u04b7\u0005~@\u0002",
    "\u04b7\u04b8\u0007+\u0002\u0002\u04b8M\u0003\u0002\u0002\u0002\u04b9",
    "\u04bb\u0005X-\u0002\u04ba\u04bc\u0007\u009a\u0002\u0002\u04bb\u04ba",
    "\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04be",
    "\u0003\u0002\u0002\u0002\u04bd\u04bf\u0005h5\u0002\u04be\u04bd\u0003",
    "\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003",
    "\u0002\u0002\u0002\u04c0\u04c1\u0005t;\u0002\u04c1\u04c2\u0007+\u0002",
    "\u0002\u04c2\u052c\u0003\u0002\u0002\u0002\u04c3\u04c5\u0005X-\u0002",
    "\u04c4\u04c6\u0005`1\u0002\u04c5\u04c4\u0003\u0002\u0002\u0002\u04c5",
    "\u04c6\u0003\u0002\u0002\u0002\u04c6\u04c8\u0003\u0002\u0002\u0002\u04c7",
    "\u04c9\u0007\u009a\u0002\u0002\u04c8\u04c7\u0003\u0002\u0002\u0002\u04c8",
    "\u04c9\u0003\u0002\u0002\u0002\u04c9\u04cb\u0003\u0002\u0002\u0002\u04ca",
    "\u04cc\u0005h5\u0002\u04cb\u04ca\u0003\u0002\u0002\u0002\u04cb\u04cc",
    "\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002\u0002\u04cd\u04ce",
    "\u0005r:\u0002\u04ce\u04cf\u0007+\u0002\u0002\u04cf\u052c\u0003\u0002",
    "\u0002\u0002\u04d0\u04d2\u0005X-\u0002\u04d1\u04d3\t\u0004\u0002\u0002",
    "\u04d2\u04d1\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002\u0002",
    "\u04d3\u04d5\u0003\u0002\u0002\u0002\u04d4\u04d6\u0007\u009a\u0002\u0002",
    "\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002",
    "\u04d6\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d9\u0005\u0094K\u0002",
    "\u04d8\u04da\u0005h5\u0002\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9",
    "\u04da\u0003\u0002\u0002\u0002\u04da\u04db\u0003\u0002\u0002\u0002\u04db",
    "\u04dc\u0005t;\u0002\u04dc\u04dd\u0007+\u0002\u0002\u04dd\u052c\u0003",
    "\u0002\u0002\u0002\u04de\u04e0\u0005X-\u0002\u04df\u04e1\u0005`1\u0002",
    "\u04e0\u04df\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002",
    "\u04e1\u04e3\u0003\u0002\u0002\u0002\u04e2\u04e4\t\u0004\u0002\u0002",
    "\u04e3\u04e2\u0003\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002",
    "\u04e4\u04e6\u0003\u0002\u0002\u0002\u04e5\u04e7\u0007\u009a\u0002\u0002",
    "\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002",
    "\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u04ea\u0005\u0094K\u0002",
    "\u04e9\u04eb\u0005h5\u0002\u04ea\u04e9\u0003\u0002\u0002\u0002\u04ea",
    "\u04eb\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\u0005r:\u0002\u04ed\u04ee\u0007+\u0002\u0002\u04ee\u052c\u0003",
    "\u0002\u0002\u0002\u04ef\u04f1\u0007\u00ad\u0002\u0002\u04f0\u04f2\u0005",
    "f4\u0002\u04f1\u04f0\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002",
    "\u0002\u0002\u04f2\u04f4\u0003\u0002\u0002\u0002\u04f3\u04f5\u0007\u009a",
    "\u0002\u0002\u04f4\u04f3\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002",
    "\u0002\u0002\u04f5\u04f7\u0003\u0002\u0002\u0002\u04f6\u04f8\u0005h",
    "5\u0002\u04f7\u04f6\u0003\u0002\u0002\u0002\u04f7\u04f8\u0003\u0002",
    "\u0002\u0002\u04f8\u04f9\u0003\u0002\u0002\u0002\u04f9\u04fa\u0005t",
    ";\u0002\u04fa\u04fb\u0007+\u0002\u0002\u04fb\u052c\u0003\u0002\u0002",
    "\u0002\u04fc\u04fe\u0007\u00ad\u0002\u0002\u04fd\u04ff\u0005`1\u0002",
    "\u04fe\u04fd\u0003\u0002\u0002\u0002\u04fe\u04ff\u0003\u0002\u0002\u0002",
    "\u04ff\u0501\u0003\u0002\u0002\u0002\u0500\u0502\u0007\u009a\u0002\u0002",
    "\u0501\u0500\u0003\u0002\u0002\u0002\u0501\u0502\u0003\u0002\u0002\u0002",
    "\u0502\u0504\u0003\u0002\u0002\u0002\u0503\u0505\u0005h5\u0002\u0504",
    "\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002\u0505",
    "\u0506\u0003\u0002\u0002\u0002\u0506\u0507\u0005r:\u0002\u0507\u0508",
    "\u0007+\u0002\u0002\u0508\u052c\u0003\u0002\u0002\u0002\u0509\u050b",
    "\u0007\u00ad\u0002\u0002\u050a\u050c\u0005f4\u0002\u050b\u050a\u0003",
    "\u0002\u0002\u0002\u050b\u050c\u0003\u0002\u0002\u0002\u050c\u050e\u0003",
    "\u0002\u0002\u0002\u050d\u050f\t\u0004\u0002\u0002\u050e\u050d\u0003",
    "\u0002\u0002\u0002\u050e\u050f\u0003\u0002\u0002\u0002\u050f\u0511\u0003",
    "\u0002\u0002\u0002\u0510\u0512\u0007\u009a\u0002\u0002\u0511\u0510\u0003",
    "\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0513\u0003",
    "\u0002\u0002\u0002\u0513\u0515\u0005\u0094K\u0002\u0514\u0516\u0005",
    "h5\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002",
    "\u0002\u0002\u0516\u0517\u0003\u0002\u0002\u0002\u0517\u0518\u0005t",
    ";\u0002\u0518\u0519\u0007+\u0002\u0002\u0519\u052c\u0003\u0002\u0002",
    "\u0002\u051a\u051c\u0007\u00ad\u0002\u0002\u051b\u051d\u0005`1\u0002",
    "\u051c\u051b\u0003\u0002\u0002\u0002\u051c\u051d\u0003\u0002\u0002\u0002",
    "\u051d\u051f\u0003\u0002\u0002\u0002\u051e\u0520\t\u0004\u0002\u0002",
    "\u051f\u051e\u0003\u0002\u0002\u0002\u051f\u0520\u0003\u0002\u0002\u0002",
    "\u0520\u0522\u0003\u0002\u0002\u0002\u0521\u0523\u0007\u009a\u0002\u0002",
    "\u0522\u0521\u0003\u0002\u0002\u0002\u0522\u0523\u0003\u0002\u0002\u0002",
    "\u0523\u0524\u0003\u0002\u0002\u0002\u0524\u0526\u0005\u0094K\u0002",
    "\u0525\u0527\u0005h5\u0002\u0526\u0525\u0003\u0002\u0002\u0002\u0526",
    "\u0527\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528",
    "\u0529\u0005r:\u0002\u0529\u052a\u0007+\u0002\u0002\u052a\u052c\u0003",
    "\u0002\u0002\u0002\u052b\u04b9\u0003\u0002\u0002\u0002\u052b\u04c3\u0003",
    "\u0002\u0002\u0002\u052b\u04d0\u0003\u0002\u0002\u0002\u052b\u04de\u0003",
    "\u0002\u0002\u0002\u052b\u04ef\u0003\u0002\u0002\u0002\u052b\u04fc\u0003",
    "\u0002\u0002\u0002\u052b\u0509\u0003\u0002\u0002\u0002\u052b\u051a\u0003",
    "\u0002\u0002\u0002\u052cO\u0003\u0002\u0002\u0002\u052d\u052e\u0007",
    "\u008e\u0002\u0002\u052e\u052f\u0005z>\u0002\u052f\u0530\u0007+\u0002",
    "\u0002\u0530Q\u0003\u0002\u0002\u0002\u0531\u0532\u0007\u008f\u0002",
    "\u0002\u0532\u0533\u0005z>\u0002\u0533\u0534\u0007+\u0002\u0002\u0534",
    "S\u0003\u0002\u0002\u0002\u0535\u0537\u0007\u0090\u0002\u0002\u0536",
    "\u0538\u0007\u009a\u0002\u0002\u0537\u0536\u0003\u0002\u0002\u0002\u0537",
    "\u0538\u0003\u0002\u0002\u0002\u0538\u053a\u0003\u0002\u0002\u0002\u0539",
    "\u053b\u0005\u0094K\u0002\u053a\u0539\u0003\u0002\u0002\u0002\u053a",
    "\u053b\u0003\u0002\u0002\u0002\u053b\u053c\u0003\u0002\u0002\u0002\u053c",
    "\u053d\u0005~@\u0002\u053d\u053e\u0007+\u0002\u0002\u053eU\u0003\u0002",
    "\u0002\u0002\u053f\u0540\u0007\u00a4\u0002\u0002\u0540\u0541\u0005~",
    "@\u0002\u0541\u0542\u0007+\u0002\u0002\u0542W\u0003\u0002\u0002\u0002",
    "\u0543\u0544\t\u0005\u0002\u0002\u0544Y\u0003\u0002\u0002\u0002\u0545",
    "\u0546\t\u0006\u0002\u0002\u0546[\u0003\u0002\u0002\u0002\u0547\u054b",
    "\u0005\u02b2\u015a\u0002\u0548\u054a\u0005\u0092J\u0002\u0549\u0548",
    "\u0003\u0002\u0002\u0002\u054a\u054d\u0003\u0002\u0002\u0002\u054b\u0549",
    "\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002\u0002\u054c\u0553",
    "\u0003\u0002\u0002\u0002\u054d\u054b\u0003\u0002\u0002\u0002\u054e\u054f",
    "\u0005\u02b2\u015a\u0002\u054f\u0550\u00070\u0002\u0002\u0550\u0551",
    "\u0005\u0238\u011d\u0002\u0551\u0553\u0003\u0002\u0002\u0002\u0552\u0547",
    "\u0003\u0002\u0002\u0002\u0552\u054e\u0003\u0002\u0002\u0002\u0553]",
    "\u0003\u0002\u0002\u0002\u0554\u0558\u0005\u02c8\u0165\u0002\u0555\u0557",
    "\u0005\u0092J\u0002\u0556\u0555\u0003\u0002\u0002\u0002\u0557\u055a",
    "\u0003\u0002\u0002\u0002\u0558\u0556\u0003\u0002\u0002\u0002\u0558\u0559",
    "\u0003\u0002\u0002\u0002\u0559\u0560\u0003\u0002\u0002\u0002\u055a\u0558",
    "\u0003\u0002\u0002\u0002\u055b\u055c\u0005\u02c8\u0165\u0002\u055c\u055d",
    "\u00070\u0002\u0002\u055d\u055e\u0005\u0238\u011d\u0002\u055e\u0560",
    "\u0003\u0002\u0002\u0002\u055f\u0554\u0003\u0002\u0002\u0002\u055f\u055b",
    "\u0003\u0002\u0002\u0002\u0560_\u0003\u0002\u0002\u0002\u0561\u0562",
    "\u0007\u001a\u0002\u0002\u0562\u0563\u0005b2\u0002\u0563\u0564\u0007",
    "\"\u0002\u0002\u0564\u0565\u0005d3\u0002\u0565\u0566\u0007\u001b\u0002",
    "\u0002\u0566\u0586\u0003\u0002\u0002\u0002\u0567\u0568\u0007\u001a\u0002",
    "\u0002\u0568\u0569\u0005d3\u0002\u0569\u056a\u0007\"\u0002\u0002\u056a",
    "\u056b\u0005b2\u0002\u056b\u056c\u0007\u001b\u0002\u0002\u056c\u0586",
    "\u0003\u0002\u0002\u0002\u056d\u056e\u0007\u001a\u0002\u0002\u056e\u056f",
    "\u0005b2\u0002\u056f\u0570\u0007\"\u0002\u0002\u0570\u0571\u0007g\u0002",
    "\u0002\u0571\u0572\u0007\u001b\u0002\u0002\u0572\u0586\u0003\u0002\u0002",
    "\u0002\u0573\u0574\u0007\u001a\u0002\u0002\u0574\u0575\u0005d3\u0002",
    "\u0575\u0576\u0007\"\u0002\u0002\u0576\u0577\u0007f\u0002\u0002\u0577",
    "\u0578\u0007\u001b\u0002\u0002\u0578\u0586\u0003\u0002\u0002\u0002\u0579",
    "\u057a\u0007\u001a\u0002\u0002\u057a\u057b\u0007f\u0002\u0002\u057b",
    "\u057c\u0007\"\u0002\u0002\u057c\u057d\u0005d3\u0002\u057d\u057e\u0007",
    "\u001b\u0002\u0002\u057e\u0586\u0003\u0002\u0002\u0002\u057f\u0580\u0007",
    "\u001a\u0002\u0002\u0580\u0581\u0007g\u0002\u0002\u0581\u0582\u0007",
    "\"\u0002\u0002\u0582\u0583\u0005b2\u0002\u0583\u0584\u0007\u001b\u0002",
    "\u0002\u0584\u0586\u0003\u0002\u0002\u0002\u0585\u0561\u0003\u0002\u0002",
    "\u0002\u0585\u0567\u0003\u0002\u0002\u0002\u0585\u056d\u0003\u0002\u0002",
    "\u0002\u0585\u0573\u0003\u0002\u0002\u0002\u0585\u0579\u0003\u0002\u0002",
    "\u0002\u0585\u057f\u0003\u0002\u0002\u0002\u0586a\u0003\u0002\u0002",
    "\u0002\u0587\u0588\t\u0007\u0002\u0002\u0588c\u0003\u0002\u0002\u0002",
    "\u0589\u058a\t\b\u0002\u0002\u058ae\u0003\u0002\u0002\u0002\u058b\u058c",
    "\u0007\u001a\u0002\u0002\u058c\u058d\u0007\u009b\u0002\u0002\u058d\u0595",
    "\u0007\u001b\u0002\u0002\u058e\u058f\u0007\u001a\u0002\u0002\u058f\u0590",
    "\u0007w\u0002\u0002\u0590\u0595\u0007\u001b\u0002\u0002\u0591\u0592",
    "\u0007\u001a\u0002\u0002\u0592\u0593\u0007q\u0002\u0002\u0593\u0595",
    "\u0007\u001b\u0002\u0002\u0594\u058b\u0003\u0002\u0002\u0002\u0594\u058e",
    "\u0003\u0002\u0002\u0002\u0594\u0591\u0003\u0002\u0002\u0002\u0595g",
    "\u0003\u0002\u0002\u0002\u0596\u0597\u0007\u0007\u0002\u0002\u0597\u05a6",
    "\u0005l7\u0002\u0598\u0599\u0007\u0007\u0002\u0002\u0599\u059a\u0007",
    "\u001a\u0002\u0002\u059a\u05a1\u0005\u0244\u0123\u0002\u059b\u059c\u0007",
    "\"\u0002\u0002\u059c\u059f\u0005\u0244\u0123\u0002\u059d\u059e\u0007",
    "\"\u0002\u0002\u059e\u05a0\u0005\u0244\u0123\u0002\u059f\u059d\u0003",
    "\u0002\u0002\u0002\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0\u05a2\u0003",
    "\u0002\u0002\u0002\u05a1\u059b\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003",
    "\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002\u0002\u05a3\u05a4\u0007",
    "\u001b\u0002\u0002\u05a4\u05a6\u0003\u0002\u0002\u0002\u05a5\u0596\u0003",
    "\u0002\u0002\u0002\u05a5\u0598\u0003\u0002\u0002\u0002\u05a6i\u0003",
    "\u0002\u0002\u0002\u05a7\u05a8\u0007\u0007\u0002\u0002\u05a8\u05b3\u0005",
    "l7\u0002\u05a9\u05aa\u0007\u0007\u0002\u0002\u05aa\u05ab\u0007\u001a",
    "\u0002\u0002\u05ab\u05ae\u0005\u0244\u0123\u0002\u05ac\u05ad\u0007\"",
    "\u0002\u0002\u05ad\u05af\u0005\u0244\u0123\u0002\u05ae\u05ac\u0003\u0002",
    "\u0002\u0002\u05ae\u05af\u0003\u0002\u0002\u0002\u05af\u05b0\u0003\u0002",
    "\u0002\u0002\u05b0\u05b1\u0007\u001b\u0002\u0002\u05b1\u05b3\u0003\u0002",
    "\u0002\u0002\u05b2\u05a7\u0003\u0002\u0002\u0002\u05b2\u05a9\u0003\u0002",
    "\u0002\u0002\u05b3k\u0003\u0002\u0002\u0002\u05b4\u05b8\u0005\u026e",
    "\u0138\u0002\u05b5\u05b8\u0005\u0264\u0133\u0002\u05b6\u05b8\u0005\u029a",
    "\u014e\u0002\u05b7\u05b4\u0003\u0002\u0002\u0002\u05b7\u05b5\u0003\u0002",
    "\u0002\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b8m\u0003\u0002",
    "\u0002\u0002\u05b9\u05be\u0005\u0082B\u0002\u05ba\u05bb\u0007\"\u0002",
    "\u0002\u05bb\u05bd\u0005\u0082B\u0002\u05bc\u05ba\u0003\u0002\u0002",
    "\u0002\u05bd\u05c0\u0003\u0002\u0002\u0002\u05be\u05bc\u0003\u0002\u0002",
    "\u0002\u05be\u05bf\u0003\u0002\u0002\u0002\u05bfo\u0003\u0002\u0002",
    "\u0002\u05c0\u05be\u0003\u0002\u0002\u0002\u05c1\u05c5\u0005\u0280\u0141",
    "\u0002\u05c2\u05c4\u0005\u0092J\u0002\u05c3\u05c2\u0003\u0002\u0002",
    "\u0002\u05c4\u05c7\u0003\u0002\u0002\u0002\u05c5\u05c3\u0003\u0002\u0002",
    "\u0002\u05c5\u05c6\u0003\u0002\u0002\u0002\u05c6\u05d2\u0003\u0002\u0002",
    "\u0002\u05c7\u05c5\u0003\u0002\u0002\u0002\u05c8\u05c9\u0007\"\u0002",
    "\u0002\u05c9\u05cd\u0005\u0280\u0141\u0002\u05ca\u05cc\u0005\u0092J",
    "\u0002\u05cb\u05ca\u0003\u0002\u0002\u0002\u05cc\u05cf\u0003\u0002\u0002",
    "\u0002\u05cd\u05cb\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003\u0002\u0002",
    "\u0002\u05ce\u05d1\u0003\u0002\u0002\u0002\u05cf\u05cd\u0003\u0002\u0002",
    "\u0002\u05d0\u05c8\u0003\u0002\u0002\u0002\u05d1\u05d4\u0003\u0002\u0002",
    "\u0002\u05d2\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002\u0002",
    "\u0002\u05d3q\u0003\u0002\u0002\u0002\u05d4\u05d2\u0003\u0002\u0002",
    "\u0002\u05d5\u05da\u0005\u0084C\u0002\u05d6\u05d7\u0007\"\u0002\u0002",
    "\u05d7\u05d9\u0005\u0084C\u0002\u05d8\u05d6\u0003\u0002\u0002\u0002",
    "\u05d9\u05dc\u0003\u0002\u0002\u0002\u05da\u05d8\u0003\u0002\u0002\u0002",
    "\u05da\u05db\u0003\u0002\u0002\u0002\u05dbs\u0003\u0002\u0002\u0002",
    "\u05dc\u05da\u0003\u0002\u0002\u0002\u05dd\u05e1\u0005\u02aa\u0156\u0002",
    "\u05de\u05e0\u0005\u0092J\u0002\u05df\u05de\u0003\u0002\u0002\u0002",
    "\u05e0\u05e3\u0003\u0002\u0002\u0002\u05e1\u05df\u0003\u0002\u0002\u0002",
    "\u05e1\u05e2\u0003\u0002\u0002\u0002\u05e2\u05ee\u0003\u0002\u0002\u0002",
    "\u05e3\u05e1\u0003\u0002\u0002\u0002\u05e4\u05e5\u0007\"\u0002\u0002",
    "\u05e5\u05e9\u0005\u02aa\u0156\u0002\u05e6\u05e8\u0005\u0092J\u0002",
    "\u05e7\u05e6\u0003\u0002\u0002\u0002\u05e8\u05eb\u0003\u0002\u0002\u0002",
    "\u05e9\u05e7\u0003\u0002\u0002\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002",
    "\u05ea\u05ed\u0003\u0002\u0002\u0002\u05eb\u05e9\u0003\u0002\u0002\u0002",
    "\u05ec\u05e4\u0003\u0002\u0002\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002",
    "\u05ee\u05ec\u0003\u0002\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002",
    "\u05efu\u0003\u0002\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002",
    "\u05f1\u05f6\u0005\u0086D\u0002\u05f2\u05f3\u0007\"\u0002\u0002\u05f3",
    "\u05f5\u0005\u0086D\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f5",
    "\u05f8\u0003\u0002\u0002\u0002\u05f6\u05f4\u0003\u0002\u0002\u0002\u05f6",
    "\u05f7\u0003\u0002\u0002\u0002\u05f7w\u0003\u0002\u0002\u0002\u05f8",
    "\u05f6\u0003\u0002\u0002\u0002\u05f9\u05fe\u0005\u02b0\u0159\u0002\u05fa",
    "\u05fb\u0007\"\u0002\u0002\u05fb\u05fd\u0005\u02b0\u0159\u0002\u05fc",
    "\u05fa\u0003\u0002\u0002\u0002\u05fd\u0600\u0003\u0002\u0002\u0002\u05fe",
    "\u05fc\u0003\u0002\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff",
    "y\u0003\u0002\u0002\u0002\u0600\u05fe\u0003\u0002\u0002\u0002\u0601",
    "\u0606\u0005\\/\u0002\u0602\u0603\u0007\"\u0002\u0002\u0603\u0605\u0005",
    "\\/\u0002\u0604\u0602\u0003\u0002\u0002\u0002\u0605\u0608\u0003\u0002",
    "\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0606\u0607\u0003\u0002",
    "\u0002\u0002\u0607{\u0003\u0002\u0002\u0002\u0608\u0606\u0003\u0002",
    "\u0002\u0002\u0609\u060e\u0005\u0088E\u0002\u060a\u060b\u0007\"\u0002",
    "\u0002\u060b\u060d\u0005\u0088E\u0002\u060c\u060a\u0003\u0002\u0002",
    "\u0002\u060d\u0610\u0003\u0002\u0002\u0002\u060e\u060c\u0003\u0002\u0002",
    "\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f}\u0003\u0002\u0002",
    "\u0002\u0610\u060e\u0003\u0002\u0002\u0002\u0611\u0616\u0005^0\u0002",
    "\u0612\u0613\u0007\"\u0002\u0002\u0613\u0615\u0005^0\u0002\u0614\u0612",
    "\u0003\u0002\u0002\u0002\u0615\u0618\u0003\u0002\u0002\u0002\u0616\u0614",
    "\u0003\u0002\u0002\u0002\u0616\u0617\u0003\u0002\u0002\u0002\u0617\u007f",
    "\u0003\u0002\u0002\u0002\u0618\u0616\u0003\u0002\u0002\u0002\u0619\u061c",
    "\u0005\u02b0\u0159\u0002\u061a\u061b\u00070\u0002\u0002\u061b\u061d",
    "\u0005\u0238\u011d\u0002\u061c\u061a\u0003\u0002\u0002\u0002\u061c\u061d",
    "\u0003\u0002\u0002\u0002\u061d\u0626\u0003\u0002\u0002\u0002\u061e\u061f",
    "\u0007\"\u0002\u0002\u061f\u0622\u0005\u02b0\u0159\u0002\u0620\u0621",
    "\u00070\u0002\u0002\u0621\u0623\u0005\u0238\u011d\u0002\u0622\u0620",
    "\u0003\u0002\u0002\u0002\u0622\u0623\u0003\u0002\u0002\u0002\u0623\u0625",
    "\u0003\u0002\u0002\u0002\u0624\u061e\u0003\u0002\u0002\u0002\u0625\u0628",
    "\u0003\u0002\u0002\u0002\u0626\u0624\u0003\u0002\u0002\u0002\u0626\u0627",
    "\u0003\u0002\u0002\u0002\u0627\u0081\u0003\u0002\u0002\u0002\u0628\u0626",
    "\u0003\u0002\u0002\u0002\u0629\u062a\u0005\u0294\u014b\u0002\u062a\u062b",
    "\u00070\u0002\u0002\u062b\u062c\u0005\u023a\u011e\u0002\u062c\u0083",
    "\u0003\u0002\u0002\u0002\u062d\u062e\u0005\u02aa\u0156\u0002\u062e\u062f",
    "\u00070\u0002\u0002\u062f\u0630\u0005\u0240\u0121\u0002\u0630\u0085",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0005\u02ae\u0158\u0002\u0632\u0633",
    "\u00070\u0002\u0002\u0633\u0634\u0005\u023a\u011e\u0002\u0634\u0087",
    "\u0003\u0002\u0002\u0002\u0635\u0636\u0005\u02b6\u015c\u0002\u0636\u0637",
    "\u00070\u0002\u0002\u0637\u0638\u0005\u023a\u011e\u0002\u0638\u063b",
    "\u0003\u0002\u0002\u0002\u0639\u063b\u0005\u008aF\u0002\u063a\u0635",
    "\u0003\u0002\u0002\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063b\u0089",
    "\u0003\u0002\u0002\u0002\u063c\u063d\u0007:\u0002\u0002\u063d\u063e",
    "\u00070\u0002\u0002\u063e\u063f\u0007\u001a\u0002\u0002\u063f\u0642",
    "\u0005\u008eH\u0002\u0640\u0641\u0007\"\u0002\u0002\u0641\u0643\u0005",
    "\u008cG\u0002\u0642\u0640\u0003\u0002\u0002\u0002\u0642\u0643\u0003",
    "\u0002\u0002\u0002\u0643\u0644\u0003\u0002\u0002\u0002\u0644\u0645\u0007",
    "\u001b\u0002\u0002\u0645\u0654\u0003\u0002\u0002\u0002\u0646\u0647\u0007",
    ":\u0002\u0002\u0647\u0648\u0005\u019c\u00cf\u0002\u0648\u0649\u0007",
    "\b\u0002\u0002\u0649\u064a\u0005\u019e\u00d0\u0002\u064a\u064b\u0007",
    "0\u0002\u0002\u064b\u064c\u0007\u001a\u0002\u0002\u064c\u064f\u0005",
    "\u008eH\u0002\u064d\u064e\u0007\"\u0002\u0002\u064e\u0650\u0005\u008c",
    "G\u0002\u064f\u064d\u0003\u0002\u0002\u0002\u064f\u0650\u0003\u0002",
    "\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651\u0652\u0007\u001b",
    "\u0002\u0002\u0652\u0654\u0003\u0002\u0002\u0002\u0653\u063c\u0003\u0002",
    "\u0002\u0002\u0653\u0646\u0003\u0002\u0002\u0002\u0654\u008b\u0003\u0002",
    "\u0002\u0002\u0655\u0656\u0005\u0090I\u0002\u0656\u008d\u0003\u0002",
    "\u0002\u0002\u0657\u0658\u0005\u0090I\u0002\u0658\u008f\u0003\u0002",
    "\u0002\u0002\u0659\u065a\u0005\u023a\u011e\u0002\u065a\u0091\u0003\u0002",
    "\u0002\u0002\u065b\u065c\u0007;\u0002\u0002\u065c\u065d\u0005\u023e",
    "\u0120\u0002\u065d\u065e\u0007*\u0002\u0002\u065e\u065f\u0005\u023e",
    "\u0120\u0002\u065f\u0660\u0007<\u0002\u0002\u0660\u0093\u0003\u0002",
    "\u0002\u0002\u0661\u0662\u0007;\u0002\u0002\u0662\u0663\u0005\u024a",
    "\u0126\u0002\u0663\u0664\u0007*\u0002\u0002\u0664\u0665\u0005\u0242",
    "\u0122\u0002\u0665\u0666\u0007<\u0002\u0002\u0666\u0095\u0003\u0002",
    "\u0002\u0002\u0667\u0669\u0007c\u0002\u0002\u0668\u066a\u0007B\u0002",
    "\u0002\u0669\u0668\u0003\u0002\u0002\u0002\u0669\u066a\u0003\u0002\u0002",
    "\u0002\u066a\u066b\u0003\u0002\u0002\u0002\u066b\u066c\u0005\u009cO",
    "\u0002\u066c\u066d\u0005\u0282\u0142\u0002\u066d\u066e\u0007+\u0002",
    "\u0002\u066e\u0672\u0005\u0098M\u0002\u066f\u0671\u0005\u0098M\u0002",
    "\u0670\u066f\u0003\u0002\u0002\u0002\u0671\u0674\u0003\u0002\u0002\u0002",
    "\u0672\u0670\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002",
    "\u0673\u0675\u0003\u0002\u0002\u0002\u0674\u0672\u0003\u0002\u0002\u0002",
    "\u0675\u0676\u0005\u0168\u00b5\u0002\u0676\u0677\u0007W\u0002\u0002",
    "\u0677\u068c\u0003\u0002\u0002\u0002\u0678\u067a\u0007c\u0002\u0002",
    "\u0679\u067b\u0007B\u0002\u0002\u067a\u0679\u0003\u0002\u0002\u0002",
    "\u067a\u067b\u0003\u0002\u0002\u0002\u067b\u067c\u0003\u0002\u0002\u0002",
    "\u067c\u067d\u0005\u009cO\u0002\u067d\u067e\u0005\u0282\u0142\u0002",
    "\u067e\u067f\u0007\u001a\u0002\u0002\u067f\u0680\u0005\u009aN\u0002",
    "\u0680\u0681\u0007\u001b\u0002\u0002\u0681\u0685\u0007+\u0002\u0002",
    "\u0682\u0684\u0005\u00aeX\u0002\u0683\u0682\u0003\u0002\u0002\u0002",
    "\u0684\u0687\u0003\u0002\u0002\u0002\u0685\u0683\u0003\u0002\u0002\u0002",
    "\u0685\u0686\u0003\u0002\u0002\u0002\u0686\u0688\u0003\u0002\u0002\u0002",
    "\u0687\u0685\u0003\u0002\u0002\u0002\u0688\u0689\u0005\u0168\u00b5\u0002",
    "\u0689\u068a\u0007W\u0002\u0002\u068a\u068c\u0003\u0002\u0002\u0002",
    "\u068b\u0667\u0003\u0002\u0002\u0002\u068b\u0678\u0003\u0002\u0002\u0002",
    "\u068c\u0097\u0003\u0002\u0002\u0002\u068d\u0698\u0005\u00aeX\u0002",
    "\u068e\u0690\u0005\u0272\u013a\u0002\u068f\u068e\u0003\u0002\u0002\u0002",
    "\u0690\u0693\u0003\u0002\u0002\u0002\u0691\u068f\u0003\u0002\u0002\u0002",
    "\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u0694\u0003\u0002\u0002\u0002",
    "\u0693\u0691\u0003\u0002\u0002\u0002\u0694\u0695\u0005\u00a6T\u0002",
    "\u0695\u0696\u0007+\u0002\u0002\u0696\u0698\u0003\u0002\u0002\u0002",
    "\u0697\u068d\u0003\u0002\u0002\u0002\u0697\u0691\u0003\u0002\u0002\u0002",
    "\u0698\u0099\u0003\u0002\u0002\u0002\u0699\u069b\u0005\u0272\u013a\u0002",
    "\u069a\u0699\u0003\u0002\u0002\u0002\u069b\u069e\u0003\u0002\u0002\u0002",
    "\u069c\u069a\u0003\u0002\u0002\u0002\u069c\u069d\u0003\u0002\u0002\u0002",
    "\u069d\u069f\u0003\u0002\u0002\u0002\u069e\u069c\u0003\u0002\u0002\u0002",
    "\u069f\u06aa\u0005\u00a6T\u0002\u06a0\u06a4\u0007\"\u0002\u0002\u06a1",
    "\u06a3\u0005\u0272\u013a\u0002\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a3",
    "\u06a6\u0003\u0002\u0002\u0002\u06a4\u06a2\u0003\u0002\u0002\u0002\u06a4",
    "\u06a5\u0003\u0002\u0002\u0002\u06a5\u06a7\u0003\u0002\u0002\u0002\u06a6",
    "\u06a4\u0003\u0002\u0002\u0002\u06a7\u06a9\u0005\u00a6T\u0002\u06a8",
    "\u06a0\u0003\u0002\u0002\u0002\u06a9\u06ac\u0003\u0002\u0002\u0002\u06aa",
    "\u06a8\u0003\u0002\u0002\u0002\u06aa\u06ab\u0003\u0002\u0002\u0002\u06ab",
    "\u009b\u0003\u0002\u0002\u0002\u06ac\u06aa\u0003\u0002\u0002\u0002\u06ad",
    "\u06af\u0007\u009a\u0002\u0002\u06ae\u06ad\u0003\u0002\u0002\u0002\u06ae",
    "\u06af\u0003\u0002\u0002\u0002\u06af\u06b1\u0003\u0002\u0002\u0002\u06b0",
    "\u06b2\u0005\u0094K\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002\u06b1",
    "\u06b2\u0003\u0002\u0002\u0002\u06b2\u06b8\u0003\u0002\u0002\u0002\u06b3",
    "\u06b8\u0007o\u0002\u0002\u06b4\u06b8\u0007\u008e\u0002\u0002\u06b5",
    "\u06b8\u0007\u008f\u0002\u0002\u06b6\u06b8\u0007\u00a4\u0002\u0002\u06b7",
    "\u06ae\u0003\u0002\u0002\u0002\u06b7\u06b3\u0003\u0002\u0002\u0002\u06b7",
    "\u06b4\u0003\u0002\u0002\u0002\u06b7\u06b5\u0003\u0002\u0002\u0002\u06b7",
    "\u06b6\u0003\u0002\u0002\u0002\u06b8\u009d\u0003\u0002\u0002\u0002\u06b9",
    "\u06bb\u0007\u00a3\u0002\u0002\u06ba\u06bc\u0007B\u0002\u0002\u06bb",
    "\u06ba\u0003\u0002\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc",
    "\u06bd\u0003\u0002\u0002\u0002\u06bd\u06be\u0005\u02bc\u015f\u0002\u06be",
    "\u06c2\u0007+\u0002\u0002\u06bf\u06c1\u0005\u00a0Q\u0002\u06c0\u06bf",
    "\u0003\u0002\u0002\u0002\u06c1\u06c4\u0003\u0002\u0002\u0002\u06c2\u06c0",
    "\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c5",
    "\u0003\u0002\u0002\u0002\u06c4\u06c2\u0003\u0002\u0002\u0002\u06c5\u06c6",
    "\u0005\u0166\u00b4\u0002\u06c6\u06c7\u0007]\u0002\u0002\u06c7\u06dd",
    "\u0003\u0002\u0002\u0002\u06c8\u06ca\u0007\u00a3\u0002\u0002\u06c9\u06cb",
    "\u0007B\u0002\u0002\u06ca\u06c9\u0003\u0002\u0002\u0002\u06ca\u06cb",
    "\u0003\u0002\u0002\u0002\u06cb\u06cc\u0003\u0002\u0002\u0002\u06cc\u06cd",
    "\u0005\u02bc\u015f\u0002\u06cd\u06cf\u0007\u001a\u0002\u0002\u06ce\u06d0",
    "\u0005\u00a2R\u0002\u06cf\u06ce\u0003\u0002\u0002\u0002\u06cf\u06d0",
    "\u0003\u0002\u0002\u0002\u06d0\u06d1\u0003\u0002\u0002\u0002\u06d1\u06d2",
    "\u0007\u001b\u0002\u0002\u06d2\u06d6\u0007+\u0002\u0002\u06d3\u06d5",
    "\u0005\u00aeX\u0002\u06d4\u06d3\u0003\u0002\u0002\u0002\u06d5\u06d8",
    "\u0003\u0002\u0002\u0002\u06d6\u06d4\u0003\u0002\u0002\u0002\u06d6\u06d7",
    "\u0003\u0002\u0002\u0002\u06d7\u06d9\u0003\u0002\u0002\u0002\u06d8\u06d6",
    "\u0003\u0002\u0002\u0002\u06d9\u06da\u0005\u0166\u00b4\u0002\u06da\u06db",
    "\u0007]\u0002\u0002\u06db\u06dd\u0003\u0002\u0002\u0002\u06dc\u06b9",
    "\u0003\u0002\u0002\u0002\u06dc\u06c8\u0003\u0002\u0002\u0002\u06dd\u009f",
    "\u0003\u0002\u0002\u0002\u06de\u06fb\u0005\u00aeX\u0002\u06df\u06e1",
    "\u0005\u0272\u013a\u0002\u06e0\u06df\u0003\u0002\u0002\u0002\u06e1\u06e4",
    "\u0003\u0002\u0002\u0002\u06e2\u06e0\u0003\u0002\u0002\u0002\u06e2\u06e3",
    "\u0003\u0002\u0002\u0002\u06e3\u06e5\u0003\u0002\u0002\u0002\u06e4\u06e2",
    "\u0003\u0002\u0002\u0002\u06e5\u06e6\u0005\u00a6T\u0002\u06e6\u06e7",
    "\u0007+\u0002\u0002\u06e7\u06fb\u0003\u0002\u0002\u0002\u06e8\u06ea",
    "\u0005\u0272\u013a\u0002\u06e9\u06e8\u0003\u0002\u0002\u0002\u06ea\u06ed",
    "\u0003\u0002\u0002\u0002\u06eb\u06e9\u0003\u0002\u0002\u0002\u06eb\u06ec",
    "\u0003\u0002\u0002\u0002\u06ec\u06ee\u0003\u0002\u0002\u0002\u06ed\u06eb",
    "\u0003\u0002\u0002\u0002\u06ee\u06ef\u0005\u00a8U\u0002\u06ef\u06f0",
    "\u0007+\u0002\u0002\u06f0\u06fb\u0003\u0002\u0002\u0002\u06f1\u06f3",
    "\u0005\u0272\u013a\u0002\u06f2\u06f1\u0003\u0002\u0002\u0002\u06f3\u06f6",
    "\u0003\u0002\u0002\u0002\u06f4\u06f2\u0003\u0002\u0002\u0002\u06f4\u06f5",
    "\u0003\u0002\u0002\u0002\u06f5\u06f7\u0003\u0002\u0002\u0002\u06f6\u06f4",
    "\u0003\u0002\u0002\u0002\u06f7\u06f8\u0005\u00aaV\u0002\u06f8\u06f9",
    "\u0007+\u0002\u0002\u06f9\u06fb\u0003\u0002\u0002\u0002\u06fa\u06de",
    "\u0003\u0002\u0002\u0002\u06fa\u06e2\u0003\u0002\u0002\u0002\u06fa\u06eb",
    "\u0003\u0002\u0002\u0002\u06fa\u06f4\u0003\u0002\u0002\u0002\u06fb\u00a1",
    "\u0003\u0002\u0002\u0002\u06fc\u0701\u0005\u00a4S\u0002\u06fd\u06fe",
    "\u0007\"\u0002\u0002\u06fe\u0700\u0005\u00a4S\u0002\u06ff\u06fd\u0003",
    "\u0002\u0002\u0002\u0700\u0703\u0003\u0002\u0002\u0002\u0701\u06ff\u0003",
    "\u0002\u0002\u0002\u0701\u0702\u0003\u0002\u0002\u0002\u0702\u00a3\u0003",
    "\u0002\u0002\u0002\u0703\u0701\u0003\u0002\u0002\u0002\u0704\u0706\u0005",
    "\u0272\u013a\u0002\u0705\u0704\u0003\u0002\u0002\u0002\u0706\u0709\u0003",
    "\u0002\u0002\u0002\u0707\u0705\u0003\u0002\u0002\u0002\u0707\u0708\u0003",
    "\u0002\u0002\u0002\u0708\u070a\u0003\u0002\u0002\u0002\u0709\u0707\u0003",
    "\u0002\u0002\u0002\u070a\u071a\u0005\u00a6T\u0002\u070b\u070d\u0005",
    "\u0272\u013a\u0002\u070c\u070b\u0003\u0002\u0002\u0002\u070d\u0710\u0003",
    "\u0002\u0002\u0002\u070e\u070c\u0003\u0002\u0002\u0002\u070e\u070f\u0003",
    "\u0002\u0002\u0002\u070f\u0711\u0003\u0002\u0002\u0002\u0710\u070e\u0003",
    "\u0002\u0002\u0002\u0711\u071a\u0005\u00a8U\u0002\u0712\u0714\u0005",
    "\u0272\u013a\u0002\u0713\u0712\u0003\u0002\u0002\u0002\u0714\u0717\u0003",
    "\u0002\u0002\u0002\u0715\u0713\u0003\u0002\u0002\u0002\u0715\u0716\u0003",
    "\u0002\u0002\u0002\u0716\u0718\u0003\u0002\u0002\u0002\u0717\u0715\u0003",
    "\u0002\u0002\u0002\u0718\u071a\u0005\u00aaV\u0002\u0719\u0707\u0003",
    "\u0002\u0002\u0002\u0719\u070e\u0003\u0002\u0002\u0002\u0719\u0715\u0003",
    "\u0002\u0002\u0002\u071a\u00a5\u0003\u0002\u0002\u0002\u071b\u071d\u0007",
    "m\u0002\u0002\u071c\u071e\u0007\u0090\u0002\u0002\u071d\u071c\u0003",
    "\u0002\u0002\u0002\u071d\u071e\u0003\u0002\u0002\u0002\u071e\u0720\u0003",
    "\u0002\u0002\u0002\u071f\u0721\u0007\u009a\u0002\u0002\u0720\u071f\u0003",
    "\u0002\u0002\u0002\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0723\u0003",
    "\u0002\u0002\u0002\u0722\u0724\u0005\u0094K\u0002\u0723\u0722\u0003",
    "\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724\u0725\u0003",
    "\u0002\u0002\u0002\u0725\u072b\u0005x=\u0002\u0726\u0727\u0007m\u0002",
    "\u0002\u0727\u0728\u0005\u00acW\u0002\u0728\u0729\u0005x=\u0002\u0729",
    "\u072b\u0003\u0002\u0002\u0002\u072a\u071b\u0003\u0002\u0002\u0002\u072a",
    "\u0726\u0003\u0002\u0002\u0002\u072b\u00a7\u0003\u0002\u0002\u0002\u072c",
    "\u072e\u0007\u0082\u0002\u0002\u072d\u072f\u0007\u0090\u0002\u0002\u072e",
    "\u072d\u0003\u0002\u0002\u0002\u072e\u072f\u0003\u0002\u0002\u0002\u072f",
    "\u0731\u0003\u0002\u0002\u0002\u0730\u0732\u0007\u009a\u0002\u0002\u0731",
    "\u0730\u0003\u0002\u0002\u0002\u0731\u0732\u0003\u0002\u0002\u0002\u0732",
    "\u0734\u0003\u0002\u0002\u0002\u0733\u0735\u0005\u0094K\u0002\u0734",
    "\u0733\u0003\u0002\u0002\u0002\u0734\u0735\u0003\u0002\u0002\u0002\u0735",
    "\u0736\u0003\u0002\u0002\u0002\u0736\u073c\u0005x=\u0002\u0737\u0738",
    "\u0007\u0082\u0002\u0002\u0738\u0739\u0005\u00acW\u0002\u0739\u073a",
    "\u0005x=\u0002\u073a\u073c\u0003\u0002\u0002\u0002\u073b\u072c\u0003",
    "\u0002\u0002\u0002\u073b\u0737\u0003\u0002\u0002\u0002\u073c\u00a9\u0003",
    "\u0002\u0002\u0002\u073d\u073f\u0007l\u0002\u0002\u073e\u0740\u0007",
    "\u0090\u0002\u0002\u073f\u073e\u0003\u0002\u0002\u0002\u073f\u0740\u0003",
    "\u0002\u0002\u0002\u0740\u0742\u0003\u0002\u0002\u0002\u0741\u0743\u0007",
    "\u009a\u0002\u0002\u0742\u0741\u0003\u0002\u0002\u0002\u0742\u0743\u0003",
    "\u0002\u0002\u0002\u0743\u0745\u0003\u0002\u0002\u0002\u0744\u0746\u0005",
    "\u0094K\u0002\u0745\u0744\u0003\u0002\u0002\u0002\u0745\u0746\u0003",
    "\u0002\u0002\u0002\u0746\u0747\u0003\u0002\u0002\u0002\u0747\u074d\u0005",
    "x=\u0002\u0748\u0749\u0007l\u0002\u0002\u0749\u074a\u0005\u00acW\u0002",
    "\u074a\u074b\u0005x=\u0002\u074b\u074d\u0003\u0002\u0002\u0002\u074c",
    "\u073d\u0003\u0002\u0002\u0002\u074c\u0748\u0003\u0002\u0002\u0002\u074d",
    "\u00ab\u0003\u0002\u0002\u0002\u074e\u074f\t\u0003\u0002\u0002\u074f",
    "\u00ad\u0003\u0002\u0002\u0002\u0750\u0752\u0005\u0272\u013a\u0002\u0751",
    "\u0750\u0003\u0002\u0002\u0002\u0752\u0755\u0003\u0002\u0002\u0002\u0753",
    "\u0751\u0003\u0002\u0002\u0002\u0753\u0754\u0003\u0002\u0002\u0002\u0754",
    "\u0756\u0003\u0002\u0002\u0002\u0755\u0753\u0003\u0002\u0002\u0002\u0756",
    "\u0758\u0007\u0090\u0002\u0002\u0757\u0759\u0007\u009a\u0002\u0002\u0758",
    "\u0757\u0003\u0002\u0002\u0002\u0758\u0759\u0003\u0002\u0002\u0002\u0759",
    "\u075b\u0003\u0002\u0002\u0002\u075a\u075c\u0005\u0094K\u0002\u075b",
    "\u075a\u0003\u0002\u0002\u0002\u075b\u075c\u0003\u0002\u0002\u0002\u075c",
    "\u075d\u0003\u0002\u0002\u0002\u075d\u075e\u0005\u00b0Y\u0002\u075e",
    "\u075f\u0007+\u0002\u0002\u075f\u07a2\u0003\u0002\u0002\u0002\u0760",
    "\u0762\u0005\u0272\u013a\u0002\u0761\u0760\u0003\u0002\u0002\u0002\u0762",
    "\u0765\u0003\u0002\u0002\u0002\u0763\u0761\u0003\u0002\u0002\u0002\u0763",
    "\u0764\u0003\u0002\u0002\u0002\u0764\u0766\u0003\u0002\u0002\u0002\u0765",
    "\u0763\u0003\u0002\u0002\u0002\u0766\u0767\u0007o\u0002\u0002\u0767",
    "\u0768\u0005\u00b0Y\u0002\u0768\u0769\u0007+\u0002\u0002\u0769\u07a2",
    "\u0003\u0002\u0002\u0002\u076a\u076c\u0005\u0272\u013a\u0002\u076b\u076a",
    "\u0003\u0002\u0002\u0002\u076c\u076f\u0003\u0002\u0002\u0002\u076d\u076b",
    "\u0003\u0002\u0002\u0002\u076d\u076e\u0003\u0002\u0002\u0002\u076e\u0770",
    "\u0003\u0002\u0002\u0002\u076f\u076d\u0003\u0002\u0002\u0002\u0770\u0771",
    "\u0007\u00a4\u0002\u0002\u0771\u0772\u0005\u00b0Y\u0002\u0772\u0773",
    "\u0007+\u0002\u0002\u0773\u07a2\u0003\u0002\u0002\u0002\u0774\u0776",
    "\u0005\u0272\u013a\u0002\u0775\u0774\u0003\u0002\u0002\u0002\u0776\u0779",
    "\u0003\u0002\u0002\u0002\u0777\u0775\u0003\u0002\u0002\u0002\u0777\u0778",
    "\u0003\u0002\u0002\u0002\u0778\u077a\u0003\u0002\u0002\u0002\u0779\u0777",
    "\u0003\u0002\u0002\u0002\u077a\u077b\u0007\u008e\u0002\u0002\u077b\u077c",
    "\u0005\u00b2Z\u0002\u077c\u077d\u0007+\u0002\u0002\u077d\u07a2\u0003",
    "\u0002\u0002\u0002\u077e\u0780\u0005\u0272\u013a\u0002\u077f\u077e\u0003",
    "\u0002\u0002\u0002\u0780\u0783\u0003\u0002\u0002\u0002\u0781\u077f\u0003",
    "\u0002\u0002\u0002\u0781\u0782\u0003\u0002\u0002\u0002\u0782\u0784\u0003",
    "\u0002\u0002\u0002\u0783\u0781\u0003\u0002\u0002\u0002\u0784\u0785\u0007",
    "\u008f\u0002\u0002\u0785\u0786\u0005\u00b2Z\u0002\u0786\u0787\u0007",
    "+\u0002\u0002\u0787\u07a2\u0003\u0002\u0002\u0002\u0788\u078a\u0005",
    "\u0272\u013a\u0002\u0789\u0788\u0003\u0002\u0002\u0002\u078a\u078d\u0003",
    "\u0002\u0002\u0002\u078b\u0789\u0003\u0002\u0002\u0002\u078b\u078c\u0003",
    "\u0002\u0002\u0002\u078c\u078e\u0003\u0002\u0002\u0002\u078d\u078b\u0003",
    "\u0002\u0002\u0002\u078e\u07a2\u0005J&\u0002\u078f\u0791\u0005\u0272",
    "\u013a\u0002\u0790\u078f\u0003\u0002\u0002\u0002\u0791\u0794\u0003\u0002",
    "\u0002\u0002\u0792\u0790\u0003\u0002\u0002\u0002\u0792\u0793\u0003\u0002",
    "\u0002\u0002\u0793\u0795\u0003\u0002\u0002\u0002\u0794\u0792\u0003\u0002",
    "\u0002\u0002\u0795\u0796\u0005<\u001f\u0002\u0796\u0797\u0007+\u0002",
    "\u0002\u0797\u07a2\u0003\u0002\u0002\u0002\u0798\u079a\u0005\u0272\u013a",
    "\u0002\u0799\u0798\u0003\u0002\u0002\u0002\u079a\u079d\u0003\u0002\u0002",
    "\u0002\u079b\u0799\u0003\u0002\u0002\u0002\u079b\u079c\u0003\u0002\u0002",
    "\u0002\u079c\u079e\u0003\u0002\u0002\u0002\u079d\u079b\u0003\u0002\u0002",
    "\u0002\u079e\u079f\u0005> \u0002\u079f\u07a0\u0007+\u0002\u0002\u07a0",
    "\u07a2\u0003\u0002\u0002\u0002\u07a1\u0753\u0003\u0002\u0002\u0002\u07a1",
    "\u0763\u0003\u0002\u0002\u0002\u07a1\u076d\u0003\u0002\u0002\u0002\u07a1",
    "\u0777\u0003\u0002\u0002\u0002\u07a1\u0781\u0003\u0002\u0002\u0002\u07a1",
    "\u078b\u0003\u0002\u0002\u0002\u07a1\u0792\u0003\u0002\u0002\u0002\u07a1",
    "\u079b\u0003\u0002\u0002\u0002\u07a2\u00af\u0003\u0002\u0002\u0002\u07a3",
    "\u07a8\u0005\u00b4[\u0002\u07a4\u07a5\u0007\"\u0002\u0002\u07a5\u07a7",
    "\u0005\u00b4[\u0002\u07a6\u07a4\u0003\u0002\u0002\u0002\u07a7\u07aa",
    "\u0003\u0002\u0002\u0002\u07a8\u07a6\u0003\u0002\u0002\u0002\u07a8\u07a9",
    "\u0003\u0002\u0002\u0002\u07a9\u00b1\u0003\u0002\u0002\u0002\u07aa\u07a8",
    "\u0003\u0002\u0002\u0002\u07ab\u07b0\u0005\u00b6\\\u0002\u07ac\u07ad",
    "\u0007\"\u0002\u0002\u07ad\u07af\u0005\u00b6\\\u0002\u07ae\u07ac\u0003",
    "\u0002\u0002\u0002\u07af\u07b2\u0003\u0002\u0002\u0002\u07b0\u07ae\u0003",
    "\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002\u07b1\u00b3\u0003",
    "\u0002\u0002\u0002\u07b2\u07b0\u0003\u0002\u0002\u0002\u07b3\u07b7\u0005",
    "\u02c8\u0165\u0002\u07b4\u07b6\u0005\u0092J\u0002\u07b5\u07b4\u0003",
    "\u0002\u0002\u0002\u07b6\u07b9\u0003\u0002\u0002\u0002\u07b7\u07b5\u0003",
    "\u0002\u0002\u0002\u07b7\u07b8\u0003\u0002\u0002\u0002\u07b8\u00b5\u0003",
    "\u0002\u0002\u0002\u07b9\u07b7\u0003\u0002\u0002\u0002\u07ba\u07be\u0005",
    "\u02b2\u015a\u0002\u07bb\u07bd\u0005\u0092J\u0002\u07bc\u07bb\u0003",
    "\u0002\u0002\u0002\u07bd\u07c0\u0003\u0002\u0002\u0002\u07be\u07bc\u0003",
    "\u0002\u0002\u0002\u07be\u07bf\u0003\u0002\u0002\u0002\u07bf\u00b7\u0003",
    "\u0002\u0002\u0002\u07c0\u07be\u0003\u0002\u0002\u0002\u07c1\u07c3\u0005",
    "\u00dco\u0002\u07c2\u07c4\u0005h5\u0002\u07c3\u07c2\u0003\u0002\u0002",
    "\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002",
    "\u0002\u07c5\u07ca\u0005\u00ba^\u0002\u07c6\u07c7\u0007\"\u0002\u0002",
    "\u07c7\u07c9\u0005\u00ba^\u0002\u07c8\u07c6\u0003\u0002\u0002\u0002",
    "\u07c9\u07cc\u0003\u0002\u0002\u0002\u07ca\u07c8\u0003\u0002\u0002\u0002",
    "\u07ca\u07cb\u0003\u0002\u0002\u0002\u07cb\u07cd\u0003\u0002\u0002\u0002",
    "\u07cc\u07ca\u0003\u0002\u0002\u0002\u07cd\u07ce\u0007+\u0002\u0002",
    "\u07ce\u0846\u0003\u0002\u0002\u0002\u07cf\u07d1\u0005\u00dep\u0002",
    "\u07d0\u07d2\u0005`1\u0002\u07d1\u07d0\u0003\u0002\u0002\u0002\u07d1",
    "\u07d2\u0003\u0002\u0002\u0002\u07d2\u07d4\u0003\u0002\u0002\u0002\u07d3",
    "\u07d5\u0005h5\u0002\u07d4\u07d3\u0003\u0002\u0002\u0002\u07d4\u07d5",
    "\u0003\u0002\u0002\u0002\u07d5\u07d6\u0003\u0002\u0002\u0002\u07d6\u07db",
    "\u0005\u00bc_\u0002\u07d7\u07d8\u0007\"\u0002\u0002\u07d8\u07da\u0005",
    "\u00bc_\u0002\u07d9\u07d7\u0003\u0002\u0002\u0002\u07da\u07dd\u0003",
    "\u0002\u0002\u0002\u07db\u07d9\u0003\u0002\u0002\u0002\u07db\u07dc\u0003",
    "\u0002\u0002\u0002\u07dc\u07de\u0003\u0002\u0002\u0002\u07dd\u07db\u0003",
    "\u0002\u0002\u0002\u07de\u07df\u0007+\u0002\u0002\u07df\u0846\u0003",
    "\u0002\u0002\u0002\u07e0\u07e2\u0005\u00e0q\u0002\u07e1\u07e3\u0005",
    "h5\u0002\u07e2\u07e1\u0003\u0002\u0002\u0002\u07e2\u07e3\u0003\u0002",
    "\u0002\u0002\u07e3\u07e4\u0003\u0002\u0002\u0002\u07e4\u07e9\u0005\u00be",
    "`\u0002\u07e5\u07e6\u0007\"\u0002\u0002\u07e6\u07e8\u0005\u00be`\u0002",
    "\u07e7\u07e5\u0003\u0002\u0002\u0002\u07e8\u07eb\u0003\u0002\u0002\u0002",
    "\u07e9\u07e7\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002",
    "\u07ea\u07ec\u0003\u0002\u0002\u0002\u07eb\u07e9\u0003\u0002\u0002\u0002",
    "\u07ec\u07ed\u0007+\u0002\u0002\u07ed\u0846\u0003\u0002\u0002\u0002",
    "\u07ee\u07f0\u0005\u00e2r\u0002\u07ef\u07f1\u0005`1\u0002\u07f0\u07ef",
    "\u0003\u0002\u0002\u0002\u07f0\u07f1\u0003\u0002\u0002\u0002\u07f1\u07f3",
    "\u0003\u0002\u0002\u0002\u07f2\u07f4\u0005j6\u0002\u07f3\u07f2\u0003",
    "\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003",
    "\u0002\u0002\u0002\u07f5\u07fa\u0005\u00c0a\u0002\u07f6\u07f7\u0007",
    "\"\u0002\u0002\u07f7\u07f9\u0005\u00c0a\u0002\u07f8\u07f6\u0003\u0002",
    "\u0002\u0002\u07f9\u07fc\u0003\u0002\u0002\u0002\u07fa\u07f8\u0003\u0002",
    "\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002\u0002\u07fb\u07fd\u0003\u0002",
    "\u0002\u0002\u07fc\u07fa\u0003\u0002\u0002\u0002\u07fd\u07fe\u0007+",
    "\u0002\u0002\u07fe\u0846\u0003\u0002\u0002\u0002\u07ff\u0801\u0005\u00e4",
    "s\u0002\u0800\u0802\u0005`1\u0002\u0801\u0800\u0003\u0002\u0002\u0002",
    "\u0801\u0802\u0003\u0002\u0002\u0002\u0802\u0804\u0003\u0002\u0002\u0002",
    "\u0803\u0805\u0005j6\u0002\u0804\u0803\u0003\u0002\u0002\u0002\u0804",
    "\u0805\u0003\u0002\u0002\u0002\u0805\u0806\u0003\u0002\u0002\u0002\u0806",
    "\u080b\u0005\u00c2b\u0002\u0807\u0808\u0007\"\u0002\u0002\u0808\u080a",
    "\u0005\u00c2b\u0002\u0809\u0807\u0003\u0002\u0002\u0002\u080a\u080d",
    "\u0003\u0002\u0002\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080b\u080c",
    "\u0003\u0002\u0002\u0002\u080c\u080e\u0003\u0002\u0002\u0002\u080d\u080b",
    "\u0003\u0002\u0002\u0002\u080e\u080f\u0007+\u0002\u0002\u080f\u0846",
    "\u0003\u0002\u0002\u0002\u0810\u0812\u0005\u00e6t\u0002\u0811\u0813",
    "\u0005j6\u0002\u0812\u0811\u0003\u0002\u0002\u0002\u0812\u0813\u0003",
    "\u0002\u0002\u0002\u0813\u0814\u0003\u0002\u0002\u0002\u0814\u0819\u0005",
    "\u00c6d\u0002\u0815\u0816\u0007\"\u0002\u0002\u0816\u0818\u0005\u00c6",
    "d\u0002\u0817\u0815\u0003\u0002\u0002\u0002\u0818\u081b\u0003\u0002",
    "\u0002\u0002\u0819\u0817\u0003\u0002\u0002\u0002\u0819\u081a\u0003\u0002",
    "\u0002\u0002\u081a\u081c\u0003\u0002\u0002\u0002\u081b\u0819\u0003\u0002",
    "\u0002\u0002\u081c\u081d\u0007+\u0002\u0002\u081d\u0846\u0003\u0002",
    "\u0002\u0002\u081e\u081f\u0005\u00e8u\u0002\u081f\u0824\u0005\u00c4",
    "c\u0002\u0820\u0821\u0007\"\u0002\u0002\u0821\u0823\u0005\u00c4c\u0002",
    "\u0822\u0820\u0003\u0002\u0002\u0002\u0823\u0826\u0003\u0002\u0002\u0002",
    "\u0824\u0822\u0003\u0002\u0002\u0002\u0824\u0825\u0003\u0002\u0002\u0002",
    "\u0825\u0827\u0003\u0002\u0002\u0002\u0826\u0824\u0003\u0002\u0002\u0002",
    "\u0827\u0828\u0007+\u0002\u0002\u0828\u0846\u0003\u0002\u0002\u0002",
    "\u0829\u082b\u0007\u0089\u0002\u0002\u082a\u082c\u0005\u00ccg\u0002",
    "\u082b\u082a\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002",
    "\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u0832\u0005\u00c8e\u0002",
    "\u082e\u082f\u0007\"\u0002\u0002\u082f\u0831\u0005\u00c8e\u0002\u0830",
    "\u082e\u0003\u0002\u0002\u0002\u0831\u0834\u0003\u0002\u0002\u0002\u0832",
    "\u0830\u0003\u0002\u0002\u0002\u0832\u0833\u0003\u0002\u0002\u0002\u0833",
    "\u0835\u0003\u0002\u0002\u0002\u0834\u0832\u0003\u0002\u0002\u0002\u0835",
    "\u0836\u0007+\u0002\u0002\u0836\u0846\u0003\u0002\u0002\u0002\u0837",
    "\u0839\u0007\u008a\u0002\u0002\u0838\u083a\u0005\u00ceh\u0002\u0839",
    "\u0838\u0003\u0002\u0002\u0002\u0839\u083a\u0003\u0002\u0002\u0002\u083a",
    "\u083b\u0003\u0002\u0002\u0002\u083b\u0840\u0005\u00c8e\u0002\u083c",
    "\u083d\u0007\"\u0002\u0002\u083d\u083f\u0005\u00c8e\u0002\u083e\u083c",
    "\u0003\u0002\u0002\u0002\u083f\u0842\u0003\u0002\u0002\u0002\u0840\u083e",
    "\u0003\u0002\u0002\u0002\u0840\u0841\u0003\u0002\u0002\u0002\u0841\u0843",
    "\u0003\u0002\u0002\u0002\u0842\u0840\u0003\u0002\u0002\u0002\u0843\u0844",
    "\u0007+\u0002\u0002\u0844\u0846\u0003\u0002\u0002\u0002\u0845\u07c1",
    "\u0003\u0002\u0002\u0002\u0845\u07cf\u0003\u0002\u0002\u0002\u0845\u07e0",
    "\u0003\u0002\u0002\u0002\u0845\u07ee\u0003\u0002\u0002\u0002\u0845\u07ff",
    "\u0003\u0002\u0002\u0002\u0845\u0810\u0003\u0002\u0002\u0002\u0845\u081e",
    "\u0003\u0002\u0002\u0002\u0845\u0829\u0003\u0002\u0002\u0002\u0845\u0837",
    "\u0003\u0002\u0002\u0002\u0846\u00b9\u0003\u0002\u0002\u0002\u0847\u0849",
    "\u0005\u00caf\u0002\u0848\u0847\u0003\u0002\u0002\u0002\u0848\u0849",
    "\u0003\u0002\u0002\u0002\u0849\u084a\u0003\u0002\u0002\u0002\u084a\u084b",
    "\u0007\u001a\u0002\u0002\u084b\u084c\u0005\u00d8m\u0002\u084c\u084d",
    "\u0007\"\u0002\u0002\u084d\u084e\u0005\u00d4k\u0002\u084e\u084f\u0007",
    "\"\u0002\u0002\u084f\u0850\u0005\u00d6l\u0002\u0850\u0851\u0007\"\u0002",
    "\u0002\u0851\u0852\u0005\u00dan\u0002\u0852\u0853\u0007\u001b\u0002",
    "\u0002\u0853\u00bb\u0003\u0002\u0002\u0002\u0854\u0856\u0005\u00caf",
    "\u0002\u0855\u0854\u0003\u0002\u0002\u0002\u0855\u0856\u0003\u0002\u0002",
    "\u0002\u0856\u0857\u0003\u0002\u0002\u0002\u0857\u0858\u0007\u001a\u0002",
    "\u0002\u0858\u0859\u0005\u00d8m\u0002\u0859\u085a\u0007\"\u0002\u0002",
    "\u085a\u085b\u0005\u00d4k\u0002\u085b\u085c\u0007\"\u0002\u0002\u085c",
    "\u085d\u0005\u00d0i\u0002\u085d\u085e\u0007\u001b\u0002\u0002\u085e",
    "\u00bd\u0003\u0002\u0002\u0002\u085f\u0861\u0005\u00caf\u0002\u0860",
    "\u085f\u0003\u0002\u0002\u0002\u0860\u0861\u0003\u0002\u0002\u0002\u0861",
    "\u0862\u0003\u0002\u0002\u0002\u0862\u0863\u0007\u001a\u0002\u0002\u0863",
    "\u0864\u0005\u00d8m\u0002\u0864\u0865\u0007\"\u0002\u0002\u0865\u0866",
    "\u0005\u00d4k\u0002\u0866\u0867\u0007\"\u0002\u0002\u0867\u0868\u0005",
    "\u00d0i\u0002\u0868\u0869\u0007\u001b\u0002\u0002\u0869\u00bf\u0003",
    "\u0002\u0002\u0002\u086a\u086c\u0005\u00caf\u0002\u086b\u086a\u0003",
    "\u0002\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002\u086c\u086d\u0003",
    "\u0002\u0002\u0002\u086d\u086e\u0007\u001a\u0002\u0002\u086e\u086f\u0005",
    "\u00d8m\u0002\u086f\u0870\u0007\"\u0002\u0002\u0870\u0875\u0005\u00d4",
    "k\u0002\u0871\u0872\u0007\"\u0002\u0002\u0872\u0874\u0005\u00d4k\u0002",
    "\u0873\u0871\u0003\u0002\u0002\u0002\u0874\u0877\u0003\u0002\u0002\u0002",
    "\u0875\u0873\u0003\u0002\u0002\u0002\u0875\u0876\u0003\u0002\u0002\u0002",
    "\u0876\u0878\u0003\u0002\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002",
    "\u0878\u0879\u0007\u001b\u0002\u0002\u0879\u00c1\u0003\u0002\u0002\u0002",
    "\u087a\u087c\u0005\u00caf\u0002\u087b\u087a\u0003\u0002\u0002\u0002",
    "\u087b\u087c\u0003\u0002\u0002\u0002\u087c\u087d\u0003\u0002\u0002\u0002",
    "\u087d\u087e\u0007\u001a\u0002\u0002\u087e\u0883\u0005\u00d8m\u0002",
    "\u087f\u0880\u0007\"\u0002\u0002\u0880\u0882\u0005\u00d8m\u0002\u0881",
    "\u087f\u0003\u0002\u0002\u0002\u0882\u0885\u0003\u0002\u0002\u0002\u0883",
    "\u0881\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002\u0002\u0002\u0884",
    "\u0886\u0003\u0002\u0002\u0002\u0885\u0883\u0003\u0002\u0002\u0002\u0886",
    "\u0887\u0007\"\u0002\u0002\u0887\u0888\u0005\u00d4k\u0002\u0888\u0889",
    "\u0007\u001b\u0002\u0002\u0889\u00c3\u0003\u0002\u0002\u0002\u088a\u088c",
    "\u0005\u00caf\u0002\u088b\u088a\u0003\u0002\u0002\u0002\u088b\u088c",
    "\u0003\u0002\u0002\u0002\u088c\u088d\u0003\u0002\u0002\u0002\u088d\u088e",
    "\u0007\u001a\u0002\u0002\u088e\u088f\u0005\u00d2j\u0002\u088f\u0890",
    "\u0007\"\u0002\u0002\u0890\u0891\u0005\u00d2j\u0002\u0891\u0892\u0007",
    "\u001b\u0002\u0002\u0892\u00c5\u0003\u0002\u0002\u0002\u0893\u0895\u0005",
    "\u00caf\u0002\u0894\u0893\u0003\u0002\u0002\u0002\u0894\u0895\u0003",
    "\u0002\u0002\u0002\u0895\u0896\u0003\u0002\u0002\u0002\u0896\u0897\u0007",
    "\u001a\u0002\u0002\u0897\u0898\u0005\u00d2j\u0002\u0898\u0899\u0007",
    "\"\u0002\u0002\u0899\u089a\u0005\u00d2j\u0002\u089a\u089b\u0007\"\u0002",
    "\u0002\u089b\u089c\u0005\u00d0i\u0002\u089c\u089d\u0007\u001b\u0002",
    "\u0002\u089d\u00c7\u0003\u0002\u0002\u0002\u089e\u08a0\u0005\u00caf",
    "\u0002\u089f\u089e\u0003\u0002\u0002\u0002\u089f\u08a0\u0003\u0002\u0002",
    "\u0002\u08a0\u08a1\u0003\u0002\u0002\u0002\u08a1\u08a2\u0007\u001a\u0002",
    "\u0002\u08a2\u08a3\u0005\u00d8m\u0002\u08a3\u08a4\u0007\u001b\u0002",
    "\u0002\u08a4\u00c9\u0003\u0002\u0002\u0002\u08a5\u08a7\u0005\u0284\u0143",
    "\u0002\u08a6\u08a8\u0005\u0094K\u0002\u08a7\u08a6\u0003\u0002\u0002",
    "\u0002\u08a7\u08a8\u0003\u0002\u0002\u0002\u08a8\u00cb\u0003\u0002\u0002",
    "\u0002\u08a9\u08aa\u0007\u001a\u0002\u0002\u08aa\u08ab\u0005b2\u0002",
    "\u08ab\u08ac\u0007\"\u0002\u0002\u08ac\u08ad\u0005d3\u0002\u08ad\u08ae",
    "\u0007\u001b\u0002\u0002\u08ae\u08ba\u0003\u0002\u0002\u0002\u08af\u08b0",
    "\u0007\u001a\u0002\u0002\u08b0\u08b1\u0005d3\u0002\u08b1\u08b2\u0007",
    "\"\u0002\u0002\u08b2\u08b3\u0005b2\u0002\u08b3\u08b4\u0007\u001b\u0002",
    "\u0002\u08b4\u08ba\u0003\u0002\u0002\u0002\u08b5\u08b6\u0007\u001a\u0002",
    "\u0002\u08b6\u08b7\u0005b2\u0002\u08b7\u08b8\u0007\u001b\u0002\u0002",
    "\u08b8\u08ba\u0003\u0002\u0002\u0002\u08b9\u08a9\u0003\u0002\u0002\u0002",
    "\u08b9\u08af\u0003\u0002\u0002\u0002\u08b9\u08b5\u0003\u0002\u0002\u0002",
    "\u08ba\u00cd\u0003\u0002\u0002\u0002\u08bb\u08bc\u0007\u001a\u0002\u0002",
    "\u08bc\u08bd\u0005b2\u0002\u08bd\u08be\u0007\"\u0002\u0002\u08be\u08bf",
    "\u0005d3\u0002\u08bf\u08c0\u0007\u001b\u0002\u0002\u08c0\u08cc\u0003",
    "\u0002\u0002\u0002\u08c1\u08c2\u0007\u001a\u0002\u0002\u08c2\u08c3\u0005",
    "d3\u0002\u08c3\u08c4\u0007\"\u0002\u0002\u08c4\u08c5\u0005b2\u0002\u08c5",
    "\u08c6\u0007\u001b\u0002\u0002\u08c6\u08cc\u0003\u0002\u0002\u0002\u08c7",
    "\u08c8\u0007\u001a\u0002\u0002\u08c8\u08c9\u0005d3\u0002\u08c9\u08ca",
    "\u0007\u001b\u0002\u0002\u08ca\u08cc\u0003\u0002\u0002\u0002\u08cb\u08bb",
    "\u0003\u0002\u0002\u0002\u08cb\u08c1\u0003\u0002\u0002\u0002\u08cb\u08c7",
    "\u0003\u0002\u0002\u0002\u08cc\u00cf\u0003\u0002\u0002\u0002\u08cd\u08ce",
    "\u0005\u0240\u0121\u0002\u08ce\u00d1\u0003\u0002\u0002\u0002\u08cf\u08d0",
    "\u0005\u0256\u012c\u0002\u08d0\u00d3\u0003\u0002\u0002\u0002\u08d1\u08d2",
    "\u0005\u0240\u0121\u0002\u08d2\u00d5\u0003\u0002\u0002\u0002\u08d3\u08d4",
    "\u0005\u0240\u0121\u0002\u08d4\u00d7\u0003\u0002\u0002\u0002\u08d5\u08d6",
    "\u0005\u0256\u012c\u0002\u08d6\u00d9\u0003\u0002\u0002\u0002\u08d7\u08d8",
    "\u0005\u0240\u0121\u0002\u08d8\u00db\u0003\u0002\u0002\u0002\u08d9\u08da",
    "\t\t\u0002\u0002\u08da\u00dd\u0003\u0002\u0002\u0002\u08db\u08dc\t\n",
    "\u0002\u0002\u08dc\u00df\u0003\u0002\u0002\u0002\u08dd\u08de\t\u000b",
    "\u0002\u0002\u08de\u00e1\u0003\u0002\u0002\u0002\u08df\u08e0\t\f\u0002",
    "\u0002\u08e0\u00e3\u0003\u0002\u0002\u0002\u08e1\u08e2\t\r\u0002\u0002",
    "\u08e2\u00e5\u0003\u0002\u0002\u0002\u08e3\u08e4\t\u000e\u0002\u0002",
    "\u08e4\u00e7\u0003\u0002\u0002\u0002\u08e5\u08e6\t\u000f\u0002\u0002",
    "\u08e6\u00e9\u0003\u0002\u0002\u0002\u08e7\u08e9\u0005\u02a6\u0154\u0002",
    "\u08e8\u08ea\u0005\u00ecw\u0002\u08e9\u08e8\u0003\u0002\u0002\u0002",
    "\u08e9\u08ea\u0003\u0002\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002\u0002",
    "\u08eb\u08f0\u0005\u00f4{\u0002\u08ec\u08ed\u0007\"\u0002\u0002\u08ed",
    "\u08ef\u0005\u00f4{\u0002\u08ee\u08ec\u0003\u0002\u0002\u0002\u08ef",
    "\u08f2\u0003\u0002\u0002\u0002\u08f0\u08ee\u0003\u0002\u0002\u0002\u08f0",
    "\u08f1\u0003\u0002\u0002\u0002\u08f1\u08f3\u0003\u0002\u0002\u0002\u08f2",
    "\u08f0\u0003\u0002\u0002\u0002\u08f3\u08f4\u0007+\u0002\u0002\u08f4",
    "\u00eb\u0003\u0002\u0002\u0002\u08f5\u08f6\u0007\u0007\u0002\u0002\u08f6",
    "\u08f7\u0007\u001a\u0002\u0002\u08f7\u08f8\u0005\u00eex\u0002\u08f8",
    "\u08f9\u0007\u001b\u0002\u0002\u08f9\u00ed\u0003\u0002\u0002\u0002\u08fa",
    "\u08ff\u0005\u00f0y\u0002\u08fb\u08fc\u0007\"\u0002\u0002\u08fc\u08fe",
    "\u0005\u00f0y\u0002\u08fd\u08fb\u0003\u0002\u0002\u0002\u08fe\u0901",
    "\u0003\u0002\u0002\u0002\u08ff\u08fd\u0003\u0002\u0002\u0002\u08ff\u0900",
    "\u0003\u0002\u0002\u0002\u0900\u090b\u0003\u0002\u0002\u0002\u0901\u08ff",
    "\u0003\u0002\u0002\u0002\u0902\u0907\u0005\u00f2z\u0002\u0903\u0904",
    "\u0007\"\u0002\u0002\u0904\u0906\u0005\u00f2z\u0002\u0905\u0903\u0003",
    "\u0002\u0002\u0002\u0906\u0909\u0003\u0002\u0002\u0002\u0907\u0905\u0003",
    "\u0002\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002\u0908\u090b\u0003",
    "\u0002\u0002\u0002\u0909\u0907\u0003\u0002\u0002\u0002\u090a\u08fa\u0003",
    "\u0002\u0002\u0002\u090a\u0902\u0003\u0002\u0002\u0002\u090b\u00ef\u0003",
    "\u0002\u0002\u0002\u090c\u090d\u0005\u0240\u0121\u0002\u090d\u00f1\u0003",
    "\u0002\u0002\u0002\u090e\u090f\u0007&\u0002\u0002\u090f\u0910\u0005",
    "\u02ae\u0158\u0002\u0910\u0912\u0007\u001a\u0002\u0002\u0911\u0913\u0005",
    "\u0244\u0123\u0002\u0912\u0911\u0003\u0002\u0002\u0002\u0912\u0913\u0003",
    "\u0002\u0002\u0002\u0913\u0914\u0003\u0002\u0002\u0002\u0914\u0915\u0007",
    "\u001b\u0002\u0002\u0915\u00f3\u0003\u0002\u0002\u0002\u0916\u0917\u0005",
    "\u00f6|\u0002\u0917\u0918\u0007\u001a\u0002\u0002\u0918\u0919\u0005",
    "\u00f8}\u0002\u0919\u091a\u0007\u001b\u0002\u0002\u091a\u00f5\u0003",
    "\u0002\u0002\u0002\u091b\u091d\u0005\u02a8\u0155\u0002\u091c\u091e\u0005",
    "\u0094K\u0002\u091d\u091c\u0003\u0002\u0002\u0002\u091d\u091e\u0003",
    "\u0002\u0002\u0002\u091e\u00f7\u0003\u0002\u0002\u0002\u091f\u0924\u0005",
    "\u02b0\u0159\u0002\u0920\u0921\u0007\"\u0002\u0002\u0921\u0923\u0005",
    "\u02b0\u0159\u0002\u0922\u0920\u0003\u0002\u0002\u0002\u0923\u0926\u0003",
    "\u0002\u0002\u0002\u0924\u0922\u0003\u0002\u0002\u0002\u0924\u0925\u0003",
    "\u0002\u0002\u0002\u0925\u0938\u0003\u0002\u0002\u0002\u0926\u0924\u0003",
    "\u0002\u0002\u0002\u0927\u092c\u0005\u00fa~\u0002\u0928\u0929\u0007",
    "\"\u0002\u0002\u0929\u092b\u0005\u00fa~\u0002\u092a\u0928\u0003\u0002",
    "\u0002\u0002\u092b\u092e\u0003\u0002\u0002\u0002\u092c\u092a\u0003\u0002",
    "\u0002\u0002\u092c\u092d\u0003\u0002\u0002\u0002\u092d\u0938\u0003\u0002",
    "\u0002\u0002\u092e\u092c\u0003\u0002\u0002\u0002\u092f\u0934\u0005\u00fc",
    "\u007f\u0002\u0930\u0931\u0007\"\u0002\u0002\u0931\u0933\u0005\u00fc",
    "\u007f\u0002\u0932\u0930\u0003\u0002\u0002\u0002\u0933\u0936\u0003\u0002",
    "\u0002\u0002\u0934\u0932\u0003\u0002\u0002\u0002\u0934\u0935\u0003\u0002",
    "\u0002\u0002\u0935\u0938\u0003\u0002\u0002\u0002\u0936\u0934\u0003\u0002",
    "\u0002\u0002\u0937\u091f\u0003\u0002\u0002\u0002\u0937\u0927\u0003\u0002",
    "\u0002\u0002\u0937\u092f\u0003\u0002\u0002\u0002\u0938\u00f9\u0003\u0002",
    "\u0002\u0002\u0939\u093b\u0005\u0272\u013a\u0002\u093a\u0939\u0003\u0002",
    "\u0002\u0002\u093b\u093e\u0003\u0002\u0002\u0002\u093c\u093a\u0003\u0002",
    "\u0002\u0002\u093c\u093d\u0003\u0002\u0002\u0002\u093d\u0940\u0003\u0002",
    "\u0002\u0002\u093e\u093c\u0003\u0002\u0002\u0002\u093f\u0941\u0005\u0240",
    "\u0121\u0002\u0940\u093f\u0003\u0002\u0002\u0002\u0940\u0941\u0003\u0002",
    "\u0002\u0002\u0941\u00fb\u0003\u0002\u0002\u0002\u0942\u0944\u0005\u0272",
    "\u013a\u0002\u0943\u0942\u0003\u0002\u0002\u0002\u0944\u0947\u0003\u0002",
    "\u0002\u0002\u0945\u0943\u0003\u0002\u0002\u0002\u0945\u0946\u0003\u0002",
    "\u0002\u0002\u0946\u0948\u0003\u0002\u0002\u0002\u0947\u0945\u0003\u0002",
    "\u0002\u0002\u0948\u0949\u0007&\u0002\u0002\u0949\u094a\u0005\u02b0",
    "\u0159\u0002\u094a\u094c\u0007\u001a\u0002\u0002\u094b\u094d\u0005\u0240",
    "\u0121\u0002\u094c\u094b\u0003\u0002\u0002\u0002\u094c\u094d\u0003\u0002",
    "\u0002\u0002\u094d\u094e\u0003\u0002\u0002\u0002\u094e\u094f\u0007\u001b",
    "\u0002\u0002\u094f\u00fd\u0003\u0002\u0002\u0002\u0950\u0954\u0007d",
    "\u0002\u0002\u0951\u0953\u0005\"\u0012\u0002\u0952\u0951\u0003\u0002",
    "\u0002\u0002\u0953\u0956\u0003\u0002\u0002\u0002\u0954\u0952\u0003\u0002",
    "\u0002\u0002\u0954\u0955\u0003\u0002\u0002\u0002\u0955\u0957\u0003\u0002",
    "\u0002\u0002\u0956\u0954\u0003\u0002\u0002\u0002\u0957\u0958\u0007X",
    "\u0002\u0002\u0958\u00ff\u0003\u0002\u0002\u0002\u0959\u095a\u0007e",
    "\u0002\u0002\u095a\u095b\u0005\u0102\u0082\u0002\u095b\u095c\u0007+",
    "\u0002\u0002\u095c\u0101\u0003\u0002\u0002\u0002\u095d\u0962\u0005\u0288",
    "\u0145\u0002\u095e\u095f\u0007\"\u0002\u0002\u095f\u0961\u0005\u0288",
    "\u0145\u0002\u0960\u095e\u0003\u0002\u0002\u0002\u0961\u0964\u0003\u0002",
    "\u0002\u0002\u0962\u0960\u0003\u0002\u0002\u0002\u0962\u0963\u0003\u0002",
    "\u0002\u0002\u0963\u0103\u0003\u0002\u0002\u0002\u0964\u0962\u0003\u0002",
    "\u0002\u0002\u0965\u0966\u0007_\u0002\u0002\u0966\u0967\u0007\u001a",
    "\u0002\u0002\u0967\u0968\u0005\u0106\u0084\u0002\u0968\u0969\u0007+",
    "\u0002\u0002\u0969\u096a\u0005\u0108\u0085\u0002\u096a\u096b\u0007+",
    "\u0002\u0002\u096b\u096c\u0005\u010a\u0086\u0002\u096c\u096d\u0007\u001b",
    "\u0002\u0002\u096d\u096e\u0005\u0116\u008c\u0002\u096e\u0105\u0003\u0002",
    "\u0002\u0002\u096f\u0970\u0005\u0288\u0145\u0002\u0970\u0971\u00070",
    "\u0002\u0002\u0971\u0972\u0005\u0238\u011d\u0002\u0972\u0107\u0003\u0002",
    "\u0002\u0002\u0973\u0974\b\u0085\u0001\u0002\u0974\u097f\u0005\u010c",
    "\u0087\u0002\u0975\u0979\u0005\u025a\u012e\u0002\u0976\u0978\u0005\u0272",
    "\u013a\u0002\u0977\u0976\u0003\u0002\u0002\u0002\u0978\u097b\u0003\u0002",
    "\u0002\u0002\u0979\u0977\u0003\u0002\u0002\u0002\u0979\u097a\u0003\u0002",
    "\u0002\u0002\u097a\u097c\u0003\u0002\u0002\u0002\u097b\u0979\u0003\u0002",
    "\u0002\u0002\u097c\u097d\u0005\u010c\u0087\u0002\u097d\u097f\u0003\u0002",
    "\u0002\u0002\u097e\u0973\u0003\u0002\u0002\u0002\u097e\u0975\u0003\u0002",
    "\u0002\u0002\u097f\u0998\u0003\u0002\u0002\u0002\u0980\u0981\f\u0004",
    "\u0002\u0002\u0981\u0985\u0005\u025c\u012f\u0002\u0982\u0984\u0005\u0272",
    "\u013a\u0002\u0983\u0982\u0003\u0002\u0002\u0002\u0984\u0987\u0003\u0002",
    "\u0002\u0002\u0985\u0983\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002",
    "\u0002\u0002\u0986\u0988\u0003\u0002\u0002\u0002\u0987\u0985\u0003\u0002",
    "\u0002\u0002\u0988\u0989\u0005\u0108\u0085\u0005\u0989\u0997\u0003\u0002",
    "\u0002\u0002\u098a\u098b\f\u0003\u0002\u0002\u098b\u098f\u00078\u0002",
    "\u0002\u098c\u098e\u0005\u0272\u013a\u0002\u098d\u098c\u0003\u0002\u0002",
    "\u0002\u098e\u0991\u0003\u0002\u0002\u0002\u098f\u098d\u0003\u0002\u0002",
    "\u0002\u098f\u0990\u0003\u0002\u0002\u0002\u0990\u0992\u0003\u0002\u0002",
    "\u0002\u0991\u098f\u0003\u0002\u0002\u0002\u0992\u0993\u0005\u0108\u0085",
    "\u0002\u0993\u0994\u0007*\u0002\u0002\u0994\u0995\u0005\u0108\u0085",
    "\u0004\u0995\u0997\u0003\u0002\u0002\u0002\u0996\u0980\u0003\u0002\u0002",
    "\u0002\u0996\u098a\u0003\u0002\u0002\u0002\u0997\u099a\u0003\u0002\u0002",
    "\u0002\u0998\u0996\u0003\u0002\u0002\u0002\u0998\u0999\u0003\u0002\u0002",
    "\u0002\u0999\u0109\u0003\u0002\u0002\u0002\u099a\u0998\u0003\u0002\u0002",
    "\u0002\u099b\u099c\u0005\u0288\u0145\u0002\u099c\u099d\u00070\u0002",
    "\u0002\u099d\u099e\u0005\u0108\u0085\u0002\u099e\u010b\u0003\u0002\u0002",
    "\u0002\u099f\u09a2\u0005\u0250\u0129\u0002\u09a0\u09a2\u0005\u0288\u0145",
    "\u0002\u09a1\u099f\u0003\u0002\u0002\u0002\u09a1\u09a0\u0003\u0002\u0002",
    "\u0002\u09a2\u010d\u0003\u0002\u0002\u0002\u09a3\u09a6\u0005\u0110\u0089",
    "\u0002\u09a4\u09a6\u0005\u0112\u008a\u0002\u09a5\u09a3\u0003\u0002\u0002",
    "\u0002\u09a5\u09a4\u0003\u0002\u0002\u0002\u09a6\u010f\u0003\u0002\u0002",
    "\u0002\u09a7\u09a8\u0007h\u0002\u0002\u09a8\u09a9\u0007\u001a\u0002",
    "\u0002\u09a9\u09aa\u0005\u0238\u011d\u0002\u09aa\u09ab\u0007\u001b\u0002",
    "\u0002\u09ab\u09ae\u0005\u0118\u008d\u0002\u09ac\u09ad\u0007S\u0002",
    "\u0002\u09ad\u09af\u0005\u0118\u008d\u0002\u09ae\u09ac\u0003\u0002\u0002",
    "\u0002\u09ae\u09af\u0003\u0002\u0002\u0002\u09af\u0111\u0003\u0002\u0002",
    "\u0002\u09b0\u09b1\u0007G\u0002\u0002\u09b1\u09b2\u0007\u001a\u0002",
    "\u0002\u09b2\u09b3\u0005\u0238\u011d\u0002\u09b3\u09b7\u0007\u001b\u0002",
    "\u0002\u09b4\u09b6\u0005\u0114\u008b\u0002\u09b5\u09b4\u0003\u0002\u0002",
    "\u0002\u09b6\u09b9\u0003\u0002\u0002\u0002\u09b7\u09b5\u0003\u0002\u0002",
    "\u0002\u09b7\u09b8\u0003\u0002\u0002\u0002\u09b8\u09ba\u0003\u0002\u0002",
    "\u0002\u09b9\u09b7\u0003\u0002\u0002\u0002\u09ba\u09bb\u0007U\u0002",
    "\u0002\u09bb\u0113\u0003\u0002\u0002\u0002\u09bc\u09c1\u0005\u0238\u011d",
    "\u0002\u09bd\u09be\u0007\"\u0002\u0002\u09be\u09c0\u0005\u0238\u011d",
    "\u0002\u09bf\u09bd\u0003\u0002\u0002\u0002\u09c0\u09c3\u0003\u0002\u0002",
    "\u0002\u09c1\u09bf\u0003\u0002\u0002\u0002\u09c1\u09c2\u0003\u0002\u0002",
    "\u0002\u09c2\u09c4\u0003\u0002\u0002\u0002\u09c3\u09c1\u0003\u0002\u0002",
    "\u0002\u09c4\u09c5\u0007*\u0002\u0002\u09c5\u09c6\u0005\u0118\u008d",
    "\u0002\u09c6\u09cd\u0003\u0002\u0002\u0002\u09c7\u09c9\u0007N\u0002",
    "\u0002\u09c8\u09ca\u0007*\u0002\u0002\u09c9\u09c8\u0003\u0002\u0002",
    "\u0002\u09c9\u09ca\u0003\u0002\u0002\u0002\u09ca\u09cb\u0003\u0002\u0002",
    "\u0002\u09cb\u09cd\u0005\u0118\u008d\u0002\u09cc\u09bc\u0003\u0002\u0002",
    "\u0002\u09cc\u09c7\u0003\u0002\u0002\u0002\u09cd\u0115\u0003\u0002\u0002",
    "\u0002\u09ce\u09dc\u0005\"\u0012\u0002\u09cf\u09d2\u0007C\u0002\u0002",
    "\u09d0\u09d1\u0007*\u0002\u0002\u09d1\u09d3\u0005\u0286\u0144\u0002",
    "\u09d2\u09d0\u0003\u0002\u0002\u0002\u09d2\u09d3\u0003\u0002\u0002\u0002",
    "\u09d3\u09d7\u0003\u0002\u0002\u0002\u09d4\u09d6\u0005\"\u0012\u0002",
    "\u09d5\u09d4\u0003\u0002\u0002\u0002\u09d6\u09d9\u0003\u0002\u0002\u0002",
    "\u09d7\u09d5\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002",
    "\u09d8\u09da\u0003\u0002\u0002\u0002\u09d9\u09d7\u0003\u0002\u0002\u0002",
    "\u09da\u09dc\u0007T\u0002\u0002\u09db\u09ce\u0003\u0002\u0002\u0002",
    "\u09db\u09cf\u0003\u0002\u0002\u0002\u09dc\u0117\u0003\u0002\u0002\u0002",
    "\u09dd\u09e0\u0005\u0116\u008c\u0002\u09de\u09e0\u0007+\u0002\u0002",
    "\u09df\u09dd\u0003\u0002\u0002\u0002\u09df\u09de\u0003\u0002\u0002\u0002",
    "\u09e0\u0119\u0003\u0002\u0002\u0002\u09e1\u09e3\u0005\u0272\u013a\u0002",
    "\u09e2\u09e1\u0003\u0002\u0002\u0002\u09e3\u09e6\u0003\u0002\u0002\u0002",
    "\u09e4\u09e2\u0003\u0002\u0002\u0002\u09e4\u09e5\u0003\u0002\u0002\u0002",
    "\u09e5\u09e7\u0003\u0002\u0002\u0002\u09e6\u09e4\u0003\u0002\u0002\u0002",
    "\u09e7\u09e8\u0007\u0086\u0002\u0002\u09e8\u09e9\u0005\u02c4\u0163\u0002",
    "\u09e9\u09ea\u0007\u001a\u0002\u0002\u09ea\u09eb\u0005\u011c\u008f\u0002",
    "\u09eb\u09ec\u0007\u001b\u0002\u0002\u09ec\u09f0\u0007+\u0002\u0002",
    "\u09ed\u09ef\u0005\u0120\u0091\u0002\u09ee\u09ed\u0003\u0002\u0002\u0002",
    "\u09ef\u09f2\u0003\u0002\u0002\u0002\u09f0\u09ee\u0003\u0002\u0002\u0002",
    "\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u09f3\u0003\u0002\u0002\u0002",
    "\u09f2\u09f0\u0003\u0002\u0002\u0002\u09f3\u09f4\u0005\u0128\u0095\u0002",
    "\u09f4\u09f5\u0007Z\u0002\u0002\u09f5\u0a06\u0003\u0002\u0002\u0002",
    "\u09f6\u09f8\u0005\u0272\u013a\u0002\u09f7\u09f6\u0003\u0002\u0002\u0002",
    "\u09f8\u09fb\u0003\u0002\u0002\u0002\u09f9\u09f7\u0003\u0002\u0002\u0002",
    "\u09f9\u09fa\u0003\u0002\u0002\u0002\u09fa\u09fc\u0003\u0002\u0002\u0002",
    "\u09fb\u09f9\u0003\u0002\u0002\u0002\u09fc\u09fd\u0007\u0086\u0002\u0002",
    "\u09fd\u09fe\u0005\u02c4\u0163\u0002\u09fe\u09ff\u0007\u001a\u0002\u0002",
    "\u09ff\u0a00\u0005\u011e\u0090\u0002\u0a00\u0a01\u0007\u001b\u0002\u0002",
    "\u0a01\u0a02\u0007+\u0002\u0002\u0a02\u0a03\u0005\u0128\u0095\u0002",
    "\u0a03\u0a04\u0007Z\u0002\u0002\u0a04\u0a06\u0003\u0002\u0002\u0002",
    "\u0a05\u09e4\u0003\u0002\u0002\u0002\u0a05\u09f9\u0003\u0002\u0002\u0002",
    "\u0a06\u011b\u0003\u0002\u0002\u0002\u0a07\u0a08\u0005\u02ac\u0157\u0002",
    "\u0a08\u0a09\u0007\"\u0002\u0002\u0a09\u0a0e\u0005\u02a0\u0151\u0002",
    "\u0a0a\u0a0b\u0007\"\u0002\u0002\u0a0b\u0a0d\u0005\u02a0\u0151\u0002",
    "\u0a0c\u0a0a\u0003\u0002\u0002\u0002\u0a0d\u0a10\u0003\u0002\u0002\u0002",
    "\u0a0e\u0a0c\u0003\u0002\u0002\u0002\u0a0e\u0a0f\u0003\u0002\u0002\u0002",
    "\u0a0f\u011d\u0003\u0002\u0002\u0002\u0a10\u0a0e\u0003\u0002\u0002\u0002",
    "\u0a11\u0a12\u0005\u0122\u0092\u0002\u0a12\u0a13\u0007\"\u0002\u0002",
    "\u0a13\u0a18\u0005\u0124\u0093\u0002\u0a14\u0a15\u0007\"\u0002\u0002",
    "\u0a15\u0a17\u0005\u0124\u0093\u0002\u0a16\u0a14\u0003\u0002\u0002\u0002",
    "\u0a17\u0a1a\u0003\u0002\u0002\u0002\u0a18\u0a16\u0003\u0002\u0002\u0002",
    "\u0a18\u0a19\u0003\u0002\u0002\u0002\u0a19\u011f\u0003\u0002\u0002\u0002",
    "\u0a1a\u0a18\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0005\u0122\u0092\u0002",
    "\u0a1c\u0a1d\u0007+\u0002\u0002\u0a1d\u0a25\u0003\u0002\u0002\u0002",
    "\u0a1e\u0a1f\u0005\u0124\u0093\u0002\u0a1f\u0a20\u0007+\u0002\u0002",
    "\u0a20\u0a25\u0003\u0002\u0002\u0002\u0a21\u0a22\u0005\u0126\u0094\u0002",
    "\u0a22\u0a23\u0007+\u0002\u0002\u0a23\u0a25\u0003\u0002\u0002\u0002",
    "\u0a24\u0a1b\u0003\u0002\u0002\u0002\u0a24\u0a1e\u0003\u0002\u0002\u0002",
    "\u0a24\u0a21\u0003\u0002\u0002\u0002\u0a25\u0121\u0003\u0002\u0002\u0002",
    "\u0a26\u0a28\u0005\u0272\u013a\u0002\u0a27\u0a26\u0003\u0002\u0002\u0002",
    "\u0a28\u0a2b\u0003\u0002\u0002\u0002\u0a29\u0a27\u0003\u0002\u0002\u0002",
    "\u0a29\u0a2a\u0003\u0002\u0002\u0002\u0a2a\u0a2c\u0003\u0002\u0002\u0002",
    "\u0a2b\u0a29\u0003\u0002\u0002\u0002\u0a2c\u0a2d\u0007\u0082\u0002\u0002",
    "\u0a2d\u0a3c\u0005\u02b0\u0159\u0002\u0a2e\u0a30\u0005\u0272\u013a\u0002",
    "\u0a2f\u0a2e\u0003\u0002\u0002\u0002\u0a30\u0a33\u0003\u0002\u0002\u0002",
    "\u0a31\u0a2f\u0003\u0002\u0002\u0002\u0a31\u0a32\u0003\u0002\u0002\u0002",
    "\u0a32\u0a34\u0003\u0002\u0002\u0002\u0a33\u0a31\u0003\u0002\u0002\u0002",
    "\u0a34\u0a35\u0007\u0082\u0002\u0002\u0a35\u0a36\u0007\u0090\u0002\u0002",
    "\u0a36\u0a39\u0005\u02b0\u0159\u0002\u0a37\u0a38\u00070\u0002\u0002",
    "\u0a38\u0a3a\u0005\u0238\u011d\u0002\u0a39\u0a37\u0003\u0002\u0002\u0002",
    "\u0a39\u0a3a\u0003\u0002\u0002\u0002\u0a3a\u0a3c\u0003\u0002\u0002\u0002",
    "\u0a3b\u0a29\u0003\u0002\u0002\u0002\u0a3b\u0a31\u0003\u0002\u0002\u0002",
    "\u0a3c\u0123\u0003\u0002\u0002\u0002\u0a3d\u0a3f\u0005\u0272\u013a\u0002",
    "\u0a3e\u0a3d\u0003\u0002\u0002\u0002\u0a3f\u0a42\u0003\u0002\u0002\u0002",
    "\u0a40\u0a3e\u0003\u0002\u0002\u0002\u0a40\u0a41\u0003\u0002\u0002\u0002",
    "\u0a41\u0a43\u0003\u0002\u0002\u0002\u0a42\u0a40\u0003\u0002\u0002\u0002",
    "\u0a43\u0a44\u0007m\u0002\u0002\u0a44\u0a45\u0005x=\u0002\u0a45\u0125",
    "\u0003\u0002\u0002\u0002\u0a46\u0a48\u0005\u0272\u013a\u0002\u0a47\u0a46",
    "\u0003\u0002\u0002\u0002\u0a48\u0a4b\u0003\u0002\u0002\u0002\u0a49\u0a47",
    "\u0003\u0002\u0002\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002\u0a4a\u0a4c",
    "\u0003\u0002\u0002\u0002\u0a4b\u0a49\u0003\u0002\u0002\u0002\u0a4c\u0a4d",
    "\u0007\u0090\u0002\u0002\u0a4d\u0a4e\u0005\u02c8\u0165\u0002\u0a4e\u0127",
    "\u0003\u0002\u0002\u0002\u0a4f\u0a52\u0005\u012a\u0096\u0002\u0a50\u0a52",
    "\u0005\u012e\u0098\u0002\u0a51\u0a4f\u0003\u0002\u0002\u0002\u0a51\u0a50",
    "\u0003\u0002\u0002\u0002\u0a52\u0129\u0003\u0002\u0002\u0002\u0a53\u0a57",
    "\u0007\u00a2\u0002\u0002\u0a54\u0a56\u0005\u012c\u0097\u0002\u0a55\u0a54",
    "\u0003\u0002\u0002\u0002\u0a56\u0a59\u0003\u0002\u0002\u0002\u0a57\u0a55",
    "\u0003\u0002\u0002\u0002\u0a57\u0a58\u0003\u0002\u0002\u0002\u0a58\u0a5a",
    "\u0003\u0002\u0002\u0002\u0a59\u0a57\u0003\u0002\u0002\u0002\u0a5a\u0a5b",
    "\u0007\\\u0002\u0002\u0a5b\u012b\u0003\u0002\u0002\u0002\u0a5c\u0a5d",
    "\u0005\u0138\u009d\u0002\u0a5d\u0a5e\u0007*\u0002\u0002\u0a5e\u0a5f",
    "\u0005\u0142\u00a2\u0002\u0a5f\u0a60\u0007+\u0002\u0002\u0a60\u012d",
    "\u0003\u0002\u0002\u0002\u0a61\u0a63\u0005\u0130\u0099\u0002\u0a62\u0a61",
    "\u0003\u0002\u0002\u0002\u0a62\u0a63\u0003\u0002\u0002\u0002\u0a63\u0a64",
    "\u0003\u0002\u0002\u0002\u0a64\u0a68\u0007\u00a2\u0002\u0002\u0a65\u0a67",
    "\u0005\u0134\u009b\u0002\u0a66\u0a65\u0003\u0002\u0002\u0002\u0a67\u0a6a",
    "\u0003\u0002\u0002\u0002\u0a68\u0a66\u0003\u0002\u0002\u0002\u0a68\u0a69",
    "\u0003\u0002\u0002\u0002\u0a69\u0a6b\u0003\u0002\u0002\u0002\u0a6a\u0a68",
    "\u0003\u0002\u0002\u0002\u0a6b\u0a6c\u0007\\\u0002\u0002\u0a6c\u012f",
    "\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0007k\u0002\u0002\u0a6e\u0a6f",
    "\u0005\u02ac\u0157\u0002\u0a6f\u0a70\u00070\u0002\u0002\u0a70\u0a71",
    "\u0005\u0132\u009a\u0002\u0a71\u0a72\u0007+\u0002\u0002\u0a72\u0131",
    "\u0003\u0002\u0002\u0002\u0a73\u0a74\t\u0010\u0002\u0002\u0a74\u0133",
    "\u0003\u0002\u0002\u0002\u0a75\u0a76\u0005\u0136\u009c\u0002\u0a76\u0a77",
    "\u0007*\u0002\u0002\u0a77\u0a78\u0005\u013e\u00a0\u0002\u0a78\u0a79",
    "\u0007*\u0002\u0002\u0a79\u0a7a\u0005\u0140\u00a1\u0002\u0a7a\u0a7b",
    "\u0007+\u0002\u0002\u0a7b\u0135\u0003\u0002\u0002\u0002\u0a7c\u0a7f",
    "\u0005\u0138\u009d\u0002\u0a7d\u0a7f\u0005\u013a\u009e\u0002\u0a7e\u0a7c",
    "\u0003\u0002\u0002\u0002\u0a7e\u0a7d\u0003\u0002\u0002\u0002\u0a7f\u0137",
    "\u0003\u0002\u0002\u0002\u0a80\u0a82\u0005\u0144\u00a3\u0002\u0a81\u0a80",
    "\u0003\u0002\u0002\u0002\u0a82\u0a85\u0003\u0002\u0002\u0002\u0a83\u0a81",
    "\u0003\u0002\u0002\u0002\u0a83\u0a84\u0003\u0002\u0002\u0002\u0a84\u0139",
    "\u0003\u0002\u0002\u0002\u0a85\u0a83\u0003\u0002\u0002\u0002\u0a86\u0a88",
    "\u0005\u0144\u00a3\u0002\u0a87\u0a86\u0003\u0002\u0002\u0002\u0a88\u0a8b",
    "\u0003\u0002\u0002\u0002\u0a89\u0a87\u0003\u0002\u0002\u0002\u0a89\u0a8a",
    "\u0003\u0002\u0002\u0002\u0a8a\u0a8c\u0003\u0002\u0002\u0002\u0a8b\u0a89",
    "\u0003\u0002\u0002\u0002\u0a8c\u0a90\u0005\u013c\u009f\u0002\u0a8d\u0a8f",
    "\u0005\u0144\u00a3\u0002\u0a8e\u0a8d\u0003\u0002\u0002\u0002\u0a8f\u0a92",
    "\u0003\u0002\u0002\u0002\u0a90\u0a8e\u0003\u0002\u0002\u0002\u0a90\u0a91",
    "\u0003\u0002\u0002\u0002\u0a91\u013b\u0003\u0002\u0002\u0002\u0a92\u0a90",
    "\u0003\u0002\u0002\u0002\u0a93\u0a94\u0007\u001a\u0002\u0002\u0a94\u0a95",
    "\u0005\u0144\u00a3\u0002\u0a95\u0a96\u0005\u0144\u00a3\u0002\u0a96\u0a97",
    "\u0007\u001b\u0002\u0002\u0a97\u0a9a\u0003\u0002\u0002\u0002\u0a98\u0a9a",
    "\u0005\u0146\u00a4\u0002\u0a99\u0a93\u0003\u0002\u0002\u0002\u0a99\u0a98",
    "\u0003\u0002\u0002\u0002\u0a9a\u013d\u0003\u0002\u0002\u0002\u0a9b\u0a9c",
    "\u0005\u0144\u00a3\u0002\u0a9c\u013f\u0003\u0002\u0002\u0002\u0a9d\u0aa0",
    "\u0005\u0142\u00a2\u0002\u0a9e\u0aa0\u0007#\u0002\u0002\u0a9f\u0a9d",
    "\u0003\u0002\u0002\u0002\u0a9f\u0a9e\u0003\u0002\u0002\u0002\u0aa0\u0141",
    "\u0003\u0002\u0002\u0002\u0aa1\u0aa2\u0007\u00e4\u0002\u0002\u0aa2\u0143",
    "\u0003\u0002\u0002\u0002\u0aa3\u0aa4\t\u0011\u0002\u0002\u0aa4\u0145",
    "\u0003\u0002\u0002\u0002\u0aa5\u0aa6\u0007\u00e6\u0002\u0002\u0aa6\u0147",
    "\u0003\u0002\u0002\u0002\u0aa7\u0aa9\u0005\u02c4\u0163\u0002\u0aa8\u0aaa",
    "\u0005`1\u0002\u0aa9\u0aa8\u0003\u0002\u0002\u0002\u0aa9\u0aaa\u0003",
    "\u0002\u0002\u0002\u0aaa\u0aac\u0003\u0002\u0002\u0002\u0aab\u0aad\u0005",
    "j6\u0002\u0aac\u0aab\u0003\u0002\u0002\u0002\u0aac\u0aad\u0003\u0002",
    "\u0002\u0002\u0aad\u0aae\u0003\u0002\u0002\u0002\u0aae\u0ab3\u0005\u014a",
    "\u00a6\u0002\u0aaf\u0ab0\u0007\"\u0002\u0002\u0ab0\u0ab2\u0005\u014a",
    "\u00a6\u0002\u0ab1\u0aaf\u0003\u0002\u0002\u0002\u0ab2\u0ab5\u0003\u0002",
    "\u0002\u0002\u0ab3\u0ab1\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0003\u0002",
    "\u0002\u0002\u0ab4\u0ab6\u0003\u0002\u0002\u0002\u0ab5\u0ab3\u0003\u0002",
    "\u0002\u0002\u0ab6\u0ab7\u0007+\u0002\u0002\u0ab7\u0149\u0003\u0002",
    "\u0002\u0002\u0ab8\u0aba\u0005\u014c\u00a7\u0002\u0ab9\u0ab8\u0003\u0002",
    "\u0002\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba\u0abb\u0003\u0002",
    "\u0002\u0002\u0abb\u0abc\u0007\u001a\u0002\u0002\u0abc\u0abd\u0005\u00d8",
    "m\u0002\u0abd\u0abe\u0007\"\u0002\u0002\u0abe\u0ac3\u0005\u00d4k\u0002",
    "\u0abf\u0ac0\u0007\"\u0002\u0002\u0ac0\u0ac2\u0005\u00d4k\u0002\u0ac1",
    "\u0abf\u0003\u0002\u0002\u0002\u0ac2\u0ac5\u0003\u0002\u0002\u0002\u0ac3",
    "\u0ac1\u0003\u0002\u0002\u0002\u0ac3\u0ac4\u0003\u0002\u0002\u0002\u0ac4",
    "\u0ac6\u0003\u0002\u0002\u0002\u0ac5\u0ac3\u0003\u0002\u0002\u0002\u0ac6",
    "\u0ac7\u0007\u001b\u0002\u0002\u0ac7\u014b\u0003\u0002\u0002\u0002\u0ac8",
    "\u0aca\u0005\u02c6\u0164\u0002\u0ac9\u0acb\u0005\u0094K\u0002\u0aca",
    "\u0ac9\u0003\u0002\u0002\u0002\u0aca\u0acb\u0003\u0002\u0002\u0002\u0acb",
    "\u014d\u0003\u0002\u0002\u0002\u0acc\u0ace\u0007A\u0002\u0002\u0acd",
    "\u0acf\u0005`1\u0002\u0ace\u0acd\u0003\u0002\u0002\u0002\u0ace\u0acf",
    "\u0003\u0002\u0002\u0002\u0acf\u0ad1\u0003\u0002\u0002\u0002\u0ad0\u0ad2",
    "\u0005h5\u0002\u0ad1\u0ad0\u0003\u0002\u0002\u0002\u0ad1\u0ad2\u0003",
    "\u0002\u0002\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002\u0ad3\u0ad4\u0005",
    "\u0150\u00a9\u0002\u0ad4\u0ad5\u0007+\u0002\u0002\u0ad5\u014f\u0003",
    "\u0002\u0002\u0002\u0ad6\u0adb\u0005\u0152\u00aa\u0002\u0ad7\u0ad8\u0007",
    "\"\u0002\u0002\u0ad8\u0ada\u0005\u0152\u00aa\u0002\u0ad9\u0ad7\u0003",
    "\u0002\u0002\u0002\u0ada\u0add\u0003\u0002\u0002\u0002\u0adb\u0ad9\u0003",
    "\u0002\u0002\u0002\u0adb\u0adc\u0003\u0002\u0002\u0002\u0adc\u0151\u0003",
    "\u0002\u0002\u0002\u0add\u0adb\u0003\u0002\u0002\u0002\u0ade\u0adf\u0005",
    "\u0256\u012c\u0002\u0adf\u0ae0\u00070\u0002\u0002\u0ae0\u0ae1\u0005",
    "\u0240\u0121\u0002\u0ae1\u0153\u0003\u0002\u0002\u0002\u0ae2\u0ae3\u0007",
    "k\u0002\u0002\u0ae3\u0ae4\u0005\u0164\u00b3\u0002\u0ae4\u0155\u0003",
    "\u0002\u0002\u0002\u0ae5\u0ae6\u0007?\u0002\u0002\u0ae6\u0ae7\u0005",
    "\u0164\u00b3\u0002\u0ae7\u0157\u0003\u0002\u0002\u0002\u0ae8\u0ae9\u0005",
    "\u0258\u012d\u0002\u0ae9\u0aeb\u00070\u0002\u0002\u0aea\u0aec\u0005",
    "\u016c\u00b7\u0002\u0aeb\u0aea\u0003\u0002\u0002\u0002\u0aeb\u0aec\u0003",
    "\u0002\u0002\u0002\u0aec\u0aed\u0003\u0002\u0002\u0002\u0aed\u0aee\u0005",
    "\u0240\u0121\u0002\u0aee\u0159\u0003\u0002\u0002\u0002\u0aef\u0af0\u0005",
    "\u0258\u012d\u0002\u0af0\u0af2\u0007/\u0002\u0002\u0af1\u0af3\u0005",
    "\u016c\u00b7\u0002\u0af2\u0af1\u0003\u0002\u0002\u0002\u0af2\u0af3\u0003",
    "\u0002\u0002\u0002\u0af3\u0af4\u0003\u0002\u0002\u0002\u0af4\u0af5\u0005",
    "\u0240\u0121\u0002\u0af5\u015b\u0003\u0002\u0002\u0002\u0af6\u0af7\u0007",
    "A\u0002\u0002\u0af7\u0b03\u0005\u015e\u00b0\u0002\u0af8\u0af9\u0007",
    "M\u0002\u0002\u0af9\u0b03\u0005\u0258\u012d\u0002\u0afa\u0afb\u0007",
    "`\u0002\u0002\u0afb\u0b03\u0005\u015e\u00b0\u0002\u0afc\u0afd\u0007",
    "`\u0002\u0002\u0afd\u0b03\u0005\u0152\u00aa\u0002\u0afe\u0aff\u0007",
    "\u0091\u0002\u0002\u0aff\u0b03\u0005\u0258\u012d\u0002\u0b00\u0b01\u0007",
    "\u0091\u0002\u0002\u0b01\u0b03\u0005\u0256\u012c\u0002\u0b02\u0af6\u0003",
    "\u0002\u0002\u0002\u0b02\u0af8\u0003\u0002\u0002\u0002\u0b02\u0afa\u0003",
    "\u0002\u0002\u0002\u0b02\u0afc\u0003\u0002\u0002\u0002\u0b02\u0afe\u0003",
    "\u0002\u0002\u0002\u0b02\u0b00\u0003\u0002\u0002\u0002\u0b03\u015d\u0003",
    "\u0002\u0002\u0002\u0b04\u0b05\u0005\u0258\u012d\u0002\u0b05\u0b06\u0007",
    "0\u0002\u0002\u0b06\u0b07\u0005\u0240\u0121\u0002\u0b07\u015f\u0003",
    "\u0002\u0002\u0002\u0b08\u0b11\u0007b\u0002\u0002\u0b09\u0b0a\u0007",
    "*\u0002\u0002\u0b0a\u0b0e\u0005\u0278\u013d\u0002\u0b0b\u0b0d\u0005",
    "\u00aeX\u0002\u0b0c\u0b0b\u0003\u0002\u0002\u0002\u0b0d\u0b10\u0003",
    "\u0002\u0002\u0002\u0b0e\u0b0c\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0003",
    "\u0002\u0002\u0002\u0b0f\u0b12\u0003\u0002\u0002\u0002\u0b10\u0b0e\u0003",
    "\u0002\u0002\u0002\u0b11\u0b09\u0003\u0002\u0002\u0002\u0b11\u0b12\u0003",
    "\u0002\u0002\u0002\u0b12\u0b16\u0003\u0002\u0002\u0002\u0b13\u0b15\u0005",
    "\u0164\u00b3\u0002\u0b14\u0b13\u0003\u0002\u0002\u0002\u0b15\u0b18\u0003",
    "\u0002\u0002\u0002\u0b16\u0b14\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003",
    "\u0002\u0002\u0002\u0b17\u0b19\u0003\u0002\u0002\u0002\u0b18\u0b16\u0003",
    "\u0002\u0002\u0002\u0b19\u0b1a\u0007p\u0002\u0002\u0b1a\u0161\u0003",
    "\u0002\u0002\u0002\u0b1b\u0b24\u0007C\u0002\u0002\u0b1c\u0b1d\u0007",
    "*\u0002\u0002\u0b1d\u0b21\u0005\u0278\u013d\u0002\u0b1e\u0b20\u0005",
    "\u00aeX\u0002\u0b1f\u0b1e\u0003\u0002\u0002\u0002\u0b20\u0b23\u0003",
    "\u0002\u0002\u0002\u0b21\u0b1f\u0003\u0002\u0002\u0002\u0b21\u0b22\u0003",
    "\u0002\u0002\u0002\u0b22\u0b25\u0003\u0002\u0002\u0002\u0b23\u0b21\u0003",
    "\u0002\u0002\u0002\u0b24\u0b1c\u0003\u0002\u0002\u0002\u0b24\u0b25\u0003",
    "\u0002\u0002\u0002\u0b25\u0b29\u0003\u0002\u0002\u0002\u0b26\u0b28\u0005",
    "\u0164\u00b3\u0002\u0b27\u0b26\u0003\u0002\u0002\u0002\u0b28\u0b2b\u0003",
    "\u0002\u0002\u0002\u0b29\u0b27\u0003\u0002\u0002\u0002\u0b29\u0b2a\u0003",
    "\u0002\u0002\u0002\u0b2a\u0b2c\u0003\u0002\u0002\u0002\u0b2b\u0b29\u0003",
    "\u0002\u0002\u0002\u0b2c\u0b2d\u0007T\u0002\u0002\u0b2d\u0163\u0003",
    "\u0002\u0002\u0002\u0b2e\u0b30\u0005\u0272\u013a\u0002\u0b2f\u0b2e\u0003",
    "\u0002\u0002\u0002\u0b30\u0b33\u0003\u0002\u0002\u0002\u0b31\u0b2f\u0003",
    "\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002\u0002\u0b32\u0b34\u0003",
    "\u0002\u0002\u0002\u0b33\u0b31\u0003\u0002\u0002\u0002\u0b34\u0b35\u0005",
    "\u0158\u00ad\u0002\u0b35\u0b36\u0007+\u0002\u0002\u0b36\u0b97\u0003",
    "\u0002\u0002\u0002\u0b37\u0b39\u0005\u0272\u013a\u0002\u0b38\u0b37\u0003",
    "\u0002\u0002\u0002\u0b39\u0b3c\u0003\u0002\u0002\u0002\u0b3a\u0b38\u0003",
    "\u0002\u0002\u0002\u0b3a\u0b3b\u0003\u0002\u0002\u0002\u0b3b\u0b3d\u0003",
    "\u0002\u0002\u0002\u0b3c\u0b3a\u0003\u0002\u0002\u0002\u0b3d\u0b97\u0005",
    "\u017e\u00c0\u0002\u0b3e\u0b40\u0005\u0272\u013a\u0002\u0b3f\u0b3e\u0003",
    "\u0002\u0002\u0002\u0b40\u0b43\u0003\u0002\u0002\u0002\u0b41\u0b3f\u0003",
    "\u0002\u0002\u0002\u0b41\u0b42\u0003\u0002\u0002\u0002\u0b42\u0b44\u0003",
    "\u0002\u0002\u0002\u0b43\u0b41\u0003\u0002\u0002\u0002\u0b44\u0b97\u0005",
    "\u017c\u00bf\u0002\u0b45\u0b47\u0005\u0272\u013a\u0002\u0b46\u0b45\u0003",
    "\u0002\u0002\u0002\u0b47\u0b4a\u0003\u0002\u0002\u0002\u0b48\u0b46\u0003",
    "\u0002\u0002\u0002\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49\u0b4b\u0003",
    "\u0002\u0002\u0002\u0b4a\u0b48\u0003\u0002\u0002\u0002\u0b4b\u0b97\u0005",
    "\u016e\u00b8\u0002\u0b4c\u0b4e\u0005\u0272\u013a\u0002\u0b4d\u0b4c\u0003",
    "\u0002\u0002\u0002\u0b4e\u0b51\u0003\u0002\u0002\u0002\u0b4f\u0b4d\u0003",
    "\u0002\u0002\u0002\u0b4f\u0b50\u0003\u0002\u0002\u0002\u0b50\u0b52\u0003",
    "\u0002\u0002\u0002\u0b51\u0b4f\u0003\u0002\u0002\u0002\u0b52\u0b97\u0005",
    "\u0172\u00ba\u0002\u0b53\u0b55\u0005\u0272\u013a\u0002\u0b54\u0b53\u0003",
    "\u0002\u0002\u0002\u0b55\u0b58\u0003\u0002\u0002\u0002\u0b56\u0b54\u0003",
    "\u0002\u0002\u0002\u0b56\u0b57\u0003\u0002\u0002\u0002\u0b57\u0b59\u0003",
    "\u0002\u0002\u0002\u0b58\u0b56\u0003\u0002\u0002\u0002\u0b59\u0b97\u0005",
    "\u0182\u00c2\u0002\u0b5a\u0b5c\u0005\u0272\u013a\u0002\u0b5b\u0b5a\u0003",
    "\u0002\u0002\u0002\u0b5c\u0b5f\u0003\u0002\u0002\u0002\u0b5d\u0b5b\u0003",
    "\u0002\u0002\u0002\u0b5d\u0b5e\u0003\u0002\u0002\u0002\u0b5e\u0b60\u0003",
    "\u0002\u0002\u0002\u0b5f\u0b5d\u0003\u0002\u0002\u0002\u0b60\u0b61\u0005",
    "\u015a\u00ae\u0002\u0b61\u0b62\u0007+\u0002\u0002\u0b62\u0b97\u0003",
    "\u0002\u0002\u0002\u0b63\u0b65\u0005\u0272\u013a\u0002\u0b64\u0b63\u0003",
    "\u0002\u0002\u0002\u0b65\u0b68\u0003\u0002\u0002\u0002\u0b66\u0b64\u0003",
    "\u0002\u0002\u0002\u0b66\u0b67\u0003\u0002\u0002\u0002\u0b67\u0b69\u0003",
    "\u0002\u0002\u0002\u0b68\u0b66\u0003\u0002\u0002\u0002\u0b69\u0b97\u0005",
    "\u0160\u00b1\u0002\u0b6a\u0b6c\u0005\u0272\u013a\u0002\u0b6b\u0b6a\u0003",
    "\u0002\u0002\u0002\u0b6c\u0b6f\u0003\u0002\u0002\u0002\u0b6d\u0b6b\u0003",
    "\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002\u0002\u0002\u0b6e\u0b70\u0003",
    "\u0002\u0002\u0002\u0b6f\u0b6d\u0003\u0002\u0002\u0002\u0b70\u0b71\u0005",
    "\u015c\u00af\u0002\u0b71\u0b72\u0007+\u0002\u0002\u0b72\u0b97\u0003",
    "\u0002\u0002\u0002\u0b73\u0b75\u0005\u0272\u013a\u0002\u0b74\u0b73\u0003",
    "\u0002\u0002\u0002\u0b75\u0b78\u0003\u0002\u0002\u0002\u0b76\u0b74\u0003",
    "\u0002\u0002\u0002\u0b76\u0b77\u0003\u0002\u0002\u0002\u0b77\u0b79\u0003",
    "\u0002\u0002\u0002\u0b78\u0b76\u0003\u0002\u0002\u0002\u0b79\u0b97\u0005",
    "\u0178\u00bd\u0002\u0b7a\u0b7c\u0005\u0272\u013a\u0002\u0b7b\u0b7a\u0003",
    "\u0002\u0002\u0002\u0b7c\u0b7f\u0003\u0002\u0002\u0002\u0b7d\u0b7b\u0003",
    "\u0002\u0002\u0002\u0b7d\u0b7e\u0003\u0002\u0002\u0002\u0b7e\u0b80\u0003",
    "\u0002\u0002\u0002\u0b7f\u0b7d\u0003\u0002\u0002\u0002\u0b80\u0b97\u0005",
    "\u0162\u00b2\u0002\u0b81\u0b83\u0005\u0272\u013a\u0002\u0b82\u0b81\u0003",
    "\u0002\u0002\u0002\u0b83\u0b86\u0003\u0002\u0002\u0002\u0b84\u0b82\u0003",
    "\u0002\u0002\u0002\u0b84\u0b85\u0003\u0002\u0002\u0002\u0b85\u0b87\u0003",
    "\u0002\u0002\u0002\u0b86\u0b84\u0003\u0002\u0002\u0002\u0b87\u0b97\u0005",
    "\u0184\u00c3\u0002\u0b88\u0b8a\u0005\u0272\u013a\u0002\u0b89\u0b88\u0003",
    "\u0002\u0002\u0002\u0b8a\u0b8d\u0003\u0002\u0002\u0002\u0b8b\u0b89\u0003",
    "\u0002\u0002\u0002\u0b8b\u0b8c\u0003\u0002\u0002\u0002\u0b8c\u0b8e\u0003",
    "\u0002\u0002\u0002\u0b8d\u0b8b\u0003\u0002\u0002\u0002\u0b8e\u0b97\u0005",
    "\u0186\u00c4\u0002\u0b8f\u0b91\u0005\u0272\u013a\u0002\u0b90\u0b8f\u0003",
    "\u0002\u0002\u0002\u0b91\u0b94\u0003\u0002\u0002\u0002\u0b92\u0b90\u0003",
    "\u0002\u0002\u0002\u0b92\u0b93\u0003\u0002\u0002\u0002\u0b93\u0b95\u0003",
    "\u0002\u0002\u0002\u0b94\u0b92\u0003\u0002\u0002\u0002\u0b95\u0b97\u0005",
    "\u017a\u00be\u0002\u0b96\u0b31\u0003\u0002\u0002\u0002\u0b96\u0b3a\u0003",
    "\u0002\u0002\u0002\u0b96\u0b41\u0003\u0002\u0002\u0002\u0b96\u0b48\u0003",
    "\u0002\u0002\u0002\u0b96\u0b4f\u0003\u0002\u0002\u0002\u0b96\u0b56\u0003",
    "\u0002\u0002\u0002\u0b96\u0b5d\u0003\u0002\u0002\u0002\u0b96\u0b66\u0003",
    "\u0002\u0002\u0002\u0b96\u0b6d\u0003\u0002\u0002\u0002\u0b96\u0b76\u0003",
    "\u0002\u0002\u0002\u0b96\u0b7d\u0003\u0002\u0002\u0002\u0b96\u0b84\u0003",
    "\u0002\u0002\u0002\u0b96\u0b8b\u0003\u0002\u0002\u0002\u0b96\u0b92\u0003",
    "\u0002\u0002\u0002\u0b97\u0165\u0003\u0002\u0002\u0002\u0b98\u0ba1\u0005",
    "\u0164\u00b3\u0002\u0b99\u0b9b\u0005\u0272\u013a\u0002\u0b9a\u0b99\u0003",
    "\u0002\u0002\u0002\u0b9b\u0b9e\u0003\u0002\u0002\u0002\u0b9c\u0b9a\u0003",
    "\u0002\u0002\u0002\u0b9c\u0b9d\u0003\u0002\u0002\u0002\u0b9d\u0b9f\u0003",
    "\u0002\u0002\u0002\u0b9e\u0b9c\u0003\u0002\u0002\u0002\u0b9f\u0ba1\u0007",
    "+\u0002\u0002\u0ba0\u0b98\u0003\u0002\u0002\u0002\u0ba0\u0b9c\u0003",
    "\u0002\u0002\u0002\u0ba1\u0167\u0003\u0002\u0002\u0002\u0ba2\u0ba3\u0005",
    "\u0164\u00b3\u0002\u0ba3\u0169\u0003\u0002\u0002\u0002\u0ba4\u0ba5\u0007",
    "\u0007\u0002\u0002\u0ba5\u0bac\u0005l7\u0002\u0ba6\u0ba7\u0007\u0007",
    "\u0002\u0002\u0ba7\u0ba8\u0007\u001a\u0002\u0002\u0ba8\u0ba9\u0005\u0244",
    "\u0123\u0002\u0ba9\u0baa\u0007\u001b\u0002\u0002\u0baa\u0bac\u0003\u0002",
    "\u0002\u0002\u0bab\u0ba4\u0003\u0002\u0002\u0002\u0bab\u0ba6\u0003\u0002",
    "\u0002\u0002\u0bac\u016b\u0003\u0002\u0002\u0002\u0bad\u0bb6\u0005\u016a",
    "\u00b6\u0002\u0bae\u0bb6\u0005\u0170\u00b9\u0002\u0baf\u0bb0\u0007\u0092",
    "\u0002\u0002\u0bb0\u0bb1\u0007\u001a\u0002\u0002\u0bb1\u0bb2\u0005\u0240",
    "\u0121\u0002\u0bb2\u0bb3\u0007\u001b\u0002\u0002\u0bb3\u0bb4\u0005\u0170",
    "\u00b9\u0002\u0bb4\u0bb6\u0003\u0002\u0002\u0002\u0bb5\u0bad\u0003\u0002",
    "\u0002\u0002\u0bb5\u0bae\u0003\u0002\u0002\u0002\u0bb5\u0baf\u0003\u0002",
    "\u0002\u0002\u0bb6\u016d\u0003\u0002\u0002\u0002\u0bb7\u0bb8\u0007Q",
    "\u0002\u0002\u0bb8\u0bb9\u0005\u0298\u014d\u0002\u0bb9\u0bba\u0007+",
    "\u0002\u0002\u0bba\u0bc0\u0003\u0002\u0002\u0002\u0bbb\u0bbc\u0007Q",
    "\u0002\u0002\u0bbc\u0bbd\u0005\u028a\u0146\u0002\u0bbd\u0bbe\u0007+",
    "\u0002\u0002\u0bbe\u0bc0\u0003\u0002\u0002\u0002\u0bbf\u0bb7\u0003\u0002",
    "\u0002\u0002\u0bbf\u0bbb\u0003\u0002\u0002\u0002\u0bc0\u016f\u0003\u0002",
    "\u0002\u0002\u0bc1\u0bc2\u00079\u0002\u0002\u0bc2\u0bcf\u0005\u028c",
    "\u0147\u0002\u0bc3\u0bc4\u00079\u0002\u0002\u0bc4\u0bc5\u0007\u001a",
    "\u0002\u0002\u0bc5\u0bc6\u0005\u0174\u00bb\u0002\u0bc6\u0bc7\u0007\u001b",
    "\u0002\u0002\u0bc7\u0bcf\u0003\u0002\u0002\u0002\u0bc8\u0bc9\u00079",
    "\u0002\u0002\u0bc9\u0bcf\u0007\u001c\u0002\u0002\u0bca\u0bcb\u00079",
    "\u0002\u0002\u0bcb\u0bcc\u0007\u001a\u0002\u0002\u0bcc\u0bcd\u0007\u001c",
    "\u0002\u0002\u0bcd\u0bcf\u0007\u001b\u0002\u0002\u0bce\u0bc1\u0003\u0002",
    "\u0002\u0002\u0bce\u0bc3\u0003\u0002\u0002\u0002\u0bce\u0bc8\u0003\u0002",
    "\u0002\u0002\u0bce\u0bca\u0003\u0002\u0002\u0002\u0bcf\u0171\u0003\u0002",
    "\u0002\u0002\u0bd0\u0bd1\u0007%\u0002\u0002\u0bd1\u0bd8\u0005\u028c",
    "\u0147\u0002\u0bd2\u0bd3\u0007;\u0002\u0002\u0bd3\u0bd4\u0005\u0240",
    "\u0121\u0002\u0bd4\u0bd5\u0007<\u0002\u0002\u0bd5\u0bd7\u0003\u0002",
    "\u0002\u0002\u0bd6\u0bd2\u0003\u0002\u0002\u0002\u0bd7\u0bda\u0003\u0002",
    "\u0002\u0002\u0bd8\u0bd6\u0003\u0002\u0002\u0002\u0bd8\u0bd9\u0003\u0002",
    "\u0002\u0002\u0bd9\u0bdb\u0003\u0002\u0002\u0002\u0bda\u0bd8\u0003\u0002",
    "\u0002\u0002\u0bdb\u0bdc\u0007+\u0002\u0002\u0bdc\u0173\u0003\u0002",
    "\u0002\u0002\u0bdd\u0bde\b\u00bb\u0001\u0002\u0bde\u0be4\u0005\u0240",
    "\u0121\u0002\u0bdf\u0be0\u0007\u0085\u0002\u0002\u0be0\u0be4\u0005\u0240",
    "\u0121\u0002\u0be1\u0be2\u0007z\u0002\u0002\u0be2\u0be4\u0005\u0240",
    "\u0121\u0002\u0be3\u0bdd\u0003\u0002\u0002\u0002\u0be3\u0bdf\u0003\u0002",
    "\u0002\u0002\u0be3\u0be1\u0003\u0002\u0002\u0002\u0be4\u0bed\u0003\u0002",
    "\u0002\u0002\u0be5\u0be6\f\u0004\u0002\u0002\u0be6\u0be7\u0007\u0081",
    "\u0002\u0002\u0be7\u0bec\u0005\u0174\u00bb\u0005\u0be8\u0be9\f\u0003",
    "\u0002\u0002\u0be9\u0bea\u0007\"\u0002\u0002\u0bea\u0bec\u0005\u0174",
    "\u00bb\u0004\u0beb\u0be5\u0003\u0002\u0002\u0002\u0beb\u0be8\u0003\u0002",
    "\u0002\u0002\u0bec\u0bef\u0003\u0002\u0002\u0002\u0bed\u0beb\u0003\u0002",
    "\u0002\u0002\u0bed\u0bee\u0003\u0002\u0002\u0002\u0bee\u0175\u0003\u0002",
    "\u0002\u0002\u0bef\u0bed\u0003\u0002\u0002\u0002\u0bf0\u0bf3\u0005\u016a",
    "\u00b6\u0002\u0bf1\u0bf3\u0005\u0170\u00b9\u0002\u0bf2\u0bf0\u0003\u0002",
    "\u0002\u0002\u0bf2\u0bf1\u0003\u0002\u0002\u0002\u0bf3\u0177\u0003\u0002",
    "\u0002\u0002\u0bf4\u0bf5\u0005\u0176\u00bc\u0002\u0bf5\u0bf6\u0005\u0166",
    "\u00b4\u0002\u0bf6\u0179\u0003\u0002\u0002\u0002\u0bf7\u0bf8\u0007\u00b1",
    "\u0002\u0002\u0bf8\u0bf9\u0007\u001a\u0002\u0002\u0bf9\u0bfa\u0005\u0240",
    "\u0121\u0002\u0bfa\u0bfb\u0007\u001b\u0002\u0002\u0bfb\u0bfc\u0005\u0166",
    "\u00b4\u0002\u0bfc\u017b\u0003\u0002\u0002\u0002\u0bfd\u0bfe\u0007h",
    "\u0002\u0002\u0bfe\u0bff\u0007\u001a\u0002\u0002\u0bff\u0c00\u0005\u0240",
    "\u0121\u0002\u0c00\u0c01\u0007\u001b\u0002\u0002\u0c01\u0c0b\u0005\u0166",
    "\u00b4\u0002\u0c02\u0c03\u0007S\u0002\u0002\u0c03\u0c04\u0007h\u0002",
    "\u0002\u0c04\u0c05\u0007\u001a\u0002\u0002\u0c05\u0c06\u0005\u0240\u0121",
    "\u0002\u0c06\u0c07\u0007\u001b\u0002\u0002\u0c07\u0c08\u0005\u0166\u00b4",
    "\u0002\u0c08\u0c0a\u0003\u0002\u0002\u0002\u0c09\u0c02\u0003\u0002\u0002",
    "\u0002\u0c0a\u0c0d\u0003\u0002\u0002\u0002\u0c0b\u0c09\u0003\u0002\u0002",
    "\u0002\u0c0b\u0c0c\u0003\u0002\u0002\u0002\u0c0c\u0c10\u0003\u0002\u0002",
    "\u0002\u0c0d\u0c0b\u0003\u0002\u0002\u0002\u0c0e\u0c0f\u0007S\u0002",
    "\u0002\u0c0f\u0c11\u0005\u0166\u00b4\u0002\u0c10\u0c0e\u0003\u0002\u0002",
    "\u0002\u0c10\u0c11\u0003\u0002\u0002\u0002\u0c11\u017d\u0003\u0002\u0002",
    "\u0002\u0c12\u0c13\u0007G\u0002\u0002\u0c13\u0c14\u0007\u001a\u0002",
    "\u0002\u0c14\u0c15\u0005\u0240\u0121\u0002\u0c15\u0c19\u0007\u001b\u0002",
    "\u0002\u0c16\u0c18\u0005\u0180\u00c1\u0002\u0c17\u0c16\u0003\u0002\u0002",
    "\u0002\u0c18\u0c1b\u0003\u0002\u0002\u0002\u0c19\u0c17\u0003\u0002\u0002",
    "\u0002\u0c19\u0c1a\u0003\u0002\u0002\u0002\u0c1a\u0c1c\u0003\u0002\u0002",
    "\u0002\u0c1b\u0c19\u0003\u0002\u0002\u0002\u0c1c\u0c1d\u0007U\u0002",
    "\u0002\u0c1d\u0c37\u0003\u0002\u0002\u0002\u0c1e\u0c1f\u0007I\u0002",
    "\u0002\u0c1f\u0c20\u0007\u001a\u0002\u0002\u0c20\u0c21\u0005\u0240\u0121",
    "\u0002\u0c21\u0c25\u0007\u001b\u0002\u0002\u0c22\u0c24\u0005\u0180\u00c1",
    "\u0002\u0c23\u0c22\u0003\u0002\u0002\u0002\u0c24\u0c27\u0003\u0002\u0002",
    "\u0002\u0c25\u0c23\u0003\u0002\u0002\u0002\u0c25\u0c26\u0003\u0002\u0002",
    "\u0002\u0c26\u0c28\u0003\u0002\u0002\u0002\u0c27\u0c25\u0003\u0002\u0002",
    "\u0002\u0c28\u0c29\u0007U\u0002\u0002\u0c29\u0c37\u0003\u0002\u0002",
    "\u0002\u0c2a\u0c2b\u0007H\u0002\u0002\u0c2b\u0c2c\u0007\u001a\u0002",
    "\u0002\u0c2c\u0c2d\u0005\u0240\u0121\u0002\u0c2d\u0c31\u0007\u001b\u0002",
    "\u0002\u0c2e\u0c30\u0005\u0180\u00c1\u0002\u0c2f\u0c2e\u0003\u0002\u0002",
    "\u0002\u0c30\u0c33\u0003\u0002\u0002\u0002\u0c31\u0c2f\u0003\u0002\u0002",
    "\u0002\u0c31\u0c32\u0003\u0002\u0002\u0002\u0c32\u0c34\u0003\u0002\u0002",
    "\u0002\u0c33\u0c31\u0003\u0002\u0002\u0002\u0c34\u0c35\u0007U\u0002",
    "\u0002\u0c35\u0c37\u0003\u0002\u0002\u0002\u0c36\u0c12\u0003\u0002\u0002",
    "\u0002\u0c36\u0c1e\u0003\u0002\u0002\u0002\u0c36\u0c2a\u0003\u0002\u0002",
    "\u0002\u0c37\u017f\u0003\u0002\u0002\u0002\u0c38\u0c3d\u0005\u0240\u0121",
    "\u0002\u0c39\u0c3a\u0007\"\u0002\u0002\u0c3a\u0c3c\u0005\u0240\u0121",
    "\u0002\u0c3b\u0c39\u0003\u0002\u0002\u0002\u0c3c\u0c3f\u0003\u0002\u0002",
    "\u0002\u0c3d\u0c3b\u0003\u0002\u0002\u0002\u0c3d\u0c3e\u0003\u0002\u0002",
    "\u0002\u0c3e\u0c40\u0003\u0002\u0002\u0002\u0c3f\u0c3d\u0003\u0002\u0002",
    "\u0002\u0c40\u0c41\u0007*\u0002\u0002\u0c41\u0c42\u0005\u0166\u00b4",
    "\u0002\u0c42\u0c49\u0003\u0002\u0002\u0002\u0c43\u0c45\u0007N\u0002",
    "\u0002\u0c44\u0c46\u0007*\u0002\u0002\u0c45\u0c44\u0003\u0002\u0002",
    "\u0002\u0c45\u0c46\u0003\u0002\u0002\u0002\u0c46\u0c47\u0003\u0002\u0002",
    "\u0002\u0c47\u0c49\u0005\u0166\u00b4\u0002\u0c48\u0c38\u0003\u0002\u0002",
    "\u0002\u0c48\u0c43\u0003\u0002\u0002\u0002\u0c49\u0181\u0003\u0002\u0002",
    "\u0002\u0c4a\u0c4b\u0007a\u0002\u0002\u0c4b\u0c63\u0005\u0164\u00b3",
    "\u0002\u0c4c\u0c4d\u0007\u0092\u0002\u0002\u0c4d\u0c4e\u0007\u001a\u0002",
    "\u0002\u0c4e\u0c4f\u0005\u0240\u0121\u0002\u0c4f\u0c50\u0007\u001b\u0002",
    "\u0002\u0c50\u0c51\u0005\u0164\u00b3\u0002\u0c51\u0c63\u0003\u0002\u0002",
    "\u0002\u0c52\u0c53\u0007\u00b5\u0002\u0002\u0c53\u0c54\u0007\u001a\u0002",
    "\u0002\u0c54\u0c55\u0005\u0240\u0121\u0002\u0c55\u0c56\u0007\u001b\u0002",
    "\u0002\u0c56\u0c57\u0005\u0164\u00b3\u0002\u0c57\u0c63\u0003\u0002\u0002",
    "\u0002\u0c58\u0c59\u0007_\u0002\u0002\u0c59\u0c5a\u0007\u001a\u0002",
    "\u0002\u0c5a\u0c5b\u0005\u015e\u00b0\u0002\u0c5b\u0c5c\u0007+\u0002",
    "\u0002\u0c5c\u0c5d\u0005\u0240\u0121\u0002\u0c5d\u0c5e\u0007+\u0002",
    "\u0002\u0c5e\u0c5f\u0005\u015e\u00b0\u0002\u0c5f\u0c60\u0007\u001b\u0002",
    "\u0002\u0c60\u0c61\u0005\u0164\u00b3\u0002\u0c61\u0c63\u0003\u0002\u0002",
    "\u0002\u0c62\u0c4a\u0003\u0002\u0002\u0002\u0c62\u0c4c\u0003\u0002\u0002",
    "\u0002\u0c62\u0c52\u0003\u0002\u0002\u0002\u0c62\u0c58\u0003\u0002\u0002",
    "\u0002\u0c63\u0183\u0003\u0002\u0002\u0002\u0c64\u0c73\u0005\u02ba\u015e",
    "\u0002\u0c65\u0c67\u0007\u001a\u0002\u0002\u0c66\u0c68\u0005\u0240\u0121",
    "\u0002\u0c67\u0c66\u0003\u0002\u0002\u0002\u0c67\u0c68\u0003\u0002\u0002",
    "\u0002\u0c68\u0c6f\u0003\u0002\u0002\u0002\u0c69\u0c6b\u0007\"\u0002",
    "\u0002\u0c6a\u0c6c\u0005\u0240\u0121\u0002\u0c6b\u0c6a\u0003\u0002\u0002",
    "\u0002\u0c6b\u0c6c\u0003\u0002\u0002\u0002\u0c6c\u0c6e\u0003\u0002\u0002",
    "\u0002\u0c6d\u0c69\u0003\u0002\u0002\u0002\u0c6e\u0c71\u0003\u0002\u0002",
    "\u0002\u0c6f\u0c6d\u0003\u0002\u0002\u0002\u0c6f\u0c70\u0003\u0002\u0002",
    "\u0002\u0c70\u0c72\u0003\u0002\u0002\u0002\u0c71\u0c6f\u0003\u0002\u0002",
    "\u0002\u0c72\u0c74\u0007\u001b\u0002\u0002\u0c73\u0c65\u0003\u0002\u0002",
    "\u0002\u0c73\u0c74\u0003\u0002\u0002\u0002\u0c74\u0c75\u0003\u0002\u0002",
    "\u0002\u0c75\u0c76\u0007+\u0002\u0002\u0c76\u0185\u0003\u0002\u0002",
    "\u0002\u0c77\u0c83\u0005\u0298\u014d\u0002\u0c78\u0c79\u0007\u001a\u0002",
    "\u0002\u0c79\u0c7e\u0005\u0240\u0121\u0002\u0c7a\u0c7b\u0007\"\u0002",
    "\u0002\u0c7b\u0c7d\u0005\u0240\u0121\u0002\u0c7c\u0c7a\u0003\u0002\u0002",
    "\u0002\u0c7d\u0c80\u0003\u0002\u0002\u0002\u0c7e\u0c7c\u0003\u0002\u0002",
    "\u0002\u0c7e\u0c7f\u0003\u0002\u0002\u0002\u0c7f\u0c81\u0003\u0002\u0002",
    "\u0002\u0c80\u0c7e\u0003\u0002\u0002\u0002\u0c81\u0c82\u0007\u001b\u0002",
    "\u0002\u0c82\u0c84\u0003\u0002\u0002\u0002\u0c83\u0c78\u0003\u0002\u0002",
    "\u0002\u0c83\u0c84\u0003\u0002\u0002\u0002\u0c84\u0c85\u0003\u0002\u0002",
    "\u0002\u0c85\u0c86\u0007+\u0002\u0002\u0c86\u0187\u0003\u0002\u0002",
    "\u0002\u0c87\u0c8b\u0007\u009c\u0002\u0002\u0c88\u0c8a\u0005\u018a\u00c6",
    "\u0002\u0c89\u0c88\u0003\u0002\u0002\u0002\u0c8a\u0c8d\u0003\u0002\u0002",
    "\u0002\u0c8b\u0c89\u0003\u0002\u0002\u0002\u0c8b\u0c8c\u0003\u0002\u0002",
    "\u0002\u0c8c\u0c8e\u0003\u0002\u0002\u0002\u0c8d\u0c8b\u0003\u0002\u0002",
    "\u0002\u0c8e\u0c8f\u0007[\u0002\u0002\u0c8f\u0189\u0003\u0002\u0002",
    "\u0002\u0c90\u0c96\u0005@!\u0002\u0c91\u0c96\u0005\u018c\u00c7\u0002",
    "\u0c92\u0c96\u0005\u018e\u00c8\u0002\u0c93\u0c96\u0005\u0190\u00c9\u0002",
    "\u0c94\u0c96\u0005\u01d8\u00ed\u0002\u0c95\u0c90\u0003\u0002\u0002\u0002",
    "\u0c95\u0c91\u0003\u0002\u0002\u0002\u0c95\u0c92\u0003\u0002\u0002\u0002",
    "\u0c95\u0c93\u0003\u0002\u0002\u0002\u0c95\u0c94\u0003\u0002\u0002\u0002",
    "\u0c96\u018b\u0003\u0002\u0002\u0002\u0c97\u0c98\u0007\u008c\u0002\u0002",
    "\u0c98\u0c99\u0005\u019a\u00ce\u0002\u0c99\u0c9a\u0007+\u0002\u0002",
    "\u0c9a\u0ca0\u0003\u0002\u0002\u0002\u0c9b\u0c9c\u0007\u008b\u0002\u0002",
    "\u0c9c\u0c9d\u0005\u019a\u00ce\u0002\u0c9d\u0c9e\u0007+\u0002\u0002",
    "\u0c9e\u0ca0\u0003\u0002\u0002\u0002\u0c9f\u0c97\u0003\u0002\u0002\u0002",
    "\u0c9f\u0c9b\u0003\u0002\u0002\u0002\u0ca0\u018d\u0003\u0002\u0002\u0002",
    "\u0ca1\u0ca2\u0007\u0099\u0002\u0002\u0ca2\u0ca3\u0005\u019a\u00ce\u0002",
    "\u0ca3\u0ca4\u0007+\u0002\u0002\u0ca4\u0caa\u0003\u0002\u0002\u0002",
    "\u0ca5\u0ca6\u0007}\u0002\u0002\u0ca6\u0ca7\u0005\u019a\u00ce\u0002",
    "\u0ca7\u0ca8\u0007+\u0002\u0002\u0ca8\u0caa\u0003\u0002\u0002\u0002",
    "\u0ca9\u0ca1\u0003\u0002\u0002\u0002\u0ca9\u0ca5\u0003\u0002\u0002\u0002",
    "\u0caa\u018f\u0003\u0002\u0002\u0002\u0cab\u0cac\u0005\u0192\u00ca\u0002",
    "\u0cac\u0cad\u0007+\u0002\u0002\u0cad\u0cb5\u0003\u0002\u0002\u0002",
    "\u0cae\u0caf\u0005\u01ca\u00e6\u0002\u0caf\u0cb0\u0007+\u0002\u0002",
    "\u0cb0\u0cb5\u0003\u0002\u0002\u0002\u0cb1\u0cb2\u0005\u01d4\u00eb\u0002",
    "\u0cb2\u0cb3\u0007+\u0002\u0002\u0cb3\u0cb5\u0003\u0002\u0002\u0002",
    "\u0cb4\u0cab\u0003\u0002\u0002\u0002\u0cb4\u0cae\u0003\u0002\u0002\u0002",
    "\u0cb4\u0cb1\u0003\u0002\u0002\u0002\u0cb5\u0191\u0003\u0002\u0002\u0002",
    "\u0cb6\u0cb7\u0005\u0194\u00cb\u0002\u0cb7\u0cb8\u00070\u0002\u0002",
    "\u0cb8\u0cb9\u0005\u01a4\u00d3\u0002\u0cb9\u0cbf\u0003\u0002\u0002\u0002",
    "\u0cba\u0cbb\u0005\u0196\u00cc\u0002\u0cbb\u0cbc\u00070\u0002\u0002",
    "\u0cbc\u0cbd\u0005\u01a4\u00d3\u0002\u0cbd\u0cbf\u0003\u0002\u0002\u0002",
    "\u0cbe\u0cb6\u0003\u0002\u0002\u0002\u0cbe\u0cba\u0003\u0002\u0002\u0002",
    "\u0cbf\u0193\u0003\u0002\u0002\u0002\u0cc0\u0cc1\u0007\u001a\u0002\u0002",
    "\u0cc1\u0cc3\u0005\u019c\u00cf\u0002\u0cc2\u0cc4\u0005\u01d6\u00ec\u0002",
    "\u0cc3\u0cc2\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0003\u0002\u0002\u0002",
    "\u0cc4\u0cc5\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u00073\u0002\u0002",
    "\u0cc6\u0cc7\u0005\u019e\u00d0\u0002\u0cc7\u0cc8\u0007\u001b\u0002\u0002",
    "\u0cc8\u0195\u0003\u0002\u0002\u0002\u0cc9\u0cca\u0007\u001a\u0002\u0002",
    "\u0cca\u0ccc\u0005\u0198\u00cd\u0002\u0ccb\u0ccd\u0005\u01d6\u00ec\u0002",
    "\u0ccc\u0ccb\u0003\u0002\u0002\u0002\u0ccc\u0ccd\u0003\u0002\u0002\u0002",
    "\u0ccd\u0cce\u0003\u0002\u0002\u0002\u0cce\u0ccf\u0007\u001f\u0002\u0002",
    "\u0ccf\u0cd0\u0005\u019a\u00ce\u0002\u0cd0\u0cd1\u0007\u001b\u0002\u0002",
    "\u0cd1\u0197\u0003\u0002\u0002\u0002\u0cd2\u0cd7\u0005\u019c\u00cf\u0002",
    "\u0cd3\u0cd4\u0007\"\u0002\u0002\u0cd4\u0cd6\u0005\u019c\u00cf\u0002",
    "\u0cd5\u0cd3\u0003\u0002\u0002\u0002\u0cd6\u0cd9\u0003\u0002\u0002\u0002",
    "\u0cd7\u0cd5\u0003\u0002\u0002\u0002\u0cd7\u0cd8\u0003\u0002\u0002\u0002",
    "\u0cd8\u0199\u0003\u0002\u0002\u0002\u0cd9\u0cd7\u0003\u0002\u0002\u0002",
    "\u0cda\u0cdf\u0005\u019e\u00d0\u0002\u0cdb\u0cdc\u0007\"\u0002\u0002",
    "\u0cdc\u0cde\u0005\u019e\u00d0\u0002\u0cdd\u0cdb\u0003\u0002\u0002\u0002",
    "\u0cde\u0ce1\u0003\u0002\u0002\u0002\u0cdf\u0cdd\u0003\u0002\u0002\u0002",
    "\u0cdf\u0ce0\u0003\u0002\u0002\u0002\u0ce0\u019b\u0003\u0002\u0002\u0002",
    "\u0ce1\u0cdf\u0003\u0002\u0002\u0002\u0ce2\u0ce7\u0005\u01a0\u00d1\u0002",
    "\u0ce3\u0ce4\u0007;\u0002\u0002\u0ce4\u0ce5\u0005\u023c\u011f\u0002",
    "\u0ce5\u0ce6\u0007<\u0002\u0002\u0ce6\u0ce8\u0003\u0002\u0002\u0002",
    "\u0ce7\u0ce3\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0003\u0002\u0002\u0002",
    "\u0ce8\u019d\u0003\u0002\u0002\u0002\u0ce9\u0cee\u0005\u01a2\u00d2\u0002",
    "\u0cea\u0ceb\u0007;\u0002\u0002\u0ceb\u0cec\u0005\u023c\u011f\u0002",
    "\u0cec\u0ced\u0007<\u0002\u0002\u0ced\u0cef\u0003\u0002\u0002\u0002",
    "\u0cee\u0cea\u0003\u0002\u0002\u0002\u0cee\u0cef\u0003\u0002\u0002\u0002",
    "\u0cef\u019f\u0003\u0002\u0002\u0002\u0cf0\u0cf3\u0005\u02a0\u0151\u0002",
    "\u0cf1\u0cf3\u0005\u029e\u0150\u0002\u0cf2\u0cf0\u0003\u0002\u0002\u0002",
    "\u0cf2\u0cf1\u0003\u0002\u0002\u0002\u0cf3\u01a1\u0003\u0002\u0002\u0002",
    "\u0cf4\u0cf7\u0005\u02ac\u0157\u0002\u0cf5\u0cf7\u0005\u029e\u0150\u0002",
    "\u0cf6\u0cf4\u0003\u0002\u0002\u0002\u0cf6\u0cf5\u0003\u0002\u0002\u0002",
    "\u0cf7\u01a3\u0003\u0002\u0002\u0002\u0cf8\u0cfe\u0005\u01a6\u00d4\u0002",
    "\u0cf9\u0cfa\u0007\u001a\u0002\u0002\u0cfa\u0cfb\u0005\u01a6\u00d4\u0002",
    "\u0cfb\u0cfc\u0007\u001b\u0002\u0002\u0cfc\u0cfe\u0003\u0002\u0002\u0002",
    "\u0cfd\u0cf8\u0003\u0002\u0002\u0002\u0cfd\u0cf9\u0003\u0002\u0002\u0002",
    "\u0cfe\u01a5\u0003\u0002\u0002\u0002\u0cff\u0d2f\u0005\u01a8\u00d5\u0002",
    "\u0d00\u0d01\u0005\u01aa\u00d6\u0002\u0d01\u0d02\u0007\"\u0002\u0002",
    "\u0d02\u0d03\u0005\u01ac\u00d7\u0002\u0d03\u0d2f\u0003\u0002\u0002\u0002",
    "\u0d04\u0d05\u0005\u01aa\u00d6\u0002\u0d05\u0d06\u0007\"\u0002\u0002",
    "\u0d06\u0d07\u0005\u01ac\u00d7\u0002\u0d07\u0d08\u0007\"\u0002\u0002",
    "\u0d08\u0d09\u0005\u01ae\u00d8\u0002\u0d09\u0d2f\u0003\u0002\u0002\u0002",
    "\u0d0a\u0d0b\u0005\u01b0\u00d9\u0002\u0d0b\u0d0c\u0007\"\u0002\u0002",
    "\u0d0c\u0d0d\u0005\u01b2\u00da\u0002\u0d0d\u0d0e\u0007\"\u0002\u0002",
    "\u0d0e\u0d0f\u0005\u01b4\u00db\u0002\u0d0f\u0d10\u0007\"\u0002\u0002",
    "\u0d10\u0d11\u0005\u01b6\u00dc\u0002\u0d11\u0d12\u0007\"\u0002\u0002",
    "\u0d12\u0d13\u0005\u01b8\u00dd\u0002\u0d13\u0d14\u0007\"\u0002\u0002",
    "\u0d14\u0d15\u0005\u01ba\u00de\u0002\u0d15\u0d2f\u0003\u0002\u0002\u0002",
    "\u0d16\u0d17\u0005\u01b0\u00d9\u0002\u0d17\u0d18\u0007\"\u0002\u0002",
    "\u0d18\u0d19\u0005\u01b2\u00da\u0002\u0d19\u0d1a\u0007\"\u0002\u0002",
    "\u0d1a\u0d1b\u0005\u01b4\u00db\u0002\u0d1b\u0d1c\u0007\"\u0002\u0002",
    "\u0d1c\u0d1d\u0005\u01b6\u00dc\u0002\u0d1d\u0d1e\u0007\"\u0002\u0002",
    "\u0d1e\u0d1f\u0005\u01b8\u00dd\u0002\u0d1f\u0d20\u0007\"\u0002\u0002",
    "\u0d20\u0d21\u0005\u01ba\u00de\u0002\u0d21\u0d22\u0007\"\u0002\u0002",
    "\u0d22\u0d23\u0005\u01bc\u00df\u0002\u0d23\u0d24\u0007\"\u0002\u0002",
    "\u0d24\u0d25\u0005\u01be\u00e0\u0002\u0d25\u0d26\u0007\"\u0002\u0002",
    "\u0d26\u0d27\u0005\u01c0\u00e1\u0002\u0d27\u0d28\u0007\"\u0002\u0002",
    "\u0d28\u0d29\u0005\u01c2\u00e2\u0002\u0d29\u0d2a\u0007\"\u0002\u0002",
    "\u0d2a\u0d2b\u0005\u01c4\u00e3\u0002\u0d2b\u0d2c\u0007\"\u0002\u0002",
    "\u0d2c\u0d2d\u0005\u01c6\u00e4\u0002\u0d2d\u0d2f\u0003\u0002\u0002\u0002",
    "\u0d2e\u0cff\u0003\u0002\u0002\u0002\u0d2e\u0d00\u0003\u0002\u0002\u0002",
    "\u0d2e\u0d04\u0003\u0002\u0002\u0002\u0d2e\u0d0a\u0003\u0002\u0002\u0002",
    "\u0d2e\u0d16\u0003\u0002\u0002\u0002\u0d2f\u01a7\u0003\u0002\u0002\u0002",
    "\u0d30\u0d31\u0005\u01c8\u00e5\u0002\u0d31\u01a9\u0003\u0002\u0002\u0002",
    "\u0d32\u0d33\u0005\u01c8\u00e5\u0002\u0d33\u01ab\u0003\u0002\u0002\u0002",
    "\u0d34\u0d35\u0005\u01c8\u00e5\u0002\u0d35\u01ad\u0003\u0002\u0002\u0002",
    "\u0d36\u0d37\u0005\u01c8\u00e5\u0002\u0d37\u01af\u0003\u0002\u0002\u0002",
    "\u0d38\u0d39\u0005\u01c8\u00e5\u0002\u0d39\u01b1\u0003\u0002\u0002\u0002",
    "\u0d3a\u0d3b\u0005\u01c8\u00e5\u0002\u0d3b\u01b3\u0003\u0002\u0002\u0002",
    "\u0d3c\u0d3d\u0005\u01c8\u00e5\u0002\u0d3d\u01b5\u0003\u0002\u0002\u0002",
    "\u0d3e\u0d3f\u0005\u01c8\u00e5\u0002\u0d3f\u01b7\u0003\u0002\u0002\u0002",
    "\u0d40\u0d41\u0005\u01c8\u00e5\u0002\u0d41\u01b9\u0003\u0002\u0002\u0002",
    "\u0d42\u0d43\u0005\u01c8\u00e5\u0002\u0d43\u01bb\u0003\u0002\u0002\u0002",
    "\u0d44\u0d45\u0005\u01c8\u00e5\u0002\u0d45\u01bd\u0003\u0002\u0002\u0002",
    "\u0d46\u0d47\u0005\u01c8\u00e5\u0002\u0d47\u01bf\u0003\u0002\u0002\u0002",
    "\u0d48\u0d49\u0005\u01c8\u00e5\u0002\u0d49\u01c1\u0003\u0002\u0002\u0002",
    "\u0d4a\u0d4b\u0005\u01c8\u00e5\u0002\u0d4b\u01c3\u0003\u0002\u0002\u0002",
    "\u0d4c\u0d4d\u0005\u01c8\u00e5\u0002\u0d4d\u01c5\u0003\u0002\u0002\u0002",
    "\u0d4e\u0d4f\u0005\u01c8\u00e5\u0002\u0d4f\u01c7\u0003\u0002\u0002\u0002",
    "\u0d50\u0d51\u0005\u023a\u011e\u0002\u0d51\u01c9\u0003\u0002\u0002\u0002",
    "\u0d52\u0d53\u0005\u01cc\u00e7\u0002\u0d53\u0d54\u00070\u0002\u0002",
    "\u0d54\u0d55\u0005\u01a4\u00d3\u0002\u0d55\u0d5b\u0003\u0002\u0002\u0002",
    "\u0d56\u0d57\u0005\u01ce\u00e8\u0002\u0d57\u0d58\u00070\u0002\u0002",
    "\u0d58\u0d59\u0005\u01a4\u00d3\u0002\u0d59\u0d5b\u0003\u0002\u0002\u0002",
    "\u0d5a\u0d52\u0003\u0002\u0002\u0002\u0d5a\u0d56\u0003\u0002\u0002\u0002",
    "\u0d5b\u01cb\u0003\u0002\u0002\u0002\u0d5c\u0d5e\u0007\u001a\u0002\u0002",
    "\u0d5d\u0d5f\u0005\u01d2\u00ea\u0002\u0d5e\u0d5d\u0003\u0002\u0002\u0002",
    "\u0d5e\u0d5f\u0003\u0002\u0002\u0002\u0d5f\u0d60\u0003\u0002\u0002\u0002",
    "\u0d60\u0d61\u0005\u019c\u00cf\u0002\u0d61\u0d62\u00073\u0002\u0002",
    "\u0d62\u0d63\u0007\u001a\u0002\u0002\u0d63\u0d65\u0005\u019e\u00d0\u0002",
    "\u0d64\u0d66\u0005\u01d6\u00ec\u0002\u0d65\u0d64\u0003\u0002\u0002\u0002",
    "\u0d65\u0d66\u0003\u0002\u0002\u0002\u0d66\u0d67\u0003\u0002\u0002\u0002",
    "\u0d67\u0d68\u0007*\u0002\u0002\u0d68\u0d69\u0005\u01d0\u00e9\u0002",
    "\u0d69\u0d6a\u0007\u001b\u0002\u0002\u0d6a\u0d6b\u0007\u001b\u0002\u0002",
    "\u0d6b\u01cd\u0003\u0002\u0002\u0002\u0d6c\u0d6e\u0007\u001a\u0002\u0002",
    "\u0d6d\u0d6f\u0005\u01d2\u00ea\u0002\u0d6e\u0d6d\u0003\u0002\u0002\u0002",
    "\u0d6e\u0d6f\u0003\u0002\u0002\u0002\u0d6f\u0d70\u0003\u0002\u0002\u0002",
    "\u0d70\u0d71\u0005\u0198\u00cd\u0002\u0d71\u0d72\u0007\u001f\u0002\u0002",
    "\u0d72\u0d73\u0007\u001a\u0002\u0002\u0d73\u0d75\u0005\u019a\u00ce\u0002",
    "\u0d74\u0d76\u0005\u01d6\u00ec\u0002\u0d75\u0d74\u0003\u0002\u0002\u0002",
    "\u0d75\u0d76\u0003\u0002\u0002\u0002\u0d76\u0d77\u0003\u0002\u0002\u0002",
    "\u0d77\u0d78\u0007*\u0002\u0002\u0d78\u0d79\u0005\u01d0\u00e9\u0002",
    "\u0d79\u0d7a\u0007\u001b\u0002\u0002\u0d7a\u0d7b\u0007\u001b\u0002\u0002",
    "\u0d7b\u01cf\u0003\u0002\u0002\u0002\u0d7c\u0d7d\u0005\u0240\u0121\u0002",
    "\u0d7d\u01d1\u0003\u0002\u0002\u0002\u0d7e\u0d7f\t\u0012\u0002\u0002",
    "\u0d7f\u01d3\u0003\u0002\u0002\u0002\u0d80\u0d81\u0007h\u0002\u0002",
    "\u0d81\u0d82\u0007\u001a\u0002\u0002\u0d82\u0d83\u0005\u0246\u0124\u0002",
    "\u0d83\u0d84\u0007\u001b\u0002\u0002\u0d84\u0d85\u0005\u0192\u00ca\u0002",
    "\u0d85\u0d8f\u0003\u0002\u0002\u0002\u0d86\u0d87\u0007h\u0002\u0002",
    "\u0d87\u0d88\u0007\u001a\u0002\u0002\u0d88\u0d89\u0005\u0246\u0124\u0002",
    "\u0d89\u0d8a\u0007\u001b\u0002\u0002\u0d8a\u0d8b\u0005\u01ca\u00e6\u0002",
    "\u0d8b\u0d8f\u0003\u0002\u0002\u0002\u0d8c\u0d8d\u0007i\u0002\u0002",
    "\u0d8d\u0d8f\u0005\u0192\u00ca\u0002\u0d8e\u0d80\u0003\u0002\u0002\u0002",
    "\u0d8e\u0d86\u0003\u0002\u0002\u0002\u0d8e\u0d8c\u0003\u0002\u0002\u0002",
    "\u0d8f\u01d5\u0003\u0002\u0002\u0002\u0d90\u0d91\t\u0013\u0002\u0002",
    "\u0d91\u01d7\u0003\u0002\u0002\u0002\u0d92\u0d9f\u0005\u01da\u00ee\u0002",
    "\u0d93\u0d9f\u0005\u01dc\u00ef\u0002\u0d94\u0d9f\u0005\u01de\u00f0\u0002",
    "\u0d95\u0d9f\u0005\u01e0\u00f1\u0002\u0d96\u0d9f\u0005\u01e2\u00f2\u0002",
    "\u0d97\u0d9f\u0005\u01e4\u00f3\u0002\u0d98\u0d9f\u0005\u01e6\u00f4\u0002",
    "\u0d99\u0d9f\u0005\u01e8\u00f5\u0002\u0d9a\u0d9f\u0005\u01ea\u00f6\u0002",
    "\u0d9b\u0d9f\u0005\u01ec\u00f7\u0002\u0d9c\u0d9f\u0005\u01ee\u00f8\u0002",
    "\u0d9d\u0d9f\u0005\u01f0\u00f9\u0002\u0d9e\u0d92\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d93\u0003\u0002\u0002\u0002\u0d9e\u0d94\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d95\u0003\u0002\u0002\u0002\u0d9e\u0d96\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d97\u0003\u0002\u0002\u0002\u0d9e\u0d98\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d99\u0003\u0002\u0002\u0002\u0d9e\u0d9a\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d9b\u0003\u0002\u0002\u0002\u0d9e\u0d9c\u0003\u0002\u0002\u0002",
    "\u0d9e\u0d9d\u0003\u0002\u0002\u0002\u0d9f\u01d9\u0003\u0002\u0002\u0002",
    "\u0da0\u0da1\u0007\u0010\u0002\u0002\u0da1\u0da2\u0007\u001a\u0002\u0002",
    "\u0da2\u0da3\u0005\u01f6\u00fc\u0002\u0da3\u0da4\u0007\"\u0002\u0002",
    "\u0da4\u0da5\u0005\u0202\u0102\u0002\u0da5\u0da6\u0007\"\u0002\u0002",
    "\u0da6\u0dab\u0005\u020c\u0107\u0002\u0da7\u0da9\u0007\"\u0002\u0002",
    "\u0da8\u0daa\u0005\u0200\u0101\u0002\u0da9\u0da8\u0003\u0002\u0002\u0002",
    "\u0da9\u0daa\u0003\u0002\u0002\u0002\u0daa\u0dac\u0003\u0002\u0002\u0002",
    "\u0dab\u0da7\u0003\u0002\u0002\u0002\u0dab\u0dac\u0003\u0002\u0002\u0002",
    "\u0dac\u0dad\u0003\u0002\u0002\u0002\u0dad\u0dae\u0007\u001b\u0002\u0002",
    "\u0dae\u0daf\u0007+\u0002\u0002\u0daf\u01db\u0003\u0002\u0002\u0002",
    "\u0db0\u0db1\u0007\n\u0002\u0002\u0db1\u0db2\u0007\u001a\u0002\u0002",
    "\u0db2\u0db3\u0005\u0202\u0102\u0002\u0db3\u0db4\u0007\"\u0002\u0002",
    "\u0db4\u0db5\u0005\u01f6\u00fc\u0002\u0db5\u0db6\u0007\"\u0002\u0002",
    "\u0db6\u0dbb\u0005\u020c\u0107\u0002\u0db7\u0db9\u0007\"\u0002\u0002",
    "\u0db8\u0dba\u0005\u0200\u0101\u0002\u0db9\u0db8\u0003\u0002\u0002\u0002",
    "\u0db9\u0dba\u0003\u0002\u0002\u0002\u0dba\u0dbc\u0003\u0002\u0002\u0002",
    "\u0dbb\u0db7\u0003\u0002\u0002\u0002\u0dbb\u0dbc\u0003\u0002\u0002\u0002",
    "\u0dbc\u0dbd\u0003\u0002\u0002\u0002\u0dbd\u0dbe\u0007\u001b\u0002\u0002",
    "\u0dbe\u0dbf\u0007+\u0002\u0002\u0dbf\u01dd\u0003\u0002\u0002\u0002",
    "\u0dc0\u0dc1\u0007\u0011\u0002\u0002\u0dc1\u0dc2\u0007\u001a\u0002\u0002",
    "\u0dc2\u0dc3\u0005\u0202\u0102\u0002\u0dc3\u0dc4\u0007\"\u0002\u0002",
    "\u0dc4\u0dc5\u0005\u01f6\u00fc\u0002\u0dc5\u0dc6\u0007\"\u0002\u0002",
    "\u0dc6\u0dc7\u0005\u020c\u0107\u0002\u0dc7\u0dc8\u0007\"\u0002\u0002",
    "\u0dc8\u0de5\u0005\u020c\u0107\u0002\u0dc9\u0dcb\u0007\"\u0002\u0002",
    "\u0dca\u0dcc\u0005\u0200\u0101\u0002\u0dcb\u0dca\u0003\u0002\u0002\u0002",
    "\u0dcb\u0dcc\u0003\u0002\u0002\u0002\u0dcc\u0de3\u0003\u0002\u0002\u0002",
    "\u0dcd\u0dcf\u0007\"\u0002\u0002\u0dce\u0dd0\u0005\u0206\u0104\u0002",
    "\u0dcf\u0dce\u0003\u0002\u0002\u0002\u0dcf\u0dd0\u0003\u0002\u0002\u0002",
    "\u0dd0\u0de1\u0003\u0002\u0002\u0002\u0dd1\u0dd3\u0007\"\u0002\u0002",
    "\u0dd2\u0dd4\u0005\u01f2\u00fa\u0002\u0dd3\u0dd2\u0003\u0002\u0002\u0002",
    "\u0dd3\u0dd4\u0003\u0002\u0002\u0002\u0dd4\u0ddf\u0003\u0002\u0002\u0002",
    "\u0dd5\u0dd7\u0007\"\u0002\u0002\u0dd6\u0dd8\u0005\u01fa\u00fe\u0002",
    "\u0dd7\u0dd6\u0003\u0002\u0002\u0002\u0dd7\u0dd8\u0003\u0002\u0002\u0002",
    "\u0dd8\u0ddd\u0003\u0002\u0002\u0002\u0dd9\u0ddb\u0007\"\u0002\u0002",
    "\u0dda\u0ddc\u0005\u01f8\u00fd\u0002\u0ddb\u0dda\u0003\u0002\u0002\u0002",
    "\u0ddb\u0ddc\u0003\u0002\u0002\u0002\u0ddc\u0dde\u0003\u0002\u0002\u0002",
    "\u0ddd\u0dd9\u0003\u0002\u0002\u0002\u0ddd\u0dde\u0003\u0002\u0002\u0002",
    "\u0dde\u0de0\u0003\u0002\u0002\u0002\u0ddf\u0dd5\u0003\u0002\u0002\u0002",
    "\u0ddf\u0de0\u0003\u0002\u0002\u0002\u0de0\u0de2\u0003\u0002\u0002\u0002",
    "\u0de1\u0dd1\u0003\u0002\u0002\u0002\u0de1\u0de2\u0003\u0002\u0002\u0002",
    "\u0de2\u0de4\u0003\u0002\u0002\u0002\u0de3\u0dcd\u0003\u0002\u0002\u0002",
    "\u0de3\u0de4\u0003\u0002\u0002\u0002\u0de4\u0de6\u0003\u0002\u0002\u0002",
    "\u0de5\u0dc9\u0003\u0002\u0002\u0002\u0de5\u0de6\u0003\u0002\u0002\u0002",
    "\u0de6\u0de7\u0003\u0002\u0002\u0002\u0de7\u0de8\u0007\u001b\u0002\u0002",
    "\u0de8\u0de9\u0007+\u0002\u0002\u0de9\u01df\u0003\u0002\u0002\u0002",
    "\u0dea\u0deb\u0007\r\u0002\u0002\u0deb\u0dec\u0007\u001a\u0002\u0002",
    "\u0dec\u0ded\u0005\u0202\u0102\u0002\u0ded\u0dee\u0007\"\u0002\u0002",
    "\u0dee\u0def\u0005\u01f6\u00fc\u0002\u0def\u0df0\u0007\"\u0002\u0002",
    "\u0df0\u0df5\u0005\u020c\u0107\u0002\u0df1\u0df3\u0007\"\u0002\u0002",
    "\u0df2\u0df4\u0005\u0200\u0101\u0002\u0df3\u0df2\u0003\u0002\u0002\u0002",
    "\u0df3\u0df4\u0003\u0002\u0002\u0002\u0df4\u0df6\u0003\u0002\u0002\u0002",
    "\u0df5\u0df1\u0003\u0002\u0002\u0002\u0df5\u0df6\u0003\u0002\u0002\u0002",
    "\u0df6\u0df7\u0003\u0002\u0002\u0002\u0df7\u0df8\u0007\u001b\u0002\u0002",
    "\u0df8\u0df9\u0007+\u0002\u0002\u0df9\u01e1\u0003\u0002\u0002\u0002",
    "\u0dfa\u0dfb\u0007\u000f\u0002\u0002\u0dfb\u0dfc\u0007\u001a\u0002\u0002",
    "\u0dfc\u0dfd\u0005\u0202\u0102\u0002\u0dfd\u0dfe\u0007\"\u0002\u0002",
    "\u0dfe\u0dff\u0005\u01f6\u00fc\u0002\u0dff\u0e00\u0007\"\u0002\u0002",
    "\u0e00\u0e05\u0005\u020c\u0107\u0002\u0e01\u0e03\u0007\"\u0002\u0002",
    "\u0e02\u0e04\u0005\u0200\u0101\u0002\u0e03\u0e02\u0003\u0002\u0002\u0002",
    "\u0e03\u0e04\u0003\u0002\u0002\u0002\u0e04\u0e06\u0003\u0002\u0002\u0002",
    "\u0e05\u0e01\u0003\u0002\u0002\u0002\u0e05\u0e06\u0003\u0002\u0002\u0002",
    "\u0e06\u0e07\u0003\u0002\u0002\u0002\u0e07\u0e08\u0007\u001b\u0002\u0002",
    "\u0e08\u0e09\u0007+\u0002\u0002\u0e09\u01e3\u0003\u0002\u0002\u0002",
    "\u0e0a\u0e0b\u0007\u000e\u0002\u0002\u0e0b\u0e0c\u0007\u001a\u0002\u0002",
    "\u0e0c\u0e0d\u0005\u0202\u0102\u0002\u0e0d\u0e0e\u0007\"\u0002\u0002",
    "\u0e0e\u0e0f\u0005\u01f6\u00fc\u0002\u0e0f\u0e10\u0007\"\u0002\u0002",
    "\u0e10\u0e11\u0005\u020c\u0107\u0002\u0e11\u0e12\u0007\"\u0002\u0002",
    "\u0e12\u0e2f\u0005\u020c\u0107\u0002\u0e13\u0e15\u0007\"\u0002\u0002",
    "\u0e14\u0e16\u0005\u0200\u0101\u0002\u0e15\u0e14\u0003\u0002\u0002\u0002",
    "\u0e15\u0e16\u0003\u0002\u0002\u0002\u0e16\u0e2d\u0003\u0002\u0002\u0002",
    "\u0e17\u0e19\u0007\"\u0002\u0002\u0e18\u0e1a\u0005\u0206\u0104\u0002",
    "\u0e19\u0e18\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0003\u0002\u0002\u0002",
    "\u0e1a\u0e2b\u0003\u0002\u0002\u0002\u0e1b\u0e1d\u0007\"\u0002\u0002",
    "\u0e1c\u0e1e\u0005\u01f2\u00fa\u0002\u0e1d\u0e1c\u0003\u0002\u0002\u0002",
    "\u0e1d\u0e1e\u0003\u0002\u0002\u0002\u0e1e\u0e29\u0003\u0002\u0002\u0002",
    "\u0e1f\u0e21\u0007\"\u0002\u0002\u0e20\u0e22\u0005\u01fa\u00fe\u0002",
    "\u0e21\u0e20\u0003\u0002\u0002\u0002\u0e21\u0e22\u0003\u0002\u0002\u0002",
    "\u0e22\u0e27\u0003\u0002\u0002\u0002\u0e23\u0e25\u0007\"\u0002\u0002",
    "\u0e24\u0e26\u0005\u01f8\u00fd\u0002\u0e25\u0e24\u0003\u0002\u0002\u0002",
    "\u0e25\u0e26\u0003\u0002\u0002\u0002\u0e26\u0e28\u0003\u0002\u0002\u0002",
    "\u0e27\u0e23\u0003\u0002\u0002\u0002\u0e27\u0e28\u0003\u0002\u0002\u0002",
    "\u0e28\u0e2a\u0003\u0002\u0002\u0002\u0e29\u0e1f\u0003\u0002\u0002\u0002",
    "\u0e29\u0e2a\u0003\u0002\u0002\u0002\u0e2a\u0e2c\u0003\u0002\u0002\u0002",
    "\u0e2b\u0e1b\u0003\u0002\u0002\u0002\u0e2b\u0e2c\u0003\u0002\u0002\u0002",
    "\u0e2c\u0e2e\u0003\u0002\u0002\u0002\u0e2d\u0e17\u0003\u0002\u0002\u0002",
    "\u0e2d\u0e2e\u0003\u0002\u0002\u0002\u0e2e\u0e30\u0003\u0002\u0002\u0002",
    "\u0e2f\u0e13\u0003\u0002\u0002\u0002\u0e2f\u0e30\u0003\u0002\u0002\u0002",
    "\u0e30\u0e31\u0003\u0002\u0002\u0002\u0e31\u0e32\u0007\u001b\u0002\u0002",
    "\u0e32\u0e33\u0007+\u0002\u0002\u0e33\u01e5\u0003\u0002\u0002\u0002",
    "\u0e34\u0e35\u0007\u0012\u0002\u0002\u0e35\u0e36\u0007\u001a\u0002\u0002",
    "\u0e36\u0e37\u0005\u0202\u0102\u0002\u0e37\u0e38\u0007\"\u0002\u0002",
    "\u0e38\u0e39\u0005\u01f6\u00fc\u0002\u0e39\u0e3a\u0007\"\u0002\u0002",
    "\u0e3a\u0e3f\u0005\u020c\u0107\u0002\u0e3b\u0e3d\u0007\"\u0002\u0002",
    "\u0e3c\u0e3e\u0005\u0200\u0101\u0002\u0e3d\u0e3c\u0003\u0002\u0002\u0002",
    "\u0e3d\u0e3e\u0003\u0002\u0002\u0002\u0e3e\u0e40\u0003\u0002\u0002\u0002",
    "\u0e3f\u0e3b\u0003\u0002\u0002\u0002\u0e3f\u0e40\u0003\u0002\u0002\u0002",
    "\u0e40\u0e41\u0003\u0002\u0002\u0002\u0e41\u0e42\u0007\u001b\u0002\u0002",
    "\u0e42\u0e43\u0007+\u0002\u0002\u0e43\u01e7\u0003\u0002\u0002\u0002",
    "\u0e44\u0e45\u0007\u0013\u0002\u0002\u0e45\u0e46\u0007\u001a\u0002\u0002",
    "\u0e46\u0e47\u0005\u0202\u0102\u0002\u0e47\u0e48\u0007\"\u0002\u0002",
    "\u0e48\u0e49\u0005\u01f6\u00fc\u0002\u0e49\u0e4a\u0007\"\u0002\u0002",
    "\u0e4a\u0e5b\u0005\u020c\u0107\u0002\u0e4b\u0e4d\u0007\"\u0002\u0002",
    "\u0e4c\u0e4e\u0005\u0200\u0101\u0002\u0e4d\u0e4c\u0003\u0002\u0002\u0002",
    "\u0e4d\u0e4e\u0003\u0002\u0002\u0002\u0e4e\u0e59\u0003\u0002\u0002\u0002",
    "\u0e4f\u0e51\u0007\"\u0002\u0002\u0e50\u0e52\u0005\u01fe\u0100\u0002",
    "\u0e51\u0e50\u0003\u0002\u0002\u0002\u0e51\u0e52\u0003\u0002\u0002\u0002",
    "\u0e52\u0e57\u0003\u0002\u0002\u0002\u0e53\u0e55\u0007\"\u0002\u0002",
    "\u0e54\u0e56\u0005\u0204\u0103\u0002\u0e55\u0e54\u0003\u0002\u0002\u0002",
    "\u0e55\u0e56\u0003\u0002\u0002\u0002\u0e56\u0e58\u0003\u0002\u0002\u0002",
    "\u0e57\u0e53\u0003\u0002\u0002\u0002\u0e57\u0e58\u0003\u0002\u0002\u0002",
    "\u0e58\u0e5a\u0003\u0002\u0002\u0002\u0e59\u0e4f\u0003\u0002\u0002\u0002",
    "\u0e59\u0e5a\u0003\u0002\u0002\u0002\u0e5a\u0e5c\u0003\u0002\u0002\u0002",
    "\u0e5b\u0e4b\u0003\u0002\u0002\u0002\u0e5b\u0e5c\u0003\u0002\u0002\u0002",
    "\u0e5c\u0e5d\u0003\u0002\u0002\u0002\u0e5d\u0e5e\u0007\u001b\u0002\u0002",
    "\u0e5e\u0e5f\u0007+\u0002\u0002\u0e5f\u01e9\u0003\u0002\u0002\u0002",
    "\u0e60\u0e61\u0007\t\u0002\u0002\u0e61\u0e62\u0007\u001a\u0002\u0002",
    "\u0e62\u0e63\u0005\u0202\u0102\u0002\u0e63\u0e64\u0007\"\u0002\u0002",
    "\u0e64\u0e65\u0005\u01f6\u00fc\u0002\u0e65\u0e66\u0007\"\u0002\u0002",
    "\u0e66\u0e67\u0005\u020c\u0107\u0002\u0e67\u0e68\u0007\"\u0002\u0002",
    "\u0e68\u0e79\u0005\u020c\u0107\u0002\u0e69\u0e6b\u0007\"\u0002\u0002",
    "\u0e6a\u0e6c\u0005\u0200\u0101\u0002\u0e6b\u0e6a\u0003\u0002\u0002\u0002",
    "\u0e6b\u0e6c\u0003\u0002\u0002\u0002\u0e6c\u0e77\u0003\u0002\u0002\u0002",
    "\u0e6d\u0e6f\u0007\"\u0002\u0002\u0e6e\u0e70\u0005\u01fe\u0100\u0002",
    "\u0e6f\u0e6e\u0003\u0002\u0002\u0002\u0e6f\u0e70\u0003\u0002\u0002\u0002",
    "\u0e70\u0e75\u0003\u0002\u0002\u0002\u0e71\u0e73\u0007\"\u0002\u0002",
    "\u0e72\u0e74\u0005\u0204\u0103\u0002\u0e73\u0e72\u0003\u0002\u0002\u0002",
    "\u0e73\u0e74\u0003\u0002\u0002\u0002\u0e74\u0e76\u0003\u0002\u0002\u0002",
    "\u0e75\u0e71\u0003\u0002\u0002\u0002\u0e75\u0e76\u0003\u0002\u0002\u0002",
    "\u0e76\u0e78\u0003\u0002\u0002\u0002\u0e77\u0e6d\u0003\u0002\u0002\u0002",
    "\u0e77\u0e78\u0003\u0002\u0002\u0002\u0e78\u0e7a\u0003\u0002\u0002\u0002",
    "\u0e79\u0e69\u0003\u0002\u0002\u0002\u0e79\u0e7a\u0003\u0002\u0002\u0002",
    "\u0e7a\u0e7b\u0003\u0002\u0002\u0002\u0e7b\u0e7c\u0007\u001b\u0002\u0002",
    "\u0e7c\u0e7d\u0007+\u0002\u0002\u0e7d\u01eb\u0003\u0002\u0002\u0002",
    "\u0e7e\u0e7f\u0007\f\u0002\u0002\u0e7f\u0e80\u0007\u001a\u0002\u0002",
    "\u0e80\u0e81\u0005\u01f4\u00fb\u0002\u0e81\u0e82\u0007\"\u0002\u0002",
    "\u0e82\u0e87\u0005\u020c\u0107\u0002\u0e83\u0e85\u0007\"\u0002\u0002",
    "\u0e84\u0e86\u0005\u0200\u0101\u0002\u0e85\u0e84\u0003\u0002\u0002\u0002",
    "\u0e85\u0e86\u0003\u0002\u0002\u0002\u0e86\u0e88\u0003\u0002\u0002\u0002",
    "\u0e87\u0e83\u0003\u0002\u0002\u0002\u0e87\u0e88\u0003\u0002\u0002\u0002",
    "\u0e88\u0e89\u0003\u0002\u0002\u0002\u0e89\u0e8a\u0007\u001b\u0002\u0002",
    "\u0e8a\u0e8b\u0007+\u0002\u0002\u0e8b\u01ed\u0003\u0002\u0002\u0002",
    "\u0e8c\u0e8d\u0007\u0014\u0002\u0002\u0e8d\u0e8e\u0007\u001a\u0002\u0002",
    "\u0e8e\u0e8f\u0005\u01f4\u00fb\u0002\u0e8f\u0e90\u0007\"\u0002\u0002",
    "\u0e90\u0e97\u0005\u020c\u0107\u0002\u0e91\u0e92\u0007\"\u0002\u0002",
    "\u0e92\u0e95\u0005\u020a\u0106\u0002\u0e93\u0e94\u0007\"\u0002\u0002",
    "\u0e94\u0e96\u0005\u0200\u0101\u0002\u0e95\u0e93\u0003\u0002\u0002\u0002",
    "\u0e95\u0e96\u0003\u0002\u0002\u0002\u0e96\u0e98\u0003\u0002\u0002\u0002",
    "\u0e97\u0e91\u0003\u0002\u0002\u0002\u0e97\u0e98\u0003\u0002\u0002\u0002",
    "\u0e98\u0e99\u0003\u0002\u0002\u0002\u0e99\u0e9a\u0007\u001b\u0002\u0002",
    "\u0e9a\u0e9b\u0007+\u0002\u0002\u0e9b\u01ef\u0003\u0002\u0002\u0002",
    "\u0e9c\u0e9d\u0007\u000b\u0002\u0002\u0e9d\u0e9e\u0007\u001a\u0002\u0002",
    "\u0e9e\u0e9f\u0005\u0202\u0102\u0002\u0e9f\u0ea0\u0007\"\u0002\u0002",
    "\u0ea0\u0ea1\u0005\u01f6\u00fc\u0002\u0ea1\u0ea2\u0007\"\u0002\u0002",
    "\u0ea2\u0ea3\u0005\u0208\u0105\u0002\u0ea3\u0ea4\u0007\"\u0002\u0002",
    "\u0ea4\u0ea9\u0005\u01fc\u00ff\u0002\u0ea5\u0ea7\u0007\"\u0002\u0002",
    "\u0ea6\u0ea8\u0005\u0200\u0101\u0002\u0ea7\u0ea6\u0003\u0002\u0002\u0002",
    "\u0ea7\u0ea8\u0003\u0002\u0002\u0002\u0ea8\u0eaa\u0003\u0002\u0002\u0002",
    "\u0ea9\u0ea5\u0003\u0002\u0002\u0002\u0ea9\u0eaa\u0003\u0002\u0002\u0002",
    "\u0eaa\u0eab\u0003\u0002\u0002\u0002\u0eab\u0eac\u0007\u001b\u0002\u0002",
    "\u0eac\u0ead\u0007+\u0002\u0002\u0ead\u01f1\u0003\u0002\u0002\u0002",
    "\u0eae\u0eaf\u0005\u0244\u0123\u0002\u0eaf\u01f3\u0003\u0002\u0002\u0002",
    "\u0eb0\u0eb1\u0005\u0210\u0109\u0002\u0eb1\u01f5\u0003\u0002\u0002\u0002",
    "\u0eb2\u0eb3\u0005\u020e\u0108\u0002\u0eb3\u01f7\u0003\u0002\u0002\u0002",
    "\u0eb4\u0ebb\u0005\u02be\u0160\u0002\u0eb5\u0eb6\u0005\u02be\u0160\u0002",
    "\u0eb6\u0eb7\u0007;\u0002\u0002\u0eb7\u0eb8\u0005\u023a\u011e\u0002",
    "\u0eb8\u0eb9\u0007<\u0002\u0002\u0eb9\u0ebb\u0003\u0002\u0002\u0002",
    "\u0eba\u0eb4\u0003\u0002\u0002\u0002\u0eba\u0eb5\u0003\u0002\u0002\u0002",
    "\u0ebb\u01f9\u0003\u0002\u0002\u0002\u0ebc\u0ec3\u0005\u02be\u0160\u0002",
    "\u0ebd\u0ebe\u0005\u02be\u0160\u0002\u0ebe\u0ebf\u0007;\u0002\u0002",
    "\u0ebf\u0ec0\u0005\u023a\u011e\u0002\u0ec0\u0ec1\u0007<\u0002\u0002",
    "\u0ec1\u0ec3\u0003\u0002\u0002\u0002\u0ec2\u0ebc\u0003\u0002\u0002\u0002",
    "\u0ec2\u0ebd\u0003\u0002\u0002\u0002\u0ec3\u01fb\u0003\u0002\u0002\u0002",
    "\u0ec4\u0ec5\u0005\u0244\u0123\u0002\u0ec5\u01fd\u0003\u0002\u0002\u0002",
    "\u0ec6\u0ec7\u0005\u0238\u011d\u0002\u0ec7\u01ff\u0003\u0002\u0002\u0002",
    "\u0ec8\u0ec9\u0005\u02c8\u0165\u0002\u0ec9\u0201\u0003\u0002\u0002\u0002",
    "\u0eca\u0ecb\u0005\u020e\u0108\u0002\u0ecb\u0203\u0003\u0002\u0002\u0002",
    "\u0ecc\u0ecd\u0005\u0238\u011d\u0002\u0ecd\u0205\u0003\u0002\u0002\u0002",
    "\u0ece\u0ecf\u0005\u0244\u0123\u0002\u0ecf\u0207\u0003\u0002\u0002\u0002",
    "\u0ed0\u0ed1\u0005\u0244\u0123\u0002\u0ed1\u0209\u0003\u0002\u0002\u0002",
    "\u0ed2\u0ed3\u0005\u0238\u011d\u0002\u0ed3\u020b\u0003\u0002\u0002\u0002",
    "\u0ed4\u0ed5\u0005\u0240\u0121\u0002\u0ed5\u020d\u0003\u0002\u0002\u0002",
    "\u0ed6\u0ed8\u0005\u0212\u010a\u0002\u0ed7\u0ed6\u0003\u0002\u0002\u0002",
    "\u0ed7\u0ed8\u0003\u0002\u0002\u0002\u0ed8\u0ed9\u0003\u0002\u0002\u0002",
    "\u0ed9\u0edc\u0005\u0214\u010b\u0002\u0eda\u0edb\u0007\u0018\u0002\u0002",
    "\u0edb\u0edd\u0005\u021a\u010e\u0002\u0edc\u0eda\u0003\u0002\u0002\u0002",
    "\u0edc\u0edd\u0003\u0002\u0002\u0002\u0edd\u020f\u0003\u0002\u0002\u0002",
    "\u0ede\u0edf\u0005\u0212\u010a\u0002\u0edf\u0ee2\u0005\u0214\u010b\u0002",
    "\u0ee0\u0ee1\u0007\u0018\u0002\u0002\u0ee1\u0ee3\u0005\u021a\u010e\u0002",
    "\u0ee2\u0ee0\u0003\u0002\u0002\u0002\u0ee2\u0ee3\u0003\u0002\u0002\u0002",
    "\u0ee3\u0211\u0003\u0002\u0002\u0002\u0ee4\u0ee8\u0007\u0085\u0002\u0002",
    "\u0ee5\u0ee8\u0007z\u0002\u0002\u0ee6\u0ee8\u0005\u0216\u010c\u0002",
    "\u0ee7\u0ee4\u0003\u0002\u0002\u0002\u0ee7\u0ee5\u0003\u0002\u0002\u0002",
    "\u0ee7\u0ee6\u0003\u0002\u0002\u0002\u0ee8\u0213\u0003\u0002\u0002\u0002",
    "\u0ee9\u0eec\u0005\u019c\u00cf\u0002\u0eea\u0eec\u0005\u019e\u00d0\u0002",
    "\u0eeb\u0ee9\u0003\u0002\u0002\u0002\u0eeb\u0eea\u0003\u0002\u0002\u0002",
    "\u0eec\u0215\u0003\u0002\u0002\u0002\u0eed\u0eee\u0007R\u0002\u0002",
    "\u0eee\u0eef\u0007;\u0002\u0002\u0eef\u0ef4\u0005\u0218\u010d\u0002",
    "\u0ef0\u0ef1\u0007\"\u0002\u0002\u0ef1\u0ef3\u0005\u0218\u010d\u0002",
    "\u0ef2\u0ef0\u0003\u0002\u0002\u0002\u0ef3\u0ef6\u0003\u0002\u0002\u0002",
    "\u0ef4\u0ef2\u0003\u0002\u0002\u0002\u0ef4\u0ef5\u0003\u0002\u0002\u0002",
    "\u0ef5\u0ef7\u0003\u0002\u0002\u0002\u0ef6\u0ef4\u0003\u0002\u0002\u0002",
    "\u0ef7\u0ef8\u0007<\u0002\u0002\u0ef8\u0217\u0003\u0002\u0002\u0002",
    "\u0ef9\u0efa\u0007\u00e7\u0002\u0002\u0efa\u0219\u0003\u0002\u0002\u0002",
    "\u0efb\u0f01\u0005\u021c\u010f\u0002\u0efc\u0efd\u0007\u001a\u0002\u0002",
    "\u0efd\u0efe\u0005\u021c\u010f\u0002\u0efe\u0eff\u0007\u001b\u0002\u0002",
    "\u0eff\u0f01\u0003\u0002\u0002\u0002\u0f00\u0efb\u0003\u0002\u0002\u0002",
    "\u0f00\u0efc\u0003\u0002\u0002\u0002\u0f01\u021b\u0003\u0002\u0002\u0002",
    "\u0f02\u0f16\u0005\u0240\u0121\u0002\u0f03\u0f04\u0007\u00be\u0002\u0002",
    "\u0f04\u0f16\u0005\u0240\u0121\u0002\u0f05\u0f06\u0005\u0240\u0121\u0002",
    "\u0f06\u0f07\u00071\u0002\u0002\u0f07\u0f08\u0005\u021e\u0110\u0002",
    "\u0f08\u0f16\u0003\u0002\u0002\u0002\u0f09\u0f0a\u0005\u0240\u0121\u0002",
    "\u0f0a\u0f0b\u00072\u0002\u0002\u0f0b\u0f0c\u0005\u021e\u0110\u0002",
    "\u0f0c\u0f16\u0003\u0002\u0002\u0002\u0f0d\u0f0e\u0005\u0240\u0121\u0002",
    "\u0f0e\u0f0f\u0007\u0004\u0002\u0002\u0f0f\u0f10\u0005\u021e\u0110\u0002",
    "\u0f10\u0f16\u0003\u0002\u0002\u0002\u0f11\u0f12\u0005\u0240\u0121\u0002",
    "\u0f12\u0f13\u0007\u0005\u0002\u0002\u0f13\u0f14\u0005\u021e\u0110\u0002",
    "\u0f14\u0f16\u0003\u0002\u0002\u0002\u0f15\u0f02\u0003\u0002\u0002\u0002",
    "\u0f15\u0f03\u0003\u0002\u0002\u0002\u0f15\u0f05\u0003\u0002\u0002\u0002",
    "\u0f15\u0f09\u0003\u0002\u0002\u0002\u0f15\u0f0d\u0003\u0002\u0002\u0002",
    "\u0f15\u0f11\u0003\u0002\u0002\u0002\u0f16\u021d\u0003\u0002\u0002\u0002",
    "\u0f17\u0f18\t\u0010\u0002\u0002\u0f18\u021f\u0003\u0002\u0002\u0002",
    "\u0f19\u0f1a\u0007\u00ba\u0002\u0002\u0f1a\u0f1f\u0005\u0240\u0121\u0002",
    "\u0f1b\u0f1c\u0007\"\u0002\u0002\u0f1c\u0f1e\u0005\u0240\u0121\u0002",
    "\u0f1d\u0f1b\u0003\u0002\u0002\u0002\u0f1e\u0f21\u0003\u0002\u0002\u0002",
    "\u0f1f\u0f1d\u0003\u0002\u0002\u0002\u0f1f\u0f20\u0003\u0002\u0002\u0002",
    "\u0f20\u0f22\u0003\u0002\u0002\u0002\u0f21\u0f1f\u0003\u0002\u0002\u0002",
    "\u0f22\u0f23\u0007\u00bd\u0002\u0002\u0f23\u0221\u0003\u0002\u0002\u0002",
    "\u0f24\u0f25\u0007\u00ba\u0002\u0002\u0f25\u0f2a\u0005\u0238\u011d\u0002",
    "\u0f26\u0f27\u0007\"\u0002\u0002\u0f27\u0f29\u0005\u0238\u011d\u0002",
    "\u0f28\u0f26\u0003\u0002\u0002\u0002\u0f29\u0f2c\u0003\u0002\u0002\u0002",
    "\u0f2a\u0f28\u0003\u0002\u0002\u0002\u0f2a\u0f2b\u0003\u0002\u0002\u0002",
    "\u0f2b\u0f2d\u0003\u0002\u0002\u0002\u0f2c\u0f2a\u0003\u0002\u0002\u0002",
    "\u0f2d\u0f2e\u0007\u00bd\u0002\u0002\u0f2e\u0223\u0003\u0002\u0002\u0002",
    "\u0f2f\u0f30\u0007\u00ba\u0002\u0002\u0f30\u0f31\u0005\u0238\u011d\u0002",
    "\u0f31\u0f32\u0005\u0222\u0112\u0002\u0f32\u0f33\u0007\u00bd\u0002\u0002",
    "\u0f33\u0225\u0003\u0002\u0002\u0002\u0f34\u0f35\u0007\u00ba\u0002\u0002",
    "\u0f35\u0f3a\u0005\u0246\u0124\u0002\u0f36\u0f37\u0007\"\u0002\u0002",
    "\u0f37\u0f39\u0005\u0246\u0124\u0002\u0f38\u0f36\u0003\u0002\u0002\u0002",
    "\u0f39\u0f3c\u0003\u0002\u0002\u0002\u0f3a\u0f38\u0003\u0002\u0002\u0002",
    "\u0f3a\u0f3b\u0003\u0002\u0002\u0002\u0f3b\u0f3d\u0003\u0002\u0002\u0002",
    "\u0f3c\u0f3a\u0003\u0002\u0002\u0002\u0f3d\u0f3e\u0007\u00bd\u0002\u0002",
    "\u0f3e\u0227\u0003\u0002\u0002\u0002\u0f3f\u0f40\u0007\u00ba\u0002\u0002",
    "\u0f40\u0f41\u0005\u0238\u011d\u0002\u0f41\u0f42\u0005\u0226\u0114\u0002",
    "\u0f42\u0f43\u0007\u00bd\u0002\u0002\u0f43\u0229\u0003\u0002\u0002\u0002",
    "\u0f44\u0f45\u0007\u00ba\u0002\u0002\u0f45\u0f46\u0005\u0238\u011d\u0002",
    "\u0f46\u0f47\u0005\u0220\u0111\u0002\u0f47\u0f48\u0007\u00bd\u0002\u0002",
    "\u0f48\u022b\u0003\u0002\u0002\u0002\u0f49\u0f4d\u0005\u0282\u0142\u0002",
    "\u0f4a\u0f4c\u0005\u0272\u013a\u0002\u0f4b\u0f4a\u0003\u0002\u0002\u0002",
    "\u0f4c\u0f4f\u0003\u0002\u0002\u0002\u0f4d\u0f4b\u0003\u0002\u0002\u0002",
    "\u0f4d\u0f4e\u0003\u0002\u0002\u0002\u0f4e\u0f50\u0003\u0002\u0002\u0002",
    "\u0f4f\u0f4d\u0003\u0002\u0002\u0002\u0f50\u0f51\u0007\u001a\u0002\u0002",
    "\u0f51\u0f56\u0005\u0238\u011d\u0002\u0f52\u0f53\u0007\"\u0002\u0002",
    "\u0f53\u0f55\u0005\u0238\u011d\u0002\u0f54\u0f52\u0003\u0002\u0002\u0002",
    "\u0f55\u0f58\u0003\u0002\u0002\u0002\u0f56\u0f54\u0003\u0002\u0002\u0002",
    "\u0f56\u0f57\u0003\u0002\u0002\u0002\u0f57\u0f59\u0003\u0002\u0002\u0002",
    "\u0f58\u0f56\u0003\u0002\u0002\u0002\u0f59\u0f5a\u0007\u001b\u0002\u0002",
    "\u0f5a\u022d\u0003\u0002\u0002\u0002\u0f5b\u0f5c\u0005\u02b8\u015d\u0002",
    "\u0f5c\u0f5d\u0007\u001a\u0002\u0002\u0f5d\u0f62\u0005\u0238\u011d\u0002",
    "\u0f5e\u0f5f\u0007\"\u0002\u0002\u0f5f\u0f61\u0005\u0238\u011d\u0002",
    "\u0f60\u0f5e\u0003\u0002\u0002\u0002\u0f61\u0f64\u0003\u0002\u0002\u0002",
    "\u0f62\u0f60\u0003\u0002\u0002\u0002\u0f62\u0f63\u0003\u0002\u0002\u0002",
    "\u0f63\u0f65\u0003\u0002\u0002\u0002\u0f64\u0f62\u0003\u0002\u0002\u0002",
    "\u0f65\u0f66\u0007\u001b\u0002\u0002\u0f66\u022f\u0003\u0002\u0002\u0002",
    "\u0f67\u0f6b\u0005\u028e\u0148\u0002\u0f68\u0f6a\u0005\u0272\u013a\u0002",
    "\u0f69\u0f68\u0003\u0002\u0002\u0002\u0f6a\u0f6d\u0003\u0002\u0002\u0002",
    "\u0f6b\u0f69\u0003\u0002\u0002\u0002\u0f6b\u0f6c\u0003\u0002\u0002\u0002",
    "\u0f6c\u0f6e\u0003\u0002\u0002\u0002\u0f6d\u0f6b\u0003\u0002\u0002\u0002",
    "\u0f6e\u0f6f\u0007\u001a\u0002\u0002\u0f6f\u0f74\u0005\u0240\u0121\u0002",
    "\u0f70\u0f71\u0007\"\u0002\u0002\u0f71\u0f73\u0005\u0240\u0121\u0002",
    "\u0f72\u0f70\u0003\u0002\u0002\u0002\u0f73\u0f76\u0003\u0002\u0002\u0002",
    "\u0f74\u0f72\u0003\u0002\u0002\u0002\u0f74\u0f75\u0003\u0002\u0002\u0002",
    "\u0f75\u0f77\u0003\u0002\u0002\u0002\u0f76\u0f74\u0003\u0002\u0002\u0002",
    "\u0f77\u0f78\u0007\u001b\u0002\u0002\u0f78\u0231\u0003\u0002\u0002\u0002",
    "\u0f79\u0f85\u0005\u02b8\u015d\u0002\u0f7a\u0f7b\u0007\u001a\u0002\u0002",
    "\u0f7b\u0f80\u0005\u0240\u0121\u0002\u0f7c\u0f7d\u0007\"\u0002\u0002",
    "\u0f7d\u0f7f\u0005\u0240\u0121\u0002\u0f7e\u0f7c\u0003\u0002\u0002\u0002",
    "\u0f7f\u0f82\u0003\u0002\u0002\u0002\u0f80\u0f7e\u0003\u0002\u0002\u0002",
    "\u0f80\u0f81\u0003\u0002\u0002\u0002\u0f81\u0f83\u0003\u0002\u0002\u0002",
    "\u0f82\u0f80\u0003\u0002\u0002\u0002\u0f83\u0f84\u0007\u001b\u0002\u0002",
    "\u0f84\u0f86\u0003\u0002\u0002\u0002\u0f85\u0f7a\u0003\u0002\u0002\u0002",
    "\u0f85\u0f86\u0003\u0002\u0002\u0002\u0f86\u0233\u0003\u0002\u0002\u0002",
    "\u0f87\u0f88\u0005\u0240\u0121\u0002\u0f88\u0235\u0003\u0002\u0002\u0002",
    "\u0f89\u0f8a\u0005\u0238\u011d\u0002\u0f8a\u0237\u0003\u0002\u0002\u0002",
    "\u0f8b\u0f8c\b\u011d\u0001\u0002\u0f8c\u0f97\u0005\u0250\u0129\u0002",
    "\u0f8d\u0f91\u0005\u025a\u012e\u0002\u0f8e\u0f90\u0005\u0272\u013a\u0002",
    "\u0f8f\u0f8e\u0003\u0002\u0002\u0002\u0f90\u0f93\u0003\u0002\u0002\u0002",
    "\u0f91\u0f8f\u0003\u0002\u0002\u0002\u0f91\u0f92\u0003\u0002\u0002\u0002",
    "\u0f92\u0f94\u0003\u0002\u0002\u0002\u0f93\u0f91\u0003\u0002\u0002\u0002",
    "\u0f94\u0f95\u0005\u0250\u0129\u0002\u0f95\u0f97\u0003\u0002\u0002\u0002",
    "\u0f96\u0f8b\u0003\u0002\u0002\u0002\u0f96\u0f8d\u0003\u0002\u0002\u0002",
    "\u0f97\u0fb0\u0003\u0002\u0002\u0002\u0f98\u0f99\f\u0004\u0002\u0002",
    "\u0f99\u0f9d\u0005\u025c\u012f\u0002\u0f9a\u0f9c\u0005\u0272\u013a\u0002",
    "\u0f9b\u0f9a\u0003\u0002\u0002\u0002\u0f9c\u0f9f\u0003\u0002\u0002\u0002",
    "\u0f9d\u0f9b\u0003\u0002\u0002\u0002\u0f9d\u0f9e\u0003\u0002\u0002\u0002",
    "\u0f9e\u0fa0\u0003\u0002\u0002\u0002\u0f9f\u0f9d\u0003\u0002\u0002\u0002",
    "\u0fa0\u0fa1\u0005\u0238\u011d\u0005\u0fa1\u0faf\u0003\u0002\u0002\u0002",
    "\u0fa2\u0fa3\f\u0003\u0002\u0002\u0fa3\u0fa7\u00078\u0002\u0002\u0fa4",
    "\u0fa6\u0005\u0272\u013a\u0002\u0fa5\u0fa4\u0003\u0002\u0002\u0002\u0fa6",
    "\u0fa9\u0003\u0002\u0002\u0002\u0fa7\u0fa5\u0003\u0002\u0002\u0002\u0fa7",
    "\u0fa8\u0003\u0002\u0002\u0002\u0fa8\u0faa\u0003\u0002\u0002\u0002\u0fa9",
    "\u0fa7\u0003\u0002\u0002\u0002\u0faa\u0fab\u0005\u0238\u011d\u0002\u0fab",
    "\u0fac\u0007*\u0002\u0002\u0fac\u0fad\u0005\u0238\u011d\u0004\u0fad",
    "\u0faf\u0003\u0002\u0002\u0002\u0fae\u0f98\u0003\u0002\u0002\u0002\u0fae",
    "\u0fa2\u0003\u0002\u0002\u0002\u0faf\u0fb2\u0003\u0002\u0002\u0002\u0fb0",
    "\u0fae\u0003\u0002\u0002\u0002\u0fb0\u0fb1\u0003\u0002\u0002\u0002\u0fb1",
    "\u0239\u0003\u0002\u0002\u0002\u0fb2\u0fb0\u0003\u0002\u0002\u0002\u0fb3",
    "\u0fbb\u0005\u0238\u011d\u0002\u0fb4\u0fb5\u0005\u0238\u011d\u0002\u0fb5",
    "\u0fb6\u0007*\u0002\u0002\u0fb6\u0fb7\u0005\u0238\u011d\u0002\u0fb7",
    "\u0fb8\u0007*\u0002\u0002\u0fb8\u0fb9\u0005\u0238\u011d\u0002\u0fb9",
    "\u0fbb\u0003\u0002\u0002\u0002\u0fba\u0fb3\u0003\u0002\u0002\u0002\u0fba",
    "\u0fb4\u0003\u0002\u0002\u0002\u0fbb\u023b\u0003\u0002\u0002\u0002\u0fbc",
    "\u0fca\u0005\u0238\u011d\u0002\u0fbd\u0fbe\u0005\u024a\u0126\u0002\u0fbe",
    "\u0fbf\u0007*\u0002\u0002\u0fbf\u0fc0\u0005\u0242\u0122\u0002\u0fc0",
    "\u0fca\u0003\u0002\u0002\u0002\u0fc1\u0fc2\u0005\u0236\u011c\u0002\u0fc2",
    "\u0fc3\u0007!\u0002\u0002\u0fc3\u0fc4\u0005\u024e\u0128\u0002\u0fc4",
    "\u0fca\u0003\u0002\u0002\u0002\u0fc5\u0fc6\u0005\u0236\u011c\u0002\u0fc6",
    "\u0fc7\u0007$\u0002\u0002\u0fc7\u0fc8\u0005\u024e\u0128\u0002\u0fc8",
    "\u0fca\u0003\u0002\u0002\u0002\u0fc9\u0fbc\u0003\u0002\u0002\u0002\u0fc9",
    "\u0fbd\u0003\u0002\u0002\u0002\u0fc9\u0fc1\u0003\u0002\u0002\u0002\u0fc9",
    "\u0fc5\u0003\u0002\u0002\u0002\u0fca\u023d\u0003\u0002\u0002\u0002\u0fcb",
    "\u0fcc\u0005\u0238\u011d\u0002\u0fcc\u023f\u0003\u0002\u0002\u0002\u0fcd",
    "\u0fce\b\u0121\u0001\u0002\u0fce\u0fd9\u0005\u0254\u012b\u0002\u0fcf",
    "\u0fd3\u0005\u025a\u012e\u0002\u0fd0\u0fd2\u0005\u0272\u013a\u0002\u0fd1",
    "\u0fd0\u0003\u0002\u0002\u0002\u0fd2\u0fd5\u0003\u0002\u0002\u0002\u0fd3",
    "\u0fd1\u0003\u0002\u0002\u0002\u0fd3\u0fd4\u0003\u0002\u0002\u0002\u0fd4",
    "\u0fd6\u0003\u0002\u0002\u0002\u0fd5\u0fd3\u0003\u0002\u0002\u0002\u0fd6",
    "\u0fd7\u0005\u0254\u012b\u0002\u0fd7\u0fd9\u0003\u0002\u0002\u0002\u0fd8",
    "\u0fcd\u0003\u0002\u0002\u0002\u0fd8\u0fcf\u0003\u0002\u0002\u0002\u0fd9",
    "\u0ff2\u0003\u0002\u0002\u0002\u0fda\u0fdb\f\u0004\u0002\u0002\u0fdb",
    "\u0fdf\u0005\u025c\u012f\u0002\u0fdc\u0fde\u0005\u0272\u013a\u0002\u0fdd",
    "\u0fdc\u0003\u0002\u0002\u0002\u0fde\u0fe1\u0003\u0002\u0002\u0002\u0fdf",
    "\u0fdd\u0003\u0002\u0002\u0002\u0fdf\u0fe0\u0003\u0002\u0002\u0002\u0fe0",
    "\u0fe2\u0003\u0002\u0002\u0002\u0fe1\u0fdf\u0003\u0002\u0002\u0002\u0fe2",
    "\u0fe3\u0005\u0240\u0121\u0005\u0fe3\u0ff1\u0003\u0002\u0002\u0002\u0fe4",
    "\u0fe5\f\u0003\u0002\u0002\u0fe5\u0fe9\u00078\u0002\u0002\u0fe6\u0fe8",
    "\u0005\u0272\u013a\u0002\u0fe7\u0fe6\u0003\u0002\u0002\u0002\u0fe8\u0feb",
    "\u0003\u0002\u0002\u0002\u0fe9\u0fe7\u0003\u0002\u0002\u0002\u0fe9\u0fea",
    "\u0003\u0002\u0002\u0002\u0fea\u0fec\u0003\u0002\u0002\u0002\u0feb\u0fe9",
    "\u0003\u0002\u0002\u0002\u0fec\u0fed\u0005\u0240\u0121\u0002\u0fed\u0fee",
    "\u0007*\u0002\u0002\u0fee\u0fef\u0005\u0240\u0121\u0004\u0fef\u0ff1",
    "\u0003\u0002\u0002\u0002\u0ff0\u0fda\u0003\u0002\u0002\u0002\u0ff0\u0fe4",
    "\u0003\u0002\u0002\u0002\u0ff1\u0ff4\u0003\u0002\u0002\u0002\u0ff2\u0ff0",
    "\u0003\u0002\u0002\u0002\u0ff2\u0ff3\u0003\u0002\u0002\u0002\u0ff3\u0241",
    "\u0003\u0002\u0002\u0002\u0ff4\u0ff2\u0003\u0002\u0002\u0002\u0ff5\u0ff6",
    "\u0005\u0238\u011d\u0002\u0ff6\u0243\u0003\u0002\u0002\u0002\u0ff7\u0fff",
    "\u0005\u0240\u0121\u0002\u0ff8\u0ff9\u0005\u0240\u0121\u0002\u0ff9\u0ffa",
    "\u0007*\u0002\u0002\u0ffa\u0ffb\u0005\u0240\u0121\u0002\u0ffb\u0ffc",
    "\u0007*\u0002\u0002\u0ffc\u0ffd\u0005\u0240\u0121\u0002\u0ffd\u0fff",
    "\u0003\u0002\u0002\u0002\u0ffe\u0ff7\u0003\u0002\u0002\u0002\u0ffe\u0ff8",
    "\u0003\u0002\u0002\u0002\u0fff\u0245\u0003\u0002\u0002\u0002\u1000\u1001",
    "\b\u0124\u0001\u0002\u1001\u100c\u0005\u0252\u012a\u0002\u1002\u1006",
    "\u0005\u025e\u0130\u0002\u1003\u1005\u0005\u0272\u013a\u0002\u1004\u1003",
    "\u0003\u0002\u0002\u0002\u1005\u1008\u0003\u0002\u0002\u0002\u1006\u1004",
    "\u0003\u0002\u0002\u0002\u1006\u1007\u0003\u0002\u0002\u0002\u1007\u1009",
    "\u0003\u0002\u0002\u0002\u1008\u1006\u0003\u0002\u0002\u0002\u1009\u100a",
    "\u0005\u0252\u012a\u0002\u100a\u100c\u0003\u0002\u0002\u0002\u100b\u1000",
    "\u0003\u0002\u0002\u0002\u100b\u1002\u0003\u0002\u0002\u0002\u100c\u1025",
    "\u0003\u0002\u0002\u0002\u100d\u100e\f\u0004\u0002\u0002\u100e\u1012",
    "\u0005\u0260\u0131\u0002\u100f\u1011\u0005\u0272\u013a\u0002\u1010\u100f",
    "\u0003\u0002\u0002\u0002\u1011\u1014\u0003\u0002\u0002\u0002\u1012\u1010",
    "\u0003\u0002\u0002\u0002\u1012\u1013\u0003\u0002\u0002\u0002\u1013\u1015",
    "\u0003\u0002\u0002\u0002\u1014\u1012\u0003\u0002\u0002\u0002\u1015\u1016",
    "\u0005\u0246\u0124\u0005\u1016\u1024\u0003\u0002\u0002\u0002\u1017\u1018",
    "\f\u0003\u0002\u0002\u1018\u101c\u00078\u0002\u0002\u1019\u101b\u0005",
    "\u0272\u013a\u0002\u101a\u1019\u0003\u0002\u0002\u0002\u101b\u101e\u0003",
    "\u0002\u0002\u0002\u101c\u101a\u0003\u0002\u0002\u0002\u101c\u101d\u0003",
    "\u0002\u0002\u0002\u101d\u101f\u0003\u0002\u0002\u0002\u101e\u101c\u0003",
    "\u0002\u0002\u0002\u101f\u1020\u0005\u0246\u0124\u0002\u1020\u1021\u0007",
    "*\u0002\u0002\u1021\u1022\u0005\u0246\u0124\u0004\u1022\u1024\u0003",
    "\u0002\u0002\u0002\u1023\u100d\u0003\u0002\u0002\u0002\u1023\u1017\u0003",
    "\u0002\u0002\u0002\u1024\u1027\u0003\u0002\u0002\u0002\u1025\u1023\u0003",
    "\u0002\u0002\u0002\u1025\u1026\u0003\u0002\u0002\u0002\u1026\u0247\u0003",
    "\u0002\u0002\u0002\u1027\u1025\u0003\u0002\u0002\u0002\u1028\u1030\u0005",
    "\u0246\u0124\u0002\u1029\u102a\u0005\u0246\u0124\u0002\u102a\u102b\u0007",
    "*\u0002\u0002\u102b\u102c\u0005\u0246\u0124\u0002\u102c\u102d\u0007",
    "*\u0002\u0002\u102d\u102e\u0005\u0246\u0124\u0002\u102e\u1030\u0003",
    "\u0002\u0002\u0002\u102f\u1028\u0003\u0002\u0002\u0002\u102f\u1029\u0003",
    "\u0002\u0002\u0002\u1030\u0249\u0003\u0002\u0002\u0002\u1031\u1032\u0005",
    "\u0238\u011d\u0002\u1032\u024b\u0003\u0002\u0002\u0002\u1033\u1041\u0005",
    "\u0240\u0121\u0002\u1034\u1035\u0005\u024a\u0126\u0002\u1035\u1036\u0007",
    "*\u0002\u0002\u1036\u1037\u0005\u0242\u0122\u0002\u1037\u1041\u0003",
    "\u0002\u0002\u0002\u1038\u1039\u0005\u0234\u011b\u0002\u1039\u103a\u0007",
    "!\u0002\u0002\u103a\u103b\u0005\u024e\u0128\u0002\u103b\u1041\u0003",
    "\u0002\u0002\u0002\u103c\u103d\u0005\u0234\u011b\u0002\u103d\u103e\u0007",
    "$\u0002\u0002\u103e\u103f\u0005\u024e\u0128\u0002\u103f\u1041\u0003",
    "\u0002\u0002\u0002\u1040\u1033\u0003\u0002\u0002\u0002\u1040\u1034\u0003",
    "\u0002\u0002\u0002\u1040\u1038\u0003\u0002\u0002\u0002\u1040\u103c\u0003",
    "\u0002\u0002\u0002\u1041\u024d\u0003\u0002\u0002\u0002\u1042\u1043\u0005",
    "\u0238\u011d\u0002\u1043\u024f\u0003\u0002\u0002\u0002\u1044\u105d\u0005",
    "\u0262\u0132\u0002\u1045\u104a\u0005\u02ae\u0158\u0002\u1046\u1047\u0007",
    ";\u0002\u0002\u1047\u1048\u0005\u023c\u011f\u0002\u1048\u1049\u0007",
    "<\u0002\u0002\u1049\u104b\u0003\u0002\u0002\u0002\u104a\u1046\u0003",
    "\u0002\u0002\u0002\u104a\u104b\u0003\u0002\u0002\u0002\u104b\u105d\u0003",
    "\u0002\u0002\u0002\u104c\u1051\u0005\u02b6\u015c\u0002\u104d\u104e\u0007",
    ";\u0002\u0002\u104e\u104f\u0005\u023c\u011f\u0002\u104f\u1050\u0007",
    "<\u0002\u0002\u1050\u1052\u0003\u0002\u0002\u0002\u1051\u104d\u0003",
    "\u0002\u0002\u0002\u1051\u1052\u0003\u0002\u0002\u0002\u1052\u105d\u0003",
    "\u0002\u0002\u0002\u1053\u105d\u0005\u0222\u0112\u0002\u1054\u105d\u0005",
    "\u0224\u0113\u0002\u1055\u105d\u0005\u022c\u0117\u0002\u1056\u105d\u0005",
    "\u022e\u0118\u0002\u1057\u1058\u0007\u001a\u0002\u0002\u1058\u1059\u0005",
    "\u023a\u011e\u0002\u1059\u105a\u0007\u001b\u0002\u0002\u105a\u105d\u0003",
    "\u0002\u0002\u0002\u105b\u105d\u0005\u0270\u0139\u0002\u105c\u1044\u0003",
    "\u0002\u0002\u0002\u105c\u1045\u0003\u0002\u0002\u0002\u105c\u104c\u0003",
    "\u0002\u0002\u0002\u105c\u1053\u0003\u0002\u0002\u0002\u105c\u1054\u0003",
    "\u0002\u0002\u0002\u105c\u1055\u0003\u0002\u0002\u0002\u105c\u1056\u0003",
    "\u0002\u0002\u0002\u105c\u1057\u0003\u0002\u0002\u0002\u105c\u105b\u0003",
    "\u0002\u0002\u0002\u105d\u0251\u0003\u0002\u0002\u0002\u105e\u1069\u0005",
    "\u0262\u0132\u0002\u105f\u1069\u0005\u029a\u014e\u0002\u1060\u1069\u0005",
    "\u0226\u0114\u0002\u1061\u1069\u0005\u0228\u0115\u0002\u1062\u1069\u0005",
    "\u0230\u0119\u0002\u1063\u1069\u0005\u0232\u011a\u0002\u1064\u1065\u0007",
    "\u001a\u0002\u0002\u1065\u1066\u0005\u0248\u0125\u0002\u1066\u1067\u0007",
    "\u001b\u0002\u0002\u1067\u1069\u0003\u0002\u0002\u0002\u1068\u105e\u0003",
    "\u0002\u0002\u0002\u1068\u105f\u0003\u0002\u0002\u0002\u1068\u1060\u0003",
    "\u0002\u0002\u0002\u1068\u1061\u0003\u0002\u0002\u0002\u1068\u1062\u0003",
    "\u0002\u0002\u0002\u1068\u1063\u0003\u0002\u0002\u0002\u1068\u1064\u0003",
    "\u0002\u0002\u0002\u1069\u0253\u0003\u0002\u0002\u0002\u106a\u1085\u0005",
    "\u0262\u0132\u0002\u106b\u1079\u0005\u0290\u0149\u0002\u106c\u106d\u0007",
    ";\u0002\u0002\u106d\u106e\u0005\u0240\u0121\u0002\u106e\u106f\u0007",
    "<\u0002\u0002\u106f\u1071\u0003\u0002\u0002\u0002\u1070\u106c\u0003",
    "\u0002\u0002\u0002\u1071\u1074\u0003\u0002\u0002\u0002\u1072\u1070\u0003",
    "\u0002\u0002\u0002\u1072\u1073\u0003\u0002\u0002\u0002\u1073\u1075\u0003",
    "\u0002\u0002\u0002\u1074\u1072\u0003\u0002\u0002\u0002\u1075\u1076\u0007",
    ";\u0002\u0002\u1076\u1077\u0005\u024c\u0127\u0002\u1077\u1078\u0007",
    "<\u0002\u0002\u1078\u107a\u0003\u0002\u0002\u0002\u1079\u1072\u0003",
    "\u0002\u0002\u0002\u1079\u107a\u0003\u0002\u0002\u0002\u107a\u1085\u0003",
    "\u0002\u0002\u0002\u107b\u1085\u0005\u0220\u0111\u0002\u107c\u1085\u0005",
    "\u022a\u0116\u0002\u107d\u1085\u0005\u0230\u0119\u0002\u107e\u1085\u0005",
    "\u0232\u011a\u0002\u107f\u1080\u0007\u001a\u0002\u0002\u1080\u1081\u0005",
    "\u0244\u0123\u0002\u1081\u1082\u0007\u001b\u0002\u0002\u1082\u1085\u0003",
    "\u0002\u0002\u0002\u1083\u1085\u0005\u0270\u0139\u0002\u1084\u106a\u0003",
    "\u0002\u0002\u0002\u1084\u106b\u0003\u0002\u0002\u0002\u1084\u107b\u0003",
    "\u0002\u0002\u0002\u1084\u107c\u0003\u0002\u0002\u0002\u1084\u107d\u0003",
    "\u0002\u0002\u0002\u1084\u107e\u0003\u0002\u0002\u0002\u1084\u107f\u0003",
    "\u0002\u0002\u0002\u1084\u1083\u0003\u0002\u0002\u0002\u1085\u0255\u0003",
    "\u0002\u0002\u0002\u1086\u1094\u0005\u0292\u014a\u0002\u1087\u1088\u0007",
    ";\u0002\u0002\u1088\u1089\u0005\u0238\u011d\u0002\u1089\u108a\u0007",
    "<\u0002\u0002\u108a\u108c\u0003\u0002\u0002\u0002\u108b\u1087\u0003",
    "\u0002\u0002\u0002\u108c\u108f\u0003\u0002\u0002\u0002\u108d\u108b\u0003",
    "\u0002\u0002\u0002\u108d\u108e\u0003\u0002\u0002\u0002\u108e\u1090\u0003",
    "\u0002\u0002\u0002\u108f\u108d\u0003\u0002\u0002\u0002\u1090\u1091\u0007",
    ";\u0002\u0002\u1091\u1092\u0005\u023c\u011f\u0002\u1092\u1093\u0007",
    "<\u0002\u0002\u1093\u1095\u0003\u0002\u0002\u0002\u1094\u108d\u0003",
    "\u0002\u0002\u0002\u1094\u1095\u0003\u0002\u0002\u0002\u1095\u10a2\u0003",
    "\u0002\u0002\u0002\u1096\u1097\u0007\u00ba\u0002\u0002\u1097\u109c\u0005",
    "\u0256\u012c\u0002\u1098\u1099\u0007\"\u0002\u0002\u1099\u109b\u0005",
    "\u0256\u012c\u0002\u109a\u1098\u0003\u0002\u0002\u0002\u109b\u109e\u0003",
    "\u0002\u0002\u0002\u109c\u109a\u0003\u0002\u0002\u0002\u109c\u109d\u0003",
    "\u0002\u0002\u0002\u109d\u109f\u0003\u0002\u0002\u0002\u109e\u109c\u0003",
    "\u0002\u0002\u0002\u109f\u10a0\u0007\u00bd\u0002\u0002\u10a0\u10a2\u0003",
    "\u0002\u0002\u0002\u10a1\u1086\u0003\u0002\u0002\u0002\u10a1\u1096\u0003",
    "\u0002\u0002\u0002\u10a2\u0257\u0003\u0002\u0002\u0002\u10a3\u10b1\u0005",
    "\u0296\u014c\u0002\u10a4\u10a5\u0007;\u0002\u0002\u10a5\u10a6\u0005",
    "\u0240\u0121\u0002\u10a6\u10a7\u0007<\u0002\u0002\u10a7\u10a9\u0003",
    "\u0002\u0002\u0002\u10a8\u10a4\u0003\u0002\u0002\u0002\u10a9\u10ac\u0003",
    "\u0002\u0002\u0002\u10aa\u10a8\u0003\u0002\u0002\u0002\u10aa\u10ab\u0003",
    "\u0002\u0002\u0002\u10ab\u10ad\u0003\u0002\u0002\u0002\u10ac\u10aa\u0003",
    "\u0002\u0002\u0002\u10ad\u10ae\u0007;\u0002\u0002\u10ae\u10af\u0005",
    "\u024c\u0127\u0002\u10af\u10b0\u0007<\u0002\u0002\u10b0\u10b2\u0003",
    "\u0002\u0002\u0002\u10b1\u10aa\u0003\u0002\u0002\u0002\u10b1\u10b2\u0003",
    "\u0002\u0002\u0002\u10b2\u10bf\u0003\u0002\u0002\u0002\u10b3\u10b4\u0007",
    "\u00ba\u0002\u0002\u10b4\u10b9\u0005\u0258\u012d\u0002\u10b5\u10b6\u0007",
    "\"\u0002\u0002\u10b6\u10b8\u0005\u0258\u012d\u0002\u10b7\u10b5\u0003",
    "\u0002\u0002\u0002\u10b8\u10bb\u0003\u0002\u0002\u0002\u10b9\u10b7\u0003",
    "\u0002\u0002\u0002\u10b9\u10ba\u0003\u0002\u0002\u0002\u10ba\u10bc\u0003",
    "\u0002\u0002\u0002\u10bb\u10b9\u0003\u0002\u0002\u0002\u10bc\u10bd\u0007",
    "\u00bd\u0002\u0002\u10bd\u10bf\u0003\u0002\u0002\u0002\u10be\u10a3\u0003",
    "\u0002\u0002\u0002\u10be\u10b3\u0003\u0002\u0002\u0002\u10bf\u0259\u0003",
    "\u0002\u0002\u0002\u10c0\u10c1\t\u0014\u0002\u0002\u10c1\u025b\u0003",
    "\u0002\u0002\u0002\u10c2\u10c3\t\u0015\u0002\u0002\u10c3\u025d\u0003",
    "\u0002\u0002\u0002\u10c4\u10c5\t\u0016\u0002\u0002\u10c5\u025f\u0003",
    "\u0002\u0002\u0002\u10c6\u10c7\t\u0017\u0002\u0002\u10c7\u0261\u0003",
    "\u0002\u0002\u0002\u10c8\u10ce\u0005\u0266\u0134\u0002\u10c9\u10ce\u0005",
    "\u026a\u0136\u0002\u10ca\u10ce\u0005\u0268\u0135\u0002\u10cb\u10ce\u0005",
    "\u026c\u0137\u0002\u10cc\u10ce\u0005\u0264\u0133\u0002\u10cd\u10c8\u0003",
    "\u0002\u0002\u0002\u10cd\u10c9\u0003\u0002\u0002\u0002\u10cd\u10ca\u0003",
    "\u0002\u0002\u0002\u10cd\u10cb\u0003\u0002\u0002\u0002\u10cd\u10cc\u0003",
    "\u0002\u0002\u0002\u10ce\u0263\u0003\u0002\u0002\u0002\u10cf\u10d0\u0007",
    "\u00c6\u0002\u0002\u10d0\u0265\u0003\u0002\u0002\u0002\u10d1\u10d2\u0007",
    "\u00c2\u0002\u0002\u10d2\u0267\u0003\u0002\u0002\u0002\u10d3\u10d4\u0007",
    "\u00c3\u0002\u0002\u10d4\u0269\u0003\u0002\u0002\u0002\u10d5\u10d6\u0007",
    "\u00c4\u0002\u0002\u10d6\u026b\u0003\u0002\u0002\u0002\u10d7\u10d8\u0007",
    "\u00c5\u0002\u0002\u10d8\u026d\u0003\u0002\u0002\u0002\u10d9\u10da\u0007",
    "\u00c2\u0002\u0002\u10da\u026f\u0003\u0002\u0002\u0002\u10db\u10dc\u0007",
    "\u00c7\u0002\u0002\u10dc\u0271\u0003\u0002\u0002\u0002\u10dd\u10de\u0007",
    "\u001a\u0002\u0002\u10de\u10df\u0007\u001c\u0002\u0002\u10df\u10e4\u0005",
    "\u0274\u013b\u0002\u10e0\u10e1\u0007\"\u0002\u0002\u10e1\u10e3\u0005",
    "\u0274\u013b\u0002\u10e2\u10e0\u0003\u0002\u0002\u0002\u10e3\u10e6\u0003",
    "\u0002\u0002\u0002\u10e4\u10e2\u0003\u0002\u0002\u0002\u10e4\u10e5\u0003",
    "\u0002\u0002\u0002\u10e5\u10e7\u0003\u0002\u0002\u0002\u10e6\u10e4\u0003",
    "\u0002\u0002\u0002\u10e7\u10e8\u0007\u001c\u0002\u0002\u10e8\u10e9\u0007",
    "\u001b\u0002\u0002\u10e9\u0273\u0003\u0002\u0002\u0002\u10ea\u10ed\u0005",
    "\u0276\u013c\u0002\u10eb\u10ec\u00070\u0002\u0002\u10ec\u10ee\u0005",
    "\u0238\u011d\u0002\u10ed\u10eb\u0003\u0002\u0002\u0002\u10ed\u10ee\u0003",
    "\u0002\u0002\u0002\u10ee\u0275\u0003\u0002\u0002\u0002\u10ef\u10f0\u0005",
    "\u029a\u014e\u0002\u10f0\u0277\u0003\u0002\u0002\u0002\u10f1\u10f2\u0005",
    "\u029a\u014e\u0002\u10f2\u0279\u0003\u0002\u0002\u0002\u10f3\u10f4\u0005",
    "\u029a\u014e\u0002\u10f4\u027b\u0003\u0002\u0002\u0002\u10f5\u10f6\u0005",
    "\u029a\u014e\u0002\u10f6\u027d\u0003\u0002\u0002\u0002\u10f7\u10f8\u0007",
    "\u00c9\u0002\u0002\u10f8\u027f\u0003\u0002\u0002\u0002\u10f9\u10fa\u0005",
    "\u029a\u014e\u0002\u10fa\u0281\u0003\u0002\u0002\u0002\u10fb\u10fc\u0005",
    "\u029a\u014e\u0002\u10fc\u0283\u0003\u0002\u0002\u0002\u10fd\u10fe\u0005",
    "\u029a\u014e\u0002\u10fe\u0285\u0003\u0002\u0002\u0002\u10ff\u1100\u0005",
    "\u029a\u014e\u0002\u1100\u0287\u0003\u0002\u0002\u0002\u1101\u1102\u0005",
    "\u029a\u014e\u0002\u1102\u0289\u0003\u0002\u0002\u0002\u1103\u1104\u0005",
    "\u0290\u0149\u0002\u1104\u028b\u0003\u0002\u0002\u0002\u1105\u1106\u0005",
    "\u0290\u0149\u0002\u1106\u028d\u0003\u0002\u0002\u0002\u1107\u1108\u0005",
    "\u0290\u0149\u0002\u1108\u028f\u0003\u0002\u0002\u0002\u1109\u110e\u0005",
    "\u029a\u014e\u0002\u110a\u110b\u0007;\u0002\u0002\u110b\u110c\u0005",
    "\u0238\u011d\u0002\u110c\u110d\u0007<\u0002\u0002\u110d\u110f\u0003",
    "\u0002\u0002\u0002\u110e\u110a\u0003\u0002\u0002\u0002\u110e\u110f\u0003",
    "\u0002\u0002\u0002\u110f\u1110\u0003\u0002\u0002\u0002\u1110\u1111\u0007",
    "&\u0002\u0002\u1111\u1113\u0003\u0002\u0002\u0002\u1112\u1109\u0003",
    "\u0002\u0002\u0002\u1113\u1116\u0003\u0002\u0002\u0002\u1114\u1112\u0003",
    "\u0002\u0002\u0002\u1114\u1115\u0003\u0002\u0002\u0002\u1115\u1117\u0003",
    "\u0002\u0002\u0002\u1116\u1114\u0003\u0002\u0002\u0002\u1117\u1118\u0005",
    "\u029a\u014e\u0002\u1118\u0291\u0003\u0002\u0002\u0002\u1119\u111a\u0005",
    "\u0290\u0149\u0002\u111a\u0293\u0003\u0002\u0002\u0002\u111b\u111c\u0005",
    "\u0290\u0149\u0002\u111c\u0295\u0003\u0002\u0002\u0002\u111d\u111e\u0005",
    "\u0290\u0149\u0002\u111e\u0297\u0003\u0002\u0002\u0002\u111f\u1120\u0005",
    "\u0290\u0149\u0002\u1120\u0299\u0003\u0002\u0002\u0002\u1121\u1125\u0005",
    "\u02b4\u015b\u0002\u1122\u1125\u0005\u027e\u0140\u0002\u1123\u1125\u0005",
    "\u029c\u014f\u0002\u1124\u1121\u0003\u0002\u0002\u0002\u1124\u1122\u0003",
    "\u0002\u0002\u0002\u1124\u1123\u0003\u0002\u0002\u0002\u1125\u029b\u0003",
    "\u0002\u0002\u0002\u1126\u1127\u0007\u00cd\u0002\u0002\u1127\u029d\u0003",
    "\u0002\u0002\u0002\u1128\u1129\u0005\u029a\u014e\u0002\u1129\u029f\u0003",
    "\u0002\u0002\u0002\u112a\u112b\u0005\u029a\u014e\u0002\u112b\u02a1\u0003",
    "\u0002\u0002\u0002\u112c\u112d\u0005\u029a\u014e\u0002\u112d\u02a3\u0003",
    "\u0002\u0002\u0002\u112e\u112f\u0005\u029a\u014e\u0002\u112f\u02a5\u0003",
    "\u0002\u0002\u0002\u1130\u1131\u0005\u029a\u014e\u0002\u1131\u02a7\u0003",
    "\u0002\u0002\u0002\u1132\u1133\u0005\u029a\u014e\u0002\u1133\u02a9\u0003",
    "\u0002\u0002\u0002\u1134\u1135\u0005\u029a\u014e\u0002\u1135\u02ab\u0003",
    "\u0002\u0002\u0002\u1136\u1137\u0005\u029a\u014e\u0002\u1137\u02ad\u0003",
    "\u0002\u0002\u0002\u1138\u1139\u0005\u029a\u014e\u0002\u1139\u02af\u0003",
    "\u0002\u0002\u0002\u113a\u113b\u0005\u029a\u014e\u0002\u113b\u02b1\u0003",
    "\u0002\u0002\u0002\u113c\u113d\u0005\u029a\u014e\u0002\u113d\u02b3\u0003",
    "\u0002\u0002\u0002\u113e\u113f\u0007\u00ca\u0002\u0002\u113f\u02b5\u0003",
    "\u0002\u0002\u0002\u1140\u1141\u0005\u029a\u014e\u0002\u1141\u02b7\u0003",
    "\u0002\u0002\u0002\u1142\u1143\u0007\u00cb\u0002\u0002\u1143\u02b9\u0003",
    "\u0002\u0002\u0002\u1144\u1145\u0007\u00cb\u0002\u0002\u1145\u02bb\u0003",
    "\u0002\u0002\u0002\u1146\u1147\u0005\u029a\u014e\u0002\u1147\u02bd\u0003",
    "\u0002\u0002\u0002\u1148\u1149\u0005\u029a\u014e\u0002\u1149\u02bf\u0003",
    "\u0002\u0002\u0002\u114a\u114b\u0005\u029a\u014e\u0002\u114b\u02c1\u0003",
    "\u0002\u0002\u0002\u114c\u114d\u0005\u029a\u014e\u0002\u114d\u02c3\u0003",
    "\u0002\u0002\u0002\u114e\u114f\u0005\u029a\u014e\u0002\u114f\u02c5\u0003",
    "\u0002\u0002\u0002\u1150\u1151\u0005\u029a\u014e\u0002\u1151\u02c7\u0003",
    "\u0002\u0002\u0002\u1152\u1153\u0005\u029a\u014e\u0002\u1153\u02c9\u0003",
    "\u0002\u0002\u0002\u01dd\u02cd\u02d5\u02de\u02e7\u02ea\u02f6\u02fb\u0301",
    "\u0308\u0310\u0316\u0319\u031f\u0324\u032f\u033a\u0345\u034c\u034f\u0355",
    "\u0359\u0362\u0367\u036e\u0373\u037a\u0381\u0385\u038b\u0390\u0397\u03a0",
    "\u03a7\u03ae\u03b5\u03bc\u03c3\u03ca\u03d1\u03d8\u03dc\u03e8\u03f0\u03f9",
    "\u03fd\u040a\u0413\u0418\u0431\u043d\u0444\u044c\u0453\u0458\u045c\u045f",
    "\u0466\u046a\u046d\u0474\u0478\u0481\u0484\u0487\u048d\u0490\u0493\u0499",
    "\u049c\u049f\u04a5\u04a8\u04af\u04bb\u04be\u04c5\u04c8\u04cb\u04d2\u04d5",
    "\u04d9\u04e0\u04e3\u04e6\u04ea\u04f1\u04f4\u04f7\u04fe\u0501\u0504\u050b",
    "\u050e\u0511\u0515\u051c\u051f\u0522\u0526\u052b\u0537\u053a\u054b\u0552",
    "\u0558\u055f\u0585\u0594\u059f\u05a1\u05a5\u05ae\u05b2\u05b7\u05be\u05c5",
    "\u05cd\u05d2\u05da\u05e1\u05e9\u05ee\u05f6\u05fe\u0606\u060e\u0616\u061c",
    "\u0622\u0626\u063a\u0642\u064f\u0653\u0669\u0672\u067a\u0685\u068b\u0691",
    "\u0697\u069c\u06a4\u06aa\u06ae\u06b1\u06b7\u06bb\u06c2\u06ca\u06cf\u06d6",
    "\u06dc\u06e2\u06eb\u06f4\u06fa\u0701\u0707\u070e\u0715\u0719\u071d\u0720",
    "\u0723\u072a\u072e\u0731\u0734\u073b\u073f\u0742\u0745\u074c\u0753\u0758",
    "\u075b\u0763\u076d\u0777\u0781\u078b\u0792\u079b\u07a1\u07a8\u07b0\u07b7",
    "\u07be\u07c3\u07ca\u07d1\u07d4\u07db\u07e2\u07e9\u07f0\u07f3\u07fa\u0801",
    "\u0804\u080b\u0812\u0819\u0824\u082b\u0832\u0839\u0840\u0845\u0848\u0855",
    "\u0860\u086b\u0875\u087b\u0883\u088b\u0894\u089f\u08a7\u08b9\u08cb\u08e9",
    "\u08f0\u08ff\u0907\u090a\u0912\u091d\u0924\u092c\u0934\u0937\u093c\u0940",
    "\u0945\u094c\u0954\u0962\u0979\u097e\u0985\u098f\u0996\u0998\u09a1\u09a5",
    "\u09ae\u09b7\u09c1\u09c9\u09cc\u09d2\u09d7\u09db\u09df\u09e4\u09f0\u09f9",
    "\u0a05\u0a0e\u0a18\u0a24\u0a29\u0a31\u0a39\u0a3b\u0a40\u0a49\u0a51\u0a57",
    "\u0a62\u0a68\u0a7e\u0a83\u0a89\u0a90\u0a99\u0a9f\u0aa9\u0aac\u0ab3\u0ab9",
    "\u0ac3\u0aca\u0ace\u0ad1\u0adb\u0aeb\u0af2\u0b02\u0b0e\u0b11\u0b16\u0b21",
    "\u0b24\u0b29\u0b31\u0b3a\u0b41\u0b48\u0b4f\u0b56\u0b5d\u0b66\u0b6d\u0b76",
    "\u0b7d\u0b84\u0b8b\u0b92\u0b96\u0b9c\u0ba0\u0bab\u0bb5\u0bbf\u0bce\u0bd8",
    "\u0be3\u0beb\u0bed\u0bf2\u0c0b\u0c10\u0c19\u0c25\u0c31\u0c36\u0c3d\u0c45",
    "\u0c48\u0c62\u0c67\u0c6b\u0c6f\u0c73\u0c7e\u0c83\u0c8b\u0c95\u0c9f\u0ca9",
    "\u0cb4\u0cbe\u0cc3\u0ccc\u0cd7\u0cdf\u0ce7\u0cee\u0cf2\u0cf6\u0cfd\u0d2e",
    "\u0d5a\u0d5e\u0d65\u0d6e\u0d75\u0d8e\u0d9e\u0da9\u0dab\u0db9\u0dbb\u0dcb",
    "\u0dcf\u0dd3\u0dd7\u0ddb\u0ddd\u0ddf\u0de1\u0de3\u0de5\u0df3\u0df5\u0e03",
    "\u0e05\u0e15\u0e19\u0e1d\u0e21\u0e25\u0e27\u0e29\u0e2b\u0e2d\u0e2f\u0e3d",
    "\u0e3f\u0e4d\u0e51\u0e55\u0e57\u0e59\u0e5b\u0e6b\u0e6f\u0e73\u0e75\u0e77",
    "\u0e79\u0e85\u0e87\u0e95\u0e97\u0ea7\u0ea9\u0eba\u0ec2\u0ed7\u0edc\u0ee2",
    "\u0ee7\u0eeb\u0ef4\u0f00\u0f15\u0f1f\u0f2a\u0f3a\u0f4d\u0f56\u0f62\u0f6b",
    "\u0f74\u0f80\u0f85\u0f91\u0f96\u0f9d\u0fa7\u0fae\u0fb0\u0fba\u0fc9\u0fd3",
    "\u0fd8\u0fdf\u0fe9\u0ff0\u0ff2\u0ffe\u1006\u100b\u1012\u101c\u1023\u1025",
    "\u102f\u1040\u104a\u1051\u105c\u1068\u1072\u1079\u1084\u108d\u1094\u109c",
    "\u10a1\u10aa\u10b1\u10b9\u10be\u10cd\u10e4\u10ed\u110e\u1114\u1124"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'!'", "'!='", "'!=='", "'\"'", "'#'", "'$'", 
                     "'$fullskew'", "'$hold'", "'$nochange'", "'$period'", 
                     "'$recovery'", "'$recrem'", "'$removal'", "'$setup'", 
                     "'$setuphold'", "'$skew'", "'$timeskew'", "'$width'", 
                     "'%'", "'&'", "'&&'", "'&&&'", "'''", "'('", "')'", 
                     "'*'", "'**'", "'*/'", "'*>'", "'+'", "'+:'", "','", 
                     "'-'", "'-:'", "'->'", "'.'", "'/'", "'/*'", "'//'", 
                     "':'", "';'", "'<'", "'<<'", "'<<<'", "'<='", "'='", 
                     "'=='", "'==='", "'=>'", "'>'", "'>='", "'>>'", "'>>>'", 
                     "'?'", "'@'", "'PATHPULSE$'", "'['", "']'", "'^'", 
                     "'^~'", "'always'", "'and'", "'assign'", "'automatic'", 
                     "'begin'", "'buf'", "'bufif0'", "'bufif1'", "'case'", 
                     "'casex'", "'casez'", "'cell'", "'cmos'", "'config'", 
                     "'deassign'", "'default'", "'defparam'", "'design'", 
                     "'disable'", "'edge'", "'else'", "'end'", "'endcase'", 
                     "'endconfig'", "'endfunction'", "'endgenerate'", "'endmodule'", 
                     "'endprimitive'", "'endspecify'", "'endtable'", "'endtask'", 
                     "'event'", "'for'", "'force'", "'forever'", "'fork'", 
                     "'function'", "'generate'", "'genvar'", "'highz0'", 
                     "'highz1'", "'if'", "'ifnone'", "'include'", "'initial'", 
                     "'inout'", "'input'", "'instance'", "'integer'", "'join'", 
                     "'large'", "'liblist'", "'library'", "'localparam'", 
                     "'logic'", "'macromodule'", "'medium'", "'module'", 
                     "'nand'", "'negedge'", "'nmos'", "'nor'", "'noshowcancelled'", 
                     "'not'", "'notif0'", "'notif1'", "'or'", "'output'", 
                     "'parameter'", "'pmos'", "'posedge'", "'primitive'", 
                     "'pull0'", "'pull1'", "'pulldown'", "'pullup'", "'pulsestyle_ondetect'", 
                     "'pulsestyle_onevent'", "'rcmos'", "'real'", "'realtime'", 
                     "'reg'", "'release'", "'repeat'", "'rnmos'", "'rpmos'", 
                     "'rtran'", "'rtranif0'", "'rtranif1'", "'scalared'", 
                     "'showcancelled'", "'signed'", "'small'", "'specify'", 
                     "'specparam'", "'strong0'", "'strong1'", "'supply0'", 
                     "'supply1'", "'table'", "'task'", "'time'", "'tran'", 
                     "'tranif0'", "'tranif1'", "'tri'", "'tri0'", "'tri1'", 
                     "'triand'", "'trior'", "'trireg'", "'use'", "'uwire'", 
                     "'vectored'", "'wait'", "'wand'", "'weak0'", "'weak1'", 
                     "'while'", "'wire'", "'wor'", "'xnor'", "'xor'", "'{'", 
                     "'|'", "'||'", "'}'", "'~'", "'~&'", "'~^'", "'~|'", 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, "'-incdir'" ];

var symbolicNames = [ null, "EM", "EMEQ", "EMEQEQ", "DQ", "HA", "DL", "DLFULLSKEW", 
                      "DLHOLD", "DLNOCHANGE", "DLPERIOD", "DLRECOVERY", 
                      "DLRECREM", "DLREMOVAL", "DLSETUP", "DLSETUPHOLD", 
                      "DLSKEW", "DLTIMESKEW", "DLWIDTH", "MO", "AM", "AMAM", 
                      "AMAMAM", "AP", "LP", "RP", "AS", "ASAS", "ASSL", 
                      "ASGT", "PL", "PLCL", "CO", "MI", "MICL", "MIGT", 
                      "DT", "SL", "SLAS", "SLSL", "CL", "SC", "LT", "LTLT", 
                      "LTLTLT", "LTEQ", "EQ", "EQEQ", "EQEQEQ", "EQGT", 
                      "GT", "GTEQ", "GTGT", "GTGTGT", "QM", "AT", "PATHPULSEDL", 
                      "LB", "RB", "CA", "CATI", "ALWAYS", "AND", "ASSIGN", 
                      "AUTOMATIC", "BEGIN", "BUF", "BUFIFZERO", "BUFIFONE", 
                      "CASE", "CASEX", "CASEZ", "CELL", "CMOS", "CONFIG", 
                      "DEASSIGN", "DEFAULT", "DEFPARAM", "DESIGN", "DISABLE", 
                      "EDGE", "ELSE", "END", "ENDCASE", "ENDCONFIG", "ENDFUNCTION", 
                      "ENDGENERATE", "ENDMODULE", "ENDPRIMITIVE", "ENDSPECIFY", 
                      "ENDTABLE", "ENDTASK", "EVENT", "FOR", "FORCE", "FOREVER", 
                      "FORK", "FUNCTION", "GENERATE", "GENVAR", "HIGHZZERO", 
                      "HIGHZONE", "IF", "IFNONE", "INCLUDE", "INITIAL", 
                      "INOUT", "INPUT", "INSTANCE", "INTEGER", "JOIN", "LARGE", 
                      "LIBLIST", "LIBRARY", "LOCALPARAM", "LOGIC", "MACROMODULE", 
                      "MEDIUM", "MODULE", "NAND", "NEGEDGE", "NMOS", "NOR", 
                      "NOSHOWCANCELLED", "NOT", "NOTIFZERO", "NOTIFONE", 
                      "OR", "OUTPUT", "PARAMETER", "PMOS", "POSEDGE", "PRIMITIVE", 
                      "PULLZERO", "PULLONE", "PULLDOWN", "PULLUP", "PULSESTYLE_ONDETECT", 
                      "PULSESTYLE_ONEVENT", "RCMOS", "REAL", "REALTIME", 
                      "REG", "RELEASE", "REPEAT", "RNMOS", "RPMOS", "RTRAN", 
                      "RTRANIFZERO", "RTRANIFONE", "SCALARED", "SHOWCANCELLED", 
                      "SIGNED", "SMALL", "SPECIFY", "SPECPARAM", "STRONGZERO", 
                      "STRONGONE", "SUPPLYZERO", "SUPPLYONE", "TABLE", "TASK", 
                      "TIME", "TRAN", "TRANIFZERO", "TRANIFONE", "TRI", 
                      "TRIZERO", "TRIONE", "TRIAND", "TRIOR", "TRIREG", 
                      "USE", "UWIRE", "VECTORED", "WAIT", "WAND", "WEAKZERO", 
                      "WEAKONE", "WHILE", "WIRE", "WOR", "XNOR", "XOR", 
                      "LC", "VL", "VLVL", "RC", "TI", "TIAM", "TICA", "TIVL", 
                      "DECIMAL_NUMBER", "BINARY_NUMBER", "OCTAL_NUMBER", 
                      "HEX_NUMBER", "REAL_NUMBER", "STRING", "COMMENT", 
                      "ESCAPED_IDENTIFIER", "SIMPLE_IDENTIFIER", "SYSTEM_TF_IDENTIFIER", 
                      "WHITE_SPACE", "MACRO_USAGE", "DEFINE_DIRECTIVE", 
                      "INCLUDE_DIRECTIVE", "BEGIN_KEYWORDS_DIRECTIVE", "CELLDEFINE_DIRECTIVE", 
                      "DEFAULT_NETTYPE_DIRECTIVE", "ELSE_DIRECTIVE", "ELSIF_DIRECTIVE", 
                      "END_KEYWORDS_DIRECTIVE", "ENDCELLDEFINE_DIRECTIVE", 
                      "ENDIF_DIRECTIVE", "IFDEF_DIRECTIVE", "UNDEF_DIRECTIVE", 
                      "UNDEFINEALL_DIRECTIVE", "IFNDEF_DIRECTIVE", "LINE_DIRECTIVE", 
                      "PRAGMA_DIRECTIVE", "RESETALL_DIRECTIVE", "TIMESCALE_DIRECTIVE", 
                      "UNCONNECTED_DRIVE_DIRECTIVE", "NOUNCONNECTED_DRIVE_DIRECTIVE", 
                      "MIINCDIR", "FILE_PATH_SPEC", "OUTPUT_OR_LEVEL_SYMBOL", 
                      "LEVEL_ONLY_SYMBOL", "EDGE_SYMBOL", "EDGE_DESCRIPTOR" ];

var ruleNames =  [ "parse", "library_description", "library_declaration", 
                   "include_directive", "file_path_spec", "description", 
                   "module_declaration", "module_keyword", "module_parameter_port_list", 
                   "list_of_ports", "list_of_port_declarations", "port", 
                   "port_expression", "port_reference", "port_declaration", 
                   "module_item", "module_or_generate_item", "module_or_generate_item_declaration", 
                   "non_port_module_item", "parameter_override", "config_declaration", 
                   "design_statement", "config_rule_statement", "default_clause", 
                   "inst_clause", "inst_name", "cell_clause", "liblist_clause", 
                   "use_clause", "local_parameter_declaration", "parameter_declaration", 
                   "specparam_declaration", "parameter_type", "inout_declaration", 
                   "input_declaration", "output_declaration", "event_declaration", 
                   "integer_declaration", "net_declaration", "real_declaration", 
                   "realtime_declaration", "reg_declaration", "time_declaration", 
                   "net_type", "output_variable_type", "real_type", "variable_type", 
                   "drive_strength", "strength0", "strength1", "charge_strength", 
                   "delay3", "delay2", "delay_value", "list_of_defparam_assignments", 
                   "list_of_event_identifiers", "list_of_net_decl_assignments", 
                   "list_of_net_identifiers", "list_of_param_assignments", 
                   "list_of_port_identifiers", "list_of_real_identifiers", 
                   "list_of_specparam_assignments", "list_of_variable_identifiers", 
                   "list_of_variable_port_identifiers", "defparam_assignment", 
                   "net_decl_assignment", "param_assignment", "specparam_assignment", 
                   "pulse_control_specparam", "error_limit_value", "reject_limit_value", 
                   "limit_value", "dimension", "range_", "function_declaration", 
                   "function_item_declaration", "function_port_list", "function_range_or_type", 
                   "task_declaration", "task_item_declaration", "task_port_list", 
                   "task_port_item", "tf_input_declaration", "tf_output_declaration", 
                   "tf_inout_declaration", "task_port_type", "block_item_declaration", 
                   "list_of_block_variable_identifiers", "list_of_block_real_identifiers", 
                   "block_variable_type", "block_real_type", "gate_instantiation", 
                   "cmos_switch_instance", "enable_gate_instance", "mos_switch_instance", 
                   "n_input_gate_instance", "n_output_gate_instance", "pass_switch_instance", 
                   "pass_enable_switch_instance", "pull_gate_instance", 
                   "name_of_gate_instance", "pulldown_strength", "pullup_strength", 
                   "enable_terminal", "inout_terminal", "input_terminal", 
                   "ncontrol_terminal", "output_terminal", "pcontrol_terminal", 
                   "cmos_switchtype", "enable_gatetype", "mos_switchtype", 
                   "n_input_gatetype", "n_output_gatetype", "pass_en_switchtype", 
                   "pass_switchtype", "module_instantiation", "parameter_value_assignment", 
                   "list_of_parameter_assignments", "ordered_parameter_assignment", 
                   "named_parameter_assignment", "module_instance", "name_of_module_instance", 
                   "list_of_port_connections", "ordered_port_connection", 
                   "named_port_connection", "generate_region", "genvar_declaration", 
                   "list_of_genvar_identifiers", "loop_generate_construct", 
                   "genvar_initialization", "genvar_expression", "genvar_iteration", 
                   "genvar_primary", "conditional_generate_construct", "if_generate_construct", 
                   "case_generate_construct", "case_generate_item", "generate_block", 
                   "generate_block_or_null", "udp_declaration", "udp_port_list", 
                   "udp_declaration_port_list", "udp_port_declaration", 
                   "udp_output_declaration", "udp_input_declaration", "udp_reg_declaration", 
                   "udp_body", "combinational_body", "combinational_entry", 
                   "sequential_body", "udp_initial_statement", "init_val", 
                   "sequential_entry", "seq_input_list", "level_input_list", 
                   "edge_input_list", "edge_indicator", "current_state", 
                   "next_state", "output_symbol", "level_symbol", "edge_symbol", 
                   "udp_instantiation", "udp_instance", "name_of_udp_instance", 
                   "continuous_assign", "list_of_net_assignments", "net_assignment", 
                   "initial_construct", "always_construct", "blocking_assignment", 
                   "nonblocking_assignment", "procedural_continuous_assignments", 
                   "variable_assignment", "par_block", "seq_block", "statement", 
                   "statement_or_null", "function_statement", "delay_control", 
                   "delay_or_event_control", "disable_statement", "event_control", 
                   "event_trigger", "event_expression", "procedural_timing_control", 
                   "procedural_timing_control_statement", "wait_statement", 
                   "conditional_statement", "case_statement", "case_item", 
                   "loop_statement", "system_task_enable", "task_enable", 
                   "specify_block", "specify_item", "pulsestyle_declaration", 
                   "showcancelled_declaration", "path_declaration", "simple_path_declaration", 
                   "parallel_path_description", "full_path_description", 
                   "list_of_path_inputs", "list_of_path_outputs", "specify_input_terminal_descriptor", 
                   "specify_output_terminal_descriptor", "input_identifier", 
                   "output_identifier", "path_delay_value", "list_of_path_delay_expressions", 
                   "t_path_delay_expression", "trise_path_delay_expression", 
                   "tfall_path_delay_expression", "tz_path_delay_expression", 
                   "t01_path_delay_expression", "t10_path_delay_expression", 
                   "t0z_path_delay_expression", "tz1_path_delay_expression", 
                   "t1z_path_delay_expression", "tz0_path_delay_expression", 
                   "t0x_path_delay_expression", "tx1_path_delay_expression", 
                   "t1x_path_delay_expression", "tx0_path_delay_expression", 
                   "txz_path_delay_expression", "tzx_path_delay_expression", 
                   "path_delay_expression", "edge_sensitive_path_declaration", 
                   "parallel_edge_sensitive_path_description", "full_edge_sensitive_path_description", 
                   "data_source_expression", "edge_identifier", "state_dependent_path_declaration", 
                   "polarity_operator", "system_timing_check", "setup_timing_check", 
                   "hold_timing_check", "setuphold_timing_check", "recovery_timing_check", 
                   "removal_timing_check", "recrem_timing_check", "skew_timing_check", 
                   "timeskew_timing_check", "fullskew_timing_check", "period_timing_check", 
                   "width_timing_check", "nochange_timing_check", "checktime_condition", 
                   "controlled_reference_event", "data_event", "delayed_data", 
                   "delayed_reference", "end_edge_offset", "event_based_flag", 
                   "notifier", "reference_event", "remain_active_flag", 
                   "stamptime_condition", "start_edge_offset", "threshold", 
                   "timing_check_limit", "timing_check_event", "controlled_timing_check_event", 
                   "timing_check_event_control", "specify_terminal_descriptor", 
                   "edge_control_specifier", "edge_descriptor", "timing_check_condition", 
                   "scalar_timing_check_condition", "scalar_constant", "concatenation", 
                   "constant_concatenation", "constant_multiple_concatenation", 
                   "module_path_concatenation", "module_path_multiple_concatenation", 
                   "multiple_concatenation", "constant_function_call", "constant_system_function_call", 
                   "function_call", "system_function_call", "base_expression", 
                   "constant_base_expression", "constant_expression", "constant_mintypmax_expression", 
                   "constant_range_expression", "dimension_constant_expression", 
                   "expression", "lsb_constant_expression", "mintypmax_expression", 
                   "module_path_expression", "module_path_mintypmax_expression", 
                   "msb_constant_expression", "range_expression", "width_constant_expression", 
                   "constant_primary", "module_path_primary", "primary", 
                   "net_lvalue", "variable_lvalue", "unary_operator", "binary_operator", 
                   "unary_module_path_operator", "binary_module_path_operator", 
                   "number", "real_number", "decimal_number", "binary_number", 
                   "octal_number", "hex_number", "unsigned_number", "string_", 
                   "attribute_instance", "attr_spec", "attr_name", "block_identifier", 
                   "cell_identifier", "config_identifier", "escaped_identifier", 
                   "event_identifier", "function_identifier", "gate_instance_identifier", 
                   "generate_block_identifier", "genvar_identifier", "hierarchical_block_identifier", 
                   "hierarchical_event_identifier", "hierarchical_function_identifier", 
                   "hierarchical_identifier", "hierarchical_net_identifier", 
                   "hierarchical_parameter_identifier", "hierarchical_variable_identifier", 
                   "hierarchical_task_identifier", "identifier", "macro_usage_identifier", 
                   "inout_port_identifier", "input_port_identifier", "instance_identifier", 
                   "library_identifier", "module_identifier", "module_instance_identifier", 
                   "net_identifier", "output_port_identifier", "parameter_identifier", 
                   "port_identifier", "real_identifier", "simple_identifier", 
                   "specparam_identifier", "system_function_identifier", 
                   "system_task_identifier", "task_identifier", "terminal_identifier", 
                   "text_macro_identifier", "topmodule_identifier", "udp_identifier", 
                   "udp_instance_identifier", "variable_identifier" ];

function vlogParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

vlogParser.prototype = Object.create(antlr4.Parser.prototype);
vlogParser.prototype.constructor = vlogParser;

Object.defineProperty(vlogParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

vlogParser.EOF = antlr4.Token.EOF;
vlogParser.EM = 1;
vlogParser.EMEQ = 2;
vlogParser.EMEQEQ = 3;
vlogParser.DQ = 4;
vlogParser.HA = 5;
vlogParser.DL = 6;
vlogParser.DLFULLSKEW = 7;
vlogParser.DLHOLD = 8;
vlogParser.DLNOCHANGE = 9;
vlogParser.DLPERIOD = 10;
vlogParser.DLRECOVERY = 11;
vlogParser.DLRECREM = 12;
vlogParser.DLREMOVAL = 13;
vlogParser.DLSETUP = 14;
vlogParser.DLSETUPHOLD = 15;
vlogParser.DLSKEW = 16;
vlogParser.DLTIMESKEW = 17;
vlogParser.DLWIDTH = 18;
vlogParser.MO = 19;
vlogParser.AM = 20;
vlogParser.AMAM = 21;
vlogParser.AMAMAM = 22;
vlogParser.AP = 23;
vlogParser.LP = 24;
vlogParser.RP = 25;
vlogParser.AS = 26;
vlogParser.ASAS = 27;
vlogParser.ASSL = 28;
vlogParser.ASGT = 29;
vlogParser.PL = 30;
vlogParser.PLCL = 31;
vlogParser.CO = 32;
vlogParser.MI = 33;
vlogParser.MICL = 34;
vlogParser.MIGT = 35;
vlogParser.DT = 36;
vlogParser.SL = 37;
vlogParser.SLAS = 38;
vlogParser.SLSL = 39;
vlogParser.CL = 40;
vlogParser.SC = 41;
vlogParser.LT = 42;
vlogParser.LTLT = 43;
vlogParser.LTLTLT = 44;
vlogParser.LTEQ = 45;
vlogParser.EQ = 46;
vlogParser.EQEQ = 47;
vlogParser.EQEQEQ = 48;
vlogParser.EQGT = 49;
vlogParser.GT = 50;
vlogParser.GTEQ = 51;
vlogParser.GTGT = 52;
vlogParser.GTGTGT = 53;
vlogParser.QM = 54;
vlogParser.AT = 55;
vlogParser.PATHPULSEDL = 56;
vlogParser.LB = 57;
vlogParser.RB = 58;
vlogParser.CA = 59;
vlogParser.CATI = 60;
vlogParser.ALWAYS = 61;
vlogParser.AND = 62;
vlogParser.ASSIGN = 63;
vlogParser.AUTOMATIC = 64;
vlogParser.BEGIN = 65;
vlogParser.BUF = 66;
vlogParser.BUFIFZERO = 67;
vlogParser.BUFIFONE = 68;
vlogParser.CASE = 69;
vlogParser.CASEX = 70;
vlogParser.CASEZ = 71;
vlogParser.CELL = 72;
vlogParser.CMOS = 73;
vlogParser.CONFIG = 74;
vlogParser.DEASSIGN = 75;
vlogParser.DEFAULT = 76;
vlogParser.DEFPARAM = 77;
vlogParser.DESIGN = 78;
vlogParser.DISABLE = 79;
vlogParser.EDGE = 80;
vlogParser.ELSE = 81;
vlogParser.END = 82;
vlogParser.ENDCASE = 83;
vlogParser.ENDCONFIG = 84;
vlogParser.ENDFUNCTION = 85;
vlogParser.ENDGENERATE = 86;
vlogParser.ENDMODULE = 87;
vlogParser.ENDPRIMITIVE = 88;
vlogParser.ENDSPECIFY = 89;
vlogParser.ENDTABLE = 90;
vlogParser.ENDTASK = 91;
vlogParser.EVENT = 92;
vlogParser.FOR = 93;
vlogParser.FORCE = 94;
vlogParser.FOREVER = 95;
vlogParser.FORK = 96;
vlogParser.FUNCTION = 97;
vlogParser.GENERATE = 98;
vlogParser.GENVAR = 99;
vlogParser.HIGHZZERO = 100;
vlogParser.HIGHZONE = 101;
vlogParser.IF = 102;
vlogParser.IFNONE = 103;
vlogParser.INCLUDE = 104;
vlogParser.INITIAL = 105;
vlogParser.INOUT = 106;
vlogParser.INPUT = 107;
vlogParser.INSTANCE = 108;
vlogParser.INTEGER = 109;
vlogParser.JOIN = 110;
vlogParser.LARGE = 111;
vlogParser.LIBLIST = 112;
vlogParser.LIBRARY = 113;
vlogParser.LOCALPARAM = 114;
vlogParser.LOGIC = 115;
vlogParser.MACROMODULE = 116;
vlogParser.MEDIUM = 117;
vlogParser.MODULE = 118;
vlogParser.NAND = 119;
vlogParser.NEGEDGE = 120;
vlogParser.NMOS = 121;
vlogParser.NOR = 122;
vlogParser.NOSHOWCANCELLED = 123;
vlogParser.NOT = 124;
vlogParser.NOTIFZERO = 125;
vlogParser.NOTIFONE = 126;
vlogParser.OR = 127;
vlogParser.OUTPUT = 128;
vlogParser.PARAMETER = 129;
vlogParser.PMOS = 130;
vlogParser.POSEDGE = 131;
vlogParser.PRIMITIVE = 132;
vlogParser.PULLZERO = 133;
vlogParser.PULLONE = 134;
vlogParser.PULLDOWN = 135;
vlogParser.PULLUP = 136;
vlogParser.PULSESTYLE_ONDETECT = 137;
vlogParser.PULSESTYLE_ONEVENT = 138;
vlogParser.RCMOS = 139;
vlogParser.REAL = 140;
vlogParser.REALTIME = 141;
vlogParser.REG = 142;
vlogParser.RELEASE = 143;
vlogParser.REPEAT = 144;
vlogParser.RNMOS = 145;
vlogParser.RPMOS = 146;
vlogParser.RTRAN = 147;
vlogParser.RTRANIFZERO = 148;
vlogParser.RTRANIFONE = 149;
vlogParser.SCALARED = 150;
vlogParser.SHOWCANCELLED = 151;
vlogParser.SIGNED = 152;
vlogParser.SMALL = 153;
vlogParser.SPECIFY = 154;
vlogParser.SPECPARAM = 155;
vlogParser.STRONGZERO = 156;
vlogParser.STRONGONE = 157;
vlogParser.SUPPLYZERO = 158;
vlogParser.SUPPLYONE = 159;
vlogParser.TABLE = 160;
vlogParser.TASK = 161;
vlogParser.TIME = 162;
vlogParser.TRAN = 163;
vlogParser.TRANIFZERO = 164;
vlogParser.TRANIFONE = 165;
vlogParser.TRI = 166;
vlogParser.TRIZERO = 167;
vlogParser.TRIONE = 168;
vlogParser.TRIAND = 169;
vlogParser.TRIOR = 170;
vlogParser.TRIREG = 171;
vlogParser.USE = 172;
vlogParser.UWIRE = 173;
vlogParser.VECTORED = 174;
vlogParser.WAIT = 175;
vlogParser.WAND = 176;
vlogParser.WEAKZERO = 177;
vlogParser.WEAKONE = 178;
vlogParser.WHILE = 179;
vlogParser.WIRE = 180;
vlogParser.WOR = 181;
vlogParser.XNOR = 182;
vlogParser.XOR = 183;
vlogParser.LC = 184;
vlogParser.VL = 185;
vlogParser.VLVL = 186;
vlogParser.RC = 187;
vlogParser.TI = 188;
vlogParser.TIAM = 189;
vlogParser.TICA = 190;
vlogParser.TIVL = 191;
vlogParser.DECIMAL_NUMBER = 192;
vlogParser.BINARY_NUMBER = 193;
vlogParser.OCTAL_NUMBER = 194;
vlogParser.HEX_NUMBER = 195;
vlogParser.REAL_NUMBER = 196;
vlogParser.STRING = 197;
vlogParser.COMMENT = 198;
vlogParser.ESCAPED_IDENTIFIER = 199;
vlogParser.SIMPLE_IDENTIFIER = 200;
vlogParser.SYSTEM_TF_IDENTIFIER = 201;
vlogParser.WHITE_SPACE = 202;
vlogParser.MACRO_USAGE = 203;
vlogParser.DEFINE_DIRECTIVE = 204;
vlogParser.INCLUDE_DIRECTIVE = 205;
vlogParser.BEGIN_KEYWORDS_DIRECTIVE = 206;
vlogParser.CELLDEFINE_DIRECTIVE = 207;
vlogParser.DEFAULT_NETTYPE_DIRECTIVE = 208;
vlogParser.ELSE_DIRECTIVE = 209;
vlogParser.ELSIF_DIRECTIVE = 210;
vlogParser.END_KEYWORDS_DIRECTIVE = 211;
vlogParser.ENDCELLDEFINE_DIRECTIVE = 212;
vlogParser.ENDIF_DIRECTIVE = 213;
vlogParser.IFDEF_DIRECTIVE = 214;
vlogParser.UNDEF_DIRECTIVE = 215;
vlogParser.UNDEFINEALL_DIRECTIVE = 216;
vlogParser.IFNDEF_DIRECTIVE = 217;
vlogParser.LINE_DIRECTIVE = 218;
vlogParser.PRAGMA_DIRECTIVE = 219;
vlogParser.RESETALL_DIRECTIVE = 220;
vlogParser.TIMESCALE_DIRECTIVE = 221;
vlogParser.UNCONNECTED_DRIVE_DIRECTIVE = 222;
vlogParser.NOUNCONNECTED_DRIVE_DIRECTIVE = 223;
vlogParser.MIINCDIR = 224;
vlogParser.FILE_PATH_SPEC = 225;
vlogParser.OUTPUT_OR_LEVEL_SYMBOL = 226;
vlogParser.LEVEL_ONLY_SYMBOL = 227;
vlogParser.EDGE_SYMBOL = 228;
vlogParser.EDGE_DESCRIPTOR = 229;

vlogParser.RULE_parse = 0;
vlogParser.RULE_library_description = 1;
vlogParser.RULE_library_declaration = 2;
vlogParser.RULE_include_directive = 3;
vlogParser.RULE_file_path_spec = 4;
vlogParser.RULE_description = 5;
vlogParser.RULE_module_declaration = 6;
vlogParser.RULE_module_keyword = 7;
vlogParser.RULE_module_parameter_port_list = 8;
vlogParser.RULE_list_of_ports = 9;
vlogParser.RULE_list_of_port_declarations = 10;
vlogParser.RULE_port = 11;
vlogParser.RULE_port_expression = 12;
vlogParser.RULE_port_reference = 13;
vlogParser.RULE_port_declaration = 14;
vlogParser.RULE_module_item = 15;
vlogParser.RULE_module_or_generate_item = 16;
vlogParser.RULE_module_or_generate_item_declaration = 17;
vlogParser.RULE_non_port_module_item = 18;
vlogParser.RULE_parameter_override = 19;
vlogParser.RULE_config_declaration = 20;
vlogParser.RULE_design_statement = 21;
vlogParser.RULE_config_rule_statement = 22;
vlogParser.RULE_default_clause = 23;
vlogParser.RULE_inst_clause = 24;
vlogParser.RULE_inst_name = 25;
vlogParser.RULE_cell_clause = 26;
vlogParser.RULE_liblist_clause = 27;
vlogParser.RULE_use_clause = 28;
vlogParser.RULE_local_parameter_declaration = 29;
vlogParser.RULE_parameter_declaration = 30;
vlogParser.RULE_specparam_declaration = 31;
vlogParser.RULE_parameter_type = 32;
vlogParser.RULE_inout_declaration = 33;
vlogParser.RULE_input_declaration = 34;
vlogParser.RULE_output_declaration = 35;
vlogParser.RULE_event_declaration = 36;
vlogParser.RULE_integer_declaration = 37;
vlogParser.RULE_net_declaration = 38;
vlogParser.RULE_real_declaration = 39;
vlogParser.RULE_realtime_declaration = 40;
vlogParser.RULE_reg_declaration = 41;
vlogParser.RULE_time_declaration = 42;
vlogParser.RULE_net_type = 43;
vlogParser.RULE_output_variable_type = 44;
vlogParser.RULE_real_type = 45;
vlogParser.RULE_variable_type = 46;
vlogParser.RULE_drive_strength = 47;
vlogParser.RULE_strength0 = 48;
vlogParser.RULE_strength1 = 49;
vlogParser.RULE_charge_strength = 50;
vlogParser.RULE_delay3 = 51;
vlogParser.RULE_delay2 = 52;
vlogParser.RULE_delay_value = 53;
vlogParser.RULE_list_of_defparam_assignments = 54;
vlogParser.RULE_list_of_event_identifiers = 55;
vlogParser.RULE_list_of_net_decl_assignments = 56;
vlogParser.RULE_list_of_net_identifiers = 57;
vlogParser.RULE_list_of_param_assignments = 58;
vlogParser.RULE_list_of_port_identifiers = 59;
vlogParser.RULE_list_of_real_identifiers = 60;
vlogParser.RULE_list_of_specparam_assignments = 61;
vlogParser.RULE_list_of_variable_identifiers = 62;
vlogParser.RULE_list_of_variable_port_identifiers = 63;
vlogParser.RULE_defparam_assignment = 64;
vlogParser.RULE_net_decl_assignment = 65;
vlogParser.RULE_param_assignment = 66;
vlogParser.RULE_specparam_assignment = 67;
vlogParser.RULE_pulse_control_specparam = 68;
vlogParser.RULE_error_limit_value = 69;
vlogParser.RULE_reject_limit_value = 70;
vlogParser.RULE_limit_value = 71;
vlogParser.RULE_dimension = 72;
vlogParser.RULE_range_ = 73;
vlogParser.RULE_function_declaration = 74;
vlogParser.RULE_function_item_declaration = 75;
vlogParser.RULE_function_port_list = 76;
vlogParser.RULE_function_range_or_type = 77;
vlogParser.RULE_task_declaration = 78;
vlogParser.RULE_task_item_declaration = 79;
vlogParser.RULE_task_port_list = 80;
vlogParser.RULE_task_port_item = 81;
vlogParser.RULE_tf_input_declaration = 82;
vlogParser.RULE_tf_output_declaration = 83;
vlogParser.RULE_tf_inout_declaration = 84;
vlogParser.RULE_task_port_type = 85;
vlogParser.RULE_block_item_declaration = 86;
vlogParser.RULE_list_of_block_variable_identifiers = 87;
vlogParser.RULE_list_of_block_real_identifiers = 88;
vlogParser.RULE_block_variable_type = 89;
vlogParser.RULE_block_real_type = 90;
vlogParser.RULE_gate_instantiation = 91;
vlogParser.RULE_cmos_switch_instance = 92;
vlogParser.RULE_enable_gate_instance = 93;
vlogParser.RULE_mos_switch_instance = 94;
vlogParser.RULE_n_input_gate_instance = 95;
vlogParser.RULE_n_output_gate_instance = 96;
vlogParser.RULE_pass_switch_instance = 97;
vlogParser.RULE_pass_enable_switch_instance = 98;
vlogParser.RULE_pull_gate_instance = 99;
vlogParser.RULE_name_of_gate_instance = 100;
vlogParser.RULE_pulldown_strength = 101;
vlogParser.RULE_pullup_strength = 102;
vlogParser.RULE_enable_terminal = 103;
vlogParser.RULE_inout_terminal = 104;
vlogParser.RULE_input_terminal = 105;
vlogParser.RULE_ncontrol_terminal = 106;
vlogParser.RULE_output_terminal = 107;
vlogParser.RULE_pcontrol_terminal = 108;
vlogParser.RULE_cmos_switchtype = 109;
vlogParser.RULE_enable_gatetype = 110;
vlogParser.RULE_mos_switchtype = 111;
vlogParser.RULE_n_input_gatetype = 112;
vlogParser.RULE_n_output_gatetype = 113;
vlogParser.RULE_pass_en_switchtype = 114;
vlogParser.RULE_pass_switchtype = 115;
vlogParser.RULE_module_instantiation = 116;
vlogParser.RULE_parameter_value_assignment = 117;
vlogParser.RULE_list_of_parameter_assignments = 118;
vlogParser.RULE_ordered_parameter_assignment = 119;
vlogParser.RULE_named_parameter_assignment = 120;
vlogParser.RULE_module_instance = 121;
vlogParser.RULE_name_of_module_instance = 122;
vlogParser.RULE_list_of_port_connections = 123;
vlogParser.RULE_ordered_port_connection = 124;
vlogParser.RULE_named_port_connection = 125;
vlogParser.RULE_generate_region = 126;
vlogParser.RULE_genvar_declaration = 127;
vlogParser.RULE_list_of_genvar_identifiers = 128;
vlogParser.RULE_loop_generate_construct = 129;
vlogParser.RULE_genvar_initialization = 130;
vlogParser.RULE_genvar_expression = 131;
vlogParser.RULE_genvar_iteration = 132;
vlogParser.RULE_genvar_primary = 133;
vlogParser.RULE_conditional_generate_construct = 134;
vlogParser.RULE_if_generate_construct = 135;
vlogParser.RULE_case_generate_construct = 136;
vlogParser.RULE_case_generate_item = 137;
vlogParser.RULE_generate_block = 138;
vlogParser.RULE_generate_block_or_null = 139;
vlogParser.RULE_udp_declaration = 140;
vlogParser.RULE_udp_port_list = 141;
vlogParser.RULE_udp_declaration_port_list = 142;
vlogParser.RULE_udp_port_declaration = 143;
vlogParser.RULE_udp_output_declaration = 144;
vlogParser.RULE_udp_input_declaration = 145;
vlogParser.RULE_udp_reg_declaration = 146;
vlogParser.RULE_udp_body = 147;
vlogParser.RULE_combinational_body = 148;
vlogParser.RULE_combinational_entry = 149;
vlogParser.RULE_sequential_body = 150;
vlogParser.RULE_udp_initial_statement = 151;
vlogParser.RULE_init_val = 152;
vlogParser.RULE_sequential_entry = 153;
vlogParser.RULE_seq_input_list = 154;
vlogParser.RULE_level_input_list = 155;
vlogParser.RULE_edge_input_list = 156;
vlogParser.RULE_edge_indicator = 157;
vlogParser.RULE_current_state = 158;
vlogParser.RULE_next_state = 159;
vlogParser.RULE_output_symbol = 160;
vlogParser.RULE_level_symbol = 161;
vlogParser.RULE_edge_symbol = 162;
vlogParser.RULE_udp_instantiation = 163;
vlogParser.RULE_udp_instance = 164;
vlogParser.RULE_name_of_udp_instance = 165;
vlogParser.RULE_continuous_assign = 166;
vlogParser.RULE_list_of_net_assignments = 167;
vlogParser.RULE_net_assignment = 168;
vlogParser.RULE_initial_construct = 169;
vlogParser.RULE_always_construct = 170;
vlogParser.RULE_blocking_assignment = 171;
vlogParser.RULE_nonblocking_assignment = 172;
vlogParser.RULE_procedural_continuous_assignments = 173;
vlogParser.RULE_variable_assignment = 174;
vlogParser.RULE_par_block = 175;
vlogParser.RULE_seq_block = 176;
vlogParser.RULE_statement = 177;
vlogParser.RULE_statement_or_null = 178;
vlogParser.RULE_function_statement = 179;
vlogParser.RULE_delay_control = 180;
vlogParser.RULE_delay_or_event_control = 181;
vlogParser.RULE_disable_statement = 182;
vlogParser.RULE_event_control = 183;
vlogParser.RULE_event_trigger = 184;
vlogParser.RULE_event_expression = 185;
vlogParser.RULE_procedural_timing_control = 186;
vlogParser.RULE_procedural_timing_control_statement = 187;
vlogParser.RULE_wait_statement = 188;
vlogParser.RULE_conditional_statement = 189;
vlogParser.RULE_case_statement = 190;
vlogParser.RULE_case_item = 191;
vlogParser.RULE_loop_statement = 192;
vlogParser.RULE_system_task_enable = 193;
vlogParser.RULE_task_enable = 194;
vlogParser.RULE_specify_block = 195;
vlogParser.RULE_specify_item = 196;
vlogParser.RULE_pulsestyle_declaration = 197;
vlogParser.RULE_showcancelled_declaration = 198;
vlogParser.RULE_path_declaration = 199;
vlogParser.RULE_simple_path_declaration = 200;
vlogParser.RULE_parallel_path_description = 201;
vlogParser.RULE_full_path_description = 202;
vlogParser.RULE_list_of_path_inputs = 203;
vlogParser.RULE_list_of_path_outputs = 204;
vlogParser.RULE_specify_input_terminal_descriptor = 205;
vlogParser.RULE_specify_output_terminal_descriptor = 206;
vlogParser.RULE_input_identifier = 207;
vlogParser.RULE_output_identifier = 208;
vlogParser.RULE_path_delay_value = 209;
vlogParser.RULE_list_of_path_delay_expressions = 210;
vlogParser.RULE_t_path_delay_expression = 211;
vlogParser.RULE_trise_path_delay_expression = 212;
vlogParser.RULE_tfall_path_delay_expression = 213;
vlogParser.RULE_tz_path_delay_expression = 214;
vlogParser.RULE_t01_path_delay_expression = 215;
vlogParser.RULE_t10_path_delay_expression = 216;
vlogParser.RULE_t0z_path_delay_expression = 217;
vlogParser.RULE_tz1_path_delay_expression = 218;
vlogParser.RULE_t1z_path_delay_expression = 219;
vlogParser.RULE_tz0_path_delay_expression = 220;
vlogParser.RULE_t0x_path_delay_expression = 221;
vlogParser.RULE_tx1_path_delay_expression = 222;
vlogParser.RULE_t1x_path_delay_expression = 223;
vlogParser.RULE_tx0_path_delay_expression = 224;
vlogParser.RULE_txz_path_delay_expression = 225;
vlogParser.RULE_tzx_path_delay_expression = 226;
vlogParser.RULE_path_delay_expression = 227;
vlogParser.RULE_edge_sensitive_path_declaration = 228;
vlogParser.RULE_parallel_edge_sensitive_path_description = 229;
vlogParser.RULE_full_edge_sensitive_path_description = 230;
vlogParser.RULE_data_source_expression = 231;
vlogParser.RULE_edge_identifier = 232;
vlogParser.RULE_state_dependent_path_declaration = 233;
vlogParser.RULE_polarity_operator = 234;
vlogParser.RULE_system_timing_check = 235;
vlogParser.RULE_setup_timing_check = 236;
vlogParser.RULE_hold_timing_check = 237;
vlogParser.RULE_setuphold_timing_check = 238;
vlogParser.RULE_recovery_timing_check = 239;
vlogParser.RULE_removal_timing_check = 240;
vlogParser.RULE_recrem_timing_check = 241;
vlogParser.RULE_skew_timing_check = 242;
vlogParser.RULE_timeskew_timing_check = 243;
vlogParser.RULE_fullskew_timing_check = 244;
vlogParser.RULE_period_timing_check = 245;
vlogParser.RULE_width_timing_check = 246;
vlogParser.RULE_nochange_timing_check = 247;
vlogParser.RULE_checktime_condition = 248;
vlogParser.RULE_controlled_reference_event = 249;
vlogParser.RULE_data_event = 250;
vlogParser.RULE_delayed_data = 251;
vlogParser.RULE_delayed_reference = 252;
vlogParser.RULE_end_edge_offset = 253;
vlogParser.RULE_event_based_flag = 254;
vlogParser.RULE_notifier = 255;
vlogParser.RULE_reference_event = 256;
vlogParser.RULE_remain_active_flag = 257;
vlogParser.RULE_stamptime_condition = 258;
vlogParser.RULE_start_edge_offset = 259;
vlogParser.RULE_threshold = 260;
vlogParser.RULE_timing_check_limit = 261;
vlogParser.RULE_timing_check_event = 262;
vlogParser.RULE_controlled_timing_check_event = 263;
vlogParser.RULE_timing_check_event_control = 264;
vlogParser.RULE_specify_terminal_descriptor = 265;
vlogParser.RULE_edge_control_specifier = 266;
vlogParser.RULE_edge_descriptor = 267;
vlogParser.RULE_timing_check_condition = 268;
vlogParser.RULE_scalar_timing_check_condition = 269;
vlogParser.RULE_scalar_constant = 270;
vlogParser.RULE_concatenation = 271;
vlogParser.RULE_constant_concatenation = 272;
vlogParser.RULE_constant_multiple_concatenation = 273;
vlogParser.RULE_module_path_concatenation = 274;
vlogParser.RULE_module_path_multiple_concatenation = 275;
vlogParser.RULE_multiple_concatenation = 276;
vlogParser.RULE_constant_function_call = 277;
vlogParser.RULE_constant_system_function_call = 278;
vlogParser.RULE_function_call = 279;
vlogParser.RULE_system_function_call = 280;
vlogParser.RULE_base_expression = 281;
vlogParser.RULE_constant_base_expression = 282;
vlogParser.RULE_constant_expression = 283;
vlogParser.RULE_constant_mintypmax_expression = 284;
vlogParser.RULE_constant_range_expression = 285;
vlogParser.RULE_dimension_constant_expression = 286;
vlogParser.RULE_expression = 287;
vlogParser.RULE_lsb_constant_expression = 288;
vlogParser.RULE_mintypmax_expression = 289;
vlogParser.RULE_module_path_expression = 290;
vlogParser.RULE_module_path_mintypmax_expression = 291;
vlogParser.RULE_msb_constant_expression = 292;
vlogParser.RULE_range_expression = 293;
vlogParser.RULE_width_constant_expression = 294;
vlogParser.RULE_constant_primary = 295;
vlogParser.RULE_module_path_primary = 296;
vlogParser.RULE_primary = 297;
vlogParser.RULE_net_lvalue = 298;
vlogParser.RULE_variable_lvalue = 299;
vlogParser.RULE_unary_operator = 300;
vlogParser.RULE_binary_operator = 301;
vlogParser.RULE_unary_module_path_operator = 302;
vlogParser.RULE_binary_module_path_operator = 303;
vlogParser.RULE_number = 304;
vlogParser.RULE_real_number = 305;
vlogParser.RULE_decimal_number = 306;
vlogParser.RULE_binary_number = 307;
vlogParser.RULE_octal_number = 308;
vlogParser.RULE_hex_number = 309;
vlogParser.RULE_unsigned_number = 310;
vlogParser.RULE_string_ = 311;
vlogParser.RULE_attribute_instance = 312;
vlogParser.RULE_attr_spec = 313;
vlogParser.RULE_attr_name = 314;
vlogParser.RULE_block_identifier = 315;
vlogParser.RULE_cell_identifier = 316;
vlogParser.RULE_config_identifier = 317;
vlogParser.RULE_escaped_identifier = 318;
vlogParser.RULE_event_identifier = 319;
vlogParser.RULE_function_identifier = 320;
vlogParser.RULE_gate_instance_identifier = 321;
vlogParser.RULE_generate_block_identifier = 322;
vlogParser.RULE_genvar_identifier = 323;
vlogParser.RULE_hierarchical_block_identifier = 324;
vlogParser.RULE_hierarchical_event_identifier = 325;
vlogParser.RULE_hierarchical_function_identifier = 326;
vlogParser.RULE_hierarchical_identifier = 327;
vlogParser.RULE_hierarchical_net_identifier = 328;
vlogParser.RULE_hierarchical_parameter_identifier = 329;
vlogParser.RULE_hierarchical_variable_identifier = 330;
vlogParser.RULE_hierarchical_task_identifier = 331;
vlogParser.RULE_identifier = 332;
vlogParser.RULE_macro_usage_identifier = 333;
vlogParser.RULE_inout_port_identifier = 334;
vlogParser.RULE_input_port_identifier = 335;
vlogParser.RULE_instance_identifier = 336;
vlogParser.RULE_library_identifier = 337;
vlogParser.RULE_module_identifier = 338;
vlogParser.RULE_module_instance_identifier = 339;
vlogParser.RULE_net_identifier = 340;
vlogParser.RULE_output_port_identifier = 341;
vlogParser.RULE_parameter_identifier = 342;
vlogParser.RULE_port_identifier = 343;
vlogParser.RULE_real_identifier = 344;
vlogParser.RULE_simple_identifier = 345;
vlogParser.RULE_specparam_identifier = 346;
vlogParser.RULE_system_function_identifier = 347;
vlogParser.RULE_system_task_identifier = 348;
vlogParser.RULE_task_identifier = 349;
vlogParser.RULE_terminal_identifier = 350;
vlogParser.RULE_text_macro_identifier = 351;
vlogParser.RULE_topmodule_identifier = 352;
vlogParser.RULE_udp_identifier = 353;
vlogParser.RULE_udp_instance_identifier = 354;
vlogParser.RULE_variable_identifier = 355;


function ParseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parse;
    return this;
}

ParseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParseContext.prototype.constructor = ParseContext;

ParseContext.prototype.EOF = function() {
    return this.getToken(vlogParser.EOF, 0);
};

ParseContext.prototype.description = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DescriptionContext);
    } else {
        return this.getTypedRuleContext(DescriptionContext,i);
    }
};

ParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParse(this);
	}
};

ParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParse(this);
	}
};




vlogParser.ParseContext = ParseContext;

vlogParser.prototype.parse = function() {

    var localctx = new ParseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, vlogParser.RULE_parse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP || _la===vlogParser.CONFIG || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (vlogParser.MACROMODULE - 116)) | (1 << (vlogParser.MODULE - 116)) | (1 << (vlogParser.PRIMITIVE - 116)))) !== 0)) {
            this.state = 712;
            this.description();
            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 718;
        this.match(vlogParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Library_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_library_description;
    return this;
}

Library_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Library_descriptionContext.prototype.constructor = Library_descriptionContext;

Library_descriptionContext.prototype.library_declaration = function() {
    return this.getTypedRuleContext(Library_declarationContext,0);
};

Library_descriptionContext.prototype.include_directive = function() {
    return this.getTypedRuleContext(Include_directiveContext,0);
};

Library_descriptionContext.prototype.config_declaration = function() {
    return this.getTypedRuleContext(Config_declarationContext,0);
};

Library_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLibrary_description(this);
	}
};

Library_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLibrary_description(this);
	}
};




vlogParser.Library_descriptionContext = Library_descriptionContext;

vlogParser.prototype.library_description = function() {

    var localctx = new Library_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, vlogParser.RULE_library_description);
    try {
        this.state = 723;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LIBRARY:
            this.enterOuterAlt(localctx, 1);
            this.state = 720;
            this.library_declaration();
            break;
        case vlogParser.INCLUDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.include_directive();
            break;
        case vlogParser.CONFIG:
            this.enterOuterAlt(localctx, 3);
            this.state = 722;
            this.config_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Library_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_library_declaration;
    return this;
}

Library_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Library_declarationContext.prototype.constructor = Library_declarationContext;

Library_declarationContext.prototype.LIBRARY = function() {
    return this.getToken(vlogParser.LIBRARY, 0);
};

Library_declarationContext.prototype.library_identifier = function() {
    return this.getTypedRuleContext(Library_identifierContext,0);
};

Library_declarationContext.prototype.file_path_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(File_path_specContext);
    } else {
        return this.getTypedRuleContext(File_path_specContext,i);
    }
};

Library_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Library_declarationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Library_declarationContext.prototype.MIINCDIR = function() {
    return this.getToken(vlogParser.MIINCDIR, 0);
};

Library_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLibrary_declaration(this);
	}
};

Library_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLibrary_declaration(this);
	}
};




vlogParser.Library_declarationContext = Library_declarationContext;

vlogParser.prototype.library_declaration = function() {

    var localctx = new Library_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, vlogParser.RULE_library_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.match(vlogParser.LIBRARY);
        this.state = 726;
        this.library_identifier();
        this.state = 727;
        this.file_path_spec();
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 728;
            this.match(vlogParser.CO);
            this.state = 729;
            this.file_path_spec();
            this.state = 734;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.MIINCDIR) {
            this.state = 735;
            this.match(vlogParser.MIINCDIR);
            this.state = 736;
            this.file_path_spec();
            this.state = 741;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 737;
                this.match(vlogParser.CO);
                this.state = 738;
                this.file_path_spec();
                this.state = 743;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 746;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Include_directiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_include_directive;
    return this;
}

Include_directiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Include_directiveContext.prototype.constructor = Include_directiveContext;

Include_directiveContext.prototype.INCLUDE = function() {
    return this.getToken(vlogParser.INCLUDE, 0);
};

Include_directiveContext.prototype.file_path_spec = function() {
    return this.getTypedRuleContext(File_path_specContext,0);
};

Include_directiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInclude_directive(this);
	}
};

Include_directiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInclude_directive(this);
	}
};




vlogParser.Include_directiveContext = Include_directiveContext;

vlogParser.prototype.include_directive = function() {

    var localctx = new Include_directiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, vlogParser.RULE_include_directive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 748;
        this.match(vlogParser.INCLUDE);
        this.state = 749;
        this.file_path_spec();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_path_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_file_path_spec;
    return this;
}

File_path_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_path_specContext.prototype.constructor = File_path_specContext;

File_path_specContext.prototype.FILE_PATH_SPEC = function() {
    return this.getToken(vlogParser.FILE_PATH_SPEC, 0);
};

File_path_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFile_path_spec(this);
	}
};

File_path_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFile_path_spec(this);
	}
};




vlogParser.File_path_specContext = File_path_specContext;

vlogParser.prototype.file_path_spec = function() {

    var localctx = new File_path_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, vlogParser.RULE_file_path_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        this.match(vlogParser.FILE_PATH_SPEC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DescriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_description;
    return this;
}

DescriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescriptionContext.prototype.constructor = DescriptionContext;

DescriptionContext.prototype.module_declaration = function() {
    return this.getTypedRuleContext(Module_declarationContext,0);
};

DescriptionContext.prototype.udp_declaration = function() {
    return this.getTypedRuleContext(Udp_declarationContext,0);
};

DescriptionContext.prototype.config_declaration = function() {
    return this.getTypedRuleContext(Config_declarationContext,0);
};

DescriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDescription(this);
	}
};

DescriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDescription(this);
	}
};




vlogParser.DescriptionContext = DescriptionContext;

vlogParser.prototype.description = function() {

    var localctx = new DescriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, vlogParser.RULE_description);
    try {
        this.state = 756;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this.module_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 754;
            this.udp_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 755;
            this.config_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_declaration;
    return this;
}

Module_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_declarationContext.prototype.constructor = Module_declarationContext;

Module_declarationContext.prototype.module_keyword = function() {
    return this.getTypedRuleContext(Module_keywordContext,0);
};

Module_declarationContext.prototype.module_identifier = function() {
    return this.getTypedRuleContext(Module_identifierContext,0);
};

Module_declarationContext.prototype.list_of_ports = function() {
    return this.getTypedRuleContext(List_of_portsContext,0);
};

Module_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Module_declarationContext.prototype.ENDMODULE = function() {
    return this.getToken(vlogParser.ENDMODULE, 0);
};

Module_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Module_declarationContext.prototype.module_parameter_port_list = function() {
    return this.getTypedRuleContext(Module_parameter_port_listContext,0);
};

Module_declarationContext.prototype.module_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_itemContext);
    } else {
        return this.getTypedRuleContext(Module_itemContext,i);
    }
};

Module_declarationContext.prototype.list_of_port_declarations = function() {
    return this.getTypedRuleContext(List_of_port_declarationsContext,0);
};

Module_declarationContext.prototype.non_port_module_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Non_port_module_itemContext);
    } else {
        return this.getTypedRuleContext(Non_port_module_itemContext,i);
    }
};

Module_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_declaration(this);
	}
};

Module_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_declaration(this);
	}
};




vlogParser.Module_declarationContext = Module_declarationContext;

vlogParser.prototype.module_declaration = function() {

    var localctx = new Module_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, vlogParser.RULE_module_declaration);
    var _la = 0; // Token type
    try {
        this.state = 802;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 761;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 758;
                this.attribute_instance();
                this.state = 763;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 764;
            this.module_keyword();
            this.state = 765;
            this.module_identifier();
            this.state = 767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 766;
                this.module_parameter_port_list();
            }

            this.state = 769;
            this.list_of_ports();
            this.state = 770;
            this.match(vlogParser.SC);
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (vlogParser.ALWAYS - 61)) | (1 << (vlogParser.AND - 61)) | (1 << (vlogParser.ASSIGN - 61)) | (1 << (vlogParser.BUF - 61)) | (1 << (vlogParser.BUFIFZERO - 61)) | (1 << (vlogParser.BUFIFONE - 61)) | (1 << (vlogParser.CASE - 61)) | (1 << (vlogParser.CMOS - 61)) | (1 << (vlogParser.DEFPARAM - 61)) | (1 << (vlogParser.EVENT - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FUNCTION - 93)) | (1 << (vlogParser.GENERATE - 93)) | (1 << (vlogParser.GENVAR - 93)) | (1 << (vlogParser.IF - 93)) | (1 << (vlogParser.INITIAL - 93)) | (1 << (vlogParser.INOUT - 93)) | (1 << (vlogParser.INPUT - 93)) | (1 << (vlogParser.INTEGER - 93)) | (1 << (vlogParser.LOCALPARAM - 93)) | (1 << (vlogParser.LOGIC - 93)) | (1 << (vlogParser.NAND - 93)) | (1 << (vlogParser.NMOS - 93)) | (1 << (vlogParser.NOR - 93)) | (1 << (vlogParser.NOT - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (vlogParser.NOTIFZERO - 125)) | (1 << (vlogParser.NOTIFONE - 125)) | (1 << (vlogParser.OR - 125)) | (1 << (vlogParser.OUTPUT - 125)) | (1 << (vlogParser.PARAMETER - 125)) | (1 << (vlogParser.PMOS - 125)) | (1 << (vlogParser.PULLDOWN - 125)) | (1 << (vlogParser.PULLUP - 125)) | (1 << (vlogParser.RCMOS - 125)) | (1 << (vlogParser.REAL - 125)) | (1 << (vlogParser.REALTIME - 125)) | (1 << (vlogParser.REG - 125)) | (1 << (vlogParser.RNMOS - 125)) | (1 << (vlogParser.RPMOS - 125)) | (1 << (vlogParser.RTRAN - 125)) | (1 << (vlogParser.RTRANIFZERO - 125)) | (1 << (vlogParser.RTRANIFONE - 125)) | (1 << (vlogParser.SPECIFY - 125)) | (1 << (vlogParser.SPECPARAM - 125)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TASK - 158)) | (1 << (vlogParser.TIME - 158)) | (1 << (vlogParser.TRAN - 158)) | (1 << (vlogParser.TRANIFZERO - 158)) | (1 << (vlogParser.TRANIFONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.TRIREG - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)) | (1 << (vlogParser.XNOR - 158)) | (1 << (vlogParser.XOR - 158)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 771;
                this.module_item();
                this.state = 776;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 777;
            this.match(vlogParser.ENDMODULE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 779;
                this.attribute_instance();
                this.state = 784;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 785;
            this.module_keyword();
            this.state = 786;
            this.module_identifier();
            this.state = 788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 787;
                this.module_parameter_port_list();
            }

            this.state = 791;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 790;
                this.list_of_port_declarations();
            }

            this.state = 793;
            this.match(vlogParser.SC);
            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (vlogParser.ALWAYS - 61)) | (1 << (vlogParser.AND - 61)) | (1 << (vlogParser.ASSIGN - 61)) | (1 << (vlogParser.BUF - 61)) | (1 << (vlogParser.BUFIFZERO - 61)) | (1 << (vlogParser.BUFIFONE - 61)) | (1 << (vlogParser.CASE - 61)) | (1 << (vlogParser.CMOS - 61)) | (1 << (vlogParser.DEFPARAM - 61)) | (1 << (vlogParser.EVENT - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FUNCTION - 93)) | (1 << (vlogParser.GENERATE - 93)) | (1 << (vlogParser.GENVAR - 93)) | (1 << (vlogParser.IF - 93)) | (1 << (vlogParser.INITIAL - 93)) | (1 << (vlogParser.INTEGER - 93)) | (1 << (vlogParser.LOCALPARAM - 93)) | (1 << (vlogParser.LOGIC - 93)) | (1 << (vlogParser.NAND - 93)) | (1 << (vlogParser.NMOS - 93)) | (1 << (vlogParser.NOR - 93)) | (1 << (vlogParser.NOT - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (vlogParser.NOTIFZERO - 125)) | (1 << (vlogParser.NOTIFONE - 125)) | (1 << (vlogParser.OR - 125)) | (1 << (vlogParser.PARAMETER - 125)) | (1 << (vlogParser.PMOS - 125)) | (1 << (vlogParser.PULLDOWN - 125)) | (1 << (vlogParser.PULLUP - 125)) | (1 << (vlogParser.RCMOS - 125)) | (1 << (vlogParser.REAL - 125)) | (1 << (vlogParser.REALTIME - 125)) | (1 << (vlogParser.REG - 125)) | (1 << (vlogParser.RNMOS - 125)) | (1 << (vlogParser.RPMOS - 125)) | (1 << (vlogParser.RTRAN - 125)) | (1 << (vlogParser.RTRANIFZERO - 125)) | (1 << (vlogParser.RTRANIFONE - 125)) | (1 << (vlogParser.SPECIFY - 125)) | (1 << (vlogParser.SPECPARAM - 125)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TASK - 158)) | (1 << (vlogParser.TIME - 158)) | (1 << (vlogParser.TRAN - 158)) | (1 << (vlogParser.TRANIFZERO - 158)) | (1 << (vlogParser.TRANIFONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.TRIREG - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)) | (1 << (vlogParser.XNOR - 158)) | (1 << (vlogParser.XOR - 158)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 794;
                this.non_port_module_item();
                this.state = 799;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 800;
            this.match(vlogParser.ENDMODULE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_keywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_keyword;
    return this;
}

Module_keywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_keywordContext.prototype.constructor = Module_keywordContext;

Module_keywordContext.prototype.MODULE = function() {
    return this.getToken(vlogParser.MODULE, 0);
};

Module_keywordContext.prototype.MACROMODULE = function() {
    return this.getToken(vlogParser.MACROMODULE, 0);
};

Module_keywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_keyword(this);
	}
};

Module_keywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_keyword(this);
	}
};




vlogParser.Module_keywordContext = Module_keywordContext;

vlogParser.prototype.module_keyword = function() {

    var localctx = new Module_keywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, vlogParser.RULE_module_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.MACROMODULE || _la===vlogParser.MODULE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_parameter_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_parameter_port_list;
    return this;
}

Module_parameter_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_parameter_port_listContext.prototype.constructor = Module_parameter_port_listContext;

Module_parameter_port_listContext.prototype.HA = function() {
    return this.getToken(vlogParser.HA, 0);
};

Module_parameter_port_listContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Module_parameter_port_listContext.prototype.parameter_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parameter_declarationContext);
    } else {
        return this.getTypedRuleContext(Parameter_declarationContext,i);
    }
};

Module_parameter_port_listContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Module_parameter_port_listContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Module_parameter_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_parameter_port_list(this);
	}
};

Module_parameter_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_parameter_port_list(this);
	}
};




vlogParser.Module_parameter_port_listContext = Module_parameter_port_listContext;

vlogParser.prototype.module_parameter_port_list = function() {

    var localctx = new Module_parameter_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, vlogParser.RULE_module_parameter_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.match(vlogParser.HA);
        this.state = 807;
        this.match(vlogParser.LP);
        this.state = 808;
        this.parameter_declaration();
        this.state = 813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 809;
            this.match(vlogParser.CO);
            this.state = 810;
            this.parameter_declaration();
            this.state = 815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 816;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_portsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_ports;
    return this;
}

List_of_portsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_portsContext.prototype.constructor = List_of_portsContext;

List_of_portsContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

List_of_portsContext.prototype.port = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PortContext);
    } else {
        return this.getTypedRuleContext(PortContext,i);
    }
};

List_of_portsContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

List_of_portsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_portsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_ports(this);
	}
};

List_of_portsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_ports(this);
	}
};




vlogParser.List_of_portsContext = List_of_portsContext;

vlogParser.prototype.list_of_ports = function() {

    var localctx = new List_of_portsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, vlogParser.RULE_list_of_ports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(vlogParser.LP);
        this.state = 819;
        this.port();
        this.state = 824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 820;
            this.match(vlogParser.CO);
            this.state = 821;
            this.port();
            this.state = 826;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 827;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_port_declarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_port_declarations;
    return this;
}

List_of_port_declarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_port_declarationsContext.prototype.constructor = List_of_port_declarationsContext;

List_of_port_declarationsContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

List_of_port_declarationsContext.prototype.port_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Port_declarationContext);
    } else {
        return this.getTypedRuleContext(Port_declarationContext,i);
    }
};

List_of_port_declarationsContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

List_of_port_declarationsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_port_declarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_port_declarations(this);
	}
};

List_of_port_declarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_port_declarations(this);
	}
};




vlogParser.List_of_port_declarationsContext = List_of_port_declarationsContext;

vlogParser.prototype.list_of_port_declarations = function() {

    var localctx = new List_of_port_declarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, vlogParser.RULE_list_of_port_declarations);
    var _la = 0; // Token type
    try {
        this.state = 842;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 829;
            this.match(vlogParser.LP);
            this.state = 830;
            this.port_declaration();
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 831;
                this.match(vlogParser.CO);
                this.state = 832;
                this.port_declaration();
                this.state = 837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 838;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 840;
            this.match(vlogParser.LP);
            this.state = 841;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.port_expression = function() {
    return this.getTypedRuleContext(Port_expressionContext,0);
};

PortContext.prototype.DT = function() {
    return this.getToken(vlogParser.DT, 0);
};

PortContext.prototype.port_identifier = function() {
    return this.getTypedRuleContext(Port_identifierContext,0);
};

PortContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

PortContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPort(this);
	}
};




vlogParser.PortContext = PortContext;

vlogParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, vlogParser.RULE_port);
    var _la = 0; // Token type
    try {
        this.state = 855;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.RP:
        case vlogParser.CO:
        case vlogParser.LC:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 844;
                this.port_expression();
            }

            break;
        case vlogParser.DT:
            this.enterOuterAlt(localctx, 2);
            this.state = 847;
            this.match(vlogParser.DT);
            this.state = 848;
            this.port_identifier();
            this.state = 849;
            this.match(vlogParser.LP);
            this.state = 851;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 850;
                this.port_expression();
            }

            this.state = 853;
            this.match(vlogParser.RP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_port_expression;
    return this;
}

Port_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_expressionContext.prototype.constructor = Port_expressionContext;

Port_expressionContext.prototype.port_reference = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Port_referenceContext);
    } else {
        return this.getTypedRuleContext(Port_referenceContext,i);
    }
};

Port_expressionContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Port_expressionContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Port_expressionContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Port_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPort_expression(this);
	}
};

Port_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPort_expression(this);
	}
};




vlogParser.Port_expressionContext = Port_expressionContext;

vlogParser.prototype.port_expression = function() {

    var localctx = new Port_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, vlogParser.RULE_port_expression);
    var _la = 0; // Token type
    try {
        this.state = 869;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 857;
            this.port_reference();
            break;
        case vlogParser.LC:
            this.enterOuterAlt(localctx, 2);
            this.state = 858;
            this.match(vlogParser.LC);
            this.state = 859;
            this.port_reference();
            this.state = 864;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 860;
                this.match(vlogParser.CO);
                this.state = 861;
                this.port_reference();
                this.state = 866;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 867;
            this.match(vlogParser.RC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_port_reference;
    return this;
}

Port_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_referenceContext.prototype.constructor = Port_referenceContext;

Port_referenceContext.prototype.port_identifier = function() {
    return this.getTypedRuleContext(Port_identifierContext,0);
};

Port_referenceContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Port_referenceContext.prototype.constant_range_expression = function() {
    return this.getTypedRuleContext(Constant_range_expressionContext,0);
};

Port_referenceContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Port_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPort_reference(this);
	}
};

Port_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPort_reference(this);
	}
};




vlogParser.Port_referenceContext = Port_referenceContext;

vlogParser.prototype.port_reference = function() {

    var localctx = new Port_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, vlogParser.RULE_port_reference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 871;
        this.port_identifier();
        this.state = 876;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 872;
            this.match(vlogParser.LB);
            this.state = 873;
            this.constant_range_expression();
            this.state = 874;
            this.match(vlogParser.RB);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_port_declaration;
    return this;
}

Port_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_declarationContext.prototype.constructor = Port_declarationContext;

Port_declarationContext.prototype.inout_declaration = function() {
    return this.getTypedRuleContext(Inout_declarationContext,0);
};

Port_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Port_declarationContext.prototype.input_declaration = function() {
    return this.getTypedRuleContext(Input_declarationContext,0);
};

Port_declarationContext.prototype.output_declaration = function() {
    return this.getTypedRuleContext(Output_declarationContext,0);
};

Port_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPort_declaration(this);
	}
};

Port_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPort_declaration(this);
	}
};




vlogParser.Port_declarationContext = Port_declarationContext;

vlogParser.prototype.port_declaration = function() {

    var localctx = new Port_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, vlogParser.RULE_port_declaration);
    var _la = 0; // Token type
    try {
        this.state = 899;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 878;
                this.attribute_instance();
                this.state = 883;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 884;
            this.inout_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 888;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 885;
                this.attribute_instance();
                this.state = 890;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 891;
            this.input_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 895;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 892;
                this.attribute_instance();
                this.state = 897;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 898;
            this.output_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_item;
    return this;
}

Module_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_itemContext.prototype.constructor = Module_itemContext;

Module_itemContext.prototype.port_declaration = function() {
    return this.getTypedRuleContext(Port_declarationContext,0);
};

Module_itemContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Module_itemContext.prototype.non_port_module_item = function() {
    return this.getTypedRuleContext(Non_port_module_itemContext,0);
};

Module_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_item(this);
	}
};

Module_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_item(this);
	}
};




vlogParser.Module_itemContext = Module_itemContext;

vlogParser.prototype.module_item = function() {

    var localctx = new Module_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, vlogParser.RULE_module_item);
    try {
        this.state = 905;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 901;
            this.port_declaration();
            this.state = 902;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 904;
            this.non_port_module_item();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_or_generate_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_or_generate_item;
    return this;
}

Module_or_generate_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_or_generate_itemContext.prototype.constructor = Module_or_generate_itemContext;

Module_or_generate_itemContext.prototype.module_or_generate_item_declaration = function() {
    return this.getTypedRuleContext(Module_or_generate_item_declarationContext,0);
};

Module_or_generate_itemContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Module_or_generate_itemContext.prototype.local_parameter_declaration = function() {
    return this.getTypedRuleContext(Local_parameter_declarationContext,0);
};

Module_or_generate_itemContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Module_or_generate_itemContext.prototype.parameter_override = function() {
    return this.getTypedRuleContext(Parameter_overrideContext,0);
};

Module_or_generate_itemContext.prototype.continuous_assign = function() {
    return this.getTypedRuleContext(Continuous_assignContext,0);
};

Module_or_generate_itemContext.prototype.gate_instantiation = function() {
    return this.getTypedRuleContext(Gate_instantiationContext,0);
};

Module_or_generate_itemContext.prototype.module_instantiation = function() {
    return this.getTypedRuleContext(Module_instantiationContext,0);
};

Module_or_generate_itemContext.prototype.udp_instantiation = function() {
    return this.getTypedRuleContext(Udp_instantiationContext,0);
};

Module_or_generate_itemContext.prototype.initial_construct = function() {
    return this.getTypedRuleContext(Initial_constructContext,0);
};

Module_or_generate_itemContext.prototype.always_construct = function() {
    return this.getTypedRuleContext(Always_constructContext,0);
};

Module_or_generate_itemContext.prototype.loop_generate_construct = function() {
    return this.getTypedRuleContext(Loop_generate_constructContext,0);
};

Module_or_generate_itemContext.prototype.conditional_generate_construct = function() {
    return this.getTypedRuleContext(Conditional_generate_constructContext,0);
};

Module_or_generate_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_or_generate_item(this);
	}
};

Module_or_generate_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_or_generate_item(this);
	}
};




vlogParser.Module_or_generate_itemContext = Module_or_generate_itemContext;

vlogParser.prototype.module_or_generate_item = function() {

    var localctx = new Module_or_generate_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, vlogParser.RULE_module_or_generate_item);
    var _la = 0; // Token type
    try {
        this.state = 986;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 910;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 907;
                this.attribute_instance();
                this.state = 912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 913;
            this.module_or_generate_item_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 917;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 914;
                this.attribute_instance();
                this.state = 919;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 920;
            this.local_parameter_declaration();
            this.state = 921;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 923;
                this.attribute_instance();
                this.state = 928;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 929;
            this.parameter_override();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 933;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 930;
                this.attribute_instance();
                this.state = 935;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 936;
            this.continuous_assign();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 937;
                this.attribute_instance();
                this.state = 942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 943;
            this.gate_instantiation();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 944;
                this.attribute_instance();
                this.state = 949;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 950;
            this.module_instantiation();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 954;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 951;
                this.attribute_instance();
                this.state = 956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 957;
            this.udp_instantiation();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 961;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 958;
                this.attribute_instance();
                this.state = 963;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 964;
            this.initial_construct();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 965;
                this.attribute_instance();
                this.state = 970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 971;
            this.always_construct();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 972;
                this.attribute_instance();
                this.state = 977;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 978;
            this.loop_generate_construct();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 979;
                this.attribute_instance();
                this.state = 984;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 985;
            this.conditional_generate_construct();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_or_generate_item_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_or_generate_item_declaration;
    return this;
}

Module_or_generate_item_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_or_generate_item_declarationContext.prototype.constructor = Module_or_generate_item_declarationContext;

Module_or_generate_item_declarationContext.prototype.net_declaration = function() {
    return this.getTypedRuleContext(Net_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.reg_declaration = function() {
    return this.getTypedRuleContext(Reg_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.integer_declaration = function() {
    return this.getTypedRuleContext(Integer_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.real_declaration = function() {
    return this.getTypedRuleContext(Real_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.time_declaration = function() {
    return this.getTypedRuleContext(Time_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.realtime_declaration = function() {
    return this.getTypedRuleContext(Realtime_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.event_declaration = function() {
    return this.getTypedRuleContext(Event_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.genvar_declaration = function() {
    return this.getTypedRuleContext(Genvar_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.task_declaration = function() {
    return this.getTypedRuleContext(Task_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.function_declaration = function() {
    return this.getTypedRuleContext(Function_declarationContext,0);
};

Module_or_generate_item_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_or_generate_item_declaration(this);
	}
};

Module_or_generate_item_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_or_generate_item_declaration(this);
	}
};




vlogParser.Module_or_generate_item_declarationContext = Module_or_generate_item_declarationContext;

vlogParser.prototype.module_or_generate_item_declaration = function() {

    var localctx = new Module_or_generate_item_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, vlogParser.RULE_module_or_generate_item_declaration);
    try {
        this.state = 998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LOGIC:
        case vlogParser.SUPPLYZERO:
        case vlogParser.SUPPLYONE:
        case vlogParser.TRI:
        case vlogParser.TRIZERO:
        case vlogParser.TRIONE:
        case vlogParser.TRIAND:
        case vlogParser.TRIOR:
        case vlogParser.TRIREG:
        case vlogParser.UWIRE:
        case vlogParser.WAND:
        case vlogParser.WIRE:
        case vlogParser.WOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 988;
            this.net_declaration();
            break;
        case vlogParser.REG:
            this.enterOuterAlt(localctx, 2);
            this.state = 989;
            this.reg_declaration();
            break;
        case vlogParser.INTEGER:
            this.enterOuterAlt(localctx, 3);
            this.state = 990;
            this.integer_declaration();
            break;
        case vlogParser.REAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 991;
            this.real_declaration();
            break;
        case vlogParser.TIME:
            this.enterOuterAlt(localctx, 5);
            this.state = 992;
            this.time_declaration();
            break;
        case vlogParser.REALTIME:
            this.enterOuterAlt(localctx, 6);
            this.state = 993;
            this.realtime_declaration();
            break;
        case vlogParser.EVENT:
            this.enterOuterAlt(localctx, 7);
            this.state = 994;
            this.event_declaration();
            break;
        case vlogParser.GENVAR:
            this.enterOuterAlt(localctx, 8);
            this.state = 995;
            this.genvar_declaration();
            break;
        case vlogParser.TASK:
            this.enterOuterAlt(localctx, 9);
            this.state = 996;
            this.task_declaration();
            break;
        case vlogParser.FUNCTION:
            this.enterOuterAlt(localctx, 10);
            this.state = 997;
            this.function_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Non_port_module_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_non_port_module_item;
    return this;
}

Non_port_module_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_port_module_itemContext.prototype.constructor = Non_port_module_itemContext;

Non_port_module_itemContext.prototype.module_or_generate_item = function() {
    return this.getTypedRuleContext(Module_or_generate_itemContext,0);
};

Non_port_module_itemContext.prototype.generate_region = function() {
    return this.getTypedRuleContext(Generate_regionContext,0);
};

Non_port_module_itemContext.prototype.specify_block = function() {
    return this.getTypedRuleContext(Specify_blockContext,0);
};

Non_port_module_itemContext.prototype.parameter_declaration = function() {
    return this.getTypedRuleContext(Parameter_declarationContext,0);
};

Non_port_module_itemContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Non_port_module_itemContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Non_port_module_itemContext.prototype.specparam_declaration = function() {
    return this.getTypedRuleContext(Specparam_declarationContext,0);
};

Non_port_module_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNon_port_module_item(this);
	}
};

Non_port_module_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNon_port_module_item(this);
	}
};




vlogParser.Non_port_module_itemContext = Non_port_module_itemContext;

vlogParser.prototype.non_port_module_item = function() {

    var localctx = new Non_port_module_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, vlogParser.RULE_non_port_module_item);
    var _la = 0; // Token type
    try {
        this.state = 1019;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1000;
            this.module_or_generate_item();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1001;
            this.generate_region();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1002;
            this.specify_block();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1003;
                this.attribute_instance();
                this.state = 1008;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1009;
            this.parameter_declaration();
            this.state = 1010;
            this.match(vlogParser.SC);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1015;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1012;
                this.attribute_instance();
                this.state = 1017;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1018;
            this.specparam_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_overrideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parameter_override;
    return this;
}

Parameter_overrideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_overrideContext.prototype.constructor = Parameter_overrideContext;

Parameter_overrideContext.prototype.DEFPARAM = function() {
    return this.getToken(vlogParser.DEFPARAM, 0);
};

Parameter_overrideContext.prototype.list_of_defparam_assignments = function() {
    return this.getTypedRuleContext(List_of_defparam_assignmentsContext,0);
};

Parameter_overrideContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Parameter_overrideContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParameter_override(this);
	}
};

Parameter_overrideContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParameter_override(this);
	}
};




vlogParser.Parameter_overrideContext = Parameter_overrideContext;

vlogParser.prototype.parameter_override = function() {

    var localctx = new Parameter_overrideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, vlogParser.RULE_parameter_override);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        this.match(vlogParser.DEFPARAM);
        this.state = 1022;
        this.list_of_defparam_assignments();
        this.state = 1023;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Config_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_config_declaration;
    return this;
}

Config_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Config_declarationContext.prototype.constructor = Config_declarationContext;

Config_declarationContext.prototype.CONFIG = function() {
    return this.getToken(vlogParser.CONFIG, 0);
};

Config_declarationContext.prototype.config_identifier = function() {
    return this.getTypedRuleContext(Config_identifierContext,0);
};

Config_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Config_declarationContext.prototype.design_statement = function() {
    return this.getTypedRuleContext(Design_statementContext,0);
};

Config_declarationContext.prototype.ENDCONFIG = function() {
    return this.getToken(vlogParser.ENDCONFIG, 0);
};

Config_declarationContext.prototype.config_rule_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Config_rule_statementContext);
    } else {
        return this.getTypedRuleContext(Config_rule_statementContext,i);
    }
};

Config_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConfig_declaration(this);
	}
};

Config_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConfig_declaration(this);
	}
};




vlogParser.Config_declarationContext = Config_declarationContext;

vlogParser.prototype.config_declaration = function() {

    var localctx = new Config_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, vlogParser.RULE_config_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        this.match(vlogParser.CONFIG);
        this.state = 1026;
        this.config_identifier();
        this.state = 1027;
        this.match(vlogParser.SC);
        this.state = 1028;
        this.design_statement();
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CELL || _la===vlogParser.DEFAULT || _la===vlogParser.INSTANCE) {
            this.state = 1029;
            this.config_rule_statement();
            this.state = 1034;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1035;
        this.match(vlogParser.ENDCONFIG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Design_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_design_statement;
    return this;
}

Design_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Design_statementContext.prototype.constructor = Design_statementContext;

Design_statementContext.prototype.DESIGN = function() {
    return this.getToken(vlogParser.DESIGN, 0);
};

Design_statementContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Design_statementContext.prototype.cell_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cell_identifierContext);
    } else {
        return this.getTypedRuleContext(Cell_identifierContext,i);
    }
};

Design_statementContext.prototype.library_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Library_identifierContext);
    } else {
        return this.getTypedRuleContext(Library_identifierContext,i);
    }
};

Design_statementContext.prototype.DT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.DT);
    } else {
        return this.getToken(vlogParser.DT, i);
    }
};


Design_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDesign_statement(this);
	}
};

Design_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDesign_statement(this);
	}
};




vlogParser.Design_statementContext = Design_statementContext;

vlogParser.prototype.design_statement = function() {

    var localctx = new Design_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, vlogParser.RULE_design_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        this.match(vlogParser.DESIGN);
        this.state = 1046;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 1041;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
            if(la_===1) {
                this.state = 1038;
                this.library_identifier();
                this.state = 1039;
                this.match(vlogParser.DT);

            }
            this.state = 1043;
            this.cell_identifier();
            this.state = 1048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1049;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Config_rule_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_config_rule_statement;
    return this;
}

Config_rule_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Config_rule_statementContext.prototype.constructor = Config_rule_statementContext;

Config_rule_statementContext.prototype.default_clause = function() {
    return this.getTypedRuleContext(Default_clauseContext,0);
};

Config_rule_statementContext.prototype.liblist_clause = function() {
    return this.getTypedRuleContext(Liblist_clauseContext,0);
};

Config_rule_statementContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Config_rule_statementContext.prototype.inst_clause = function() {
    return this.getTypedRuleContext(Inst_clauseContext,0);
};

Config_rule_statementContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Config_rule_statementContext.prototype.cell_clause = function() {
    return this.getTypedRuleContext(Cell_clauseContext,0);
};

Config_rule_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConfig_rule_statement(this);
	}
};

Config_rule_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConfig_rule_statement(this);
	}
};




vlogParser.Config_rule_statementContext = Config_rule_statementContext;

vlogParser.prototype.config_rule_statement = function() {

    var localctx = new Config_rule_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, vlogParser.RULE_config_rule_statement);
    try {
        this.state = 1071;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1051;
            this.default_clause();
            this.state = 1052;
            this.liblist_clause();
            this.state = 1053;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1055;
            this.inst_clause();
            this.state = 1056;
            this.liblist_clause();
            this.state = 1057;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1059;
            this.inst_clause();
            this.state = 1060;
            this.use_clause();
            this.state = 1061;
            this.match(vlogParser.SC);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1063;
            this.cell_clause();
            this.state = 1064;
            this.liblist_clause();
            this.state = 1065;
            this.match(vlogParser.SC);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1067;
            this.cell_clause();
            this.state = 1068;
            this.use_clause();
            this.state = 1069;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Default_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_default_clause;
    return this;
}

Default_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_clauseContext.prototype.constructor = Default_clauseContext;

Default_clauseContext.prototype.DEFAULT = function() {
    return this.getToken(vlogParser.DEFAULT, 0);
};

Default_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDefault_clause(this);
	}
};

Default_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDefault_clause(this);
	}
};




vlogParser.Default_clauseContext = Default_clauseContext;

vlogParser.prototype.default_clause = function() {

    var localctx = new Default_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, vlogParser.RULE_default_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this.match(vlogParser.DEFAULT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inst_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_inst_clause;
    return this;
}

Inst_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inst_clauseContext.prototype.constructor = Inst_clauseContext;

Inst_clauseContext.prototype.INSTANCE = function() {
    return this.getToken(vlogParser.INSTANCE, 0);
};

Inst_clauseContext.prototype.inst_name = function() {
    return this.getTypedRuleContext(Inst_nameContext,0);
};

Inst_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInst_clause(this);
	}
};

Inst_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInst_clause(this);
	}
};




vlogParser.Inst_clauseContext = Inst_clauseContext;

vlogParser.prototype.inst_clause = function() {

    var localctx = new Inst_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, vlogParser.RULE_inst_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1075;
        this.match(vlogParser.INSTANCE);
        this.state = 1076;
        this.inst_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inst_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_inst_name;
    return this;
}

Inst_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inst_nameContext.prototype.constructor = Inst_nameContext;

Inst_nameContext.prototype.topmodule_identifier = function() {
    return this.getTypedRuleContext(Topmodule_identifierContext,0);
};

Inst_nameContext.prototype.DT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.DT);
    } else {
        return this.getToken(vlogParser.DT, i);
    }
};


Inst_nameContext.prototype.instance_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Instance_identifierContext);
    } else {
        return this.getTypedRuleContext(Instance_identifierContext,i);
    }
};

Inst_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInst_name(this);
	}
};

Inst_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInst_name(this);
	}
};




vlogParser.Inst_nameContext = Inst_nameContext;

vlogParser.prototype.inst_name = function() {

    var localctx = new Inst_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, vlogParser.RULE_inst_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        this.topmodule_identifier();
        this.state = 1083;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.DT) {
            this.state = 1079;
            this.match(vlogParser.DT);
            this.state = 1080;
            this.instance_identifier();
            this.state = 1085;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cell_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_cell_clause;
    return this;
}

Cell_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_clauseContext.prototype.constructor = Cell_clauseContext;

Cell_clauseContext.prototype.CELL = function() {
    return this.getToken(vlogParser.CELL, 0);
};

Cell_clauseContext.prototype.cell_identifier = function() {
    return this.getTypedRuleContext(Cell_identifierContext,0);
};

Cell_clauseContext.prototype.library_identifier = function() {
    return this.getTypedRuleContext(Library_identifierContext,0);
};

Cell_clauseContext.prototype.DT = function() {
    return this.getToken(vlogParser.DT, 0);
};

Cell_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCell_clause(this);
	}
};

Cell_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCell_clause(this);
	}
};




vlogParser.Cell_clauseContext = Cell_clauseContext;

vlogParser.prototype.cell_clause = function() {

    var localctx = new Cell_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, vlogParser.RULE_cell_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.match(vlogParser.CELL);
        this.state = 1090;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 1087;
            this.library_identifier();
            this.state = 1088;
            this.match(vlogParser.DT);

        }
        this.state = 1092;
        this.cell_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Liblist_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_liblist_clause;
    return this;
}

Liblist_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Liblist_clauseContext.prototype.constructor = Liblist_clauseContext;

Liblist_clauseContext.prototype.LIBLIST = function() {
    return this.getToken(vlogParser.LIBLIST, 0);
};

Liblist_clauseContext.prototype.library_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Library_identifierContext);
    } else {
        return this.getTypedRuleContext(Library_identifierContext,i);
    }
};

Liblist_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLiblist_clause(this);
	}
};

Liblist_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLiblist_clause(this);
	}
};




vlogParser.Liblist_clauseContext = Liblist_clauseContext;

vlogParser.prototype.liblist_clause = function() {

    var localctx = new Liblist_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, vlogParser.RULE_liblist_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.match(vlogParser.LIBLIST);
        this.state = 1098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 1095;
            this.library_identifier();
            this.state = 1100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Use_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_use_clause;
    return this;
}

Use_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Use_clauseContext.prototype.constructor = Use_clauseContext;

Use_clauseContext.prototype.USE = function() {
    return this.getToken(vlogParser.USE, 0);
};

Use_clauseContext.prototype.cell_identifier = function() {
    return this.getTypedRuleContext(Cell_identifierContext,0);
};

Use_clauseContext.prototype.library_identifier = function() {
    return this.getTypedRuleContext(Library_identifierContext,0);
};

Use_clauseContext.prototype.DT = function() {
    return this.getToken(vlogParser.DT, 0);
};

Use_clauseContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Use_clauseContext.prototype.CONFIG = function() {
    return this.getToken(vlogParser.CONFIG, 0);
};

Use_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUse_clause(this);
	}
};

Use_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUse_clause(this);
	}
};




vlogParser.Use_clauseContext = Use_clauseContext;

vlogParser.prototype.use_clause = function() {

    var localctx = new Use_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, vlogParser.RULE_use_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1101;
        this.match(vlogParser.USE);
        this.state = 1105;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 1102;
            this.library_identifier();
            this.state = 1103;
            this.match(vlogParser.DT);

        }
        this.state = 1107;
        this.cell_identifier();
        this.state = 1110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CL) {
            this.state = 1108;
            this.match(vlogParser.CL);
            this.state = 1109;
            this.match(vlogParser.CONFIG);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Local_parameter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_local_parameter_declaration;
    return this;
}

Local_parameter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_parameter_declarationContext.prototype.constructor = Local_parameter_declarationContext;

Local_parameter_declarationContext.prototype.LOCALPARAM = function() {
    return this.getToken(vlogParser.LOCALPARAM, 0);
};

Local_parameter_declarationContext.prototype.list_of_param_assignments = function() {
    return this.getTypedRuleContext(List_of_param_assignmentsContext,0);
};

Local_parameter_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Local_parameter_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Local_parameter_declarationContext.prototype.parameter_type = function() {
    return this.getTypedRuleContext(Parameter_typeContext,0);
};

Local_parameter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLocal_parameter_declaration(this);
	}
};

Local_parameter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLocal_parameter_declaration(this);
	}
};




vlogParser.Local_parameter_declarationContext = Local_parameter_declarationContext;

vlogParser.prototype.local_parameter_declaration = function() {

    var localctx = new Local_parameter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, vlogParser.RULE_local_parameter_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1124;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1112;
            this.match(vlogParser.LOCALPARAM);
            this.state = 1114;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1113;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1116;
                this.range_();
            }

            this.state = 1119;
            this.list_of_param_assignments();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1120;
            this.match(vlogParser.LOCALPARAM);
            this.state = 1121;
            this.parameter_type();
            this.state = 1122;
            this.list_of_param_assignments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parameter_declaration;
    return this;
}

Parameter_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_declarationContext.prototype.constructor = Parameter_declarationContext;

Parameter_declarationContext.prototype.PARAMETER = function() {
    return this.getToken(vlogParser.PARAMETER, 0);
};

Parameter_declarationContext.prototype.list_of_param_assignments = function() {
    return this.getTypedRuleContext(List_of_param_assignmentsContext,0);
};

Parameter_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Parameter_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Parameter_declarationContext.prototype.parameter_type = function() {
    return this.getTypedRuleContext(Parameter_typeContext,0);
};

Parameter_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParameter_declaration(this);
	}
};

Parameter_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParameter_declaration(this);
	}
};




vlogParser.Parameter_declarationContext = Parameter_declarationContext;

vlogParser.prototype.parameter_declaration = function() {

    var localctx = new Parameter_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, vlogParser.RULE_parameter_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1138;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1126;
            this.match(vlogParser.PARAMETER);
            this.state = 1128;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1127;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1130;
                this.range_();
            }

            this.state = 1133;
            this.list_of_param_assignments();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1134;
            this.match(vlogParser.PARAMETER);
            this.state = 1135;
            this.parameter_type();
            this.state = 1136;
            this.list_of_param_assignments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specparam_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specparam_declaration;
    return this;
}

Specparam_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specparam_declarationContext.prototype.constructor = Specparam_declarationContext;

Specparam_declarationContext.prototype.SPECPARAM = function() {
    return this.getToken(vlogParser.SPECPARAM, 0);
};

Specparam_declarationContext.prototype.list_of_specparam_assignments = function() {
    return this.getTypedRuleContext(List_of_specparam_assignmentsContext,0);
};

Specparam_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Specparam_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Specparam_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecparam_declaration(this);
	}
};

Specparam_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecparam_declaration(this);
	}
};




vlogParser.Specparam_declarationContext = Specparam_declarationContext;

vlogParser.prototype.specparam_declaration = function() {

    var localctx = new Specparam_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, vlogParser.RULE_specparam_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1140;
        this.match(vlogParser.SPECPARAM);
        this.state = 1142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 1141;
            this.range_();
        }

        this.state = 1144;
        this.list_of_specparam_assignments();
        this.state = 1145;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parameter_type;
    return this;
}

Parameter_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_typeContext.prototype.constructor = Parameter_typeContext;

Parameter_typeContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Parameter_typeContext.prototype.REAL = function() {
    return this.getToken(vlogParser.REAL, 0);
};

Parameter_typeContext.prototype.REALTIME = function() {
    return this.getToken(vlogParser.REALTIME, 0);
};

Parameter_typeContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Parameter_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParameter_type(this);
	}
};

Parameter_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParameter_type(this);
	}
};




vlogParser.Parameter_typeContext = Parameter_typeContext;

vlogParser.prototype.parameter_type = function() {

    var localctx = new Parameter_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, vlogParser.RULE_parameter_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1147;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.INTEGER || _la===vlogParser.REAL || _la===vlogParser.REALTIME || _la===vlogParser.TIME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inout_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_inout_declaration;
    return this;
}

Inout_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inout_declarationContext.prototype.constructor = Inout_declarationContext;

Inout_declarationContext.prototype.INOUT = function() {
    return this.getToken(vlogParser.INOUT, 0);
};

Inout_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Inout_declarationContext.prototype.net_type = function() {
    return this.getTypedRuleContext(Net_typeContext,0);
};

Inout_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Inout_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Inout_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInout_declaration(this);
	}
};

Inout_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInout_declaration(this);
	}
};




vlogParser.Inout_declarationContext = Inout_declarationContext;

vlogParser.prototype.inout_declaration = function() {

    var localctx = new Inout_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, vlogParser.RULE_inout_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1149;
        this.match(vlogParser.INOUT);
        this.state = 1151;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LOGIC || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)))) !== 0)) {
            this.state = 1150;
            this.net_type();
        }

        this.state = 1154;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.SIGNED) {
            this.state = 1153;
            this.match(vlogParser.SIGNED);
        }

        this.state = 1157;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 1156;
            this.range_();
        }

        this.state = 1159;
        this.list_of_port_identifiers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_input_declaration;
    return this;
}

Input_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_declarationContext.prototype.constructor = Input_declarationContext;

Input_declarationContext.prototype.INPUT = function() {
    return this.getToken(vlogParser.INPUT, 0);
};

Input_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Input_declarationContext.prototype.net_type = function() {
    return this.getTypedRuleContext(Net_typeContext,0);
};

Input_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Input_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Input_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInput_declaration(this);
	}
};

Input_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInput_declaration(this);
	}
};




vlogParser.Input_declarationContext = Input_declarationContext;

vlogParser.prototype.input_declaration = function() {

    var localctx = new Input_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, vlogParser.RULE_input_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1161;
        this.match(vlogParser.INPUT);
        this.state = 1163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LOGIC || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)))) !== 0)) {
            this.state = 1162;
            this.net_type();
        }

        this.state = 1166;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.SIGNED) {
            this.state = 1165;
            this.match(vlogParser.SIGNED);
        }

        this.state = 1169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 1168;
            this.range_();
        }

        this.state = 1171;
        this.list_of_port_identifiers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_declaration;
    return this;
}

Output_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_declarationContext.prototype.constructor = Output_declarationContext;

Output_declarationContext.prototype.OUTPUT = function() {
    return this.getToken(vlogParser.OUTPUT, 0);
};

Output_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Output_declarationContext.prototype.net_type = function() {
    return this.getTypedRuleContext(Net_typeContext,0);
};

Output_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Output_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Output_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Output_declarationContext.prototype.list_of_variable_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_variable_port_identifiersContext,0);
};

Output_declarationContext.prototype.output_variable_type = function() {
    return this.getTypedRuleContext(Output_variable_typeContext,0);
};

Output_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_declaration(this);
	}
};

Output_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_declaration(this);
	}
};




vlogParser.Output_declarationContext = Output_declarationContext;

vlogParser.prototype.output_declaration = function() {

    var localctx = new Output_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, vlogParser.RULE_output_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1197;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1173;
            this.match(vlogParser.OUTPUT);
            this.state = 1175;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LOGIC || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)))) !== 0)) {
                this.state = 1174;
                this.net_type();
            }

            this.state = 1178;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1177;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1180;
                this.range_();
            }

            this.state = 1183;
            this.list_of_port_identifiers();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1184;
            this.match(vlogParser.OUTPUT);
            this.state = 1185;
            this.match(vlogParser.REG);
            this.state = 1187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1186;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1189;
                this.range_();
            }

            this.state = 1192;
            this.list_of_variable_port_identifiers();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1193;
            this.match(vlogParser.OUTPUT);
            this.state = 1194;
            this.output_variable_type();
            this.state = 1195;
            this.list_of_variable_port_identifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_declaration;
    return this;
}

Event_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_declarationContext.prototype.constructor = Event_declarationContext;

Event_declarationContext.prototype.EVENT = function() {
    return this.getToken(vlogParser.EVENT, 0);
};

Event_declarationContext.prototype.list_of_event_identifiers = function() {
    return this.getTypedRuleContext(List_of_event_identifiersContext,0);
};

Event_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Event_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_declaration(this);
	}
};

Event_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_declaration(this);
	}
};




vlogParser.Event_declarationContext = Event_declarationContext;

vlogParser.prototype.event_declaration = function() {

    var localctx = new Event_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, vlogParser.RULE_event_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1199;
        this.match(vlogParser.EVENT);
        this.state = 1200;
        this.list_of_event_identifiers();
        this.state = 1201;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Integer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_integer_declaration;
    return this;
}

Integer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integer_declarationContext.prototype.constructor = Integer_declarationContext;

Integer_declarationContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Integer_declarationContext.prototype.list_of_variable_identifiers = function() {
    return this.getTypedRuleContext(List_of_variable_identifiersContext,0);
};

Integer_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Integer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInteger_declaration(this);
	}
};

Integer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInteger_declaration(this);
	}
};




vlogParser.Integer_declarationContext = Integer_declarationContext;

vlogParser.prototype.integer_declaration = function() {

    var localctx = new Integer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, vlogParser.RULE_integer_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this.match(vlogParser.INTEGER);
        this.state = 1204;
        this.list_of_variable_identifiers();
        this.state = 1205;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_declaration;
    return this;
}

Net_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_declarationContext.prototype.constructor = Net_declarationContext;

Net_declarationContext.prototype.net_type = function() {
    return this.getTypedRuleContext(Net_typeContext,0);
};

Net_declarationContext.prototype.list_of_net_identifiers = function() {
    return this.getTypedRuleContext(List_of_net_identifiersContext,0);
};

Net_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Net_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Net_declarationContext.prototype.delay3 = function() {
    return this.getTypedRuleContext(Delay3Context,0);
};

Net_declarationContext.prototype.list_of_net_decl_assignments = function() {
    return this.getTypedRuleContext(List_of_net_decl_assignmentsContext,0);
};

Net_declarationContext.prototype.drive_strength = function() {
    return this.getTypedRuleContext(Drive_strengthContext,0);
};

Net_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Net_declarationContext.prototype.VECTORED = function() {
    return this.getToken(vlogParser.VECTORED, 0);
};

Net_declarationContext.prototype.SCALARED = function() {
    return this.getToken(vlogParser.SCALARED, 0);
};

Net_declarationContext.prototype.TRIREG = function() {
    return this.getToken(vlogParser.TRIREG, 0);
};

Net_declarationContext.prototype.charge_strength = function() {
    return this.getTypedRuleContext(Charge_strengthContext,0);
};

Net_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_declaration(this);
	}
};

Net_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_declaration(this);
	}
};




vlogParser.Net_declarationContext = Net_declarationContext;

vlogParser.prototype.net_declaration = function() {

    var localctx = new Net_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, vlogParser.RULE_net_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1321;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1207;
            this.net_type();
            this.state = 1209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1208;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1211;
                this.delay3();
            }

            this.state = 1214;
            this.list_of_net_identifiers();
            this.state = 1215;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1217;
            this.net_type();
            this.state = 1219;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1218;
                this.drive_strength();
            }

            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1221;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1224;
                this.delay3();
            }

            this.state = 1227;
            this.list_of_net_decl_assignments();
            this.state = 1228;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1230;
            this.net_type();
            this.state = 1232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED) {
                this.state = 1231;
                _la = this._input.LA(1);
                if(!(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1235;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1234;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1237;
            this.range_();
            this.state = 1239;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1238;
                this.delay3();
            }

            this.state = 1241;
            this.list_of_net_identifiers();
            this.state = 1242;
            this.match(vlogParser.SC);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1244;
            this.net_type();
            this.state = 1246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1245;
                this.drive_strength();
            }

            this.state = 1249;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED) {
                this.state = 1248;
                _la = this._input.LA(1);
                if(!(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1251;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1254;
            this.range_();
            this.state = 1256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1255;
                this.delay3();
            }

            this.state = 1258;
            this.list_of_net_decl_assignments();
            this.state = 1259;
            this.match(vlogParser.SC);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1261;
            this.match(vlogParser.TRIREG);
            this.state = 1263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1262;
                this.charge_strength();
            }

            this.state = 1266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1265;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1268;
                this.delay3();
            }

            this.state = 1271;
            this.list_of_net_identifiers();
            this.state = 1272;
            this.match(vlogParser.SC);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1274;
            this.match(vlogParser.TRIREG);
            this.state = 1276;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1275;
                this.drive_strength();
            }

            this.state = 1279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1278;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1281;
                this.delay3();
            }

            this.state = 1284;
            this.list_of_net_decl_assignments();
            this.state = 1285;
            this.match(vlogParser.SC);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1287;
            this.match(vlogParser.TRIREG);
            this.state = 1289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1288;
                this.charge_strength();
            }

            this.state = 1292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED) {
                this.state = 1291;
                _la = this._input.LA(1);
                if(!(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1294;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1297;
            this.range_();
            this.state = 1299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1298;
                this.delay3();
            }

            this.state = 1301;
            this.list_of_net_identifiers();
            this.state = 1302;
            this.match(vlogParser.SC);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1304;
            this.match(vlogParser.TRIREG);
            this.state = 1306;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP) {
                this.state = 1305;
                this.drive_strength();
            }

            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED) {
                this.state = 1308;
                _la = this._input.LA(1);
                if(!(_la===vlogParser.SCALARED || _la===vlogParser.VECTORED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1311;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1314;
            this.range_();
            this.state = 1316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1315;
                this.delay3();
            }

            this.state = 1318;
            this.list_of_net_decl_assignments();
            this.state = 1319;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_real_declaration;
    return this;
}

Real_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_declarationContext.prototype.constructor = Real_declarationContext;

Real_declarationContext.prototype.REAL = function() {
    return this.getToken(vlogParser.REAL, 0);
};

Real_declarationContext.prototype.list_of_real_identifiers = function() {
    return this.getTypedRuleContext(List_of_real_identifiersContext,0);
};

Real_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Real_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReal_declaration(this);
	}
};

Real_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReal_declaration(this);
	}
};




vlogParser.Real_declarationContext = Real_declarationContext;

vlogParser.prototype.real_declaration = function() {

    var localctx = new Real_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, vlogParser.RULE_real_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1323;
        this.match(vlogParser.REAL);
        this.state = 1324;
        this.list_of_real_identifiers();
        this.state = 1325;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Realtime_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_realtime_declaration;
    return this;
}

Realtime_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Realtime_declarationContext.prototype.constructor = Realtime_declarationContext;

Realtime_declarationContext.prototype.REALTIME = function() {
    return this.getToken(vlogParser.REALTIME, 0);
};

Realtime_declarationContext.prototype.list_of_real_identifiers = function() {
    return this.getTypedRuleContext(List_of_real_identifiersContext,0);
};

Realtime_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Realtime_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRealtime_declaration(this);
	}
};

Realtime_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRealtime_declaration(this);
	}
};




vlogParser.Realtime_declarationContext = Realtime_declarationContext;

vlogParser.prototype.realtime_declaration = function() {

    var localctx = new Realtime_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, vlogParser.RULE_realtime_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1327;
        this.match(vlogParser.REALTIME);
        this.state = 1328;
        this.list_of_real_identifiers();
        this.state = 1329;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Reg_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_reg_declaration;
    return this;
}

Reg_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reg_declarationContext.prototype.constructor = Reg_declarationContext;

Reg_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Reg_declarationContext.prototype.list_of_variable_identifiers = function() {
    return this.getTypedRuleContext(List_of_variable_identifiersContext,0);
};

Reg_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Reg_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Reg_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Reg_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReg_declaration(this);
	}
};

Reg_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReg_declaration(this);
	}
};




vlogParser.Reg_declarationContext = Reg_declarationContext;

vlogParser.prototype.reg_declaration = function() {

    var localctx = new Reg_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, vlogParser.RULE_reg_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1331;
        this.match(vlogParser.REG);
        this.state = 1333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.SIGNED) {
            this.state = 1332;
            this.match(vlogParser.SIGNED);
        }

        this.state = 1336;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 1335;
            this.range_();
        }

        this.state = 1338;
        this.list_of_variable_identifiers();
        this.state = 1339;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Time_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_time_declaration;
    return this;
}

Time_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Time_declarationContext.prototype.constructor = Time_declarationContext;

Time_declarationContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Time_declarationContext.prototype.list_of_variable_identifiers = function() {
    return this.getTypedRuleContext(List_of_variable_identifiersContext,0);
};

Time_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Time_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTime_declaration(this);
	}
};

Time_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTime_declaration(this);
	}
};




vlogParser.Time_declarationContext = Time_declarationContext;

vlogParser.prototype.time_declaration = function() {

    var localctx = new Time_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, vlogParser.RULE_time_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1341;
        this.match(vlogParser.TIME);
        this.state = 1342;
        this.list_of_variable_identifiers();
        this.state = 1343;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_type;
    return this;
}

Net_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_typeContext.prototype.constructor = Net_typeContext;

Net_typeContext.prototype.SUPPLYZERO = function() {
    return this.getToken(vlogParser.SUPPLYZERO, 0);
};

Net_typeContext.prototype.SUPPLYONE = function() {
    return this.getToken(vlogParser.SUPPLYONE, 0);
};

Net_typeContext.prototype.TRI = function() {
    return this.getToken(vlogParser.TRI, 0);
};

Net_typeContext.prototype.TRIAND = function() {
    return this.getToken(vlogParser.TRIAND, 0);
};

Net_typeContext.prototype.TRIOR = function() {
    return this.getToken(vlogParser.TRIOR, 0);
};

Net_typeContext.prototype.TRIZERO = function() {
    return this.getToken(vlogParser.TRIZERO, 0);
};

Net_typeContext.prototype.TRIONE = function() {
    return this.getToken(vlogParser.TRIONE, 0);
};

Net_typeContext.prototype.UWIRE = function() {
    return this.getToken(vlogParser.UWIRE, 0);
};

Net_typeContext.prototype.WIRE = function() {
    return this.getToken(vlogParser.WIRE, 0);
};

Net_typeContext.prototype.WAND = function() {
    return this.getToken(vlogParser.WAND, 0);
};

Net_typeContext.prototype.WOR = function() {
    return this.getToken(vlogParser.WOR, 0);
};

Net_typeContext.prototype.LOGIC = function() {
    return this.getToken(vlogParser.LOGIC, 0);
};

Net_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_type(this);
	}
};

Net_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_type(this);
	}
};




vlogParser.Net_typeContext = Net_typeContext;

vlogParser.prototype.net_type = function() {

    var localctx = new Net_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, vlogParser.RULE_net_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1345;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.LOGIC || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_variable_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_variable_type;
    return this;
}

Output_variable_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_variable_typeContext.prototype.constructor = Output_variable_typeContext;

Output_variable_typeContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Output_variable_typeContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Output_variable_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_variable_type(this);
	}
};

Output_variable_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_variable_type(this);
	}
};




vlogParser.Output_variable_typeContext = Output_variable_typeContext;

vlogParser.prototype.output_variable_type = function() {

    var localctx = new Output_variable_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, vlogParser.RULE_output_variable_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1347;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.INTEGER || _la===vlogParser.TIME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_real_type;
    return this;
}

Real_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_typeContext.prototype.constructor = Real_typeContext;

Real_typeContext.prototype.real_identifier = function() {
    return this.getTypedRuleContext(Real_identifierContext,0);
};

Real_typeContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

Real_typeContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Real_typeContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Real_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReal_type(this);
	}
};

Real_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReal_type(this);
	}
};




vlogParser.Real_typeContext = Real_typeContext;

vlogParser.prototype.real_type = function() {

    var localctx = new Real_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, vlogParser.RULE_real_type);
    var _la = 0; // Token type
    try {
        this.state = 1360;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1349;
            this.real_identifier();
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LB) {
                this.state = 1350;
                this.dimension();
                this.state = 1355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1356;
            this.real_identifier();
            this.state = 1357;
            this.match(vlogParser.EQ);
            this.state = 1358;
            this.constant_expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_variable_type;
    return this;
}

Variable_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_typeContext.prototype.constructor = Variable_typeContext;

Variable_typeContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Variable_typeContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

Variable_typeContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Variable_typeContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Variable_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterVariable_type(this);
	}
};

Variable_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitVariable_type(this);
	}
};




vlogParser.Variable_typeContext = Variable_typeContext;

vlogParser.prototype.variable_type = function() {

    var localctx = new Variable_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, vlogParser.RULE_variable_type);
    var _la = 0; // Token type
    try {
        this.state = 1373;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1362;
            this.variable_identifier();
            this.state = 1366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LB) {
                this.state = 1363;
                this.dimension();
                this.state = 1368;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1369;
            this.variable_identifier();
            this.state = 1370;
            this.match(vlogParser.EQ);
            this.state = 1371;
            this.constant_expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Drive_strengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_drive_strength;
    return this;
}

Drive_strengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drive_strengthContext.prototype.constructor = Drive_strengthContext;

Drive_strengthContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Drive_strengthContext.prototype.strength0 = function() {
    return this.getTypedRuleContext(Strength0Context,0);
};

Drive_strengthContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Drive_strengthContext.prototype.strength1 = function() {
    return this.getTypedRuleContext(Strength1Context,0);
};

Drive_strengthContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Drive_strengthContext.prototype.HIGHZONE = function() {
    return this.getToken(vlogParser.HIGHZONE, 0);
};

Drive_strengthContext.prototype.HIGHZZERO = function() {
    return this.getToken(vlogParser.HIGHZZERO, 0);
};

Drive_strengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDrive_strength(this);
	}
};

Drive_strengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDrive_strength(this);
	}
};




vlogParser.Drive_strengthContext = Drive_strengthContext;

vlogParser.prototype.drive_strength = function() {

    var localctx = new Drive_strengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, vlogParser.RULE_drive_strength);
    try {
        this.state = 1411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1375;
            this.match(vlogParser.LP);
            this.state = 1376;
            this.strength0();
            this.state = 1377;
            this.match(vlogParser.CO);
            this.state = 1378;
            this.strength1();
            this.state = 1379;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1381;
            this.match(vlogParser.LP);
            this.state = 1382;
            this.strength1();
            this.state = 1383;
            this.match(vlogParser.CO);
            this.state = 1384;
            this.strength0();
            this.state = 1385;
            this.match(vlogParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1387;
            this.match(vlogParser.LP);
            this.state = 1388;
            this.strength0();
            this.state = 1389;
            this.match(vlogParser.CO);
            this.state = 1390;
            this.match(vlogParser.HIGHZONE);
            this.state = 1391;
            this.match(vlogParser.RP);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1393;
            this.match(vlogParser.LP);
            this.state = 1394;
            this.strength1();
            this.state = 1395;
            this.match(vlogParser.CO);
            this.state = 1396;
            this.match(vlogParser.HIGHZZERO);
            this.state = 1397;
            this.match(vlogParser.RP);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1399;
            this.match(vlogParser.LP);
            this.state = 1400;
            this.match(vlogParser.HIGHZZERO);
            this.state = 1401;
            this.match(vlogParser.CO);
            this.state = 1402;
            this.strength1();
            this.state = 1403;
            this.match(vlogParser.RP);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1405;
            this.match(vlogParser.LP);
            this.state = 1406;
            this.match(vlogParser.HIGHZONE);
            this.state = 1407;
            this.match(vlogParser.CO);
            this.state = 1408;
            this.strength0();
            this.state = 1409;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Strength0Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_strength0;
    return this;
}

Strength0Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Strength0Context.prototype.constructor = Strength0Context;

Strength0Context.prototype.SUPPLYZERO = function() {
    return this.getToken(vlogParser.SUPPLYZERO, 0);
};

Strength0Context.prototype.STRONGZERO = function() {
    return this.getToken(vlogParser.STRONGZERO, 0);
};

Strength0Context.prototype.PULLZERO = function() {
    return this.getToken(vlogParser.PULLZERO, 0);
};

Strength0Context.prototype.WEAKZERO = function() {
    return this.getToken(vlogParser.WEAKZERO, 0);
};

Strength0Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStrength0(this);
	}
};

Strength0Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStrength0(this);
	}
};




vlogParser.Strength0Context = Strength0Context;

vlogParser.prototype.strength0 = function() {

    var localctx = new Strength0Context(this, this._ctx, this.state);
    this.enterRule(localctx, 96, vlogParser.RULE_strength0);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        _la = this._input.LA(1);
        if(!(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vlogParser.PULLZERO - 133)) | (1 << (vlogParser.STRONGZERO - 133)) | (1 << (vlogParser.SUPPLYZERO - 133)))) !== 0) || _la===vlogParser.WEAKZERO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Strength1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_strength1;
    return this;
}

Strength1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Strength1Context.prototype.constructor = Strength1Context;

Strength1Context.prototype.SUPPLYONE = function() {
    return this.getToken(vlogParser.SUPPLYONE, 0);
};

Strength1Context.prototype.STRONGONE = function() {
    return this.getToken(vlogParser.STRONGONE, 0);
};

Strength1Context.prototype.PULLONE = function() {
    return this.getToken(vlogParser.PULLONE, 0);
};

Strength1Context.prototype.WEAKONE = function() {
    return this.getToken(vlogParser.WEAKONE, 0);
};

Strength1Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStrength1(this);
	}
};

Strength1Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStrength1(this);
	}
};




vlogParser.Strength1Context = Strength1Context;

vlogParser.prototype.strength1 = function() {

    var localctx = new Strength1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 98, vlogParser.RULE_strength1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1415;
        _la = this._input.LA(1);
        if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (vlogParser.PULLONE - 134)) | (1 << (vlogParser.STRONGONE - 134)) | (1 << (vlogParser.SUPPLYONE - 134)))) !== 0) || _la===vlogParser.WEAKONE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Charge_strengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_charge_strength;
    return this;
}

Charge_strengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Charge_strengthContext.prototype.constructor = Charge_strengthContext;

Charge_strengthContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Charge_strengthContext.prototype.SMALL = function() {
    return this.getToken(vlogParser.SMALL, 0);
};

Charge_strengthContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Charge_strengthContext.prototype.MEDIUM = function() {
    return this.getToken(vlogParser.MEDIUM, 0);
};

Charge_strengthContext.prototype.LARGE = function() {
    return this.getToken(vlogParser.LARGE, 0);
};

Charge_strengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCharge_strength(this);
	}
};

Charge_strengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCharge_strength(this);
	}
};




vlogParser.Charge_strengthContext = Charge_strengthContext;

vlogParser.prototype.charge_strength = function() {

    var localctx = new Charge_strengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, vlogParser.RULE_charge_strength);
    try {
        this.state = 1426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1417;
            this.match(vlogParser.LP);
            this.state = 1418;
            this.match(vlogParser.SMALL);
            this.state = 1419;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1420;
            this.match(vlogParser.LP);
            this.state = 1421;
            this.match(vlogParser.MEDIUM);
            this.state = 1422;
            this.match(vlogParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1423;
            this.match(vlogParser.LP);
            this.state = 1424;
            this.match(vlogParser.LARGE);
            this.state = 1425;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay3Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delay3;
    return this;
}

Delay3Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay3Context.prototype.constructor = Delay3Context;

Delay3Context.prototype.HA = function() {
    return this.getToken(vlogParser.HA, 0);
};

Delay3Context.prototype.delay_value = function() {
    return this.getTypedRuleContext(Delay_valueContext,0);
};

Delay3Context.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Delay3Context.prototype.mintypmax_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mintypmax_expressionContext);
    } else {
        return this.getTypedRuleContext(Mintypmax_expressionContext,i);
    }
};

Delay3Context.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Delay3Context.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Delay3Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelay3(this);
	}
};

Delay3Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelay3(this);
	}
};




vlogParser.Delay3Context = Delay3Context;

vlogParser.prototype.delay3 = function() {

    var localctx = new Delay3Context(this, this._ctx, this.state);
    this.enterRule(localctx, 102, vlogParser.RULE_delay3);
    var _la = 0; // Token type
    try {
        this.state = 1443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.match(vlogParser.HA);
            this.state = 1429;
            this.delay_value();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.match(vlogParser.HA);
            this.state = 1431;
            this.match(vlogParser.LP);
            this.state = 1432;
            this.mintypmax_expression();
            this.state = 1439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 1433;
                this.match(vlogParser.CO);
                this.state = 1434;
                this.mintypmax_expression();
                this.state = 1437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.CO) {
                    this.state = 1435;
                    this.match(vlogParser.CO);
                    this.state = 1436;
                    this.mintypmax_expression();
                }

            }

            this.state = 1441;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delay2;
    return this;
}

Delay2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay2Context.prototype.constructor = Delay2Context;

Delay2Context.prototype.HA = function() {
    return this.getToken(vlogParser.HA, 0);
};

Delay2Context.prototype.delay_value = function() {
    return this.getTypedRuleContext(Delay_valueContext,0);
};

Delay2Context.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Delay2Context.prototype.mintypmax_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mintypmax_expressionContext);
    } else {
        return this.getTypedRuleContext(Mintypmax_expressionContext,i);
    }
};

Delay2Context.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Delay2Context.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Delay2Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelay2(this);
	}
};

Delay2Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelay2(this);
	}
};




vlogParser.Delay2Context = Delay2Context;

vlogParser.prototype.delay2 = function() {

    var localctx = new Delay2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 104, vlogParser.RULE_delay2);
    var _la = 0; // Token type
    try {
        this.state = 1456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1445;
            this.match(vlogParser.HA);
            this.state = 1446;
            this.delay_value();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1447;
            this.match(vlogParser.HA);
            this.state = 1448;
            this.match(vlogParser.LP);
            this.state = 1449;
            this.mintypmax_expression();
            this.state = 1452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 1450;
                this.match(vlogParser.CO);
                this.state = 1451;
                this.mintypmax_expression();
            }

            this.state = 1454;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delay_value;
    return this;
}

Delay_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay_valueContext.prototype.constructor = Delay_valueContext;

Delay_valueContext.prototype.unsigned_number = function() {
    return this.getTypedRuleContext(Unsigned_numberContext,0);
};

Delay_valueContext.prototype.real_number = function() {
    return this.getTypedRuleContext(Real_numberContext,0);
};

Delay_valueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Delay_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelay_value(this);
	}
};

Delay_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelay_value(this);
	}
};




vlogParser.Delay_valueContext = Delay_valueContext;

vlogParser.prototype.delay_value = function() {

    var localctx = new Delay_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, vlogParser.RULE_delay_value);
    try {
        this.state = 1461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.DECIMAL_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1458;
            this.unsigned_number();
            break;
        case vlogParser.REAL_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1459;
            this.real_number();
            break;
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1460;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_defparam_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_defparam_assignments;
    return this;
}

List_of_defparam_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_defparam_assignmentsContext.prototype.constructor = List_of_defparam_assignmentsContext;

List_of_defparam_assignmentsContext.prototype.defparam_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Defparam_assignmentContext);
    } else {
        return this.getTypedRuleContext(Defparam_assignmentContext,i);
    }
};

List_of_defparam_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_defparam_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_defparam_assignments(this);
	}
};

List_of_defparam_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_defparam_assignments(this);
	}
};




vlogParser.List_of_defparam_assignmentsContext = List_of_defparam_assignmentsContext;

vlogParser.prototype.list_of_defparam_assignments = function() {

    var localctx = new List_of_defparam_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, vlogParser.RULE_list_of_defparam_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this.defparam_assignment();
        this.state = 1468;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1464;
            this.match(vlogParser.CO);
            this.state = 1465;
            this.defparam_assignment();
            this.state = 1470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_event_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_event_identifiers;
    return this;
}

List_of_event_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_event_identifiersContext.prototype.constructor = List_of_event_identifiersContext;

List_of_event_identifiersContext.prototype.event_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Event_identifierContext);
    } else {
        return this.getTypedRuleContext(Event_identifierContext,i);
    }
};

List_of_event_identifiersContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

List_of_event_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_event_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_event_identifiers(this);
	}
};

List_of_event_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_event_identifiers(this);
	}
};




vlogParser.List_of_event_identifiersContext = List_of_event_identifiersContext;

vlogParser.prototype.list_of_event_identifiers = function() {

    var localctx = new List_of_event_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, vlogParser.RULE_list_of_event_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1471;
        this.event_identifier();
        this.state = 1475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LB) {
            this.state = 1472;
            this.dimension();
            this.state = 1477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1478;
            this.match(vlogParser.CO);
            this.state = 1479;
            this.event_identifier();
            this.state = 1483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LB) {
                this.state = 1480;
                this.dimension();
                this.state = 1485;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1490;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_net_decl_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_net_decl_assignments;
    return this;
}

List_of_net_decl_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_net_decl_assignmentsContext.prototype.constructor = List_of_net_decl_assignmentsContext;

List_of_net_decl_assignmentsContext.prototype.net_decl_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Net_decl_assignmentContext);
    } else {
        return this.getTypedRuleContext(Net_decl_assignmentContext,i);
    }
};

List_of_net_decl_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_net_decl_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_net_decl_assignments(this);
	}
};

List_of_net_decl_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_net_decl_assignments(this);
	}
};




vlogParser.List_of_net_decl_assignmentsContext = List_of_net_decl_assignmentsContext;

vlogParser.prototype.list_of_net_decl_assignments = function() {

    var localctx = new List_of_net_decl_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, vlogParser.RULE_list_of_net_decl_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1491;
        this.net_decl_assignment();
        this.state = 1496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1492;
            this.match(vlogParser.CO);
            this.state = 1493;
            this.net_decl_assignment();
            this.state = 1498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_net_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_net_identifiers;
    return this;
}

List_of_net_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_net_identifiersContext.prototype.constructor = List_of_net_identifiersContext;

List_of_net_identifiersContext.prototype.net_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Net_identifierContext);
    } else {
        return this.getTypedRuleContext(Net_identifierContext,i);
    }
};

List_of_net_identifiersContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

List_of_net_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_net_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_net_identifiers(this);
	}
};

List_of_net_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_net_identifiers(this);
	}
};




vlogParser.List_of_net_identifiersContext = List_of_net_identifiersContext;

vlogParser.prototype.list_of_net_identifiers = function() {

    var localctx = new List_of_net_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, vlogParser.RULE_list_of_net_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this.net_identifier();
        this.state = 1503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LB) {
            this.state = 1500;
            this.dimension();
            this.state = 1505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1506;
            this.match(vlogParser.CO);
            this.state = 1507;
            this.net_identifier();
            this.state = 1511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LB) {
                this.state = 1508;
                this.dimension();
                this.state = 1513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_param_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_param_assignments;
    return this;
}

List_of_param_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_param_assignmentsContext.prototype.constructor = List_of_param_assignmentsContext;

List_of_param_assignmentsContext.prototype.param_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Param_assignmentContext);
    } else {
        return this.getTypedRuleContext(Param_assignmentContext,i);
    }
};

List_of_param_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_param_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_param_assignments(this);
	}
};

List_of_param_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_param_assignments(this);
	}
};




vlogParser.List_of_param_assignmentsContext = List_of_param_assignmentsContext;

vlogParser.prototype.list_of_param_assignments = function() {

    var localctx = new List_of_param_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, vlogParser.RULE_list_of_param_assignments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1519;
        this.param_assignment();
        this.state = 1524;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1520;
                this.match(vlogParser.CO);
                this.state = 1521;
                this.param_assignment(); 
            }
            this.state = 1526;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_port_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_port_identifiers;
    return this;
}

List_of_port_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_port_identifiersContext.prototype.constructor = List_of_port_identifiersContext;

List_of_port_identifiersContext.prototype.port_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Port_identifierContext);
    } else {
        return this.getTypedRuleContext(Port_identifierContext,i);
    }
};

List_of_port_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_port_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_port_identifiers(this);
	}
};

List_of_port_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_port_identifiers(this);
	}
};




vlogParser.List_of_port_identifiersContext = List_of_port_identifiersContext;

vlogParser.prototype.list_of_port_identifiers = function() {

    var localctx = new List_of_port_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, vlogParser.RULE_list_of_port_identifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.port_identifier();
        this.state = 1532;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,123,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1528;
                this.match(vlogParser.CO);
                this.state = 1529;
                this.port_identifier(); 
            }
            this.state = 1534;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,123,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_real_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_real_identifiers;
    return this;
}

List_of_real_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_real_identifiersContext.prototype.constructor = List_of_real_identifiersContext;

List_of_real_identifiersContext.prototype.real_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Real_typeContext);
    } else {
        return this.getTypedRuleContext(Real_typeContext,i);
    }
};

List_of_real_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_real_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_real_identifiers(this);
	}
};

List_of_real_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_real_identifiers(this);
	}
};




vlogParser.List_of_real_identifiersContext = List_of_real_identifiersContext;

vlogParser.prototype.list_of_real_identifiers = function() {

    var localctx = new List_of_real_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, vlogParser.RULE_list_of_real_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        this.real_type();
        this.state = 1540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1536;
            this.match(vlogParser.CO);
            this.state = 1537;
            this.real_type();
            this.state = 1542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_specparam_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_specparam_assignments;
    return this;
}

List_of_specparam_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_specparam_assignmentsContext.prototype.constructor = List_of_specparam_assignmentsContext;

List_of_specparam_assignmentsContext.prototype.specparam_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specparam_assignmentContext);
    } else {
        return this.getTypedRuleContext(Specparam_assignmentContext,i);
    }
};

List_of_specparam_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_specparam_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_specparam_assignments(this);
	}
};

List_of_specparam_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_specparam_assignments(this);
	}
};




vlogParser.List_of_specparam_assignmentsContext = List_of_specparam_assignmentsContext;

vlogParser.prototype.list_of_specparam_assignments = function() {

    var localctx = new List_of_specparam_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, vlogParser.RULE_list_of_specparam_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1543;
        this.specparam_assignment();
        this.state = 1548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1544;
            this.match(vlogParser.CO);
            this.state = 1545;
            this.specparam_assignment();
            this.state = 1550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_variable_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_variable_identifiers;
    return this;
}

List_of_variable_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_variable_identifiersContext.prototype.constructor = List_of_variable_identifiersContext;

List_of_variable_identifiersContext.prototype.variable_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_typeContext);
    } else {
        return this.getTypedRuleContext(Variable_typeContext,i);
    }
};

List_of_variable_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_variable_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_variable_identifiers(this);
	}
};

List_of_variable_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_variable_identifiers(this);
	}
};




vlogParser.List_of_variable_identifiersContext = List_of_variable_identifiersContext;

vlogParser.prototype.list_of_variable_identifiers = function() {

    var localctx = new List_of_variable_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, vlogParser.RULE_list_of_variable_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1551;
        this.variable_type();
        this.state = 1556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1552;
            this.match(vlogParser.CO);
            this.state = 1553;
            this.variable_type();
            this.state = 1558;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_variable_port_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_variable_port_identifiers;
    return this;
}

List_of_variable_port_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_variable_port_identifiersContext.prototype.constructor = List_of_variable_port_identifiersContext;

List_of_variable_port_identifiersContext.prototype.port_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Port_identifierContext);
    } else {
        return this.getTypedRuleContext(Port_identifierContext,i);
    }
};

List_of_variable_port_identifiersContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.EQ);
    } else {
        return this.getToken(vlogParser.EQ, i);
    }
};


List_of_variable_port_identifiersContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

List_of_variable_port_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_variable_port_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_variable_port_identifiers(this);
	}
};

List_of_variable_port_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_variable_port_identifiers(this);
	}
};




vlogParser.List_of_variable_port_identifiersContext = List_of_variable_port_identifiersContext;

vlogParser.prototype.list_of_variable_port_identifiers = function() {

    var localctx = new List_of_variable_port_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, vlogParser.RULE_list_of_variable_port_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1559;
        this.port_identifier();
        this.state = 1562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.EQ) {
            this.state = 1560;
            this.match(vlogParser.EQ);
            this.state = 1561;
            this.constant_expression(0);
        }

        this.state = 1572;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1564;
                this.match(vlogParser.CO);
                this.state = 1565;
                this.port_identifier();
                this.state = 1568;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.EQ) {
                    this.state = 1566;
                    this.match(vlogParser.EQ);
                    this.state = 1567;
                    this.constant_expression(0);
                }
         
            }
            this.state = 1574;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Defparam_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_defparam_assignment;
    return this;
}

Defparam_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Defparam_assignmentContext.prototype.constructor = Defparam_assignmentContext;

Defparam_assignmentContext.prototype.hierarchical_parameter_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_parameter_identifierContext,0);
};

Defparam_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Defparam_assignmentContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Defparam_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDefparam_assignment(this);
	}
};

Defparam_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDefparam_assignment(this);
	}
};




vlogParser.Defparam_assignmentContext = Defparam_assignmentContext;

vlogParser.prototype.defparam_assignment = function() {

    var localctx = new Defparam_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, vlogParser.RULE_defparam_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1575;
        this.hierarchical_parameter_identifier();
        this.state = 1576;
        this.match(vlogParser.EQ);
        this.state = 1577;
        this.constant_mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_decl_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_decl_assignment;
    return this;
}

Net_decl_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_decl_assignmentContext.prototype.constructor = Net_decl_assignmentContext;

Net_decl_assignmentContext.prototype.net_identifier = function() {
    return this.getTypedRuleContext(Net_identifierContext,0);
};

Net_decl_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Net_decl_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Net_decl_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_decl_assignment(this);
	}
};

Net_decl_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_decl_assignment(this);
	}
};




vlogParser.Net_decl_assignmentContext = Net_decl_assignmentContext;

vlogParser.prototype.net_decl_assignment = function() {

    var localctx = new Net_decl_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, vlogParser.RULE_net_decl_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1579;
        this.net_identifier();
        this.state = 1580;
        this.match(vlogParser.EQ);
        this.state = 1581;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Param_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_param_assignment;
    return this;
}

Param_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Param_assignmentContext.prototype.constructor = Param_assignmentContext;

Param_assignmentContext.prototype.parameter_identifier = function() {
    return this.getTypedRuleContext(Parameter_identifierContext,0);
};

Param_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Param_assignmentContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Param_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParam_assignment(this);
	}
};

Param_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParam_assignment(this);
	}
};




vlogParser.Param_assignmentContext = Param_assignmentContext;

vlogParser.prototype.param_assignment = function() {

    var localctx = new Param_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, vlogParser.RULE_param_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1583;
        this.parameter_identifier();
        this.state = 1584;
        this.match(vlogParser.EQ);
        this.state = 1585;
        this.constant_mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specparam_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specparam_assignment;
    return this;
}

Specparam_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specparam_assignmentContext.prototype.constructor = Specparam_assignmentContext;

Specparam_assignmentContext.prototype.specparam_identifier = function() {
    return this.getTypedRuleContext(Specparam_identifierContext,0);
};

Specparam_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Specparam_assignmentContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Specparam_assignmentContext.prototype.pulse_control_specparam = function() {
    return this.getTypedRuleContext(Pulse_control_specparamContext,0);
};

Specparam_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecparam_assignment(this);
	}
};

Specparam_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecparam_assignment(this);
	}
};




vlogParser.Specparam_assignmentContext = Specparam_assignmentContext;

vlogParser.prototype.specparam_assignment = function() {

    var localctx = new Specparam_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, vlogParser.RULE_specparam_assignment);
    try {
        this.state = 1592;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1587;
            this.specparam_identifier();
            this.state = 1588;
            this.match(vlogParser.EQ);
            this.state = 1589;
            this.constant_mintypmax_expression();
            break;
        case vlogParser.PATHPULSEDL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1591;
            this.pulse_control_specparam();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pulse_control_specparamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pulse_control_specparam;
    return this;
}

Pulse_control_specparamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pulse_control_specparamContext.prototype.constructor = Pulse_control_specparamContext;

Pulse_control_specparamContext.prototype.PATHPULSEDL = function() {
    return this.getToken(vlogParser.PATHPULSEDL, 0);
};

Pulse_control_specparamContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Pulse_control_specparamContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pulse_control_specparamContext.prototype.reject_limit_value = function() {
    return this.getTypedRuleContext(Reject_limit_valueContext,0);
};

Pulse_control_specparamContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pulse_control_specparamContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Pulse_control_specparamContext.prototype.error_limit_value = function() {
    return this.getTypedRuleContext(Error_limit_valueContext,0);
};

Pulse_control_specparamContext.prototype.specify_input_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_input_terminal_descriptorContext,0);
};

Pulse_control_specparamContext.prototype.DL = function() {
    return this.getToken(vlogParser.DL, 0);
};

Pulse_control_specparamContext.prototype.specify_output_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_output_terminal_descriptorContext,0);
};

Pulse_control_specparamContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPulse_control_specparam(this);
	}
};

Pulse_control_specparamContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPulse_control_specparam(this);
	}
};




vlogParser.Pulse_control_specparamContext = Pulse_control_specparamContext;

vlogParser.prototype.pulse_control_specparam = function() {

    var localctx = new Pulse_control_specparamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, vlogParser.RULE_pulse_control_specparam);
    var _la = 0; // Token type
    try {
        this.state = 1617;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1594;
            this.match(vlogParser.PATHPULSEDL);
            this.state = 1595;
            this.match(vlogParser.EQ);
            this.state = 1596;
            this.match(vlogParser.LP);
            this.state = 1597;
            this.reject_limit_value();
            this.state = 1600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 1598;
                this.match(vlogParser.CO);
                this.state = 1599;
                this.error_limit_value();
            }

            this.state = 1602;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1604;
            this.match(vlogParser.PATHPULSEDL);
            this.state = 1605;
            this.specify_input_terminal_descriptor();
            this.state = 1606;
            this.match(vlogParser.DL);
            this.state = 1607;
            this.specify_output_terminal_descriptor();
            this.state = 1608;
            this.match(vlogParser.EQ);
            this.state = 1609;
            this.match(vlogParser.LP);
            this.state = 1610;
            this.reject_limit_value();
            this.state = 1613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 1611;
                this.match(vlogParser.CO);
                this.state = 1612;
                this.error_limit_value();
            }

            this.state = 1615;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Error_limit_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_error_limit_value;
    return this;
}

Error_limit_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_limit_valueContext.prototype.constructor = Error_limit_valueContext;

Error_limit_valueContext.prototype.limit_value = function() {
    return this.getTypedRuleContext(Limit_valueContext,0);
};

Error_limit_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterError_limit_value(this);
	}
};

Error_limit_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitError_limit_value(this);
	}
};




vlogParser.Error_limit_valueContext = Error_limit_valueContext;

vlogParser.prototype.error_limit_value = function() {

    var localctx = new Error_limit_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, vlogParser.RULE_error_limit_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1619;
        this.limit_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Reject_limit_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_reject_limit_value;
    return this;
}

Reject_limit_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reject_limit_valueContext.prototype.constructor = Reject_limit_valueContext;

Reject_limit_valueContext.prototype.limit_value = function() {
    return this.getTypedRuleContext(Limit_valueContext,0);
};

Reject_limit_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReject_limit_value(this);
	}
};

Reject_limit_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReject_limit_value(this);
	}
};




vlogParser.Reject_limit_valueContext = Reject_limit_valueContext;

vlogParser.prototype.reject_limit_value = function() {

    var localctx = new Reject_limit_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, vlogParser.RULE_reject_limit_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1621;
        this.limit_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Limit_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_limit_value;
    return this;
}

Limit_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Limit_valueContext.prototype.constructor = Limit_valueContext;

Limit_valueContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Limit_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLimit_value(this);
	}
};

Limit_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLimit_value(this);
	}
};




vlogParser.Limit_valueContext = Limit_valueContext;

vlogParser.prototype.limit_value = function() {

    var localctx = new Limit_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, vlogParser.RULE_limit_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1623;
        this.constant_mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_dimension;
    return this;
}

DimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionContext.prototype.constructor = DimensionContext;

DimensionContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

DimensionContext.prototype.dimension_constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dimension_constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Dimension_constant_expressionContext,i);
    }
};

DimensionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

DimensionContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

DimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDimension(this);
	}
};

DimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDimension(this);
	}
};




vlogParser.DimensionContext = DimensionContext;

vlogParser.prototype.dimension = function() {

    var localctx = new DimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, vlogParser.RULE_dimension);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1625;
        this.match(vlogParser.LB);
        this.state = 1626;
        this.dimension_constant_expression();
        this.state = 1627;
        this.match(vlogParser.CL);
        this.state = 1628;
        this.dimension_constant_expression();
        this.state = 1629;
        this.match(vlogParser.RB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_range_;
    return this;
}

Range_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_Context.prototype.constructor = Range_Context;

Range_Context.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Range_Context.prototype.msb_constant_expression = function() {
    return this.getTypedRuleContext(Msb_constant_expressionContext,0);
};

Range_Context.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Range_Context.prototype.lsb_constant_expression = function() {
    return this.getTypedRuleContext(Lsb_constant_expressionContext,0);
};

Range_Context.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Range_Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRange_(this);
	}
};

Range_Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRange_(this);
	}
};




vlogParser.Range_Context = Range_Context;

vlogParser.prototype.range_ = function() {

    var localctx = new Range_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 146, vlogParser.RULE_range_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1631;
        this.match(vlogParser.LB);
        this.state = 1632;
        this.msb_constant_expression();
        this.state = 1633;
        this.match(vlogParser.CL);
        this.state = 1634;
        this.lsb_constant_expression();
        this.state = 1635;
        this.match(vlogParser.RB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_declaration;
    return this;
}

Function_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_declarationContext.prototype.constructor = Function_declarationContext;

Function_declarationContext.prototype.FUNCTION = function() {
    return this.getToken(vlogParser.FUNCTION, 0);
};

Function_declarationContext.prototype.function_range_or_type = function() {
    return this.getTypedRuleContext(Function_range_or_typeContext,0);
};

Function_declarationContext.prototype.function_identifier = function() {
    return this.getTypedRuleContext(Function_identifierContext,0);
};

Function_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Function_declarationContext.prototype.function_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Function_item_declarationContext,i);
    }
};

Function_declarationContext.prototype.function_statement = function() {
    return this.getTypedRuleContext(Function_statementContext,0);
};

Function_declarationContext.prototype.ENDFUNCTION = function() {
    return this.getToken(vlogParser.ENDFUNCTION, 0);
};

Function_declarationContext.prototype.AUTOMATIC = function() {
    return this.getToken(vlogParser.AUTOMATIC, 0);
};

Function_declarationContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Function_declarationContext.prototype.function_port_list = function() {
    return this.getTypedRuleContext(Function_port_listContext,0);
};

Function_declarationContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Function_declarationContext.prototype.block_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Block_item_declarationContext,i);
    }
};

Function_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_declaration(this);
	}
};

Function_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_declaration(this);
	}
};




vlogParser.Function_declarationContext = Function_declarationContext;

vlogParser.prototype.function_declaration = function() {

    var localctx = new Function_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, vlogParser.RULE_function_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1637;
            this.match(vlogParser.FUNCTION);
            this.state = 1639;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.AUTOMATIC) {
                this.state = 1638;
                this.match(vlogParser.AUTOMATIC);
            }

            this.state = 1641;
            this.function_range_or_type();
            this.state = 1642;
            this.function_identifier();
            this.state = 1643;
            this.match(vlogParser.SC);
            this.state = 1644;
            this.function_item_declaration();
            this.state = 1648;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1645;
                    this.function_item_declaration(); 
                }
                this.state = 1650;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
            }

            this.state = 1651;
            this.function_statement();
            this.state = 1652;
            this.match(vlogParser.ENDFUNCTION);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1654;
            this.match(vlogParser.FUNCTION);
            this.state = 1656;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.AUTOMATIC) {
                this.state = 1655;
                this.match(vlogParser.AUTOMATIC);
            }

            this.state = 1658;
            this.function_range_or_type();
            this.state = 1659;
            this.function_identifier();
            this.state = 1660;
            this.match(vlogParser.LP);
            this.state = 1661;
            this.function_port_list();
            this.state = 1662;
            this.match(vlogParser.RP);
            this.state = 1663;
            this.match(vlogParser.SC);
            this.state = 1667;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1664;
                    this.block_item_declaration(); 
                }
                this.state = 1669;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
            }

            this.state = 1670;
            this.function_statement();
            this.state = 1671;
            this.match(vlogParser.ENDFUNCTION);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_item_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_item_declaration;
    return this;
}

Function_item_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_item_declarationContext.prototype.constructor = Function_item_declarationContext;

Function_item_declarationContext.prototype.block_item_declaration = function() {
    return this.getTypedRuleContext(Block_item_declarationContext,0);
};

Function_item_declarationContext.prototype.tf_input_declaration = function() {
    return this.getTypedRuleContext(Tf_input_declarationContext,0);
};

Function_item_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Function_item_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Function_item_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_item_declaration(this);
	}
};

Function_item_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_item_declaration(this);
	}
};




vlogParser.Function_item_declarationContext = Function_item_declarationContext;

vlogParser.prototype.function_item_declaration = function() {

    var localctx = new Function_item_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, vlogParser.RULE_function_item_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1675;
            this.block_item_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1679;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1676;
                this.attribute_instance();
                this.state = 1681;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1682;
            this.tf_input_declaration();
            this.state = 1683;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_port_list;
    return this;
}

Function_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_port_listContext.prototype.constructor = Function_port_listContext;

Function_port_listContext.prototype.tf_input_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tf_input_declarationContext);
    } else {
        return this.getTypedRuleContext(Tf_input_declarationContext,i);
    }
};

Function_port_listContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Function_port_listContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Function_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_port_list(this);
	}
};

Function_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_port_list(this);
	}
};




vlogParser.Function_port_listContext = Function_port_listContext;

vlogParser.prototype.function_port_list = function() {

    var localctx = new Function_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, vlogParser.RULE_function_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1690;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP) {
            this.state = 1687;
            this.attribute_instance();
            this.state = 1692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1693;
        this.tf_input_declaration();
        this.state = 1704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1694;
            this.match(vlogParser.CO);
            this.state = 1698;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1695;
                this.attribute_instance();
                this.state = 1700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1701;
            this.tf_input_declaration();
            this.state = 1706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_range_or_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_range_or_type;
    return this;
}

Function_range_or_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_range_or_typeContext.prototype.constructor = Function_range_or_typeContext;

Function_range_or_typeContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Function_range_or_typeContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Function_range_or_typeContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Function_range_or_typeContext.prototype.REAL = function() {
    return this.getToken(vlogParser.REAL, 0);
};

Function_range_or_typeContext.prototype.REALTIME = function() {
    return this.getToken(vlogParser.REALTIME, 0);
};

Function_range_or_typeContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Function_range_or_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_range_or_type(this);
	}
};

Function_range_or_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_range_or_type(this);
	}
};




vlogParser.Function_range_or_typeContext = Function_range_or_typeContext;

vlogParser.prototype.function_range_or_type = function() {

    var localctx = new Function_range_or_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, vlogParser.RULE_function_range_or_type);
    var _la = 0; // Token type
    try {
        this.state = 1717;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LB:
        case vlogParser.SIGNED:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1707;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1711;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1710;
                this.range_();
            }

            break;
        case vlogParser.INTEGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 1713;
            this.match(vlogParser.INTEGER);
            break;
        case vlogParser.REAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1714;
            this.match(vlogParser.REAL);
            break;
        case vlogParser.REALTIME:
            this.enterOuterAlt(localctx, 4);
            this.state = 1715;
            this.match(vlogParser.REALTIME);
            break;
        case vlogParser.TIME:
            this.enterOuterAlt(localctx, 5);
            this.state = 1716;
            this.match(vlogParser.TIME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_declaration;
    return this;
}

Task_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_declarationContext.prototype.constructor = Task_declarationContext;

Task_declarationContext.prototype.TASK = function() {
    return this.getToken(vlogParser.TASK, 0);
};

Task_declarationContext.prototype.task_identifier = function() {
    return this.getTypedRuleContext(Task_identifierContext,0);
};

Task_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Task_declarationContext.prototype.statement_or_null = function() {
    return this.getTypedRuleContext(Statement_or_nullContext,0);
};

Task_declarationContext.prototype.ENDTASK = function() {
    return this.getToken(vlogParser.ENDTASK, 0);
};

Task_declarationContext.prototype.AUTOMATIC = function() {
    return this.getToken(vlogParser.AUTOMATIC, 0);
};

Task_declarationContext.prototype.task_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Task_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Task_item_declarationContext,i);
    }
};

Task_declarationContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Task_declarationContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Task_declarationContext.prototype.task_port_list = function() {
    return this.getTypedRuleContext(Task_port_listContext,0);
};

Task_declarationContext.prototype.block_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Block_item_declarationContext,i);
    }
};

Task_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_declaration(this);
	}
};

Task_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_declaration(this);
	}
};




vlogParser.Task_declarationContext = Task_declarationContext;

vlogParser.prototype.task_declaration = function() {

    var localctx = new Task_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, vlogParser.RULE_task_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1719;
            this.match(vlogParser.TASK);
            this.state = 1721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.AUTOMATIC) {
                this.state = 1720;
                this.match(vlogParser.AUTOMATIC);
            }

            this.state = 1723;
            this.task_identifier();
            this.state = 1724;
            this.match(vlogParser.SC);
            this.state = 1728;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1725;
                    this.task_item_declaration(); 
                }
                this.state = 1730;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
            }

            this.state = 1731;
            this.statement_or_null();
            this.state = 1732;
            this.match(vlogParser.ENDTASK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1734;
            this.match(vlogParser.TASK);
            this.state = 1736;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.AUTOMATIC) {
                this.state = 1735;
                this.match(vlogParser.AUTOMATIC);
            }

            this.state = 1738;
            this.task_identifier();
            this.state = 1739;
            this.match(vlogParser.LP);
            this.state = 1741;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LP || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vlogParser.INOUT - 106)) | (1 << (vlogParser.INPUT - 106)) | (1 << (vlogParser.OUTPUT - 106)))) !== 0)) {
                this.state = 1740;
                this.task_port_list();
            }

            this.state = 1743;
            this.match(vlogParser.RP);
            this.state = 1744;
            this.match(vlogParser.SC);
            this.state = 1748;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1745;
                    this.block_item_declaration(); 
                }
                this.state = 1750;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
            }

            this.state = 1751;
            this.statement_or_null();
            this.state = 1752;
            this.match(vlogParser.ENDTASK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_item_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_item_declaration;
    return this;
}

Task_item_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_item_declarationContext.prototype.constructor = Task_item_declarationContext;

Task_item_declarationContext.prototype.block_item_declaration = function() {
    return this.getTypedRuleContext(Block_item_declarationContext,0);
};

Task_item_declarationContext.prototype.tf_input_declaration = function() {
    return this.getTypedRuleContext(Tf_input_declarationContext,0);
};

Task_item_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Task_item_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Task_item_declarationContext.prototype.tf_output_declaration = function() {
    return this.getTypedRuleContext(Tf_output_declarationContext,0);
};

Task_item_declarationContext.prototype.tf_inout_declaration = function() {
    return this.getTypedRuleContext(Tf_inout_declarationContext,0);
};

Task_item_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_item_declaration(this);
	}
};

Task_item_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_item_declaration(this);
	}
};




vlogParser.Task_item_declarationContext = Task_item_declarationContext;

vlogParser.prototype.task_item_declaration = function() {

    var localctx = new Task_item_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, vlogParser.RULE_task_item_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1784;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1756;
            this.block_item_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1757;
                this.attribute_instance();
                this.state = 1762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1763;
            this.tf_input_declaration();
            this.state = 1764;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1769;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1766;
                this.attribute_instance();
                this.state = 1771;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1772;
            this.tf_output_declaration();
            this.state = 1773;
            this.match(vlogParser.SC);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1775;
                this.attribute_instance();
                this.state = 1780;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1781;
            this.tf_inout_declaration();
            this.state = 1782;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_port_list;
    return this;
}

Task_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_port_listContext.prototype.constructor = Task_port_listContext;

Task_port_listContext.prototype.task_port_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Task_port_itemContext);
    } else {
        return this.getTypedRuleContext(Task_port_itemContext,i);
    }
};

Task_port_listContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Task_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_port_list(this);
	}
};

Task_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_port_list(this);
	}
};




vlogParser.Task_port_listContext = Task_port_listContext;

vlogParser.prototype.task_port_list = function() {

    var localctx = new Task_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, vlogParser.RULE_task_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1786;
        this.task_port_item();
        this.state = 1791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1787;
            this.match(vlogParser.CO);
            this.state = 1788;
            this.task_port_item();
            this.state = 1793;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_port_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_port_item;
    return this;
}

Task_port_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_port_itemContext.prototype.constructor = Task_port_itemContext;

Task_port_itemContext.prototype.tf_input_declaration = function() {
    return this.getTypedRuleContext(Tf_input_declarationContext,0);
};

Task_port_itemContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Task_port_itemContext.prototype.tf_output_declaration = function() {
    return this.getTypedRuleContext(Tf_output_declarationContext,0);
};

Task_port_itemContext.prototype.tf_inout_declaration = function() {
    return this.getTypedRuleContext(Tf_inout_declarationContext,0);
};

Task_port_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_port_item(this);
	}
};

Task_port_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_port_item(this);
	}
};




vlogParser.Task_port_itemContext = Task_port_itemContext;

vlogParser.prototype.task_port_item = function() {

    var localctx = new Task_port_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, vlogParser.RULE_task_port_item);
    var _la = 0; // Token type
    try {
        this.state = 1815;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1794;
                this.attribute_instance();
                this.state = 1799;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1800;
            this.tf_input_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1804;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1801;
                this.attribute_instance();
                this.state = 1806;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1807;
            this.tf_output_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1811;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1808;
                this.attribute_instance();
                this.state = 1813;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1814;
            this.tf_inout_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tf_input_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tf_input_declaration;
    return this;
}

Tf_input_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tf_input_declarationContext.prototype.constructor = Tf_input_declarationContext;

Tf_input_declarationContext.prototype.INPUT = function() {
    return this.getToken(vlogParser.INPUT, 0);
};

Tf_input_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Tf_input_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Tf_input_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Tf_input_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Tf_input_declarationContext.prototype.task_port_type = function() {
    return this.getTypedRuleContext(Task_port_typeContext,0);
};

Tf_input_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTf_input_declaration(this);
	}
};

Tf_input_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTf_input_declaration(this);
	}
};




vlogParser.Tf_input_declarationContext = Tf_input_declarationContext;

vlogParser.prototype.tf_input_declaration = function() {

    var localctx = new Tf_input_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, vlogParser.RULE_tf_input_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1817;
            this.match(vlogParser.INPUT);
            this.state = 1819;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.REG) {
                this.state = 1818;
                this.match(vlogParser.REG);
            }

            this.state = 1822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1821;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1825;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1824;
                this.range_();
            }

            this.state = 1827;
            this.list_of_port_identifiers();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1828;
            this.match(vlogParser.INPUT);
            this.state = 1829;
            this.task_port_type();
            this.state = 1830;
            this.list_of_port_identifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tf_output_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tf_output_declaration;
    return this;
}

Tf_output_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tf_output_declarationContext.prototype.constructor = Tf_output_declarationContext;

Tf_output_declarationContext.prototype.OUTPUT = function() {
    return this.getToken(vlogParser.OUTPUT, 0);
};

Tf_output_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Tf_output_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Tf_output_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Tf_output_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Tf_output_declarationContext.prototype.task_port_type = function() {
    return this.getTypedRuleContext(Task_port_typeContext,0);
};

Tf_output_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTf_output_declaration(this);
	}
};

Tf_output_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTf_output_declaration(this);
	}
};




vlogParser.Tf_output_declarationContext = Tf_output_declarationContext;

vlogParser.prototype.tf_output_declaration = function() {

    var localctx = new Tf_output_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, vlogParser.RULE_tf_output_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1849;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1834;
            this.match(vlogParser.OUTPUT);
            this.state = 1836;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.REG) {
                this.state = 1835;
                this.match(vlogParser.REG);
            }

            this.state = 1839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1838;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1842;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1841;
                this.range_();
            }

            this.state = 1844;
            this.list_of_port_identifiers();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1845;
            this.match(vlogParser.OUTPUT);
            this.state = 1846;
            this.task_port_type();
            this.state = 1847;
            this.list_of_port_identifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tf_inout_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tf_inout_declaration;
    return this;
}

Tf_inout_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tf_inout_declarationContext.prototype.constructor = Tf_inout_declarationContext;

Tf_inout_declarationContext.prototype.INOUT = function() {
    return this.getToken(vlogParser.INOUT, 0);
};

Tf_inout_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Tf_inout_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Tf_inout_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Tf_inout_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Tf_inout_declarationContext.prototype.task_port_type = function() {
    return this.getTypedRuleContext(Task_port_typeContext,0);
};

Tf_inout_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTf_inout_declaration(this);
	}
};

Tf_inout_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTf_inout_declaration(this);
	}
};




vlogParser.Tf_inout_declarationContext = Tf_inout_declarationContext;

vlogParser.prototype.tf_inout_declaration = function() {

    var localctx = new Tf_inout_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, vlogParser.RULE_tf_inout_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1866;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1851;
            this.match(vlogParser.INOUT);
            this.state = 1853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.REG) {
                this.state = 1852;
                this.match(vlogParser.REG);
            }

            this.state = 1856;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1855;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1859;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1858;
                this.range_();
            }

            this.state = 1861;
            this.list_of_port_identifiers();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1862;
            this.match(vlogParser.INOUT);
            this.state = 1863;
            this.task_port_type();
            this.state = 1864;
            this.list_of_port_identifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_port_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_port_type;
    return this;
}

Task_port_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_port_typeContext.prototype.constructor = Task_port_typeContext;

Task_port_typeContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Task_port_typeContext.prototype.REAL = function() {
    return this.getToken(vlogParser.REAL, 0);
};

Task_port_typeContext.prototype.REALTIME = function() {
    return this.getToken(vlogParser.REALTIME, 0);
};

Task_port_typeContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Task_port_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_port_type(this);
	}
};

Task_port_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_port_type(this);
	}
};




vlogParser.Task_port_typeContext = Task_port_typeContext;

vlogParser.prototype.task_port_type = function() {

    var localctx = new Task_port_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, vlogParser.RULE_task_port_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1868;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.INTEGER || _la===vlogParser.REAL || _la===vlogParser.REALTIME || _la===vlogParser.TIME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_item_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_block_item_declaration;
    return this;
}

Block_item_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_item_declarationContext.prototype.constructor = Block_item_declarationContext;

Block_item_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Block_item_declarationContext.prototype.list_of_block_variable_identifiers = function() {
    return this.getTypedRuleContext(List_of_block_variable_identifiersContext,0);
};

Block_item_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Block_item_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Block_item_declarationContext.prototype.SIGNED = function() {
    return this.getToken(vlogParser.SIGNED, 0);
};

Block_item_declarationContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Block_item_declarationContext.prototype.INTEGER = function() {
    return this.getToken(vlogParser.INTEGER, 0);
};

Block_item_declarationContext.prototype.TIME = function() {
    return this.getToken(vlogParser.TIME, 0);
};

Block_item_declarationContext.prototype.REAL = function() {
    return this.getToken(vlogParser.REAL, 0);
};

Block_item_declarationContext.prototype.list_of_block_real_identifiers = function() {
    return this.getTypedRuleContext(List_of_block_real_identifiersContext,0);
};

Block_item_declarationContext.prototype.REALTIME = function() {
    return this.getToken(vlogParser.REALTIME, 0);
};

Block_item_declarationContext.prototype.event_declaration = function() {
    return this.getTypedRuleContext(Event_declarationContext,0);
};

Block_item_declarationContext.prototype.local_parameter_declaration = function() {
    return this.getTypedRuleContext(Local_parameter_declarationContext,0);
};

Block_item_declarationContext.prototype.parameter_declaration = function() {
    return this.getTypedRuleContext(Parameter_declarationContext,0);
};

Block_item_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBlock_item_declaration(this);
	}
};

Block_item_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBlock_item_declaration(this);
	}
};




vlogParser.Block_item_declarationContext = Block_item_declarationContext;

vlogParser.prototype.block_item_declaration = function() {

    var localctx = new Block_item_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, vlogParser.RULE_block_item_declaration);
    var _la = 0; // Token type
    try {
        this.state = 1951;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1873;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1870;
                this.attribute_instance();
                this.state = 1875;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1876;
            this.match(vlogParser.REG);
            this.state = 1878;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.SIGNED) {
                this.state = 1877;
                this.match(vlogParser.SIGNED);
            }

            this.state = 1881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 1880;
                this.range_();
            }

            this.state = 1883;
            this.list_of_block_variable_identifiers();
            this.state = 1884;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1886;
                this.attribute_instance();
                this.state = 1891;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1892;
            this.match(vlogParser.INTEGER);
            this.state = 1893;
            this.list_of_block_variable_identifiers();
            this.state = 1894;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1896;
                this.attribute_instance();
                this.state = 1901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1902;
            this.match(vlogParser.TIME);
            this.state = 1903;
            this.list_of_block_variable_identifiers();
            this.state = 1904;
            this.match(vlogParser.SC);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1909;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1906;
                this.attribute_instance();
                this.state = 1911;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1912;
            this.match(vlogParser.REAL);
            this.state = 1913;
            this.list_of_block_real_identifiers();
            this.state = 1914;
            this.match(vlogParser.SC);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1916;
                this.attribute_instance();
                this.state = 1921;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1922;
            this.match(vlogParser.REALTIME);
            this.state = 1923;
            this.list_of_block_real_identifiers();
            this.state = 1924;
            this.match(vlogParser.SC);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1929;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1926;
                this.attribute_instance();
                this.state = 1931;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1932;
            this.event_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1933;
                this.attribute_instance();
                this.state = 1938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1939;
            this.local_parameter_declaration();
            this.state = 1940;
            this.match(vlogParser.SC);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 1942;
                this.attribute_instance();
                this.state = 1947;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1948;
            this.parameter_declaration();
            this.state = 1949;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_block_variable_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_block_variable_identifiers;
    return this;
}

List_of_block_variable_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_block_variable_identifiersContext.prototype.constructor = List_of_block_variable_identifiersContext;

List_of_block_variable_identifiersContext.prototype.block_variable_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_variable_typeContext);
    } else {
        return this.getTypedRuleContext(Block_variable_typeContext,i);
    }
};

List_of_block_variable_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_block_variable_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_block_variable_identifiers(this);
	}
};

List_of_block_variable_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_block_variable_identifiers(this);
	}
};




vlogParser.List_of_block_variable_identifiersContext = List_of_block_variable_identifiersContext;

vlogParser.prototype.list_of_block_variable_identifiers = function() {

    var localctx = new List_of_block_variable_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, vlogParser.RULE_list_of_block_variable_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1953;
        this.block_variable_type();
        this.state = 1958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1954;
            this.match(vlogParser.CO);
            this.state = 1955;
            this.block_variable_type();
            this.state = 1960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_block_real_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_block_real_identifiers;
    return this;
}

List_of_block_real_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_block_real_identifiersContext.prototype.constructor = List_of_block_real_identifiersContext;

List_of_block_real_identifiersContext.prototype.block_real_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_real_typeContext);
    } else {
        return this.getTypedRuleContext(Block_real_typeContext,i);
    }
};

List_of_block_real_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_block_real_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_block_real_identifiers(this);
	}
};

List_of_block_real_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_block_real_identifiers(this);
	}
};




vlogParser.List_of_block_real_identifiersContext = List_of_block_real_identifiersContext;

vlogParser.prototype.list_of_block_real_identifiers = function() {

    var localctx = new List_of_block_real_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, vlogParser.RULE_list_of_block_real_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1961;
        this.block_real_type();
        this.state = 1966;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 1962;
            this.match(vlogParser.CO);
            this.state = 1963;
            this.block_real_type();
            this.state = 1968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_variable_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_block_variable_type;
    return this;
}

Block_variable_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_variable_typeContext.prototype.constructor = Block_variable_typeContext;

Block_variable_typeContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Block_variable_typeContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

Block_variable_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBlock_variable_type(this);
	}
};

Block_variable_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBlock_variable_type(this);
	}
};




vlogParser.Block_variable_typeContext = Block_variable_typeContext;

vlogParser.prototype.block_variable_type = function() {

    var localctx = new Block_variable_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, vlogParser.RULE_block_variable_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1969;
        this.variable_identifier();
        this.state = 1973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LB) {
            this.state = 1970;
            this.dimension();
            this.state = 1975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_real_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_block_real_type;
    return this;
}

Block_real_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_real_typeContext.prototype.constructor = Block_real_typeContext;

Block_real_typeContext.prototype.real_identifier = function() {
    return this.getTypedRuleContext(Real_identifierContext,0);
};

Block_real_typeContext.prototype.dimension = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionContext);
    } else {
        return this.getTypedRuleContext(DimensionContext,i);
    }
};

Block_real_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBlock_real_type(this);
	}
};

Block_real_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBlock_real_type(this);
	}
};




vlogParser.Block_real_typeContext = Block_real_typeContext;

vlogParser.prototype.block_real_type = function() {

    var localctx = new Block_real_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, vlogParser.RULE_block_real_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1976;
        this.real_identifier();
        this.state = 1980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LB) {
            this.state = 1977;
            this.dimension();
            this.state = 1982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Gate_instantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_gate_instantiation;
    return this;
}

Gate_instantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Gate_instantiationContext.prototype.constructor = Gate_instantiationContext;

Gate_instantiationContext.prototype.cmos_switchtype = function() {
    return this.getTypedRuleContext(Cmos_switchtypeContext,0);
};

Gate_instantiationContext.prototype.cmos_switch_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cmos_switch_instanceContext);
    } else {
        return this.getTypedRuleContext(Cmos_switch_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Gate_instantiationContext.prototype.delay3 = function() {
    return this.getTypedRuleContext(Delay3Context,0);
};

Gate_instantiationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Gate_instantiationContext.prototype.enable_gatetype = function() {
    return this.getTypedRuleContext(Enable_gatetypeContext,0);
};

Gate_instantiationContext.prototype.enable_gate_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Enable_gate_instanceContext);
    } else {
        return this.getTypedRuleContext(Enable_gate_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.drive_strength = function() {
    return this.getTypedRuleContext(Drive_strengthContext,0);
};

Gate_instantiationContext.prototype.mos_switchtype = function() {
    return this.getTypedRuleContext(Mos_switchtypeContext,0);
};

Gate_instantiationContext.prototype.mos_switch_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mos_switch_instanceContext);
    } else {
        return this.getTypedRuleContext(Mos_switch_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.n_input_gatetype = function() {
    return this.getTypedRuleContext(N_input_gatetypeContext,0);
};

Gate_instantiationContext.prototype.n_input_gate_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(N_input_gate_instanceContext);
    } else {
        return this.getTypedRuleContext(N_input_gate_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.delay2 = function() {
    return this.getTypedRuleContext(Delay2Context,0);
};

Gate_instantiationContext.prototype.n_output_gatetype = function() {
    return this.getTypedRuleContext(N_output_gatetypeContext,0);
};

Gate_instantiationContext.prototype.n_output_gate_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(N_output_gate_instanceContext);
    } else {
        return this.getTypedRuleContext(N_output_gate_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.pass_en_switchtype = function() {
    return this.getTypedRuleContext(Pass_en_switchtypeContext,0);
};

Gate_instantiationContext.prototype.pass_enable_switch_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pass_enable_switch_instanceContext);
    } else {
        return this.getTypedRuleContext(Pass_enable_switch_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.pass_switchtype = function() {
    return this.getTypedRuleContext(Pass_switchtypeContext,0);
};

Gate_instantiationContext.prototype.pass_switch_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pass_switch_instanceContext);
    } else {
        return this.getTypedRuleContext(Pass_switch_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.PULLDOWN = function() {
    return this.getToken(vlogParser.PULLDOWN, 0);
};

Gate_instantiationContext.prototype.pull_gate_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pull_gate_instanceContext);
    } else {
        return this.getTypedRuleContext(Pull_gate_instanceContext,i);
    }
};

Gate_instantiationContext.prototype.pulldown_strength = function() {
    return this.getTypedRuleContext(Pulldown_strengthContext,0);
};

Gate_instantiationContext.prototype.PULLUP = function() {
    return this.getToken(vlogParser.PULLUP, 0);
};

Gate_instantiationContext.prototype.pullup_strength = function() {
    return this.getTypedRuleContext(Pullup_strengthContext,0);
};

Gate_instantiationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGate_instantiation(this);
	}
};

Gate_instantiationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGate_instantiation(this);
	}
};




vlogParser.Gate_instantiationContext = Gate_instantiationContext;

vlogParser.prototype.gate_instantiation = function() {

    var localctx = new Gate_instantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, vlogParser.RULE_gate_instantiation);
    var _la = 0; // Token type
    try {
        this.state = 2115;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.CMOS:
        case vlogParser.RCMOS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1983;
            this.cmos_switchtype();
            this.state = 1985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 1984;
                this.delay3();
            }

            this.state = 1987;
            this.cmos_switch_instance();
            this.state = 1992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 1988;
                this.match(vlogParser.CO);
                this.state = 1989;
                this.cmos_switch_instance();
                this.state = 1994;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1995;
            this.match(vlogParser.SC);
            break;
        case vlogParser.BUFIFZERO:
        case vlogParser.BUFIFONE:
        case vlogParser.NOTIFZERO:
        case vlogParser.NOTIFONE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1997;
            this.enable_gatetype();
            this.state = 1999;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
            if(la_===1) {
                this.state = 1998;
                this.drive_strength();

            }
            this.state = 2002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 2001;
                this.delay3();
            }

            this.state = 2004;
            this.enable_gate_instance();
            this.state = 2009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2005;
                this.match(vlogParser.CO);
                this.state = 2006;
                this.enable_gate_instance();
                this.state = 2011;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2012;
            this.match(vlogParser.SC);
            break;
        case vlogParser.NMOS:
        case vlogParser.PMOS:
        case vlogParser.RNMOS:
        case vlogParser.RPMOS:
            this.enterOuterAlt(localctx, 3);
            this.state = 2014;
            this.mos_switchtype();
            this.state = 2016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 2015;
                this.delay3();
            }

            this.state = 2018;
            this.mos_switch_instance();
            this.state = 2023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2019;
                this.match(vlogParser.CO);
                this.state = 2020;
                this.mos_switch_instance();
                this.state = 2025;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2026;
            this.match(vlogParser.SC);
            break;
        case vlogParser.AND:
        case vlogParser.NAND:
        case vlogParser.NOR:
        case vlogParser.OR:
        case vlogParser.XNOR:
        case vlogParser.XOR:
            this.enterOuterAlt(localctx, 4);
            this.state = 2028;
            this.n_input_gatetype();
            this.state = 2030;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
            if(la_===1) {
                this.state = 2029;
                this.drive_strength();

            }
            this.state = 2033;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 2032;
                this.delay2();
            }

            this.state = 2035;
            this.n_input_gate_instance();
            this.state = 2040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2036;
                this.match(vlogParser.CO);
                this.state = 2037;
                this.n_input_gate_instance();
                this.state = 2042;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2043;
            this.match(vlogParser.SC);
            break;
        case vlogParser.BUF:
        case vlogParser.NOT:
            this.enterOuterAlt(localctx, 5);
            this.state = 2045;
            this.n_output_gatetype();
            this.state = 2047;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
            if(la_===1) {
                this.state = 2046;
                this.drive_strength();

            }
            this.state = 2050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 2049;
                this.delay2();
            }

            this.state = 2052;
            this.n_output_gate_instance();
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2053;
                this.match(vlogParser.CO);
                this.state = 2054;
                this.n_output_gate_instance();
                this.state = 2059;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2060;
            this.match(vlogParser.SC);
            break;
        case vlogParser.RTRANIFZERO:
        case vlogParser.RTRANIFONE:
        case vlogParser.TRANIFZERO:
        case vlogParser.TRANIFONE:
            this.enterOuterAlt(localctx, 6);
            this.state = 2062;
            this.pass_en_switchtype();
            this.state = 2064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.HA) {
                this.state = 2063;
                this.delay2();
            }

            this.state = 2066;
            this.pass_enable_switch_instance();
            this.state = 2071;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2067;
                this.match(vlogParser.CO);
                this.state = 2068;
                this.pass_enable_switch_instance();
                this.state = 2073;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2074;
            this.match(vlogParser.SC);
            break;
        case vlogParser.RTRAN:
        case vlogParser.TRAN:
            this.enterOuterAlt(localctx, 7);
            this.state = 2076;
            this.pass_switchtype();
            this.state = 2077;
            this.pass_switch_instance();
            this.state = 2082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2078;
                this.match(vlogParser.CO);
                this.state = 2079;
                this.pass_switch_instance();
                this.state = 2084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2085;
            this.match(vlogParser.SC);
            break;
        case vlogParser.PULLDOWN:
            this.enterOuterAlt(localctx, 8);
            this.state = 2087;
            this.match(vlogParser.PULLDOWN);
            this.state = 2089;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
            if(la_===1) {
                this.state = 2088;
                this.pulldown_strength();

            }
            this.state = 2091;
            this.pull_gate_instance();
            this.state = 2096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2092;
                this.match(vlogParser.CO);
                this.state = 2093;
                this.pull_gate_instance();
                this.state = 2098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2099;
            this.match(vlogParser.SC);
            break;
        case vlogParser.PULLUP:
            this.enterOuterAlt(localctx, 9);
            this.state = 2101;
            this.match(vlogParser.PULLUP);
            this.state = 2103;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
            if(la_===1) {
                this.state = 2102;
                this.pullup_strength();

            }
            this.state = 2105;
            this.pull_gate_instance();
            this.state = 2110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2106;
                this.match(vlogParser.CO);
                this.state = 2107;
                this.pull_gate_instance();
                this.state = 2112;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2113;
            this.match(vlogParser.SC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cmos_switch_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_cmos_switch_instance;
    return this;
}

Cmos_switch_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cmos_switch_instanceContext.prototype.constructor = Cmos_switch_instanceContext;

Cmos_switch_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Cmos_switch_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

Cmos_switch_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Cmos_switch_instanceContext.prototype.input_terminal = function() {
    return this.getTypedRuleContext(Input_terminalContext,0);
};

Cmos_switch_instanceContext.prototype.ncontrol_terminal = function() {
    return this.getTypedRuleContext(Ncontrol_terminalContext,0);
};

Cmos_switch_instanceContext.prototype.pcontrol_terminal = function() {
    return this.getTypedRuleContext(Pcontrol_terminalContext,0);
};

Cmos_switch_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Cmos_switch_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Cmos_switch_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCmos_switch_instance(this);
	}
};

Cmos_switch_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCmos_switch_instance(this);
	}
};




vlogParser.Cmos_switch_instanceContext = Cmos_switch_instanceContext;

vlogParser.prototype.cmos_switch_instance = function() {

    var localctx = new Cmos_switch_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, vlogParser.RULE_cmos_switch_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2118;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2117;
            this.name_of_gate_instance();
        }

        this.state = 2120;
        this.match(vlogParser.LP);
        this.state = 2121;
        this.output_terminal();
        this.state = 2122;
        this.match(vlogParser.CO);
        this.state = 2123;
        this.input_terminal();
        this.state = 2124;
        this.match(vlogParser.CO);
        this.state = 2125;
        this.ncontrol_terminal();
        this.state = 2126;
        this.match(vlogParser.CO);
        this.state = 2127;
        this.pcontrol_terminal();
        this.state = 2128;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enable_gate_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_enable_gate_instance;
    return this;
}

Enable_gate_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enable_gate_instanceContext.prototype.constructor = Enable_gate_instanceContext;

Enable_gate_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Enable_gate_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

Enable_gate_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Enable_gate_instanceContext.prototype.input_terminal = function() {
    return this.getTypedRuleContext(Input_terminalContext,0);
};

Enable_gate_instanceContext.prototype.enable_terminal = function() {
    return this.getTypedRuleContext(Enable_terminalContext,0);
};

Enable_gate_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Enable_gate_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Enable_gate_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEnable_gate_instance(this);
	}
};

Enable_gate_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEnable_gate_instance(this);
	}
};




vlogParser.Enable_gate_instanceContext = Enable_gate_instanceContext;

vlogParser.prototype.enable_gate_instance = function() {

    var localctx = new Enable_gate_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, vlogParser.RULE_enable_gate_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2130;
            this.name_of_gate_instance();
        }

        this.state = 2133;
        this.match(vlogParser.LP);
        this.state = 2134;
        this.output_terminal();
        this.state = 2135;
        this.match(vlogParser.CO);
        this.state = 2136;
        this.input_terminal();
        this.state = 2137;
        this.match(vlogParser.CO);
        this.state = 2138;
        this.enable_terminal();
        this.state = 2139;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mos_switch_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_mos_switch_instance;
    return this;
}

Mos_switch_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mos_switch_instanceContext.prototype.constructor = Mos_switch_instanceContext;

Mos_switch_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Mos_switch_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

Mos_switch_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Mos_switch_instanceContext.prototype.input_terminal = function() {
    return this.getTypedRuleContext(Input_terminalContext,0);
};

Mos_switch_instanceContext.prototype.enable_terminal = function() {
    return this.getTypedRuleContext(Enable_terminalContext,0);
};

Mos_switch_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Mos_switch_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Mos_switch_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMos_switch_instance(this);
	}
};

Mos_switch_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMos_switch_instance(this);
	}
};




vlogParser.Mos_switch_instanceContext = Mos_switch_instanceContext;

vlogParser.prototype.mos_switch_instance = function() {

    var localctx = new Mos_switch_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, vlogParser.RULE_mos_switch_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2141;
            this.name_of_gate_instance();
        }

        this.state = 2144;
        this.match(vlogParser.LP);
        this.state = 2145;
        this.output_terminal();
        this.state = 2146;
        this.match(vlogParser.CO);
        this.state = 2147;
        this.input_terminal();
        this.state = 2148;
        this.match(vlogParser.CO);
        this.state = 2149;
        this.enable_terminal();
        this.state = 2150;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function N_input_gate_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_n_input_gate_instance;
    return this;
}

N_input_gate_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
N_input_gate_instanceContext.prototype.constructor = N_input_gate_instanceContext;

N_input_gate_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

N_input_gate_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

N_input_gate_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


N_input_gate_instanceContext.prototype.input_terminal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_terminalContext);
    } else {
        return this.getTypedRuleContext(Input_terminalContext,i);
    }
};

N_input_gate_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

N_input_gate_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

N_input_gate_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterN_input_gate_instance(this);
	}
};

N_input_gate_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitN_input_gate_instance(this);
	}
};




vlogParser.N_input_gate_instanceContext = N_input_gate_instanceContext;

vlogParser.prototype.n_input_gate_instance = function() {

    var localctx = new N_input_gate_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, vlogParser.RULE_n_input_gate_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2153;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2152;
            this.name_of_gate_instance();
        }

        this.state = 2155;
        this.match(vlogParser.LP);
        this.state = 2156;
        this.output_terminal();
        this.state = 2157;
        this.match(vlogParser.CO);
        this.state = 2158;
        this.input_terminal();
        this.state = 2163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2159;
            this.match(vlogParser.CO);
            this.state = 2160;
            this.input_terminal();
            this.state = 2165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2166;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function N_output_gate_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_n_output_gate_instance;
    return this;
}

N_output_gate_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
N_output_gate_instanceContext.prototype.constructor = N_output_gate_instanceContext;

N_output_gate_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

N_output_gate_instanceContext.prototype.output_terminal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Output_terminalContext);
    } else {
        return this.getTypedRuleContext(Output_terminalContext,i);
    }
};

N_output_gate_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


N_output_gate_instanceContext.prototype.input_terminal = function() {
    return this.getTypedRuleContext(Input_terminalContext,0);
};

N_output_gate_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

N_output_gate_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

N_output_gate_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterN_output_gate_instance(this);
	}
};

N_output_gate_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitN_output_gate_instance(this);
	}
};




vlogParser.N_output_gate_instanceContext = N_output_gate_instanceContext;

vlogParser.prototype.n_output_gate_instance = function() {

    var localctx = new N_output_gate_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, vlogParser.RULE_n_output_gate_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2168;
            this.name_of_gate_instance();
        }

        this.state = 2171;
        this.match(vlogParser.LP);
        this.state = 2172;
        this.output_terminal();
        this.state = 2177;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,216,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2173;
                this.match(vlogParser.CO);
                this.state = 2174;
                this.output_terminal(); 
            }
            this.state = 2179;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,216,this._ctx);
        }

        this.state = 2180;
        this.match(vlogParser.CO);
        this.state = 2181;
        this.input_terminal();
        this.state = 2182;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pass_switch_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pass_switch_instance;
    return this;
}

Pass_switch_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_switch_instanceContext.prototype.constructor = Pass_switch_instanceContext;

Pass_switch_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pass_switch_instanceContext.prototype.inout_terminal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inout_terminalContext);
    } else {
        return this.getTypedRuleContext(Inout_terminalContext,i);
    }
};

Pass_switch_instanceContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Pass_switch_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pass_switch_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Pass_switch_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPass_switch_instance(this);
	}
};

Pass_switch_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPass_switch_instance(this);
	}
};




vlogParser.Pass_switch_instanceContext = Pass_switch_instanceContext;

vlogParser.prototype.pass_switch_instance = function() {

    var localctx = new Pass_switch_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, vlogParser.RULE_pass_switch_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2184;
            this.name_of_gate_instance();
        }

        this.state = 2187;
        this.match(vlogParser.LP);
        this.state = 2188;
        this.inout_terminal();
        this.state = 2189;
        this.match(vlogParser.CO);
        this.state = 2190;
        this.inout_terminal();
        this.state = 2191;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pass_enable_switch_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pass_enable_switch_instance;
    return this;
}

Pass_enable_switch_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_enable_switch_instanceContext.prototype.constructor = Pass_enable_switch_instanceContext;

Pass_enable_switch_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pass_enable_switch_instanceContext.prototype.inout_terminal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inout_terminalContext);
    } else {
        return this.getTypedRuleContext(Inout_terminalContext,i);
    }
};

Pass_enable_switch_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Pass_enable_switch_instanceContext.prototype.enable_terminal = function() {
    return this.getTypedRuleContext(Enable_terminalContext,0);
};

Pass_enable_switch_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pass_enable_switch_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Pass_enable_switch_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPass_enable_switch_instance(this);
	}
};

Pass_enable_switch_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPass_enable_switch_instance(this);
	}
};




vlogParser.Pass_enable_switch_instanceContext = Pass_enable_switch_instanceContext;

vlogParser.prototype.pass_enable_switch_instance = function() {

    var localctx = new Pass_enable_switch_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, vlogParser.RULE_pass_enable_switch_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2194;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2193;
            this.name_of_gate_instance();
        }

        this.state = 2196;
        this.match(vlogParser.LP);
        this.state = 2197;
        this.inout_terminal();
        this.state = 2198;
        this.match(vlogParser.CO);
        this.state = 2199;
        this.inout_terminal();
        this.state = 2200;
        this.match(vlogParser.CO);
        this.state = 2201;
        this.enable_terminal();
        this.state = 2202;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pull_gate_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pull_gate_instance;
    return this;
}

Pull_gate_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pull_gate_instanceContext.prototype.constructor = Pull_gate_instanceContext;

Pull_gate_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pull_gate_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

Pull_gate_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pull_gate_instanceContext.prototype.name_of_gate_instance = function() {
    return this.getTypedRuleContext(Name_of_gate_instanceContext,0);
};

Pull_gate_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPull_gate_instance(this);
	}
};

Pull_gate_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPull_gate_instance(this);
	}
};




vlogParser.Pull_gate_instanceContext = Pull_gate_instanceContext;

vlogParser.prototype.pull_gate_instance = function() {

    var localctx = new Pull_gate_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, vlogParser.RULE_pull_gate_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2204;
            this.name_of_gate_instance();
        }

        this.state = 2207;
        this.match(vlogParser.LP);
        this.state = 2208;
        this.output_terminal();
        this.state = 2209;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Name_of_gate_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_name_of_gate_instance;
    return this;
}

Name_of_gate_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_of_gate_instanceContext.prototype.constructor = Name_of_gate_instanceContext;

Name_of_gate_instanceContext.prototype.gate_instance_identifier = function() {
    return this.getTypedRuleContext(Gate_instance_identifierContext,0);
};

Name_of_gate_instanceContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Name_of_gate_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterName_of_gate_instance(this);
	}
};

Name_of_gate_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitName_of_gate_instance(this);
	}
};




vlogParser.Name_of_gate_instanceContext = Name_of_gate_instanceContext;

vlogParser.prototype.name_of_gate_instance = function() {

    var localctx = new Name_of_gate_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, vlogParser.RULE_name_of_gate_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2211;
        this.gate_instance_identifier();
        this.state = 2213;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 2212;
            this.range_();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pulldown_strengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pulldown_strength;
    return this;
}

Pulldown_strengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pulldown_strengthContext.prototype.constructor = Pulldown_strengthContext;

Pulldown_strengthContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pulldown_strengthContext.prototype.strength0 = function() {
    return this.getTypedRuleContext(Strength0Context,0);
};

Pulldown_strengthContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Pulldown_strengthContext.prototype.strength1 = function() {
    return this.getTypedRuleContext(Strength1Context,0);
};

Pulldown_strengthContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pulldown_strengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPulldown_strength(this);
	}
};

Pulldown_strengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPulldown_strength(this);
	}
};




vlogParser.Pulldown_strengthContext = Pulldown_strengthContext;

vlogParser.prototype.pulldown_strength = function() {

    var localctx = new Pulldown_strengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, vlogParser.RULE_pulldown_strength);
    try {
        this.state = 2231;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2215;
            this.match(vlogParser.LP);
            this.state = 2216;
            this.strength0();
            this.state = 2217;
            this.match(vlogParser.CO);
            this.state = 2218;
            this.strength1();
            this.state = 2219;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2221;
            this.match(vlogParser.LP);
            this.state = 2222;
            this.strength1();
            this.state = 2223;
            this.match(vlogParser.CO);
            this.state = 2224;
            this.strength0();
            this.state = 2225;
            this.match(vlogParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2227;
            this.match(vlogParser.LP);
            this.state = 2228;
            this.strength0();
            this.state = 2229;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pullup_strengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pullup_strength;
    return this;
}

Pullup_strengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pullup_strengthContext.prototype.constructor = Pullup_strengthContext;

Pullup_strengthContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Pullup_strengthContext.prototype.strength0 = function() {
    return this.getTypedRuleContext(Strength0Context,0);
};

Pullup_strengthContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Pullup_strengthContext.prototype.strength1 = function() {
    return this.getTypedRuleContext(Strength1Context,0);
};

Pullup_strengthContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Pullup_strengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPullup_strength(this);
	}
};

Pullup_strengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPullup_strength(this);
	}
};




vlogParser.Pullup_strengthContext = Pullup_strengthContext;

vlogParser.prototype.pullup_strength = function() {

    var localctx = new Pullup_strengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, vlogParser.RULE_pullup_strength);
    try {
        this.state = 2249;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2233;
            this.match(vlogParser.LP);
            this.state = 2234;
            this.strength0();
            this.state = 2235;
            this.match(vlogParser.CO);
            this.state = 2236;
            this.strength1();
            this.state = 2237;
            this.match(vlogParser.RP);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2239;
            this.match(vlogParser.LP);
            this.state = 2240;
            this.strength1();
            this.state = 2241;
            this.match(vlogParser.CO);
            this.state = 2242;
            this.strength0();
            this.state = 2243;
            this.match(vlogParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2245;
            this.match(vlogParser.LP);
            this.state = 2246;
            this.strength1();
            this.state = 2247;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enable_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_enable_terminal;
    return this;
}

Enable_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enable_terminalContext.prototype.constructor = Enable_terminalContext;

Enable_terminalContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Enable_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEnable_terminal(this);
	}
};

Enable_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEnable_terminal(this);
	}
};




vlogParser.Enable_terminalContext = Enable_terminalContext;

vlogParser.prototype.enable_terminal = function() {

    var localctx = new Enable_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, vlogParser.RULE_enable_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2251;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inout_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_inout_terminal;
    return this;
}

Inout_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inout_terminalContext.prototype.constructor = Inout_terminalContext;

Inout_terminalContext.prototype.net_lvalue = function() {
    return this.getTypedRuleContext(Net_lvalueContext,0);
};

Inout_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInout_terminal(this);
	}
};

Inout_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInout_terminal(this);
	}
};




vlogParser.Inout_terminalContext = Inout_terminalContext;

vlogParser.prototype.inout_terminal = function() {

    var localctx = new Inout_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, vlogParser.RULE_inout_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2253;
        this.net_lvalue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_input_terminal;
    return this;
}

Input_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_terminalContext.prototype.constructor = Input_terminalContext;

Input_terminalContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Input_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInput_terminal(this);
	}
};

Input_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInput_terminal(this);
	}
};




vlogParser.Input_terminalContext = Input_terminalContext;

vlogParser.prototype.input_terminal = function() {

    var localctx = new Input_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, vlogParser.RULE_input_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ncontrol_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_ncontrol_terminal;
    return this;
}

Ncontrol_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ncontrol_terminalContext.prototype.constructor = Ncontrol_terminalContext;

Ncontrol_terminalContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ncontrol_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNcontrol_terminal(this);
	}
};

Ncontrol_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNcontrol_terminal(this);
	}
};




vlogParser.Ncontrol_terminalContext = Ncontrol_terminalContext;

vlogParser.prototype.ncontrol_terminal = function() {

    var localctx = new Ncontrol_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, vlogParser.RULE_ncontrol_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2257;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_terminal;
    return this;
}

Output_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_terminalContext.prototype.constructor = Output_terminalContext;

Output_terminalContext.prototype.net_lvalue = function() {
    return this.getTypedRuleContext(Net_lvalueContext,0);
};

Output_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_terminal(this);
	}
};

Output_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_terminal(this);
	}
};




vlogParser.Output_terminalContext = Output_terminalContext;

vlogParser.prototype.output_terminal = function() {

    var localctx = new Output_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, vlogParser.RULE_output_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2259;
        this.net_lvalue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pcontrol_terminalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pcontrol_terminal;
    return this;
}

Pcontrol_terminalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pcontrol_terminalContext.prototype.constructor = Pcontrol_terminalContext;

Pcontrol_terminalContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Pcontrol_terminalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPcontrol_terminal(this);
	}
};

Pcontrol_terminalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPcontrol_terminal(this);
	}
};




vlogParser.Pcontrol_terminalContext = Pcontrol_terminalContext;

vlogParser.prototype.pcontrol_terminal = function() {

    var localctx = new Pcontrol_terminalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, vlogParser.RULE_pcontrol_terminal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2261;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cmos_switchtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_cmos_switchtype;
    return this;
}

Cmos_switchtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cmos_switchtypeContext.prototype.constructor = Cmos_switchtypeContext;

Cmos_switchtypeContext.prototype.CMOS = function() {
    return this.getToken(vlogParser.CMOS, 0);
};

Cmos_switchtypeContext.prototype.RCMOS = function() {
    return this.getToken(vlogParser.RCMOS, 0);
};

Cmos_switchtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCmos_switchtype(this);
	}
};

Cmos_switchtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCmos_switchtype(this);
	}
};




vlogParser.Cmos_switchtypeContext = Cmos_switchtypeContext;

vlogParser.prototype.cmos_switchtype = function() {

    var localctx = new Cmos_switchtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, vlogParser.RULE_cmos_switchtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2263;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.CMOS || _la===vlogParser.RCMOS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enable_gatetypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_enable_gatetype;
    return this;
}

Enable_gatetypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enable_gatetypeContext.prototype.constructor = Enable_gatetypeContext;

Enable_gatetypeContext.prototype.BUFIFZERO = function() {
    return this.getToken(vlogParser.BUFIFZERO, 0);
};

Enable_gatetypeContext.prototype.BUFIFONE = function() {
    return this.getToken(vlogParser.BUFIFONE, 0);
};

Enable_gatetypeContext.prototype.NOTIFZERO = function() {
    return this.getToken(vlogParser.NOTIFZERO, 0);
};

Enable_gatetypeContext.prototype.NOTIFONE = function() {
    return this.getToken(vlogParser.NOTIFONE, 0);
};

Enable_gatetypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEnable_gatetype(this);
	}
};

Enable_gatetypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEnable_gatetype(this);
	}
};




vlogParser.Enable_gatetypeContext = Enable_gatetypeContext;

vlogParser.prototype.enable_gatetype = function() {

    var localctx = new Enable_gatetypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, vlogParser.RULE_enable_gatetype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2265;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.BUFIFZERO || _la===vlogParser.BUFIFONE || _la===vlogParser.NOTIFZERO || _la===vlogParser.NOTIFONE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mos_switchtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_mos_switchtype;
    return this;
}

Mos_switchtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mos_switchtypeContext.prototype.constructor = Mos_switchtypeContext;

Mos_switchtypeContext.prototype.NMOS = function() {
    return this.getToken(vlogParser.NMOS, 0);
};

Mos_switchtypeContext.prototype.PMOS = function() {
    return this.getToken(vlogParser.PMOS, 0);
};

Mos_switchtypeContext.prototype.RNMOS = function() {
    return this.getToken(vlogParser.RNMOS, 0);
};

Mos_switchtypeContext.prototype.RPMOS = function() {
    return this.getToken(vlogParser.RPMOS, 0);
};

Mos_switchtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMos_switchtype(this);
	}
};

Mos_switchtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMos_switchtype(this);
	}
};




vlogParser.Mos_switchtypeContext = Mos_switchtypeContext;

vlogParser.prototype.mos_switchtype = function() {

    var localctx = new Mos_switchtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, vlogParser.RULE_mos_switchtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2267;
        _la = this._input.LA(1);
        if(!(((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (vlogParser.NMOS - 121)) | (1 << (vlogParser.PMOS - 121)) | (1 << (vlogParser.RNMOS - 121)) | (1 << (vlogParser.RPMOS - 121)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function N_input_gatetypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_n_input_gatetype;
    return this;
}

N_input_gatetypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
N_input_gatetypeContext.prototype.constructor = N_input_gatetypeContext;

N_input_gatetypeContext.prototype.AND = function() {
    return this.getToken(vlogParser.AND, 0);
};

N_input_gatetypeContext.prototype.NAND = function() {
    return this.getToken(vlogParser.NAND, 0);
};

N_input_gatetypeContext.prototype.OR = function() {
    return this.getToken(vlogParser.OR, 0);
};

N_input_gatetypeContext.prototype.NOR = function() {
    return this.getToken(vlogParser.NOR, 0);
};

N_input_gatetypeContext.prototype.XOR = function() {
    return this.getToken(vlogParser.XOR, 0);
};

N_input_gatetypeContext.prototype.XNOR = function() {
    return this.getToken(vlogParser.XNOR, 0);
};

N_input_gatetypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterN_input_gatetype(this);
	}
};

N_input_gatetypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitN_input_gatetype(this);
	}
};




vlogParser.N_input_gatetypeContext = N_input_gatetypeContext;

vlogParser.prototype.n_input_gatetype = function() {

    var localctx = new N_input_gatetypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, vlogParser.RULE_n_input_gatetype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2269;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.AND || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (vlogParser.NAND - 119)) | (1 << (vlogParser.NOR - 119)) | (1 << (vlogParser.OR - 119)))) !== 0) || _la===vlogParser.XNOR || _la===vlogParser.XOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function N_output_gatetypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_n_output_gatetype;
    return this;
}

N_output_gatetypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
N_output_gatetypeContext.prototype.constructor = N_output_gatetypeContext;

N_output_gatetypeContext.prototype.BUF = function() {
    return this.getToken(vlogParser.BUF, 0);
};

N_output_gatetypeContext.prototype.NOT = function() {
    return this.getToken(vlogParser.NOT, 0);
};

N_output_gatetypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterN_output_gatetype(this);
	}
};

N_output_gatetypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitN_output_gatetype(this);
	}
};




vlogParser.N_output_gatetypeContext = N_output_gatetypeContext;

vlogParser.prototype.n_output_gatetype = function() {

    var localctx = new N_output_gatetypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, vlogParser.RULE_n_output_gatetype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2271;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.BUF || _la===vlogParser.NOT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pass_en_switchtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pass_en_switchtype;
    return this;
}

Pass_en_switchtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_en_switchtypeContext.prototype.constructor = Pass_en_switchtypeContext;

Pass_en_switchtypeContext.prototype.TRANIFZERO = function() {
    return this.getToken(vlogParser.TRANIFZERO, 0);
};

Pass_en_switchtypeContext.prototype.TRANIFONE = function() {
    return this.getToken(vlogParser.TRANIFONE, 0);
};

Pass_en_switchtypeContext.prototype.RTRANIFONE = function() {
    return this.getToken(vlogParser.RTRANIFONE, 0);
};

Pass_en_switchtypeContext.prototype.RTRANIFZERO = function() {
    return this.getToken(vlogParser.RTRANIFZERO, 0);
};

Pass_en_switchtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPass_en_switchtype(this);
	}
};

Pass_en_switchtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPass_en_switchtype(this);
	}
};




vlogParser.Pass_en_switchtypeContext = Pass_en_switchtypeContext;

vlogParser.prototype.pass_en_switchtype = function() {

    var localctx = new Pass_en_switchtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, vlogParser.RULE_pass_en_switchtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2273;
        _la = this._input.LA(1);
        if(!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vlogParser.RTRANIFZERO - 148)) | (1 << (vlogParser.RTRANIFONE - 148)) | (1 << (vlogParser.TRANIFZERO - 148)) | (1 << (vlogParser.TRANIFONE - 148)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pass_switchtypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pass_switchtype;
    return this;
}

Pass_switchtypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_switchtypeContext.prototype.constructor = Pass_switchtypeContext;

Pass_switchtypeContext.prototype.TRAN = function() {
    return this.getToken(vlogParser.TRAN, 0);
};

Pass_switchtypeContext.prototype.RTRAN = function() {
    return this.getToken(vlogParser.RTRAN, 0);
};

Pass_switchtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPass_switchtype(this);
	}
};

Pass_switchtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPass_switchtype(this);
	}
};




vlogParser.Pass_switchtypeContext = Pass_switchtypeContext;

vlogParser.prototype.pass_switchtype = function() {

    var localctx = new Pass_switchtypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, vlogParser.RULE_pass_switchtype);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2275;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.RTRAN || _la===vlogParser.TRAN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_instantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_instantiation;
    return this;
}

Module_instantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_instantiationContext.prototype.constructor = Module_instantiationContext;

Module_instantiationContext.prototype.module_identifier = function() {
    return this.getTypedRuleContext(Module_identifierContext,0);
};

Module_instantiationContext.prototype.module_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_instanceContext);
    } else {
        return this.getTypedRuleContext(Module_instanceContext,i);
    }
};

Module_instantiationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Module_instantiationContext.prototype.parameter_value_assignment = function() {
    return this.getTypedRuleContext(Parameter_value_assignmentContext,0);
};

Module_instantiationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Module_instantiationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_instantiation(this);
	}
};

Module_instantiationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_instantiation(this);
	}
};




vlogParser.Module_instantiationContext = Module_instantiationContext;

vlogParser.prototype.module_instantiation = function() {

    var localctx = new Module_instantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, vlogParser.RULE_module_instantiation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2277;
        this.module_identifier();
        this.state = 2279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.HA) {
            this.state = 2278;
            this.parameter_value_assignment();
        }

        this.state = 2281;
        this.module_instance();
        this.state = 2286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2282;
            this.match(vlogParser.CO);
            this.state = 2283;
            this.module_instance();
            this.state = 2288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2289;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_value_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parameter_value_assignment;
    return this;
}

Parameter_value_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_value_assignmentContext.prototype.constructor = Parameter_value_assignmentContext;

Parameter_value_assignmentContext.prototype.HA = function() {
    return this.getToken(vlogParser.HA, 0);
};

Parameter_value_assignmentContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Parameter_value_assignmentContext.prototype.list_of_parameter_assignments = function() {
    return this.getTypedRuleContext(List_of_parameter_assignmentsContext,0);
};

Parameter_value_assignmentContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Parameter_value_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParameter_value_assignment(this);
	}
};

Parameter_value_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParameter_value_assignment(this);
	}
};




vlogParser.Parameter_value_assignmentContext = Parameter_value_assignmentContext;

vlogParser.prototype.parameter_value_assignment = function() {

    var localctx = new Parameter_value_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, vlogParser.RULE_parameter_value_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2291;
        this.match(vlogParser.HA);
        this.state = 2292;
        this.match(vlogParser.LP);
        this.state = 2293;
        this.list_of_parameter_assignments();
        this.state = 2294;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_parameter_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_parameter_assignments;
    return this;
}

List_of_parameter_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_parameter_assignmentsContext.prototype.constructor = List_of_parameter_assignmentsContext;

List_of_parameter_assignmentsContext.prototype.ordered_parameter_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordered_parameter_assignmentContext);
    } else {
        return this.getTypedRuleContext(Ordered_parameter_assignmentContext,i);
    }
};

List_of_parameter_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_parameter_assignmentsContext.prototype.named_parameter_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Named_parameter_assignmentContext);
    } else {
        return this.getTypedRuleContext(Named_parameter_assignmentContext,i);
    }
};

List_of_parameter_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_parameter_assignments(this);
	}
};

List_of_parameter_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_parameter_assignments(this);
	}
};




vlogParser.List_of_parameter_assignmentsContext = List_of_parameter_assignmentsContext;

vlogParser.prototype.list_of_parameter_assignments = function() {

    var localctx = new List_of_parameter_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, vlogParser.RULE_list_of_parameter_assignments);
    var _la = 0; // Token type
    try {
        this.state = 2312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.LP:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.LC:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2296;
            this.ordered_parameter_assignment();
            this.state = 2301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2297;
                this.match(vlogParser.CO);
                this.state = 2298;
                this.ordered_parameter_assignment();
                this.state = 2303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vlogParser.DT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2304;
            this.named_parameter_assignment();
            this.state = 2309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2305;
                this.match(vlogParser.CO);
                this.state = 2306;
                this.named_parameter_assignment();
                this.state = 2311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ordered_parameter_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_ordered_parameter_assignment;
    return this;
}

Ordered_parameter_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordered_parameter_assignmentContext.prototype.constructor = Ordered_parameter_assignmentContext;

Ordered_parameter_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ordered_parameter_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOrdered_parameter_assignment(this);
	}
};

Ordered_parameter_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOrdered_parameter_assignment(this);
	}
};




vlogParser.Ordered_parameter_assignmentContext = Ordered_parameter_assignmentContext;

vlogParser.prototype.ordered_parameter_assignment = function() {

    var localctx = new Ordered_parameter_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, vlogParser.RULE_ordered_parameter_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2314;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Named_parameter_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_named_parameter_assignment;
    return this;
}

Named_parameter_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_parameter_assignmentContext.prototype.constructor = Named_parameter_assignmentContext;

Named_parameter_assignmentContext.prototype.DT = function() {
    return this.getToken(vlogParser.DT, 0);
};

Named_parameter_assignmentContext.prototype.parameter_identifier = function() {
    return this.getTypedRuleContext(Parameter_identifierContext,0);
};

Named_parameter_assignmentContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Named_parameter_assignmentContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Named_parameter_assignmentContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

Named_parameter_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNamed_parameter_assignment(this);
	}
};

Named_parameter_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNamed_parameter_assignment(this);
	}
};




vlogParser.Named_parameter_assignmentContext = Named_parameter_assignmentContext;

vlogParser.prototype.named_parameter_assignment = function() {

    var localctx = new Named_parameter_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, vlogParser.RULE_named_parameter_assignment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2316;
        this.match(vlogParser.DT);
        this.state = 2317;
        this.parameter_identifier();
        this.state = 2318;
        this.match(vlogParser.LP);
        this.state = 2320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
            this.state = 2319;
            this.mintypmax_expression();
        }

        this.state = 2322;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_instance;
    return this;
}

Module_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_instanceContext.prototype.constructor = Module_instanceContext;

Module_instanceContext.prototype.name_of_module_instance = function() {
    return this.getTypedRuleContext(Name_of_module_instanceContext,0);
};

Module_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Module_instanceContext.prototype.list_of_port_connections = function() {
    return this.getTypedRuleContext(List_of_port_connectionsContext,0);
};

Module_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Module_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_instance(this);
	}
};

Module_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_instance(this);
	}
};




vlogParser.Module_instanceContext = Module_instanceContext;

vlogParser.prototype.module_instance = function() {

    var localctx = new Module_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, vlogParser.RULE_module_instance);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2324;
        this.name_of_module_instance();
        this.state = 2325;
        this.match(vlogParser.LP);
        this.state = 2326;
        this.list_of_port_connections();
        this.state = 2327;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Name_of_module_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_name_of_module_instance;
    return this;
}

Name_of_module_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_of_module_instanceContext.prototype.constructor = Name_of_module_instanceContext;

Name_of_module_instanceContext.prototype.module_instance_identifier = function() {
    return this.getTypedRuleContext(Module_instance_identifierContext,0);
};

Name_of_module_instanceContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Name_of_module_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterName_of_module_instance(this);
	}
};

Name_of_module_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitName_of_module_instance(this);
	}
};




vlogParser.Name_of_module_instanceContext = Name_of_module_instanceContext;

vlogParser.prototype.name_of_module_instance = function() {

    var localctx = new Name_of_module_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, vlogParser.RULE_name_of_module_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2329;
        this.module_instance_identifier();
        this.state = 2331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 2330;
            this.range_();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_port_connectionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_port_connections;
    return this;
}

List_of_port_connectionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_port_connectionsContext.prototype.constructor = List_of_port_connectionsContext;

List_of_port_connectionsContext.prototype.port_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Port_identifierContext);
    } else {
        return this.getTypedRuleContext(Port_identifierContext,i);
    }
};

List_of_port_connectionsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_port_connectionsContext.prototype.ordered_port_connection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordered_port_connectionContext);
    } else {
        return this.getTypedRuleContext(Ordered_port_connectionContext,i);
    }
};

List_of_port_connectionsContext.prototype.named_port_connection = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Named_port_connectionContext);
    } else {
        return this.getTypedRuleContext(Named_port_connectionContext,i);
    }
};

List_of_port_connectionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_port_connections(this);
	}
};

List_of_port_connectionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_port_connections(this);
	}
};




vlogParser.List_of_port_connectionsContext = List_of_port_connectionsContext;

vlogParser.prototype.list_of_port_connections = function() {

    var localctx = new List_of_port_connectionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, vlogParser.RULE_list_of_port_connections);
    var _la = 0; // Token type
    try {
        this.state = 2357;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2333;
            this.port_identifier();
            this.state = 2338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2334;
                this.match(vlogParser.CO);
                this.state = 2335;
                this.port_identifier();
                this.state = 2340;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2341;
            this.ordered_port_connection();
            this.state = 2346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2342;
                this.match(vlogParser.CO);
                this.state = 2343;
                this.ordered_port_connection();
                this.state = 2348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2349;
            this.named_port_connection();
            this.state = 2354;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2350;
                this.match(vlogParser.CO);
                this.state = 2351;
                this.named_port_connection();
                this.state = 2356;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Ordered_port_connectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_ordered_port_connection;
    return this;
}

Ordered_port_connectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordered_port_connectionContext.prototype.constructor = Ordered_port_connectionContext;

Ordered_port_connectionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Ordered_port_connectionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ordered_port_connectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOrdered_port_connection(this);
	}
};

Ordered_port_connectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOrdered_port_connection(this);
	}
};




vlogParser.Ordered_port_connectionContext = Ordered_port_connectionContext;

vlogParser.prototype.ordered_port_connection = function() {

    var localctx = new Ordered_port_connectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, vlogParser.RULE_ordered_port_connection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2362;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2359;
                this.attribute_instance(); 
            }
            this.state = 2364;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
        }

        this.state = 2366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
            this.state = 2365;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Named_port_connectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_named_port_connection;
    return this;
}

Named_port_connectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_port_connectionContext.prototype.constructor = Named_port_connectionContext;

Named_port_connectionContext.prototype.DT = function() {
    return this.getToken(vlogParser.DT, 0);
};

Named_port_connectionContext.prototype.port_identifier = function() {
    return this.getTypedRuleContext(Port_identifierContext,0);
};

Named_port_connectionContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Named_port_connectionContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Named_port_connectionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Named_port_connectionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Named_port_connectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNamed_port_connection(this);
	}
};

Named_port_connectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNamed_port_connection(this);
	}
};




vlogParser.Named_port_connectionContext = Named_port_connectionContext;

vlogParser.prototype.named_port_connection = function() {

    var localctx = new Named_port_connectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, vlogParser.RULE_named_port_connection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP) {
            this.state = 2368;
            this.attribute_instance();
            this.state = 2373;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2374;
        this.match(vlogParser.DT);
        this.state = 2375;
        this.port_identifier();
        this.state = 2376;
        this.match(vlogParser.LP);
        this.state = 2378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
            this.state = 2377;
            this.expression(0);
        }

        this.state = 2380;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generate_regionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_generate_region;
    return this;
}

Generate_regionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_regionContext.prototype.constructor = Generate_regionContext;

Generate_regionContext.prototype.GENERATE = function() {
    return this.getToken(vlogParser.GENERATE, 0);
};

Generate_regionContext.prototype.ENDGENERATE = function() {
    return this.getToken(vlogParser.ENDGENERATE, 0);
};

Generate_regionContext.prototype.module_or_generate_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_or_generate_itemContext);
    } else {
        return this.getTypedRuleContext(Module_or_generate_itemContext,i);
    }
};

Generate_regionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenerate_region(this);
	}
};

Generate_regionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenerate_region(this);
	}
};




vlogParser.Generate_regionContext = Generate_regionContext;

vlogParser.prototype.generate_region = function() {

    var localctx = new Generate_regionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, vlogParser.RULE_generate_region);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2382;
        this.match(vlogParser.GENERATE);
        this.state = 2386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (vlogParser.ALWAYS - 61)) | (1 << (vlogParser.AND - 61)) | (1 << (vlogParser.ASSIGN - 61)) | (1 << (vlogParser.BUF - 61)) | (1 << (vlogParser.BUFIFZERO - 61)) | (1 << (vlogParser.BUFIFONE - 61)) | (1 << (vlogParser.CASE - 61)) | (1 << (vlogParser.CMOS - 61)) | (1 << (vlogParser.DEFPARAM - 61)) | (1 << (vlogParser.EVENT - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FUNCTION - 93)) | (1 << (vlogParser.GENVAR - 93)) | (1 << (vlogParser.IF - 93)) | (1 << (vlogParser.INITIAL - 93)) | (1 << (vlogParser.INTEGER - 93)) | (1 << (vlogParser.LOCALPARAM - 93)) | (1 << (vlogParser.LOGIC - 93)) | (1 << (vlogParser.NAND - 93)) | (1 << (vlogParser.NMOS - 93)) | (1 << (vlogParser.NOR - 93)) | (1 << (vlogParser.NOT - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (vlogParser.NOTIFZERO - 125)) | (1 << (vlogParser.NOTIFONE - 125)) | (1 << (vlogParser.OR - 125)) | (1 << (vlogParser.PMOS - 125)) | (1 << (vlogParser.PULLDOWN - 125)) | (1 << (vlogParser.PULLUP - 125)) | (1 << (vlogParser.RCMOS - 125)) | (1 << (vlogParser.REAL - 125)) | (1 << (vlogParser.REALTIME - 125)) | (1 << (vlogParser.REG - 125)) | (1 << (vlogParser.RNMOS - 125)) | (1 << (vlogParser.RPMOS - 125)) | (1 << (vlogParser.RTRAN - 125)) | (1 << (vlogParser.RTRANIFZERO - 125)) | (1 << (vlogParser.RTRANIFONE - 125)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TASK - 158)) | (1 << (vlogParser.TIME - 158)) | (1 << (vlogParser.TRAN - 158)) | (1 << (vlogParser.TRANIFZERO - 158)) | (1 << (vlogParser.TRANIFONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.TRIREG - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)) | (1 << (vlogParser.XNOR - 158)) | (1 << (vlogParser.XOR - 158)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2383;
            this.module_or_generate_item();
            this.state = 2388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2389;
        this.match(vlogParser.ENDGENERATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Genvar_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_declaration;
    return this;
}

Genvar_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_declarationContext.prototype.constructor = Genvar_declarationContext;

Genvar_declarationContext.prototype.GENVAR = function() {
    return this.getToken(vlogParser.GENVAR, 0);
};

Genvar_declarationContext.prototype.list_of_genvar_identifiers = function() {
    return this.getTypedRuleContext(List_of_genvar_identifiersContext,0);
};

Genvar_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Genvar_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_declaration(this);
	}
};

Genvar_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_declaration(this);
	}
};




vlogParser.Genvar_declarationContext = Genvar_declarationContext;

vlogParser.prototype.genvar_declaration = function() {

    var localctx = new Genvar_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, vlogParser.RULE_genvar_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2391;
        this.match(vlogParser.GENVAR);
        this.state = 2392;
        this.list_of_genvar_identifiers();
        this.state = 2393;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_genvar_identifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_genvar_identifiers;
    return this;
}

List_of_genvar_identifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_genvar_identifiersContext.prototype.constructor = List_of_genvar_identifiersContext;

List_of_genvar_identifiersContext.prototype.genvar_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Genvar_identifierContext);
    } else {
        return this.getTypedRuleContext(Genvar_identifierContext,i);
    }
};

List_of_genvar_identifiersContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_genvar_identifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_genvar_identifiers(this);
	}
};

List_of_genvar_identifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_genvar_identifiers(this);
	}
};




vlogParser.List_of_genvar_identifiersContext = List_of_genvar_identifiersContext;

vlogParser.prototype.list_of_genvar_identifiers = function() {

    var localctx = new List_of_genvar_identifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, vlogParser.RULE_list_of_genvar_identifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2395;
        this.genvar_identifier();
        this.state = 2400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2396;
            this.match(vlogParser.CO);
            this.state = 2397;
            this.genvar_identifier();
            this.state = 2402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Loop_generate_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_loop_generate_construct;
    return this;
}

Loop_generate_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_generate_constructContext.prototype.constructor = Loop_generate_constructContext;

Loop_generate_constructContext.prototype.FOR = function() {
    return this.getToken(vlogParser.FOR, 0);
};

Loop_generate_constructContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Loop_generate_constructContext.prototype.genvar_initialization = function() {
    return this.getTypedRuleContext(Genvar_initializationContext,0);
};

Loop_generate_constructContext.prototype.SC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.SC);
    } else {
        return this.getToken(vlogParser.SC, i);
    }
};


Loop_generate_constructContext.prototype.genvar_expression = function() {
    return this.getTypedRuleContext(Genvar_expressionContext,0);
};

Loop_generate_constructContext.prototype.genvar_iteration = function() {
    return this.getTypedRuleContext(Genvar_iterationContext,0);
};

Loop_generate_constructContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Loop_generate_constructContext.prototype.generate_block = function() {
    return this.getTypedRuleContext(Generate_blockContext,0);
};

Loop_generate_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLoop_generate_construct(this);
	}
};

Loop_generate_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLoop_generate_construct(this);
	}
};




vlogParser.Loop_generate_constructContext = Loop_generate_constructContext;

vlogParser.prototype.loop_generate_construct = function() {

    var localctx = new Loop_generate_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, vlogParser.RULE_loop_generate_construct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2403;
        this.match(vlogParser.FOR);
        this.state = 2404;
        this.match(vlogParser.LP);
        this.state = 2405;
        this.genvar_initialization();
        this.state = 2406;
        this.match(vlogParser.SC);
        this.state = 2407;
        this.genvar_expression(0);
        this.state = 2408;
        this.match(vlogParser.SC);
        this.state = 2409;
        this.genvar_iteration();
        this.state = 2410;
        this.match(vlogParser.RP);
        this.state = 2411;
        this.generate_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Genvar_initializationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_initialization;
    return this;
}

Genvar_initializationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_initializationContext.prototype.constructor = Genvar_initializationContext;

Genvar_initializationContext.prototype.genvar_identifier = function() {
    return this.getTypedRuleContext(Genvar_identifierContext,0);
};

Genvar_initializationContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Genvar_initializationContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Genvar_initializationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_initialization(this);
	}
};

Genvar_initializationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_initialization(this);
	}
};




vlogParser.Genvar_initializationContext = Genvar_initializationContext;

vlogParser.prototype.genvar_initialization = function() {

    var localctx = new Genvar_initializationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, vlogParser.RULE_genvar_initialization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2413;
        this.genvar_identifier();
        this.state = 2414;
        this.match(vlogParser.EQ);
        this.state = 2415;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Genvar_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_expression;
    return this;
}

Genvar_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_expressionContext.prototype.constructor = Genvar_expressionContext;

Genvar_expressionContext.prototype.genvar_primary = function() {
    return this.getTypedRuleContext(Genvar_primaryContext,0);
};

Genvar_expressionContext.prototype.unary_operator = function() {
    return this.getTypedRuleContext(Unary_operatorContext,0);
};

Genvar_expressionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Genvar_expressionContext.prototype.genvar_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Genvar_expressionContext);
    } else {
        return this.getTypedRuleContext(Genvar_expressionContext,i);
    }
};

Genvar_expressionContext.prototype.binary_operator = function() {
    return this.getTypedRuleContext(Binary_operatorContext,0);
};

Genvar_expressionContext.prototype.QM = function() {
    return this.getToken(vlogParser.QM, 0);
};

Genvar_expressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Genvar_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_expression(this);
	}
};

Genvar_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_expression(this);
	}
};



vlogParser.prototype.genvar_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Genvar_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 262;
    this.enterRecursionRule(localctx, 262, vlogParser.RULE_genvar_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2428;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.LC:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.state = 2418;
            this.genvar_primary();
            break;
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
            this.state = 2419;
            this.unary_operator();
            this.state = 2423;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,240,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2420;
                    this.attribute_instance(); 
                }
                this.state = 2425;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,240,this._ctx);
            }

            this.state = 2426;
            this.genvar_primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2454;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,245,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 2452;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Genvar_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_genvar_expression);
                    this.state = 2430;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 2431;
                    this.binary_operator();
                    this.state = 2435;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 2432;
                            this.attribute_instance(); 
                        }
                        this.state = 2437;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
                    }

                    this.state = 2438;
                    this.genvar_expression(3);
                    break;

                case 2:
                    localctx = new Genvar_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_genvar_expression);
                    this.state = 2440;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 2441;
                    this.match(vlogParser.QM);
                    this.state = 2445;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,243,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 2442;
                            this.attribute_instance(); 
                        }
                        this.state = 2447;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,243,this._ctx);
                    }

                    this.state = 2448;
                    this.genvar_expression(0);
                    this.state = 2449;
                    this.match(vlogParser.CL);
                    this.state = 2450;
                    this.genvar_expression(2);
                    break;

                } 
            }
            this.state = 2456;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,245,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Genvar_iterationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_iteration;
    return this;
}

Genvar_iterationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_iterationContext.prototype.constructor = Genvar_iterationContext;

Genvar_iterationContext.prototype.genvar_identifier = function() {
    return this.getTypedRuleContext(Genvar_identifierContext,0);
};

Genvar_iterationContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Genvar_iterationContext.prototype.genvar_expression = function() {
    return this.getTypedRuleContext(Genvar_expressionContext,0);
};

Genvar_iterationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_iteration(this);
	}
};

Genvar_iterationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_iteration(this);
	}
};




vlogParser.Genvar_iterationContext = Genvar_iterationContext;

vlogParser.prototype.genvar_iteration = function() {

    var localctx = new Genvar_iterationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, vlogParser.RULE_genvar_iteration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2457;
        this.genvar_identifier();
        this.state = 2458;
        this.match(vlogParser.EQ);
        this.state = 2459;
        this.genvar_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Genvar_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_primary;
    return this;
}

Genvar_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_primaryContext.prototype.constructor = Genvar_primaryContext;

Genvar_primaryContext.prototype.constant_primary = function() {
    return this.getTypedRuleContext(Constant_primaryContext,0);
};

Genvar_primaryContext.prototype.genvar_identifier = function() {
    return this.getTypedRuleContext(Genvar_identifierContext,0);
};

Genvar_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_primary(this);
	}
};

Genvar_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_primary(this);
	}
};




vlogParser.Genvar_primaryContext = Genvar_primaryContext;

vlogParser.prototype.genvar_primary = function() {

    var localctx = new Genvar_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, vlogParser.RULE_genvar_primary);
    try {
        this.state = 2463;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2461;
            this.constant_primary();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2462;
            this.genvar_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_generate_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_conditional_generate_construct;
    return this;
}

Conditional_generate_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_generate_constructContext.prototype.constructor = Conditional_generate_constructContext;

Conditional_generate_constructContext.prototype.if_generate_construct = function() {
    return this.getTypedRuleContext(If_generate_constructContext,0);
};

Conditional_generate_constructContext.prototype.case_generate_construct = function() {
    return this.getTypedRuleContext(Case_generate_constructContext,0);
};

Conditional_generate_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConditional_generate_construct(this);
	}
};

Conditional_generate_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConditional_generate_construct(this);
	}
};




vlogParser.Conditional_generate_constructContext = Conditional_generate_constructContext;

vlogParser.prototype.conditional_generate_construct = function() {

    var localctx = new Conditional_generate_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, vlogParser.RULE_conditional_generate_construct);
    try {
        this.state = 2467;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 2465;
            this.if_generate_construct();
            break;
        case vlogParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2466;
            this.case_generate_construct();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_generate_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_if_generate_construct;
    return this;
}

If_generate_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_generate_constructContext.prototype.constructor = If_generate_constructContext;

If_generate_constructContext.prototype.IF = function() {
    return this.getToken(vlogParser.IF, 0);
};

If_generate_constructContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

If_generate_constructContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

If_generate_constructContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

If_generate_constructContext.prototype.generate_block_or_null = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generate_block_or_nullContext);
    } else {
        return this.getTypedRuleContext(Generate_block_or_nullContext,i);
    }
};

If_generate_constructContext.prototype.ELSE = function() {
    return this.getToken(vlogParser.ELSE, 0);
};

If_generate_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterIf_generate_construct(this);
	}
};

If_generate_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitIf_generate_construct(this);
	}
};




vlogParser.If_generate_constructContext = If_generate_constructContext;

vlogParser.prototype.if_generate_construct = function() {

    var localctx = new If_generate_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, vlogParser.RULE_if_generate_construct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2469;
        this.match(vlogParser.IF);
        this.state = 2470;
        this.match(vlogParser.LP);
        this.state = 2471;
        this.constant_expression(0);
        this.state = 2472;
        this.match(vlogParser.RP);
        this.state = 2473;
        this.generate_block_or_null();
        this.state = 2476;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
        if(la_===1) {
            this.state = 2474;
            this.match(vlogParser.ELSE);
            this.state = 2475;
            this.generate_block_or_null();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_generate_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_case_generate_construct;
    return this;
}

Case_generate_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_generate_constructContext.prototype.constructor = Case_generate_constructContext;

Case_generate_constructContext.prototype.CASE = function() {
    return this.getToken(vlogParser.CASE, 0);
};

Case_generate_constructContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Case_generate_constructContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Case_generate_constructContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Case_generate_constructContext.prototype.ENDCASE = function() {
    return this.getToken(vlogParser.ENDCASE, 0);
};

Case_generate_constructContext.prototype.case_generate_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Case_generate_itemContext);
    } else {
        return this.getTypedRuleContext(Case_generate_itemContext,i);
    }
};

Case_generate_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCase_generate_construct(this);
	}
};

Case_generate_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCase_generate_construct(this);
	}
};




vlogParser.Case_generate_constructContext = Case_generate_constructContext;

vlogParser.prototype.case_generate_construct = function() {

    var localctx = new Case_generate_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, vlogParser.RULE_case_generate_construct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2478;
        this.match(vlogParser.CASE);
        this.state = 2479;
        this.match(vlogParser.LP);
        this.state = 2480;
        this.constant_expression(0);
        this.state = 2481;
        this.match(vlogParser.RP);
        this.state = 2485;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || _la===vlogParser.DEFAULT || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
            this.state = 2482;
            this.case_generate_item();
            this.state = 2487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2488;
        this.match(vlogParser.ENDCASE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_generate_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_case_generate_item;
    return this;
}

Case_generate_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_generate_itemContext.prototype.constructor = Case_generate_itemContext;

Case_generate_itemContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Case_generate_itemContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Case_generate_itemContext.prototype.generate_block_or_null = function() {
    return this.getTypedRuleContext(Generate_block_or_nullContext,0);
};

Case_generate_itemContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Case_generate_itemContext.prototype.DEFAULT = function() {
    return this.getToken(vlogParser.DEFAULT, 0);
};

Case_generate_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCase_generate_item(this);
	}
};

Case_generate_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCase_generate_item(this);
	}
};




vlogParser.Case_generate_itemContext = Case_generate_itemContext;

vlogParser.prototype.case_generate_item = function() {

    var localctx = new Case_generate_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, vlogParser.RULE_case_generate_item);
    var _la = 0; // Token type
    try {
        this.state = 2506;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.LP:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.LC:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2490;
            this.constant_expression(0);
            this.state = 2495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 2491;
                this.match(vlogParser.CO);
                this.state = 2492;
                this.constant_expression(0);
                this.state = 2497;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2498;
            this.match(vlogParser.CL);
            this.state = 2499;
            this.generate_block_or_null();
            break;
        case vlogParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2501;
            this.match(vlogParser.DEFAULT);
            this.state = 2503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CL) {
                this.state = 2502;
                this.match(vlogParser.CL);
            }

            this.state = 2505;
            this.generate_block_or_null();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generate_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_generate_block;
    return this;
}

Generate_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_blockContext.prototype.constructor = Generate_blockContext;

Generate_blockContext.prototype.module_or_generate_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_or_generate_itemContext);
    } else {
        return this.getTypedRuleContext(Module_or_generate_itemContext,i);
    }
};

Generate_blockContext.prototype.BEGIN = function() {
    return this.getToken(vlogParser.BEGIN, 0);
};

Generate_blockContext.prototype.END = function() {
    return this.getToken(vlogParser.END, 0);
};

Generate_blockContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Generate_blockContext.prototype.generate_block_identifier = function() {
    return this.getTypedRuleContext(Generate_block_identifierContext,0);
};

Generate_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenerate_block(this);
	}
};

Generate_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenerate_block(this);
	}
};




vlogParser.Generate_blockContext = Generate_blockContext;

vlogParser.prototype.generate_block = function() {

    var localctx = new Generate_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, vlogParser.RULE_generate_block);
    var _la = 0; // Token type
    try {
        this.state = 2521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.ALWAYS:
        case vlogParser.AND:
        case vlogParser.ASSIGN:
        case vlogParser.BUF:
        case vlogParser.BUFIFZERO:
        case vlogParser.BUFIFONE:
        case vlogParser.CASE:
        case vlogParser.CMOS:
        case vlogParser.DEFPARAM:
        case vlogParser.EVENT:
        case vlogParser.FOR:
        case vlogParser.FUNCTION:
        case vlogParser.GENVAR:
        case vlogParser.IF:
        case vlogParser.INITIAL:
        case vlogParser.INTEGER:
        case vlogParser.LOCALPARAM:
        case vlogParser.LOGIC:
        case vlogParser.NAND:
        case vlogParser.NMOS:
        case vlogParser.NOR:
        case vlogParser.NOT:
        case vlogParser.NOTIFZERO:
        case vlogParser.NOTIFONE:
        case vlogParser.OR:
        case vlogParser.PMOS:
        case vlogParser.PULLDOWN:
        case vlogParser.PULLUP:
        case vlogParser.RCMOS:
        case vlogParser.REAL:
        case vlogParser.REALTIME:
        case vlogParser.REG:
        case vlogParser.RNMOS:
        case vlogParser.RPMOS:
        case vlogParser.RTRAN:
        case vlogParser.RTRANIFZERO:
        case vlogParser.RTRANIFONE:
        case vlogParser.SUPPLYZERO:
        case vlogParser.SUPPLYONE:
        case vlogParser.TASK:
        case vlogParser.TIME:
        case vlogParser.TRAN:
        case vlogParser.TRANIFZERO:
        case vlogParser.TRANIFONE:
        case vlogParser.TRI:
        case vlogParser.TRIZERO:
        case vlogParser.TRIONE:
        case vlogParser.TRIAND:
        case vlogParser.TRIOR:
        case vlogParser.TRIREG:
        case vlogParser.UWIRE:
        case vlogParser.WAND:
        case vlogParser.WIRE:
        case vlogParser.WOR:
        case vlogParser.XNOR:
        case vlogParser.XOR:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2508;
            this.module_or_generate_item();
            break;
        case vlogParser.BEGIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2509;
            this.match(vlogParser.BEGIN);
            this.state = 2512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CL) {
                this.state = 2510;
                this.match(vlogParser.CL);
                this.state = 2511;
                this.generate_block_identifier();
            }

            this.state = 2517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (vlogParser.ALWAYS - 61)) | (1 << (vlogParser.AND - 61)) | (1 << (vlogParser.ASSIGN - 61)) | (1 << (vlogParser.BUF - 61)) | (1 << (vlogParser.BUFIFZERO - 61)) | (1 << (vlogParser.BUFIFONE - 61)) | (1 << (vlogParser.CASE - 61)) | (1 << (vlogParser.CMOS - 61)) | (1 << (vlogParser.DEFPARAM - 61)) | (1 << (vlogParser.EVENT - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FUNCTION - 93)) | (1 << (vlogParser.GENVAR - 93)) | (1 << (vlogParser.IF - 93)) | (1 << (vlogParser.INITIAL - 93)) | (1 << (vlogParser.INTEGER - 93)) | (1 << (vlogParser.LOCALPARAM - 93)) | (1 << (vlogParser.LOGIC - 93)) | (1 << (vlogParser.NAND - 93)) | (1 << (vlogParser.NMOS - 93)) | (1 << (vlogParser.NOR - 93)) | (1 << (vlogParser.NOT - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (vlogParser.NOTIFZERO - 125)) | (1 << (vlogParser.NOTIFONE - 125)) | (1 << (vlogParser.OR - 125)) | (1 << (vlogParser.PMOS - 125)) | (1 << (vlogParser.PULLDOWN - 125)) | (1 << (vlogParser.PULLUP - 125)) | (1 << (vlogParser.RCMOS - 125)) | (1 << (vlogParser.REAL - 125)) | (1 << (vlogParser.REALTIME - 125)) | (1 << (vlogParser.REG - 125)) | (1 << (vlogParser.RNMOS - 125)) | (1 << (vlogParser.RPMOS - 125)) | (1 << (vlogParser.RTRAN - 125)) | (1 << (vlogParser.RTRANIFZERO - 125)) | (1 << (vlogParser.RTRANIFONE - 125)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vlogParser.SUPPLYZERO - 158)) | (1 << (vlogParser.SUPPLYONE - 158)) | (1 << (vlogParser.TASK - 158)) | (1 << (vlogParser.TIME - 158)) | (1 << (vlogParser.TRAN - 158)) | (1 << (vlogParser.TRANIFZERO - 158)) | (1 << (vlogParser.TRANIFONE - 158)) | (1 << (vlogParser.TRI - 158)) | (1 << (vlogParser.TRIZERO - 158)) | (1 << (vlogParser.TRIONE - 158)) | (1 << (vlogParser.TRIAND - 158)) | (1 << (vlogParser.TRIOR - 158)) | (1 << (vlogParser.TRIREG - 158)) | (1 << (vlogParser.UWIRE - 158)) | (1 << (vlogParser.WAND - 158)) | (1 << (vlogParser.WIRE - 158)) | (1 << (vlogParser.WOR - 158)) | (1 << (vlogParser.XNOR - 158)) | (1 << (vlogParser.XOR - 158)))) !== 0) || ((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 2514;
                this.module_or_generate_item();
                this.state = 2519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2520;
            this.match(vlogParser.END);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generate_block_or_nullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_generate_block_or_null;
    return this;
}

Generate_block_or_nullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_block_or_nullContext.prototype.constructor = Generate_block_or_nullContext;

Generate_block_or_nullContext.prototype.generate_block = function() {
    return this.getTypedRuleContext(Generate_blockContext,0);
};

Generate_block_or_nullContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Generate_block_or_nullContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenerate_block_or_null(this);
	}
};

Generate_block_or_nullContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenerate_block_or_null(this);
	}
};




vlogParser.Generate_block_or_nullContext = Generate_block_or_nullContext;

vlogParser.prototype.generate_block_or_null = function() {

    var localctx = new Generate_block_or_nullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, vlogParser.RULE_generate_block_or_null);
    try {
        this.state = 2525;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.ALWAYS:
        case vlogParser.AND:
        case vlogParser.ASSIGN:
        case vlogParser.BEGIN:
        case vlogParser.BUF:
        case vlogParser.BUFIFZERO:
        case vlogParser.BUFIFONE:
        case vlogParser.CASE:
        case vlogParser.CMOS:
        case vlogParser.DEFPARAM:
        case vlogParser.EVENT:
        case vlogParser.FOR:
        case vlogParser.FUNCTION:
        case vlogParser.GENVAR:
        case vlogParser.IF:
        case vlogParser.INITIAL:
        case vlogParser.INTEGER:
        case vlogParser.LOCALPARAM:
        case vlogParser.LOGIC:
        case vlogParser.NAND:
        case vlogParser.NMOS:
        case vlogParser.NOR:
        case vlogParser.NOT:
        case vlogParser.NOTIFZERO:
        case vlogParser.NOTIFONE:
        case vlogParser.OR:
        case vlogParser.PMOS:
        case vlogParser.PULLDOWN:
        case vlogParser.PULLUP:
        case vlogParser.RCMOS:
        case vlogParser.REAL:
        case vlogParser.REALTIME:
        case vlogParser.REG:
        case vlogParser.RNMOS:
        case vlogParser.RPMOS:
        case vlogParser.RTRAN:
        case vlogParser.RTRANIFZERO:
        case vlogParser.RTRANIFONE:
        case vlogParser.SUPPLYZERO:
        case vlogParser.SUPPLYONE:
        case vlogParser.TASK:
        case vlogParser.TIME:
        case vlogParser.TRAN:
        case vlogParser.TRANIFZERO:
        case vlogParser.TRANIFONE:
        case vlogParser.TRI:
        case vlogParser.TRIZERO:
        case vlogParser.TRIONE:
        case vlogParser.TRIAND:
        case vlogParser.TRIOR:
        case vlogParser.TRIREG:
        case vlogParser.UWIRE:
        case vlogParser.WAND:
        case vlogParser.WIRE:
        case vlogParser.WOR:
        case vlogParser.XNOR:
        case vlogParser.XOR:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2523;
            this.generate_block();
            break;
        case vlogParser.SC:
            this.enterOuterAlt(localctx, 2);
            this.state = 2524;
            this.match(vlogParser.SC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_declaration;
    return this;
}

Udp_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_declarationContext.prototype.constructor = Udp_declarationContext;

Udp_declarationContext.prototype.PRIMITIVE = function() {
    return this.getToken(vlogParser.PRIMITIVE, 0);
};

Udp_declarationContext.prototype.udp_identifier = function() {
    return this.getTypedRuleContext(Udp_identifierContext,0);
};

Udp_declarationContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Udp_declarationContext.prototype.udp_port_list = function() {
    return this.getTypedRuleContext(Udp_port_listContext,0);
};

Udp_declarationContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Udp_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Udp_declarationContext.prototype.udp_body = function() {
    return this.getTypedRuleContext(Udp_bodyContext,0);
};

Udp_declarationContext.prototype.ENDPRIMITIVE = function() {
    return this.getToken(vlogParser.ENDPRIMITIVE, 0);
};

Udp_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Udp_declarationContext.prototype.udp_port_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Udp_port_declarationContext);
    } else {
        return this.getTypedRuleContext(Udp_port_declarationContext,i);
    }
};

Udp_declarationContext.prototype.udp_declaration_port_list = function() {
    return this.getTypedRuleContext(Udp_declaration_port_listContext,0);
};

Udp_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_declaration(this);
	}
};

Udp_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_declaration(this);
	}
};




vlogParser.Udp_declarationContext = Udp_declarationContext;

vlogParser.prototype.udp_declaration = function() {

    var localctx = new Udp_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, vlogParser.RULE_udp_declaration);
    var _la = 0; // Token type
    try {
        this.state = 2563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2527;
                this.attribute_instance();
                this.state = 2532;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2533;
            this.match(vlogParser.PRIMITIVE);
            this.state = 2534;
            this.udp_identifier();
            this.state = 2535;
            this.match(vlogParser.LP);
            this.state = 2536;
            this.udp_port_list();
            this.state = 2537;
            this.match(vlogParser.RP);
            this.state = 2538;
            this.match(vlogParser.SC);
            this.state = 2542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP || _la===vlogParser.INPUT || _la===vlogParser.OUTPUT || _la===vlogParser.REG) {
                this.state = 2539;
                this.udp_port_declaration();
                this.state = 2544;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2545;
            this.udp_body();
            this.state = 2546;
            this.match(vlogParser.ENDPRIMITIVE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2548;
                this.attribute_instance();
                this.state = 2553;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2554;
            this.match(vlogParser.PRIMITIVE);
            this.state = 2555;
            this.udp_identifier();
            this.state = 2556;
            this.match(vlogParser.LP);
            this.state = 2557;
            this.udp_declaration_port_list();
            this.state = 2558;
            this.match(vlogParser.RP);
            this.state = 2559;
            this.match(vlogParser.SC);
            this.state = 2560;
            this.udp_body();
            this.state = 2561;
            this.match(vlogParser.ENDPRIMITIVE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_port_list;
    return this;
}

Udp_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_port_listContext.prototype.constructor = Udp_port_listContext;

Udp_port_listContext.prototype.output_port_identifier = function() {
    return this.getTypedRuleContext(Output_port_identifierContext,0);
};

Udp_port_listContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Udp_port_listContext.prototype.input_port_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_port_identifierContext);
    } else {
        return this.getTypedRuleContext(Input_port_identifierContext,i);
    }
};

Udp_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_port_list(this);
	}
};

Udp_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_port_list(this);
	}
};




vlogParser.Udp_port_listContext = Udp_port_listContext;

vlogParser.prototype.udp_port_list = function() {

    var localctx = new Udp_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, vlogParser.RULE_udp_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2565;
        this.output_port_identifier();
        this.state = 2566;
        this.match(vlogParser.CO);
        this.state = 2567;
        this.input_port_identifier();
        this.state = 2572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2568;
            this.match(vlogParser.CO);
            this.state = 2569;
            this.input_port_identifier();
            this.state = 2574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_declaration_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_declaration_port_list;
    return this;
}

Udp_declaration_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_declaration_port_listContext.prototype.constructor = Udp_declaration_port_listContext;

Udp_declaration_port_listContext.prototype.udp_output_declaration = function() {
    return this.getTypedRuleContext(Udp_output_declarationContext,0);
};

Udp_declaration_port_listContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Udp_declaration_port_listContext.prototype.udp_input_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Udp_input_declarationContext);
    } else {
        return this.getTypedRuleContext(Udp_input_declarationContext,i);
    }
};

Udp_declaration_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_declaration_port_list(this);
	}
};

Udp_declaration_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_declaration_port_list(this);
	}
};




vlogParser.Udp_declaration_port_listContext = Udp_declaration_port_listContext;

vlogParser.prototype.udp_declaration_port_list = function() {

    var localctx = new Udp_declaration_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, vlogParser.RULE_udp_declaration_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2575;
        this.udp_output_declaration();
        this.state = 2576;
        this.match(vlogParser.CO);
        this.state = 2577;
        this.udp_input_declaration();
        this.state = 2582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2578;
            this.match(vlogParser.CO);
            this.state = 2579;
            this.udp_input_declaration();
            this.state = 2584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_port_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_port_declaration;
    return this;
}

Udp_port_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_port_declarationContext.prototype.constructor = Udp_port_declarationContext;

Udp_port_declarationContext.prototype.udp_output_declaration = function() {
    return this.getTypedRuleContext(Udp_output_declarationContext,0);
};

Udp_port_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Udp_port_declarationContext.prototype.udp_input_declaration = function() {
    return this.getTypedRuleContext(Udp_input_declarationContext,0);
};

Udp_port_declarationContext.prototype.udp_reg_declaration = function() {
    return this.getTypedRuleContext(Udp_reg_declarationContext,0);
};

Udp_port_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_port_declaration(this);
	}
};

Udp_port_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_port_declaration(this);
	}
};




vlogParser.Udp_port_declarationContext = Udp_port_declarationContext;

vlogParser.prototype.udp_port_declaration = function() {

    var localctx = new Udp_port_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, vlogParser.RULE_udp_port_declaration);
    try {
        this.state = 2594;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2585;
            this.udp_output_declaration();
            this.state = 2586;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2588;
            this.udp_input_declaration();
            this.state = 2589;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2591;
            this.udp_reg_declaration();
            this.state = 2592;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_output_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_output_declaration;
    return this;
}

Udp_output_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_output_declarationContext.prototype.constructor = Udp_output_declarationContext;

Udp_output_declarationContext.prototype.OUTPUT = function() {
    return this.getToken(vlogParser.OUTPUT, 0);
};

Udp_output_declarationContext.prototype.port_identifier = function() {
    return this.getTypedRuleContext(Port_identifierContext,0);
};

Udp_output_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Udp_output_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Udp_output_declarationContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Udp_output_declarationContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Udp_output_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_output_declaration(this);
	}
};

Udp_output_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_output_declaration(this);
	}
};




vlogParser.Udp_output_declarationContext = Udp_output_declarationContext;

vlogParser.prototype.udp_output_declaration = function() {

    var localctx = new Udp_output_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, vlogParser.RULE_udp_output_declaration);
    var _la = 0; // Token type
    try {
        this.state = 2617;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2596;
                this.attribute_instance();
                this.state = 2601;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2602;
            this.match(vlogParser.OUTPUT);
            this.state = 2603;
            this.port_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2607;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2604;
                this.attribute_instance();
                this.state = 2609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2610;
            this.match(vlogParser.OUTPUT);
            this.state = 2611;
            this.match(vlogParser.REG);
            this.state = 2612;
            this.port_identifier();
            this.state = 2615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.EQ) {
                this.state = 2613;
                this.match(vlogParser.EQ);
                this.state = 2614;
                this.constant_expression(0);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_input_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_input_declaration;
    return this;
}

Udp_input_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_input_declarationContext.prototype.constructor = Udp_input_declarationContext;

Udp_input_declarationContext.prototype.INPUT = function() {
    return this.getToken(vlogParser.INPUT, 0);
};

Udp_input_declarationContext.prototype.list_of_port_identifiers = function() {
    return this.getTypedRuleContext(List_of_port_identifiersContext,0);
};

Udp_input_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Udp_input_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_input_declaration(this);
	}
};

Udp_input_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_input_declaration(this);
	}
};




vlogParser.Udp_input_declarationContext = Udp_input_declarationContext;

vlogParser.prototype.udp_input_declaration = function() {

    var localctx = new Udp_input_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, vlogParser.RULE_udp_input_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2622;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP) {
            this.state = 2619;
            this.attribute_instance();
            this.state = 2624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2625;
        this.match(vlogParser.INPUT);
        this.state = 2626;
        this.list_of_port_identifiers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_reg_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_reg_declaration;
    return this;
}

Udp_reg_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_reg_declarationContext.prototype.constructor = Udp_reg_declarationContext;

Udp_reg_declarationContext.prototype.REG = function() {
    return this.getToken(vlogParser.REG, 0);
};

Udp_reg_declarationContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

Udp_reg_declarationContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Udp_reg_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_reg_declaration(this);
	}
};

Udp_reg_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_reg_declaration(this);
	}
};




vlogParser.Udp_reg_declarationContext = Udp_reg_declarationContext;

vlogParser.prototype.udp_reg_declaration = function() {

    var localctx = new Udp_reg_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, vlogParser.RULE_udp_reg_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2631;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP) {
            this.state = 2628;
            this.attribute_instance();
            this.state = 2633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2634;
        this.match(vlogParser.REG);
        this.state = 2635;
        this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_body;
    return this;
}

Udp_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_bodyContext.prototype.constructor = Udp_bodyContext;

Udp_bodyContext.prototype.combinational_body = function() {
    return this.getTypedRuleContext(Combinational_bodyContext,0);
};

Udp_bodyContext.prototype.sequential_body = function() {
    return this.getTypedRuleContext(Sequential_bodyContext,0);
};

Udp_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_body(this);
	}
};

Udp_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_body(this);
	}
};




vlogParser.Udp_bodyContext = Udp_bodyContext;

vlogParser.prototype.udp_body = function() {

    var localctx = new Udp_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, vlogParser.RULE_udp_body);
    try {
        this.state = 2639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2637;
            this.combinational_body();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2638;
            this.sequential_body();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Combinational_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_combinational_body;
    return this;
}

Combinational_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Combinational_bodyContext.prototype.constructor = Combinational_bodyContext;

Combinational_bodyContext.prototype.TABLE = function() {
    return this.getToken(vlogParser.TABLE, 0);
};

Combinational_bodyContext.prototype.ENDTABLE = function() {
    return this.getToken(vlogParser.ENDTABLE, 0);
};

Combinational_bodyContext.prototype.combinational_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Combinational_entryContext);
    } else {
        return this.getTypedRuleContext(Combinational_entryContext,i);
    }
};

Combinational_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCombinational_body(this);
	}
};

Combinational_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCombinational_body(this);
	}
};




vlogParser.Combinational_bodyContext = Combinational_bodyContext;

vlogParser.prototype.combinational_body = function() {

    var localctx = new Combinational_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, vlogParser.RULE_combinational_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2641;
        this.match(vlogParser.TABLE);
        this.state = 2645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CL || _la===vlogParser.OUTPUT_OR_LEVEL_SYMBOL || _la===vlogParser.LEVEL_ONLY_SYMBOL) {
            this.state = 2642;
            this.combinational_entry();
            this.state = 2647;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2648;
        this.match(vlogParser.ENDTABLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Combinational_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_combinational_entry;
    return this;
}

Combinational_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Combinational_entryContext.prototype.constructor = Combinational_entryContext;

Combinational_entryContext.prototype.level_input_list = function() {
    return this.getTypedRuleContext(Level_input_listContext,0);
};

Combinational_entryContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Combinational_entryContext.prototype.output_symbol = function() {
    return this.getTypedRuleContext(Output_symbolContext,0);
};

Combinational_entryContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Combinational_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCombinational_entry(this);
	}
};

Combinational_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCombinational_entry(this);
	}
};




vlogParser.Combinational_entryContext = Combinational_entryContext;

vlogParser.prototype.combinational_entry = function() {

    var localctx = new Combinational_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, vlogParser.RULE_combinational_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2650;
        this.level_input_list();
        this.state = 2651;
        this.match(vlogParser.CL);
        this.state = 2652;
        this.output_symbol();
        this.state = 2653;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sequential_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_sequential_body;
    return this;
}

Sequential_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequential_bodyContext.prototype.constructor = Sequential_bodyContext;

Sequential_bodyContext.prototype.TABLE = function() {
    return this.getToken(vlogParser.TABLE, 0);
};

Sequential_bodyContext.prototype.ENDTABLE = function() {
    return this.getToken(vlogParser.ENDTABLE, 0);
};

Sequential_bodyContext.prototype.udp_initial_statement = function() {
    return this.getTypedRuleContext(Udp_initial_statementContext,0);
};

Sequential_bodyContext.prototype.sequential_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequential_entryContext);
    } else {
        return this.getTypedRuleContext(Sequential_entryContext,i);
    }
};

Sequential_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSequential_body(this);
	}
};

Sequential_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSequential_body(this);
	}
};




vlogParser.Sequential_bodyContext = Sequential_bodyContext;

vlogParser.prototype.sequential_body = function() {

    var localctx = new Sequential_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, vlogParser.RULE_sequential_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.INITIAL) {
            this.state = 2655;
            this.udp_initial_statement();
        }

        this.state = 2658;
        this.match(vlogParser.TABLE);
        this.state = 2662;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LP || _la===vlogParser.CL || ((((_la - 226)) & ~0x1f) == 0 && ((1 << (_la - 226)) & ((1 << (vlogParser.OUTPUT_OR_LEVEL_SYMBOL - 226)) | (1 << (vlogParser.LEVEL_ONLY_SYMBOL - 226)) | (1 << (vlogParser.EDGE_SYMBOL - 226)))) !== 0)) {
            this.state = 2659;
            this.sequential_entry();
            this.state = 2664;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2665;
        this.match(vlogParser.ENDTABLE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_initial_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_initial_statement;
    return this;
}

Udp_initial_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_initial_statementContext.prototype.constructor = Udp_initial_statementContext;

Udp_initial_statementContext.prototype.INITIAL = function() {
    return this.getToken(vlogParser.INITIAL, 0);
};

Udp_initial_statementContext.prototype.output_port_identifier = function() {
    return this.getTypedRuleContext(Output_port_identifierContext,0);
};

Udp_initial_statementContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Udp_initial_statementContext.prototype.init_val = function() {
    return this.getTypedRuleContext(Init_valContext,0);
};

Udp_initial_statementContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Udp_initial_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_initial_statement(this);
	}
};

Udp_initial_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_initial_statement(this);
	}
};




vlogParser.Udp_initial_statementContext = Udp_initial_statementContext;

vlogParser.prototype.udp_initial_statement = function() {

    var localctx = new Udp_initial_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, vlogParser.RULE_udp_initial_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2667;
        this.match(vlogParser.INITIAL);
        this.state = 2668;
        this.output_port_identifier();
        this.state = 2669;
        this.match(vlogParser.EQ);
        this.state = 2670;
        this.init_val();
        this.state = 2671;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Init_valContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_init_val;
    return this;
}

Init_valContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Init_valContext.prototype.constructor = Init_valContext;

Init_valContext.prototype.BINARY_NUMBER = function() {
    return this.getToken(vlogParser.BINARY_NUMBER, 0);
};

Init_valContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(vlogParser.DECIMAL_NUMBER, 0);
};

Init_valContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInit_val(this);
	}
};

Init_valContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInit_val(this);
	}
};




vlogParser.Init_valContext = Init_valContext;

vlogParser.prototype.init_val = function() {

    var localctx = new Init_valContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, vlogParser.RULE_init_val);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2673;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.DECIMAL_NUMBER || _la===vlogParser.BINARY_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sequential_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_sequential_entry;
    return this;
}

Sequential_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequential_entryContext.prototype.constructor = Sequential_entryContext;

Sequential_entryContext.prototype.seq_input_list = function() {
    return this.getTypedRuleContext(Seq_input_listContext,0);
};

Sequential_entryContext.prototype.CL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CL);
    } else {
        return this.getToken(vlogParser.CL, i);
    }
};


Sequential_entryContext.prototype.current_state = function() {
    return this.getTypedRuleContext(Current_stateContext,0);
};

Sequential_entryContext.prototype.next_state = function() {
    return this.getTypedRuleContext(Next_stateContext,0);
};

Sequential_entryContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Sequential_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSequential_entry(this);
	}
};

Sequential_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSequential_entry(this);
	}
};




vlogParser.Sequential_entryContext = Sequential_entryContext;

vlogParser.prototype.sequential_entry = function() {

    var localctx = new Sequential_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, vlogParser.RULE_sequential_entry);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2675;
        this.seq_input_list();
        this.state = 2676;
        this.match(vlogParser.CL);
        this.state = 2677;
        this.current_state();
        this.state = 2678;
        this.match(vlogParser.CL);
        this.state = 2679;
        this.next_state();
        this.state = 2680;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Seq_input_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_seq_input_list;
    return this;
}

Seq_input_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seq_input_listContext.prototype.constructor = Seq_input_listContext;

Seq_input_listContext.prototype.level_input_list = function() {
    return this.getTypedRuleContext(Level_input_listContext,0);
};

Seq_input_listContext.prototype.edge_input_list = function() {
    return this.getTypedRuleContext(Edge_input_listContext,0);
};

Seq_input_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSeq_input_list(this);
	}
};

Seq_input_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSeq_input_list(this);
	}
};




vlogParser.Seq_input_listContext = Seq_input_listContext;

vlogParser.prototype.seq_input_list = function() {

    var localctx = new Seq_input_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, vlogParser.RULE_seq_input_list);
    try {
        this.state = 2684;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2682;
            this.level_input_list();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2683;
            this.edge_input_list();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Level_input_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_level_input_list;
    return this;
}

Level_input_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Level_input_listContext.prototype.constructor = Level_input_listContext;

Level_input_listContext.prototype.level_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Level_symbolContext);
    } else {
        return this.getTypedRuleContext(Level_symbolContext,i);
    }
};

Level_input_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLevel_input_list(this);
	}
};

Level_input_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLevel_input_list(this);
	}
};




vlogParser.Level_input_listContext = Level_input_listContext;

vlogParser.prototype.level_input_list = function() {

    var localctx = new Level_input_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, vlogParser.RULE_level_input_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.OUTPUT_OR_LEVEL_SYMBOL || _la===vlogParser.LEVEL_ONLY_SYMBOL) {
            this.state = 2686;
            this.level_symbol();
            this.state = 2691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_input_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_input_list;
    return this;
}

Edge_input_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_input_listContext.prototype.constructor = Edge_input_listContext;

Edge_input_listContext.prototype.edge_indicator = function() {
    return this.getTypedRuleContext(Edge_indicatorContext,0);
};

Edge_input_listContext.prototype.level_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Level_symbolContext);
    } else {
        return this.getTypedRuleContext(Level_symbolContext,i);
    }
};

Edge_input_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_input_list(this);
	}
};

Edge_input_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_input_list(this);
	}
};




vlogParser.Edge_input_listContext = Edge_input_listContext;

vlogParser.prototype.edge_input_list = function() {

    var localctx = new Edge_input_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, vlogParser.RULE_edge_input_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2695;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.OUTPUT_OR_LEVEL_SYMBOL || _la===vlogParser.LEVEL_ONLY_SYMBOL) {
            this.state = 2692;
            this.level_symbol();
            this.state = 2697;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2698;
        this.edge_indicator();
        this.state = 2702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.OUTPUT_OR_LEVEL_SYMBOL || _la===vlogParser.LEVEL_ONLY_SYMBOL) {
            this.state = 2699;
            this.level_symbol();
            this.state = 2704;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_indicatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_indicator;
    return this;
}

Edge_indicatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_indicatorContext.prototype.constructor = Edge_indicatorContext;

Edge_indicatorContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Edge_indicatorContext.prototype.level_symbol = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Level_symbolContext);
    } else {
        return this.getTypedRuleContext(Level_symbolContext,i);
    }
};

Edge_indicatorContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Edge_indicatorContext.prototype.edge_symbol = function() {
    return this.getTypedRuleContext(Edge_symbolContext,0);
};

Edge_indicatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_indicator(this);
	}
};

Edge_indicatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_indicator(this);
	}
};




vlogParser.Edge_indicatorContext = Edge_indicatorContext;

vlogParser.prototype.edge_indicator = function() {

    var localctx = new Edge_indicatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, vlogParser.RULE_edge_indicator);
    try {
        this.state = 2711;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
            this.enterOuterAlt(localctx, 1);
            this.state = 2705;
            this.match(vlogParser.LP);
            this.state = 2706;
            this.level_symbol();
            this.state = 2707;
            this.level_symbol();
            this.state = 2708;
            this.match(vlogParser.RP);
            break;
        case vlogParser.EDGE_SYMBOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2710;
            this.edge_symbol();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Current_stateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_current_state;
    return this;
}

Current_stateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Current_stateContext.prototype.constructor = Current_stateContext;

Current_stateContext.prototype.level_symbol = function() {
    return this.getTypedRuleContext(Level_symbolContext,0);
};

Current_stateContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCurrent_state(this);
	}
};

Current_stateContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCurrent_state(this);
	}
};




vlogParser.Current_stateContext = Current_stateContext;

vlogParser.prototype.current_state = function() {

    var localctx = new Current_stateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, vlogParser.RULE_current_state);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2713;
        this.level_symbol();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Next_stateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_next_state;
    return this;
}

Next_stateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Next_stateContext.prototype.constructor = Next_stateContext;

Next_stateContext.prototype.output_symbol = function() {
    return this.getTypedRuleContext(Output_symbolContext,0);
};

Next_stateContext.prototype.MI = function() {
    return this.getToken(vlogParser.MI, 0);
};

Next_stateContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNext_state(this);
	}
};

Next_stateContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNext_state(this);
	}
};




vlogParser.Next_stateContext = Next_stateContext;

vlogParser.prototype.next_state = function() {

    var localctx = new Next_stateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, vlogParser.RULE_next_state);
    try {
        this.state = 2717;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.OUTPUT_OR_LEVEL_SYMBOL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2715;
            this.output_symbol();
            break;
        case vlogParser.MI:
            this.enterOuterAlt(localctx, 2);
            this.state = 2716;
            this.match(vlogParser.MI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_symbol;
    return this;
}

Output_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_symbolContext.prototype.constructor = Output_symbolContext;

Output_symbolContext.prototype.OUTPUT_OR_LEVEL_SYMBOL = function() {
    return this.getToken(vlogParser.OUTPUT_OR_LEVEL_SYMBOL, 0);
};

Output_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_symbol(this);
	}
};

Output_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_symbol(this);
	}
};




vlogParser.Output_symbolContext = Output_symbolContext;

vlogParser.prototype.output_symbol = function() {

    var localctx = new Output_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, vlogParser.RULE_output_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2719;
        this.match(vlogParser.OUTPUT_OR_LEVEL_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Level_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_level_symbol;
    return this;
}

Level_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Level_symbolContext.prototype.constructor = Level_symbolContext;

Level_symbolContext.prototype.OUTPUT_OR_LEVEL_SYMBOL = function() {
    return this.getToken(vlogParser.OUTPUT_OR_LEVEL_SYMBOL, 0);
};

Level_symbolContext.prototype.LEVEL_ONLY_SYMBOL = function() {
    return this.getToken(vlogParser.LEVEL_ONLY_SYMBOL, 0);
};

Level_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLevel_symbol(this);
	}
};

Level_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLevel_symbol(this);
	}
};




vlogParser.Level_symbolContext = Level_symbolContext;

vlogParser.prototype.level_symbol = function() {

    var localctx = new Level_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, vlogParser.RULE_level_symbol);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2721;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.OUTPUT_OR_LEVEL_SYMBOL || _la===vlogParser.LEVEL_ONLY_SYMBOL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_symbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_symbol;
    return this;
}

Edge_symbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_symbolContext.prototype.constructor = Edge_symbolContext;

Edge_symbolContext.prototype.EDGE_SYMBOL = function() {
    return this.getToken(vlogParser.EDGE_SYMBOL, 0);
};

Edge_symbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_symbol(this);
	}
};

Edge_symbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_symbol(this);
	}
};




vlogParser.Edge_symbolContext = Edge_symbolContext;

vlogParser.prototype.edge_symbol = function() {

    var localctx = new Edge_symbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, vlogParser.RULE_edge_symbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2723;
        this.match(vlogParser.EDGE_SYMBOL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_instantiationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_instantiation;
    return this;
}

Udp_instantiationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_instantiationContext.prototype.constructor = Udp_instantiationContext;

Udp_instantiationContext.prototype.udp_identifier = function() {
    return this.getTypedRuleContext(Udp_identifierContext,0);
};

Udp_instantiationContext.prototype.udp_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Udp_instanceContext);
    } else {
        return this.getTypedRuleContext(Udp_instanceContext,i);
    }
};

Udp_instantiationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Udp_instantiationContext.prototype.drive_strength = function() {
    return this.getTypedRuleContext(Drive_strengthContext,0);
};

Udp_instantiationContext.prototype.delay2 = function() {
    return this.getTypedRuleContext(Delay2Context,0);
};

Udp_instantiationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Udp_instantiationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_instantiation(this);
	}
};

Udp_instantiationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_instantiation(this);
	}
};




vlogParser.Udp_instantiationContext = Udp_instantiationContext;

vlogParser.prototype.udp_instantiation = function() {

    var localctx = new Udp_instantiationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, vlogParser.RULE_udp_instantiation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2725;
        this.udp_identifier();
        this.state = 2727;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
        if(la_===1) {
            this.state = 2726;
            this.drive_strength();

        }
        this.state = 2730;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.HA) {
            this.state = 2729;
            this.delay2();
        }

        this.state = 2732;
        this.udp_instance();
        this.state = 2737;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2733;
            this.match(vlogParser.CO);
            this.state = 2734;
            this.udp_instance();
            this.state = 2739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2740;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_instance;
    return this;
}

Udp_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_instanceContext.prototype.constructor = Udp_instanceContext;

Udp_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Udp_instanceContext.prototype.output_terminal = function() {
    return this.getTypedRuleContext(Output_terminalContext,0);
};

Udp_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Udp_instanceContext.prototype.input_terminal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_terminalContext);
    } else {
        return this.getTypedRuleContext(Input_terminalContext,i);
    }
};

Udp_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Udp_instanceContext.prototype.name_of_udp_instance = function() {
    return this.getTypedRuleContext(Name_of_udp_instanceContext,0);
};

Udp_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_instance(this);
	}
};

Udp_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_instance(this);
	}
};




vlogParser.Udp_instanceContext = Udp_instanceContext;

vlogParser.prototype.udp_instance = function() {

    var localctx = new Udp_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, vlogParser.RULE_udp_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
            this.state = 2742;
            this.name_of_udp_instance();
        }

        this.state = 2745;
        this.match(vlogParser.LP);
        this.state = 2746;
        this.output_terminal();
        this.state = 2747;
        this.match(vlogParser.CO);
        this.state = 2748;
        this.input_terminal();
        this.state = 2753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2749;
            this.match(vlogParser.CO);
            this.state = 2750;
            this.input_terminal();
            this.state = 2755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2756;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Name_of_udp_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_name_of_udp_instance;
    return this;
}

Name_of_udp_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_of_udp_instanceContext.prototype.constructor = Name_of_udp_instanceContext;

Name_of_udp_instanceContext.prototype.udp_instance_identifier = function() {
    return this.getTypedRuleContext(Udp_instance_identifierContext,0);
};

Name_of_udp_instanceContext.prototype.range_ = function() {
    return this.getTypedRuleContext(Range_Context,0);
};

Name_of_udp_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterName_of_udp_instance(this);
	}
};

Name_of_udp_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitName_of_udp_instance(this);
	}
};




vlogParser.Name_of_udp_instanceContext = Name_of_udp_instanceContext;

vlogParser.prototype.name_of_udp_instance = function() {

    var localctx = new Name_of_udp_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, vlogParser.RULE_name_of_udp_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2758;
        this.udp_instance_identifier();
        this.state = 2760;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 2759;
            this.range_();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Continuous_assignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_continuous_assign;
    return this;
}

Continuous_assignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continuous_assignContext.prototype.constructor = Continuous_assignContext;

Continuous_assignContext.prototype.ASSIGN = function() {
    return this.getToken(vlogParser.ASSIGN, 0);
};

Continuous_assignContext.prototype.list_of_net_assignments = function() {
    return this.getTypedRuleContext(List_of_net_assignmentsContext,0);
};

Continuous_assignContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Continuous_assignContext.prototype.drive_strength = function() {
    return this.getTypedRuleContext(Drive_strengthContext,0);
};

Continuous_assignContext.prototype.delay3 = function() {
    return this.getTypedRuleContext(Delay3Context,0);
};

Continuous_assignContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterContinuous_assign(this);
	}
};

Continuous_assignContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitContinuous_assign(this);
	}
};




vlogParser.Continuous_assignContext = Continuous_assignContext;

vlogParser.prototype.continuous_assign = function() {

    var localctx = new Continuous_assignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, vlogParser.RULE_continuous_assign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2762;
        this.match(vlogParser.ASSIGN);
        this.state = 2764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LP) {
            this.state = 2763;
            this.drive_strength();
        }

        this.state = 2767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.HA) {
            this.state = 2766;
            this.delay3();
        }

        this.state = 2769;
        this.list_of_net_assignments();
        this.state = 2770;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_net_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_net_assignments;
    return this;
}

List_of_net_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_net_assignmentsContext.prototype.constructor = List_of_net_assignmentsContext;

List_of_net_assignmentsContext.prototype.net_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Net_assignmentContext);
    } else {
        return this.getTypedRuleContext(Net_assignmentContext,i);
    }
};

List_of_net_assignmentsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_net_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_net_assignments(this);
	}
};

List_of_net_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_net_assignments(this);
	}
};




vlogParser.List_of_net_assignmentsContext = List_of_net_assignmentsContext;

vlogParser.prototype.list_of_net_assignments = function() {

    var localctx = new List_of_net_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, vlogParser.RULE_list_of_net_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2772;
        this.net_assignment();
        this.state = 2777;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 2773;
            this.match(vlogParser.CO);
            this.state = 2774;
            this.net_assignment();
            this.state = 2779;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_assignment;
    return this;
}

Net_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_assignmentContext.prototype.constructor = Net_assignmentContext;

Net_assignmentContext.prototype.net_lvalue = function() {
    return this.getTypedRuleContext(Net_lvalueContext,0);
};

Net_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Net_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Net_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_assignment(this);
	}
};

Net_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_assignment(this);
	}
};




vlogParser.Net_assignmentContext = Net_assignmentContext;

vlogParser.prototype.net_assignment = function() {

    var localctx = new Net_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, vlogParser.RULE_net_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2780;
        this.net_lvalue();
        this.state = 2781;
        this.match(vlogParser.EQ);
        this.state = 2782;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initial_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_initial_construct;
    return this;
}

Initial_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initial_constructContext.prototype.constructor = Initial_constructContext;

Initial_constructContext.prototype.INITIAL = function() {
    return this.getToken(vlogParser.INITIAL, 0);
};

Initial_constructContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Initial_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInitial_construct(this);
	}
};

Initial_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInitial_construct(this);
	}
};




vlogParser.Initial_constructContext = Initial_constructContext;

vlogParser.prototype.initial_construct = function() {

    var localctx = new Initial_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, vlogParser.RULE_initial_construct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2784;
        this.match(vlogParser.INITIAL);
        this.state = 2785;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Always_constructContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_always_construct;
    return this;
}

Always_constructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Always_constructContext.prototype.constructor = Always_constructContext;

Always_constructContext.prototype.ALWAYS = function() {
    return this.getToken(vlogParser.ALWAYS, 0);
};

Always_constructContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Always_constructContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterAlways_construct(this);
	}
};

Always_constructContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitAlways_construct(this);
	}
};




vlogParser.Always_constructContext = Always_constructContext;

vlogParser.prototype.always_construct = function() {

    var localctx = new Always_constructContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, vlogParser.RULE_always_construct);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2787;
        this.match(vlogParser.ALWAYS);
        this.state = 2788;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Blocking_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_blocking_assignment;
    return this;
}

Blocking_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Blocking_assignmentContext.prototype.constructor = Blocking_assignmentContext;

Blocking_assignmentContext.prototype.variable_lvalue = function() {
    return this.getTypedRuleContext(Variable_lvalueContext,0);
};

Blocking_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Blocking_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Blocking_assignmentContext.prototype.delay_or_event_control = function() {
    return this.getTypedRuleContext(Delay_or_event_controlContext,0);
};

Blocking_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBlocking_assignment(this);
	}
};

Blocking_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBlocking_assignment(this);
	}
};




vlogParser.Blocking_assignmentContext = Blocking_assignmentContext;

vlogParser.prototype.blocking_assignment = function() {

    var localctx = new Blocking_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, vlogParser.RULE_blocking_assignment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2790;
        this.variable_lvalue();
        this.state = 2791;
        this.match(vlogParser.EQ);
        this.state = 2793;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.HA || _la===vlogParser.AT || _la===vlogParser.REPEAT) {
            this.state = 2792;
            this.delay_or_event_control();
        }

        this.state = 2795;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nonblocking_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_nonblocking_assignment;
    return this;
}

Nonblocking_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonblocking_assignmentContext.prototype.constructor = Nonblocking_assignmentContext;

Nonblocking_assignmentContext.prototype.variable_lvalue = function() {
    return this.getTypedRuleContext(Variable_lvalueContext,0);
};

Nonblocking_assignmentContext.prototype.LTEQ = function() {
    return this.getToken(vlogParser.LTEQ, 0);
};

Nonblocking_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Nonblocking_assignmentContext.prototype.delay_or_event_control = function() {
    return this.getTypedRuleContext(Delay_or_event_controlContext,0);
};

Nonblocking_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNonblocking_assignment(this);
	}
};

Nonblocking_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNonblocking_assignment(this);
	}
};




vlogParser.Nonblocking_assignmentContext = Nonblocking_assignmentContext;

vlogParser.prototype.nonblocking_assignment = function() {

    var localctx = new Nonblocking_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, vlogParser.RULE_nonblocking_assignment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2797;
        this.variable_lvalue();
        this.state = 2798;
        this.match(vlogParser.LTEQ);
        this.state = 2800;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.HA || _la===vlogParser.AT || _la===vlogParser.REPEAT) {
            this.state = 2799;
            this.delay_or_event_control();
        }

        this.state = 2802;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedural_continuous_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_procedural_continuous_assignments;
    return this;
}

Procedural_continuous_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_continuous_assignmentsContext.prototype.constructor = Procedural_continuous_assignmentsContext;

Procedural_continuous_assignmentsContext.prototype.ASSIGN = function() {
    return this.getToken(vlogParser.ASSIGN, 0);
};

Procedural_continuous_assignmentsContext.prototype.variable_assignment = function() {
    return this.getTypedRuleContext(Variable_assignmentContext,0);
};

Procedural_continuous_assignmentsContext.prototype.DEASSIGN = function() {
    return this.getToken(vlogParser.DEASSIGN, 0);
};

Procedural_continuous_assignmentsContext.prototype.variable_lvalue = function() {
    return this.getTypedRuleContext(Variable_lvalueContext,0);
};

Procedural_continuous_assignmentsContext.prototype.FORCE = function() {
    return this.getToken(vlogParser.FORCE, 0);
};

Procedural_continuous_assignmentsContext.prototype.net_assignment = function() {
    return this.getTypedRuleContext(Net_assignmentContext,0);
};

Procedural_continuous_assignmentsContext.prototype.RELEASE = function() {
    return this.getToken(vlogParser.RELEASE, 0);
};

Procedural_continuous_assignmentsContext.prototype.net_lvalue = function() {
    return this.getTypedRuleContext(Net_lvalueContext,0);
};

Procedural_continuous_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterProcedural_continuous_assignments(this);
	}
};

Procedural_continuous_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitProcedural_continuous_assignments(this);
	}
};




vlogParser.Procedural_continuous_assignmentsContext = Procedural_continuous_assignmentsContext;

vlogParser.prototype.procedural_continuous_assignments = function() {

    var localctx = new Procedural_continuous_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, vlogParser.RULE_procedural_continuous_assignments);
    try {
        this.state = 2816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2804;
            this.match(vlogParser.ASSIGN);
            this.state = 2805;
            this.variable_assignment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2806;
            this.match(vlogParser.DEASSIGN);
            this.state = 2807;
            this.variable_lvalue();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2808;
            this.match(vlogParser.FORCE);
            this.state = 2809;
            this.variable_assignment();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2810;
            this.match(vlogParser.FORCE);
            this.state = 2811;
            this.net_assignment();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2812;
            this.match(vlogParser.RELEASE);
            this.state = 2813;
            this.variable_lvalue();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2814;
            this.match(vlogParser.RELEASE);
            this.state = 2815;
            this.net_lvalue();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_variable_assignment;
    return this;
}

Variable_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_assignmentContext.prototype.constructor = Variable_assignmentContext;

Variable_assignmentContext.prototype.variable_lvalue = function() {
    return this.getTypedRuleContext(Variable_lvalueContext,0);
};

Variable_assignmentContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Variable_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Variable_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterVariable_assignment(this);
	}
};

Variable_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitVariable_assignment(this);
	}
};




vlogParser.Variable_assignmentContext = Variable_assignmentContext;

vlogParser.prototype.variable_assignment = function() {

    var localctx = new Variable_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, vlogParser.RULE_variable_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2818;
        this.variable_lvalue();
        this.state = 2819;
        this.match(vlogParser.EQ);
        this.state = 2820;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Par_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_par_block;
    return this;
}

Par_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Par_blockContext.prototype.constructor = Par_blockContext;

Par_blockContext.prototype.FORK = function() {
    return this.getToken(vlogParser.FORK, 0);
};

Par_blockContext.prototype.JOIN = function() {
    return this.getToken(vlogParser.JOIN, 0);
};

Par_blockContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Par_blockContext.prototype.block_identifier = function() {
    return this.getTypedRuleContext(Block_identifierContext,0);
};

Par_blockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Par_blockContext.prototype.block_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Block_item_declarationContext,i);
    }
};

Par_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPar_block(this);
	}
};

Par_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPar_block(this);
	}
};




vlogParser.Par_blockContext = Par_blockContext;

vlogParser.prototype.par_block = function() {

    var localctx = new Par_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, vlogParser.RULE_par_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2822;
        this.match(vlogParser.FORK);
        this.state = 2831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CL) {
            this.state = 2823;
            this.match(vlogParser.CL);
            this.state = 2824;
            this.block_identifier();
            this.state = 2828;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,292,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2825;
                    this.block_item_declaration(); 
                }
                this.state = 2830;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,292,this._ctx);
            }

        }

        this.state = 2836;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 5)) & ~0x1f) == 0 && ((1 << (_la - 5)) & ((1 << (vlogParser.HA - 5)) | (1 << (vlogParser.LP - 5)) | (1 << (vlogParser.MIGT - 5)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (vlogParser.AT - 55)) | (1 << (vlogParser.ASSIGN - 55)) | (1 << (vlogParser.BEGIN - 55)) | (1 << (vlogParser.CASE - 55)) | (1 << (vlogParser.CASEX - 55)) | (1 << (vlogParser.CASEZ - 55)) | (1 << (vlogParser.DEASSIGN - 55)) | (1 << (vlogParser.DISABLE - 55)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FORCE - 93)) | (1 << (vlogParser.FOREVER - 93)) | (1 << (vlogParser.FORK - 93)) | (1 << (vlogParser.IF - 93)))) !== 0) || _la===vlogParser.RELEASE || _la===vlogParser.REPEAT || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (vlogParser.WAIT - 175)) | (1 << (vlogParser.WHILE - 175)) | (1 << (vlogParser.LC - 175)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 175)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 175)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 175)) | (1 << (vlogParser.MACRO_USAGE - 175)))) !== 0)) {
            this.state = 2833;
            this.statement();
            this.state = 2838;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2839;
        this.match(vlogParser.JOIN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Seq_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_seq_block;
    return this;
}

Seq_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seq_blockContext.prototype.constructor = Seq_blockContext;

Seq_blockContext.prototype.BEGIN = function() {
    return this.getToken(vlogParser.BEGIN, 0);
};

Seq_blockContext.prototype.END = function() {
    return this.getToken(vlogParser.END, 0);
};

Seq_blockContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Seq_blockContext.prototype.block_identifier = function() {
    return this.getTypedRuleContext(Block_identifierContext,0);
};

Seq_blockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

Seq_blockContext.prototype.block_item_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_item_declarationContext);
    } else {
        return this.getTypedRuleContext(Block_item_declarationContext,i);
    }
};

Seq_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSeq_block(this);
	}
};

Seq_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSeq_block(this);
	}
};




vlogParser.Seq_blockContext = Seq_blockContext;

vlogParser.prototype.seq_block = function() {

    var localctx = new Seq_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, vlogParser.RULE_seq_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2841;
        this.match(vlogParser.BEGIN);
        this.state = 2850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CL) {
            this.state = 2842;
            this.match(vlogParser.CL);
            this.state = 2843;
            this.block_identifier();
            this.state = 2847;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,295,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2844;
                    this.block_item_declaration(); 
                }
                this.state = 2849;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,295,this._ctx);
            }

        }

        this.state = 2855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 5)) & ~0x1f) == 0 && ((1 << (_la - 5)) & ((1 << (vlogParser.HA - 5)) | (1 << (vlogParser.LP - 5)) | (1 << (vlogParser.MIGT - 5)))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (vlogParser.AT - 55)) | (1 << (vlogParser.ASSIGN - 55)) | (1 << (vlogParser.BEGIN - 55)) | (1 << (vlogParser.CASE - 55)) | (1 << (vlogParser.CASEX - 55)) | (1 << (vlogParser.CASEZ - 55)) | (1 << (vlogParser.DEASSIGN - 55)) | (1 << (vlogParser.DISABLE - 55)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (vlogParser.FOR - 93)) | (1 << (vlogParser.FORCE - 93)) | (1 << (vlogParser.FOREVER - 93)) | (1 << (vlogParser.FORK - 93)) | (1 << (vlogParser.IF - 93)))) !== 0) || _la===vlogParser.RELEASE || _la===vlogParser.REPEAT || ((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (vlogParser.WAIT - 175)) | (1 << (vlogParser.WHILE - 175)) | (1 << (vlogParser.LC - 175)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 175)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 175)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 175)) | (1 << (vlogParser.MACRO_USAGE - 175)))) !== 0)) {
            this.state = 2852;
            this.statement();
            this.state = 2857;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2858;
        this.match(vlogParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.blocking_assignment = function() {
    return this.getTypedRuleContext(Blocking_assignmentContext,0);
};

StatementContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

StatementContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

StatementContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

StatementContext.prototype.conditional_statement = function() {
    return this.getTypedRuleContext(Conditional_statementContext,0);
};

StatementContext.prototype.disable_statement = function() {
    return this.getTypedRuleContext(Disable_statementContext,0);
};

StatementContext.prototype.event_trigger = function() {
    return this.getTypedRuleContext(Event_triggerContext,0);
};

StatementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

StatementContext.prototype.nonblocking_assignment = function() {
    return this.getTypedRuleContext(Nonblocking_assignmentContext,0);
};

StatementContext.prototype.par_block = function() {
    return this.getTypedRuleContext(Par_blockContext,0);
};

StatementContext.prototype.procedural_continuous_assignments = function() {
    return this.getTypedRuleContext(Procedural_continuous_assignmentsContext,0);
};

StatementContext.prototype.procedural_timing_control_statement = function() {
    return this.getTypedRuleContext(Procedural_timing_control_statementContext,0);
};

StatementContext.prototype.seq_block = function() {
    return this.getTypedRuleContext(Seq_blockContext,0);
};

StatementContext.prototype.system_task_enable = function() {
    return this.getTypedRuleContext(System_task_enableContext,0);
};

StatementContext.prototype.task_enable = function() {
    return this.getTypedRuleContext(Task_enableContext,0);
};

StatementContext.prototype.wait_statement = function() {
    return this.getTypedRuleContext(Wait_statementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStatement(this);
	}
};




vlogParser.StatementContext = StatementContext;

vlogParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, vlogParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 2964;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2863;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2860;
                this.attribute_instance();
                this.state = 2865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2866;
            this.blocking_assignment();
            this.state = 2867;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2869;
                this.attribute_instance();
                this.state = 2874;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2875;
            this.case_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2879;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2876;
                this.attribute_instance();
                this.state = 2881;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2882;
            this.conditional_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2883;
                this.attribute_instance();
                this.state = 2888;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2889;
            this.disable_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2890;
                this.attribute_instance();
                this.state = 2895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2896;
            this.event_trigger();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2897;
                this.attribute_instance();
                this.state = 2902;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2903;
            this.loop_statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2904;
                this.attribute_instance();
                this.state = 2909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2910;
            this.nonblocking_assignment();
            this.state = 2911;
            this.match(vlogParser.SC);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2913;
                this.attribute_instance();
                this.state = 2918;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2919;
            this.par_block();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2920;
                this.attribute_instance();
                this.state = 2925;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2926;
            this.procedural_continuous_assignments();
            this.state = 2927;
            this.match(vlogParser.SC);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2929;
                this.attribute_instance();
                this.state = 2934;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2935;
            this.procedural_timing_control_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2936;
                this.attribute_instance();
                this.state = 2941;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2942;
            this.seq_block();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2946;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2943;
                this.attribute_instance();
                this.state = 2948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2949;
            this.system_task_enable();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2950;
                this.attribute_instance();
                this.state = 2955;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2956;
            this.task_enable();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2957;
                this.attribute_instance();
                this.state = 2962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2963;
            this.wait_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_or_nullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_statement_or_null;
    return this;
}

Statement_or_nullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_or_nullContext.prototype.constructor = Statement_or_nullContext;

Statement_or_nullContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Statement_or_nullContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Statement_or_nullContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Statement_or_nullContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStatement_or_null(this);
	}
};

Statement_or_nullContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStatement_or_null(this);
	}
};




vlogParser.Statement_or_nullContext = Statement_or_nullContext;

vlogParser.prototype.statement_or_null = function() {

    var localctx = new Statement_or_nullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, vlogParser.RULE_statement_or_null);
    var _la = 0; // Token type
    try {
        this.state = 2974;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2966;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2970;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.LP) {
                this.state = 2967;
                this.attribute_instance();
                this.state = 2972;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2973;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_statement;
    return this;
}

Function_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_statementContext.prototype.constructor = Function_statementContext;

Function_statementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Function_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_statement(this);
	}
};

Function_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_statement(this);
	}
};




vlogParser.Function_statementContext = Function_statementContext;

vlogParser.prototype.function_statement = function() {

    var localctx = new Function_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, vlogParser.RULE_function_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2976;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delay_control;
    return this;
}

Delay_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay_controlContext.prototype.constructor = Delay_controlContext;

Delay_controlContext.prototype.HA = function() {
    return this.getToken(vlogParser.HA, 0);
};

Delay_controlContext.prototype.delay_value = function() {
    return this.getTypedRuleContext(Delay_valueContext,0);
};

Delay_controlContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Delay_controlContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

Delay_controlContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Delay_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelay_control(this);
	}
};

Delay_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelay_control(this);
	}
};




vlogParser.Delay_controlContext = Delay_controlContext;

vlogParser.prototype.delay_control = function() {

    var localctx = new Delay_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, vlogParser.RULE_delay_control);
    try {
        this.state = 2985;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2978;
            this.match(vlogParser.HA);
            this.state = 2979;
            this.delay_value();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2980;
            this.match(vlogParser.HA);
            this.state = 2981;
            this.match(vlogParser.LP);
            this.state = 2982;
            this.mintypmax_expression();
            this.state = 2983;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay_or_event_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delay_or_event_control;
    return this;
}

Delay_or_event_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay_or_event_controlContext.prototype.constructor = Delay_or_event_controlContext;

Delay_or_event_controlContext.prototype.delay_control = function() {
    return this.getTypedRuleContext(Delay_controlContext,0);
};

Delay_or_event_controlContext.prototype.event_control = function() {
    return this.getTypedRuleContext(Event_controlContext,0);
};

Delay_or_event_controlContext.prototype.REPEAT = function() {
    return this.getToken(vlogParser.REPEAT, 0);
};

Delay_or_event_controlContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Delay_or_event_controlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Delay_or_event_controlContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Delay_or_event_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelay_or_event_control(this);
	}
};

Delay_or_event_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelay_or_event_control(this);
	}
};




vlogParser.Delay_or_event_controlContext = Delay_or_event_controlContext;

vlogParser.prototype.delay_or_event_control = function() {

    var localctx = new Delay_or_event_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, vlogParser.RULE_delay_or_event_control);
    try {
        this.state = 2995;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.HA:
            this.enterOuterAlt(localctx, 1);
            this.state = 2987;
            this.delay_control();
            break;
        case vlogParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2988;
            this.event_control();
            break;
        case vlogParser.REPEAT:
            this.enterOuterAlt(localctx, 3);
            this.state = 2989;
            this.match(vlogParser.REPEAT);
            this.state = 2990;
            this.match(vlogParser.LP);
            this.state = 2991;
            this.expression(0);
            this.state = 2992;
            this.match(vlogParser.RP);
            this.state = 2993;
            this.event_control();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Disable_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_disable_statement;
    return this;
}

Disable_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Disable_statementContext.prototype.constructor = Disable_statementContext;

Disable_statementContext.prototype.DISABLE = function() {
    return this.getToken(vlogParser.DISABLE, 0);
};

Disable_statementContext.prototype.hierarchical_task_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_task_identifierContext,0);
};

Disable_statementContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Disable_statementContext.prototype.hierarchical_block_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_block_identifierContext,0);
};

Disable_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDisable_statement(this);
	}
};

Disable_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDisable_statement(this);
	}
};




vlogParser.Disable_statementContext = Disable_statementContext;

vlogParser.prototype.disable_statement = function() {

    var localctx = new Disable_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, vlogParser.RULE_disable_statement);
    try {
        this.state = 3005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2997;
            this.match(vlogParser.DISABLE);
            this.state = 2998;
            this.hierarchical_task_identifier();
            this.state = 2999;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3001;
            this.match(vlogParser.DISABLE);
            this.state = 3002;
            this.hierarchical_block_identifier();
            this.state = 3003;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_control;
    return this;
}

Event_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_controlContext.prototype.constructor = Event_controlContext;

Event_controlContext.prototype.AT = function() {
    return this.getToken(vlogParser.AT, 0);
};

Event_controlContext.prototype.hierarchical_event_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_event_identifierContext,0);
};

Event_controlContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Event_controlContext.prototype.event_expression = function() {
    return this.getTypedRuleContext(Event_expressionContext,0);
};

Event_controlContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Event_controlContext.prototype.AS = function() {
    return this.getToken(vlogParser.AS, 0);
};

Event_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_control(this);
	}
};

Event_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_control(this);
	}
};




vlogParser.Event_controlContext = Event_controlContext;

vlogParser.prototype.event_control = function() {

    var localctx = new Event_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, vlogParser.RULE_event_control);
    try {
        this.state = 3020;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3007;
            this.match(vlogParser.AT);
            this.state = 3008;
            this.hierarchical_event_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3009;
            this.match(vlogParser.AT);
            this.state = 3010;
            this.match(vlogParser.LP);
            this.state = 3011;
            this.event_expression(0);
            this.state = 3012;
            this.match(vlogParser.RP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3014;
            this.match(vlogParser.AT);
            this.state = 3015;
            this.match(vlogParser.AS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3016;
            this.match(vlogParser.AT);
            this.state = 3017;
            this.match(vlogParser.LP);
            this.state = 3018;
            this.match(vlogParser.AS);
            this.state = 3019;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_trigger;
    return this;
}

Event_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_triggerContext.prototype.constructor = Event_triggerContext;

Event_triggerContext.prototype.MIGT = function() {
    return this.getToken(vlogParser.MIGT, 0);
};

Event_triggerContext.prototype.hierarchical_event_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_event_identifierContext,0);
};

Event_triggerContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Event_triggerContext.prototype.LB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LB);
    } else {
        return this.getToken(vlogParser.LB, i);
    }
};


Event_triggerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Event_triggerContext.prototype.RB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RB);
    } else {
        return this.getToken(vlogParser.RB, i);
    }
};


Event_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_trigger(this);
	}
};

Event_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_trigger(this);
	}
};




vlogParser.Event_triggerContext = Event_triggerContext;

vlogParser.prototype.event_trigger = function() {

    var localctx = new Event_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, vlogParser.RULE_event_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3022;
        this.match(vlogParser.MIGT);
        this.state = 3023;
        this.hierarchical_event_identifier();
        this.state = 3030;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.LB) {
            this.state = 3024;
            this.match(vlogParser.LB);
            this.state = 3025;
            this.expression(0);
            this.state = 3026;
            this.match(vlogParser.RB);
            this.state = 3032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3033;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_expression;
    return this;
}

Event_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_expressionContext.prototype.constructor = Event_expressionContext;

Event_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Event_expressionContext.prototype.POSEDGE = function() {
    return this.getToken(vlogParser.POSEDGE, 0);
};

Event_expressionContext.prototype.NEGEDGE = function() {
    return this.getToken(vlogParser.NEGEDGE, 0);
};

Event_expressionContext.prototype.event_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Event_expressionContext);
    } else {
        return this.getTypedRuleContext(Event_expressionContext,i);
    }
};

Event_expressionContext.prototype.OR = function() {
    return this.getToken(vlogParser.OR, 0);
};

Event_expressionContext.prototype.CO = function() {
    return this.getToken(vlogParser.CO, 0);
};

Event_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_expression(this);
	}
};

Event_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_expression(this);
	}
};



vlogParser.prototype.event_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Event_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 370;
    this.enterRecursionRule(localctx, 370, vlogParser.RULE_event_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3041;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.LP:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.LC:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.state = 3036;
            this.expression(0);
            break;
        case vlogParser.POSEDGE:
            this.state = 3037;
            this.match(vlogParser.POSEDGE);
            this.state = 3038;
            this.expression(0);
            break;
        case vlogParser.NEGEDGE:
            this.state = 3039;
            this.match(vlogParser.NEGEDGE);
            this.state = 3040;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 3051;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,322,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 3049;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Event_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_event_expression);
                    this.state = 3043;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 3044;
                    this.match(vlogParser.OR);
                    this.state = 3045;
                    this.event_expression(3);
                    break;

                case 2:
                    localctx = new Event_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_event_expression);
                    this.state = 3046;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 3047;
                    this.match(vlogParser.CO);
                    this.state = 3048;
                    this.event_expression(2);
                    break;

                } 
            }
            this.state = 3053;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,322,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Procedural_timing_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_procedural_timing_control;
    return this;
}

Procedural_timing_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_timing_controlContext.prototype.constructor = Procedural_timing_controlContext;

Procedural_timing_controlContext.prototype.delay_control = function() {
    return this.getTypedRuleContext(Delay_controlContext,0);
};

Procedural_timing_controlContext.prototype.event_control = function() {
    return this.getTypedRuleContext(Event_controlContext,0);
};

Procedural_timing_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterProcedural_timing_control(this);
	}
};

Procedural_timing_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitProcedural_timing_control(this);
	}
};




vlogParser.Procedural_timing_controlContext = Procedural_timing_controlContext;

vlogParser.prototype.procedural_timing_control = function() {

    var localctx = new Procedural_timing_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, vlogParser.RULE_procedural_timing_control);
    try {
        this.state = 3056;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.HA:
            this.enterOuterAlt(localctx, 1);
            this.state = 3054;
            this.delay_control();
            break;
        case vlogParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3055;
            this.event_control();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedural_timing_control_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_procedural_timing_control_statement;
    return this;
}

Procedural_timing_control_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_timing_control_statementContext.prototype.constructor = Procedural_timing_control_statementContext;

Procedural_timing_control_statementContext.prototype.procedural_timing_control = function() {
    return this.getTypedRuleContext(Procedural_timing_controlContext,0);
};

Procedural_timing_control_statementContext.prototype.statement_or_null = function() {
    return this.getTypedRuleContext(Statement_or_nullContext,0);
};

Procedural_timing_control_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterProcedural_timing_control_statement(this);
	}
};

Procedural_timing_control_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitProcedural_timing_control_statement(this);
	}
};




vlogParser.Procedural_timing_control_statementContext = Procedural_timing_control_statementContext;

vlogParser.prototype.procedural_timing_control_statement = function() {

    var localctx = new Procedural_timing_control_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, vlogParser.RULE_procedural_timing_control_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3058;
        this.procedural_timing_control();
        this.state = 3059;
        this.statement_or_null();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Wait_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_wait_statement;
    return this;
}

Wait_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wait_statementContext.prototype.constructor = Wait_statementContext;

Wait_statementContext.prototype.WAIT = function() {
    return this.getToken(vlogParser.WAIT, 0);
};

Wait_statementContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Wait_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Wait_statementContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Wait_statementContext.prototype.statement_or_null = function() {
    return this.getTypedRuleContext(Statement_or_nullContext,0);
};

Wait_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterWait_statement(this);
	}
};

Wait_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitWait_statement(this);
	}
};




vlogParser.Wait_statementContext = Wait_statementContext;

vlogParser.prototype.wait_statement = function() {

    var localctx = new Wait_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, vlogParser.RULE_wait_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3061;
        this.match(vlogParser.WAIT);
        this.state = 3062;
        this.match(vlogParser.LP);
        this.state = 3063;
        this.expression(0);
        this.state = 3064;
        this.match(vlogParser.RP);
        this.state = 3065;
        this.statement_or_null();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_conditional_statement;
    return this;
}

Conditional_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_statementContext.prototype.constructor = Conditional_statementContext;

Conditional_statementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.IF);
    } else {
        return this.getToken(vlogParser.IF, i);
    }
};


Conditional_statementContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LP);
    } else {
        return this.getToken(vlogParser.LP, i);
    }
};


Conditional_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Conditional_statementContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RP);
    } else {
        return this.getToken(vlogParser.RP, i);
    }
};


Conditional_statementContext.prototype.statement_or_null = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Statement_or_nullContext);
    } else {
        return this.getTypedRuleContext(Statement_or_nullContext,i);
    }
};

Conditional_statementContext.prototype.ELSE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.ELSE);
    } else {
        return this.getToken(vlogParser.ELSE, i);
    }
};


Conditional_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConditional_statement(this);
	}
};

Conditional_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConditional_statement(this);
	}
};




vlogParser.Conditional_statementContext = Conditional_statementContext;

vlogParser.prototype.conditional_statement = function() {

    var localctx = new Conditional_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, vlogParser.RULE_conditional_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3067;
        this.match(vlogParser.IF);
        this.state = 3068;
        this.match(vlogParser.LP);
        this.state = 3069;
        this.expression(0);
        this.state = 3070;
        this.match(vlogParser.RP);
        this.state = 3071;
        this.statement_or_null();
        this.state = 3081;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,324,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3072;
                this.match(vlogParser.ELSE);
                this.state = 3073;
                this.match(vlogParser.IF);
                this.state = 3074;
                this.match(vlogParser.LP);
                this.state = 3075;
                this.expression(0);
                this.state = 3076;
                this.match(vlogParser.RP);
                this.state = 3077;
                this.statement_or_null(); 
            }
            this.state = 3083;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,324,this._ctx);
        }

        this.state = 3086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
        if(la_===1) {
            this.state = 3084;
            this.match(vlogParser.ELSE);
            this.state = 3085;
            this.statement_or_null();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_case_statement;
    return this;
}

Case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statementContext.prototype.constructor = Case_statementContext;

Case_statementContext.prototype.CASE = function() {
    return this.getToken(vlogParser.CASE, 0);
};

Case_statementContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Case_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Case_statementContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Case_statementContext.prototype.ENDCASE = function() {
    return this.getToken(vlogParser.ENDCASE, 0);
};

Case_statementContext.prototype.case_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Case_itemContext);
    } else {
        return this.getTypedRuleContext(Case_itemContext,i);
    }
};

Case_statementContext.prototype.CASEZ = function() {
    return this.getToken(vlogParser.CASEZ, 0);
};

Case_statementContext.prototype.CASEX = function() {
    return this.getToken(vlogParser.CASEX, 0);
};

Case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCase_statement(this);
	}
};

Case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCase_statement(this);
	}
};




vlogParser.Case_statementContext = Case_statementContext;

vlogParser.prototype.case_statement = function() {

    var localctx = new Case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, vlogParser.RULE_case_statement);
    var _la = 0; // Token type
    try {
        this.state = 3124;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.CASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3088;
            this.match(vlogParser.CASE);
            this.state = 3089;
            this.match(vlogParser.LP);
            this.state = 3090;
            this.expression(0);
            this.state = 3091;
            this.match(vlogParser.RP);
            this.state = 3095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || _la===vlogParser.DEFAULT || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 3092;
                this.case_item();
                this.state = 3097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3098;
            this.match(vlogParser.ENDCASE);
            break;
        case vlogParser.CASEZ:
            this.enterOuterAlt(localctx, 2);
            this.state = 3100;
            this.match(vlogParser.CASEZ);
            this.state = 3101;
            this.match(vlogParser.LP);
            this.state = 3102;
            this.expression(0);
            this.state = 3103;
            this.match(vlogParser.RP);
            this.state = 3107;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || _la===vlogParser.DEFAULT || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 3104;
                this.case_item();
                this.state = 3109;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3110;
            this.match(vlogParser.ENDCASE);
            break;
        case vlogParser.CASEX:
            this.enterOuterAlt(localctx, 3);
            this.state = 3112;
            this.match(vlogParser.CASEX);
            this.state = 3113;
            this.match(vlogParser.LP);
            this.state = 3114;
            this.expression(0);
            this.state = 3115;
            this.match(vlogParser.RP);
            this.state = 3119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || _la===vlogParser.DEFAULT || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 3116;
                this.case_item();
                this.state = 3121;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3122;
            this.match(vlogParser.ENDCASE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_case_item;
    return this;
}

Case_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_itemContext.prototype.constructor = Case_itemContext;

Case_itemContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Case_itemContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Case_itemContext.prototype.statement_or_null = function() {
    return this.getTypedRuleContext(Statement_or_nullContext,0);
};

Case_itemContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Case_itemContext.prototype.DEFAULT = function() {
    return this.getToken(vlogParser.DEFAULT, 0);
};

Case_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCase_item(this);
	}
};

Case_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCase_item(this);
	}
};




vlogParser.Case_itemContext = Case_itemContext;

vlogParser.prototype.case_item = function() {

    var localctx = new Case_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, vlogParser.RULE_case_item);
    var _la = 0; // Token type
    try {
        this.state = 3142;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.LP:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.LC:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3126;
            this.expression(0);
            this.state = 3131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 3127;
                this.match(vlogParser.CO);
                this.state = 3128;
                this.expression(0);
                this.state = 3133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3134;
            this.match(vlogParser.CL);
            this.state = 3135;
            this.statement_or_null();
            break;
        case vlogParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3137;
            this.match(vlogParser.DEFAULT);
            this.state = 3139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CL) {
                this.state = 3138;
                this.match(vlogParser.CL);
            }

            this.state = 3141;
            this.statement_or_null();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.FOREVER = function() {
    return this.getToken(vlogParser.FOREVER, 0);
};

Loop_statementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

Loop_statementContext.prototype.REPEAT = function() {
    return this.getToken(vlogParser.REPEAT, 0);
};

Loop_statementContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Loop_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Loop_statementContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Loop_statementContext.prototype.WHILE = function() {
    return this.getToken(vlogParser.WHILE, 0);
};

Loop_statementContext.prototype.FOR = function() {
    return this.getToken(vlogParser.FOR, 0);
};

Loop_statementContext.prototype.variable_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_assignmentContext);
    } else {
        return this.getTypedRuleContext(Variable_assignmentContext,i);
    }
};

Loop_statementContext.prototype.SC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.SC);
    } else {
        return this.getToken(vlogParser.SC, i);
    }
};


Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLoop_statement(this);
	}
};




vlogParser.Loop_statementContext = Loop_statementContext;

vlogParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, vlogParser.RULE_loop_statement);
    try {
        this.state = 3168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.FOREVER:
            this.enterOuterAlt(localctx, 1);
            this.state = 3144;
            this.match(vlogParser.FOREVER);
            this.state = 3145;
            this.statement();
            break;
        case vlogParser.REPEAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3146;
            this.match(vlogParser.REPEAT);
            this.state = 3147;
            this.match(vlogParser.LP);
            this.state = 3148;
            this.expression(0);
            this.state = 3149;
            this.match(vlogParser.RP);
            this.state = 3150;
            this.statement();
            break;
        case vlogParser.WHILE:
            this.enterOuterAlt(localctx, 3);
            this.state = 3152;
            this.match(vlogParser.WHILE);
            this.state = 3153;
            this.match(vlogParser.LP);
            this.state = 3154;
            this.expression(0);
            this.state = 3155;
            this.match(vlogParser.RP);
            this.state = 3156;
            this.statement();
            break;
        case vlogParser.FOR:
            this.enterOuterAlt(localctx, 4);
            this.state = 3158;
            this.match(vlogParser.FOR);
            this.state = 3159;
            this.match(vlogParser.LP);
            this.state = 3160;
            this.variable_assignment();
            this.state = 3161;
            this.match(vlogParser.SC);
            this.state = 3162;
            this.expression(0);
            this.state = 3163;
            this.match(vlogParser.SC);
            this.state = 3164;
            this.variable_assignment();
            this.state = 3165;
            this.match(vlogParser.RP);
            this.state = 3166;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function System_task_enableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_system_task_enable;
    return this;
}

System_task_enableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
System_task_enableContext.prototype.constructor = System_task_enableContext;

System_task_enableContext.prototype.system_task_identifier = function() {
    return this.getTypedRuleContext(System_task_identifierContext,0);
};

System_task_enableContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

System_task_enableContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

System_task_enableContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

System_task_enableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

System_task_enableContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


System_task_enableContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSystem_task_enable(this);
	}
};

System_task_enableContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSystem_task_enable(this);
	}
};




vlogParser.System_task_enableContext = System_task_enableContext;

vlogParser.prototype.system_task_enable = function() {

    var localctx = new System_task_enableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, vlogParser.RULE_system_task_enable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3170;
        this.system_task_identifier();
        this.state = 3185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LP) {
            this.state = 3171;
            this.match(vlogParser.LP);
            this.state = 3173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                this.state = 3172;
                this.expression(0);
            }

            this.state = 3181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 3175;
                this.match(vlogParser.CO);
                this.state = 3177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                    this.state = 3176;
                    this.expression(0);
                }

                this.state = 3183;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3184;
            this.match(vlogParser.RP);
        }

        this.state = 3187;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_enableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_enable;
    return this;
}

Task_enableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_enableContext.prototype.constructor = Task_enableContext;

Task_enableContext.prototype.hierarchical_task_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_task_identifierContext,0);
};

Task_enableContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Task_enableContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Task_enableContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Task_enableContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Task_enableContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Task_enableContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_enable(this);
	}
};

Task_enableContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_enable(this);
	}
};




vlogParser.Task_enableContext = Task_enableContext;

vlogParser.prototype.task_enable = function() {

    var localctx = new Task_enableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, vlogParser.RULE_task_enable);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3189;
        this.hierarchical_task_identifier();
        this.state = 3201;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LP) {
            this.state = 3190;
            this.match(vlogParser.LP);
            this.state = 3191;
            this.expression(0);
            this.state = 3196;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 3192;
                this.match(vlogParser.CO);
                this.state = 3193;
                this.expression(0);
                this.state = 3198;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3199;
            this.match(vlogParser.RP);
        }

        this.state = 3203;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specify_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specify_block;
    return this;
}

Specify_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specify_blockContext.prototype.constructor = Specify_blockContext;

Specify_blockContext.prototype.SPECIFY = function() {
    return this.getToken(vlogParser.SPECIFY, 0);
};

Specify_blockContext.prototype.ENDSPECIFY = function() {
    return this.getToken(vlogParser.ENDSPECIFY, 0);
};

Specify_blockContext.prototype.specify_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specify_itemContext);
    } else {
        return this.getTypedRuleContext(Specify_itemContext,i);
    }
};

Specify_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecify_block(this);
	}
};

Specify_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecify_block(this);
	}
};




vlogParser.Specify_blockContext = Specify_blockContext;

vlogParser.prototype.specify_block = function() {

    var localctx = new Specify_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, vlogParser.RULE_specify_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3205;
        this.match(vlogParser.SPECIFY);
        this.state = 3209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.DLFULLSKEW) | (1 << vlogParser.DLHOLD) | (1 << vlogParser.DLNOCHANGE) | (1 << vlogParser.DLPERIOD) | (1 << vlogParser.DLRECOVERY) | (1 << vlogParser.DLRECREM) | (1 << vlogParser.DLREMOVAL) | (1 << vlogParser.DLSETUP) | (1 << vlogParser.DLSETUPHOLD) | (1 << vlogParser.DLSKEW) | (1 << vlogParser.DLTIMESKEW) | (1 << vlogParser.DLWIDTH) | (1 << vlogParser.LP))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (vlogParser.IF - 102)) | (1 << (vlogParser.IFNONE - 102)) | (1 << (vlogParser.NOSHOWCANCELLED - 102)))) !== 0) || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (vlogParser.PULSESTYLE_ONDETECT - 137)) | (1 << (vlogParser.PULSESTYLE_ONEVENT - 137)) | (1 << (vlogParser.SHOWCANCELLED - 137)) | (1 << (vlogParser.SPECPARAM - 137)))) !== 0)) {
            this.state = 3206;
            this.specify_item();
            this.state = 3211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3212;
        this.match(vlogParser.ENDSPECIFY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specify_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specify_item;
    return this;
}

Specify_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specify_itemContext.prototype.constructor = Specify_itemContext;

Specify_itemContext.prototype.specparam_declaration = function() {
    return this.getTypedRuleContext(Specparam_declarationContext,0);
};

Specify_itemContext.prototype.pulsestyle_declaration = function() {
    return this.getTypedRuleContext(Pulsestyle_declarationContext,0);
};

Specify_itemContext.prototype.showcancelled_declaration = function() {
    return this.getTypedRuleContext(Showcancelled_declarationContext,0);
};

Specify_itemContext.prototype.path_declaration = function() {
    return this.getTypedRuleContext(Path_declarationContext,0);
};

Specify_itemContext.prototype.system_timing_check = function() {
    return this.getTypedRuleContext(System_timing_checkContext,0);
};

Specify_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecify_item(this);
	}
};

Specify_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecify_item(this);
	}
};




vlogParser.Specify_itemContext = Specify_itemContext;

vlogParser.prototype.specify_item = function() {

    var localctx = new Specify_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, vlogParser.RULE_specify_item);
    try {
        this.state = 3219;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.SPECPARAM:
            this.enterOuterAlt(localctx, 1);
            this.state = 3214;
            this.specparam_declaration();
            break;
        case vlogParser.PULSESTYLE_ONDETECT:
        case vlogParser.PULSESTYLE_ONEVENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3215;
            this.pulsestyle_declaration();
            break;
        case vlogParser.NOSHOWCANCELLED:
        case vlogParser.SHOWCANCELLED:
            this.enterOuterAlt(localctx, 3);
            this.state = 3216;
            this.showcancelled_declaration();
            break;
        case vlogParser.LP:
        case vlogParser.IF:
        case vlogParser.IFNONE:
            this.enterOuterAlt(localctx, 4);
            this.state = 3217;
            this.path_declaration();
            break;
        case vlogParser.DLFULLSKEW:
        case vlogParser.DLHOLD:
        case vlogParser.DLNOCHANGE:
        case vlogParser.DLPERIOD:
        case vlogParser.DLRECOVERY:
        case vlogParser.DLRECREM:
        case vlogParser.DLREMOVAL:
        case vlogParser.DLSETUP:
        case vlogParser.DLSETUPHOLD:
        case vlogParser.DLSKEW:
        case vlogParser.DLTIMESKEW:
        case vlogParser.DLWIDTH:
            this.enterOuterAlt(localctx, 5);
            this.state = 3218;
            this.system_timing_check();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pulsestyle_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_pulsestyle_declaration;
    return this;
}

Pulsestyle_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pulsestyle_declarationContext.prototype.constructor = Pulsestyle_declarationContext;

Pulsestyle_declarationContext.prototype.PULSESTYLE_ONEVENT = function() {
    return this.getToken(vlogParser.PULSESTYLE_ONEVENT, 0);
};

Pulsestyle_declarationContext.prototype.list_of_path_outputs = function() {
    return this.getTypedRuleContext(List_of_path_outputsContext,0);
};

Pulsestyle_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Pulsestyle_declarationContext.prototype.PULSESTYLE_ONDETECT = function() {
    return this.getToken(vlogParser.PULSESTYLE_ONDETECT, 0);
};

Pulsestyle_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPulsestyle_declaration(this);
	}
};

Pulsestyle_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPulsestyle_declaration(this);
	}
};




vlogParser.Pulsestyle_declarationContext = Pulsestyle_declarationContext;

vlogParser.prototype.pulsestyle_declaration = function() {

    var localctx = new Pulsestyle_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, vlogParser.RULE_pulsestyle_declaration);
    try {
        this.state = 3229;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.PULSESTYLE_ONEVENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 3221;
            this.match(vlogParser.PULSESTYLE_ONEVENT);
            this.state = 3222;
            this.list_of_path_outputs();
            this.state = 3223;
            this.match(vlogParser.SC);
            break;
        case vlogParser.PULSESTYLE_ONDETECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3225;
            this.match(vlogParser.PULSESTYLE_ONDETECT);
            this.state = 3226;
            this.list_of_path_outputs();
            this.state = 3227;
            this.match(vlogParser.SC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Showcancelled_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_showcancelled_declaration;
    return this;
}

Showcancelled_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Showcancelled_declarationContext.prototype.constructor = Showcancelled_declarationContext;

Showcancelled_declarationContext.prototype.SHOWCANCELLED = function() {
    return this.getToken(vlogParser.SHOWCANCELLED, 0);
};

Showcancelled_declarationContext.prototype.list_of_path_outputs = function() {
    return this.getTypedRuleContext(List_of_path_outputsContext,0);
};

Showcancelled_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Showcancelled_declarationContext.prototype.NOSHOWCANCELLED = function() {
    return this.getToken(vlogParser.NOSHOWCANCELLED, 0);
};

Showcancelled_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterShowcancelled_declaration(this);
	}
};

Showcancelled_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitShowcancelled_declaration(this);
	}
};




vlogParser.Showcancelled_declarationContext = Showcancelled_declarationContext;

vlogParser.prototype.showcancelled_declaration = function() {

    var localctx = new Showcancelled_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, vlogParser.RULE_showcancelled_declaration);
    try {
        this.state = 3239;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.SHOWCANCELLED:
            this.enterOuterAlt(localctx, 1);
            this.state = 3231;
            this.match(vlogParser.SHOWCANCELLED);
            this.state = 3232;
            this.list_of_path_outputs();
            this.state = 3233;
            this.match(vlogParser.SC);
            break;
        case vlogParser.NOSHOWCANCELLED:
            this.enterOuterAlt(localctx, 2);
            this.state = 3235;
            this.match(vlogParser.NOSHOWCANCELLED);
            this.state = 3236;
            this.list_of_path_outputs();
            this.state = 3237;
            this.match(vlogParser.SC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Path_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_path_declaration;
    return this;
}

Path_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Path_declarationContext.prototype.constructor = Path_declarationContext;

Path_declarationContext.prototype.simple_path_declaration = function() {
    return this.getTypedRuleContext(Simple_path_declarationContext,0);
};

Path_declarationContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Path_declarationContext.prototype.edge_sensitive_path_declaration = function() {
    return this.getTypedRuleContext(Edge_sensitive_path_declarationContext,0);
};

Path_declarationContext.prototype.state_dependent_path_declaration = function() {
    return this.getTypedRuleContext(State_dependent_path_declarationContext,0);
};

Path_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPath_declaration(this);
	}
};

Path_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPath_declaration(this);
	}
};




vlogParser.Path_declarationContext = Path_declarationContext;

vlogParser.prototype.path_declaration = function() {

    var localctx = new Path_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, vlogParser.RULE_path_declaration);
    try {
        this.state = 3250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3241;
            this.simple_path_declaration();
            this.state = 3242;
            this.match(vlogParser.SC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3244;
            this.edge_sensitive_path_declaration();
            this.state = 3245;
            this.match(vlogParser.SC);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3247;
            this.state_dependent_path_declaration();
            this.state = 3248;
            this.match(vlogParser.SC);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_path_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_simple_path_declaration;
    return this;
}

Simple_path_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_path_declarationContext.prototype.constructor = Simple_path_declarationContext;

Simple_path_declarationContext.prototype.parallel_path_description = function() {
    return this.getTypedRuleContext(Parallel_path_descriptionContext,0);
};

Simple_path_declarationContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Simple_path_declarationContext.prototype.path_delay_value = function() {
    return this.getTypedRuleContext(Path_delay_valueContext,0);
};

Simple_path_declarationContext.prototype.full_path_description = function() {
    return this.getTypedRuleContext(Full_path_descriptionContext,0);
};

Simple_path_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSimple_path_declaration(this);
	}
};

Simple_path_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSimple_path_declaration(this);
	}
};




vlogParser.Simple_path_declarationContext = Simple_path_declarationContext;

vlogParser.prototype.simple_path_declaration = function() {

    var localctx = new Simple_path_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, vlogParser.RULE_simple_path_declaration);
    try {
        this.state = 3260;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3252;
            this.parallel_path_description();
            this.state = 3253;
            this.match(vlogParser.EQ);
            this.state = 3254;
            this.path_delay_value();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3256;
            this.full_path_description();
            this.state = 3257;
            this.match(vlogParser.EQ);
            this.state = 3258;
            this.path_delay_value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parallel_path_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parallel_path_description;
    return this;
}

Parallel_path_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parallel_path_descriptionContext.prototype.constructor = Parallel_path_descriptionContext;

Parallel_path_descriptionContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Parallel_path_descriptionContext.prototype.specify_input_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_input_terminal_descriptorContext,0);
};

Parallel_path_descriptionContext.prototype.EQGT = function() {
    return this.getToken(vlogParser.EQGT, 0);
};

Parallel_path_descriptionContext.prototype.specify_output_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_output_terminal_descriptorContext,0);
};

Parallel_path_descriptionContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Parallel_path_descriptionContext.prototype.polarity_operator = function() {
    return this.getTypedRuleContext(Polarity_operatorContext,0);
};

Parallel_path_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParallel_path_description(this);
	}
};

Parallel_path_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParallel_path_description(this);
	}
};




vlogParser.Parallel_path_descriptionContext = Parallel_path_descriptionContext;

vlogParser.prototype.parallel_path_description = function() {

    var localctx = new Parallel_path_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, vlogParser.RULE_parallel_path_description);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3262;
        this.match(vlogParser.LP);
        this.state = 3263;
        this.specify_input_terminal_descriptor();
        this.state = 3265;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.PL || _la===vlogParser.MI) {
            this.state = 3264;
            this.polarity_operator();
        }

        this.state = 3267;
        this.match(vlogParser.EQGT);
        this.state = 3268;
        this.specify_output_terminal_descriptor();
        this.state = 3269;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Full_path_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_full_path_description;
    return this;
}

Full_path_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_path_descriptionContext.prototype.constructor = Full_path_descriptionContext;

Full_path_descriptionContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Full_path_descriptionContext.prototype.list_of_path_inputs = function() {
    return this.getTypedRuleContext(List_of_path_inputsContext,0);
};

Full_path_descriptionContext.prototype.ASGT = function() {
    return this.getToken(vlogParser.ASGT, 0);
};

Full_path_descriptionContext.prototype.list_of_path_outputs = function() {
    return this.getTypedRuleContext(List_of_path_outputsContext,0);
};

Full_path_descriptionContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Full_path_descriptionContext.prototype.polarity_operator = function() {
    return this.getTypedRuleContext(Polarity_operatorContext,0);
};

Full_path_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFull_path_description(this);
	}
};

Full_path_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFull_path_description(this);
	}
};




vlogParser.Full_path_descriptionContext = Full_path_descriptionContext;

vlogParser.prototype.full_path_description = function() {

    var localctx = new Full_path_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, vlogParser.RULE_full_path_description);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3271;
        this.match(vlogParser.LP);
        this.state = 3272;
        this.list_of_path_inputs();
        this.state = 3274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.PL || _la===vlogParser.MI) {
            this.state = 3273;
            this.polarity_operator();
        }

        this.state = 3276;
        this.match(vlogParser.ASGT);
        this.state = 3277;
        this.list_of_path_outputs();
        this.state = 3278;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_path_inputsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_path_inputs;
    return this;
}

List_of_path_inputsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_path_inputsContext.prototype.constructor = List_of_path_inputsContext;

List_of_path_inputsContext.prototype.specify_input_terminal_descriptor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specify_input_terminal_descriptorContext);
    } else {
        return this.getTypedRuleContext(Specify_input_terminal_descriptorContext,i);
    }
};

List_of_path_inputsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_path_inputsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_path_inputs(this);
	}
};

List_of_path_inputsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_path_inputs(this);
	}
};




vlogParser.List_of_path_inputsContext = List_of_path_inputsContext;

vlogParser.prototype.list_of_path_inputs = function() {

    var localctx = new List_of_path_inputsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, vlogParser.RULE_list_of_path_inputs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3280;
        this.specify_input_terminal_descriptor();
        this.state = 3285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3281;
            this.match(vlogParser.CO);
            this.state = 3282;
            this.specify_input_terminal_descriptor();
            this.state = 3287;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_path_outputsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_path_outputs;
    return this;
}

List_of_path_outputsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_path_outputsContext.prototype.constructor = List_of_path_outputsContext;

List_of_path_outputsContext.prototype.specify_output_terminal_descriptor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Specify_output_terminal_descriptorContext);
    } else {
        return this.getTypedRuleContext(Specify_output_terminal_descriptorContext,i);
    }
};

List_of_path_outputsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_path_outputsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_path_outputs(this);
	}
};

List_of_path_outputsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_path_outputs(this);
	}
};




vlogParser.List_of_path_outputsContext = List_of_path_outputsContext;

vlogParser.prototype.list_of_path_outputs = function() {

    var localctx = new List_of_path_outputsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, vlogParser.RULE_list_of_path_outputs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3288;
        this.specify_output_terminal_descriptor();
        this.state = 3293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3289;
            this.match(vlogParser.CO);
            this.state = 3290;
            this.specify_output_terminal_descriptor();
            this.state = 3295;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specify_input_terminal_descriptorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specify_input_terminal_descriptor;
    return this;
}

Specify_input_terminal_descriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specify_input_terminal_descriptorContext.prototype.constructor = Specify_input_terminal_descriptorContext;

Specify_input_terminal_descriptorContext.prototype.input_identifier = function() {
    return this.getTypedRuleContext(Input_identifierContext,0);
};

Specify_input_terminal_descriptorContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Specify_input_terminal_descriptorContext.prototype.constant_range_expression = function() {
    return this.getTypedRuleContext(Constant_range_expressionContext,0);
};

Specify_input_terminal_descriptorContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Specify_input_terminal_descriptorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecify_input_terminal_descriptor(this);
	}
};

Specify_input_terminal_descriptorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecify_input_terminal_descriptor(this);
	}
};




vlogParser.Specify_input_terminal_descriptorContext = Specify_input_terminal_descriptorContext;

vlogParser.prototype.specify_input_terminal_descriptor = function() {

    var localctx = new Specify_input_terminal_descriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, vlogParser.RULE_specify_input_terminal_descriptor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3296;
        this.input_identifier();
        this.state = 3301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 3297;
            this.match(vlogParser.LB);
            this.state = 3298;
            this.constant_range_expression();
            this.state = 3299;
            this.match(vlogParser.RB);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specify_output_terminal_descriptorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specify_output_terminal_descriptor;
    return this;
}

Specify_output_terminal_descriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specify_output_terminal_descriptorContext.prototype.constructor = Specify_output_terminal_descriptorContext;

Specify_output_terminal_descriptorContext.prototype.output_identifier = function() {
    return this.getTypedRuleContext(Output_identifierContext,0);
};

Specify_output_terminal_descriptorContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Specify_output_terminal_descriptorContext.prototype.constant_range_expression = function() {
    return this.getTypedRuleContext(Constant_range_expressionContext,0);
};

Specify_output_terminal_descriptorContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Specify_output_terminal_descriptorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecify_output_terminal_descriptor(this);
	}
};

Specify_output_terminal_descriptorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecify_output_terminal_descriptor(this);
	}
};




vlogParser.Specify_output_terminal_descriptorContext = Specify_output_terminal_descriptorContext;

vlogParser.prototype.specify_output_terminal_descriptor = function() {

    var localctx = new Specify_output_terminal_descriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, vlogParser.RULE_specify_output_terminal_descriptor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3303;
        this.output_identifier();
        this.state = 3308;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.LB) {
            this.state = 3304;
            this.match(vlogParser.LB);
            this.state = 3305;
            this.constant_range_expression();
            this.state = 3306;
            this.match(vlogParser.RB);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_input_identifier;
    return this;
}

Input_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_identifierContext.prototype.constructor = Input_identifierContext;

Input_identifierContext.prototype.input_port_identifier = function() {
    return this.getTypedRuleContext(Input_port_identifierContext,0);
};

Input_identifierContext.prototype.inout_port_identifier = function() {
    return this.getTypedRuleContext(Inout_port_identifierContext,0);
};

Input_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInput_identifier(this);
	}
};

Input_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInput_identifier(this);
	}
};




vlogParser.Input_identifierContext = Input_identifierContext;

vlogParser.prototype.input_identifier = function() {

    var localctx = new Input_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, vlogParser.RULE_input_identifier);
    try {
        this.state = 3312;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3310;
            this.input_port_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3311;
            this.inout_port_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_identifier;
    return this;
}

Output_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_identifierContext.prototype.constructor = Output_identifierContext;

Output_identifierContext.prototype.output_port_identifier = function() {
    return this.getTypedRuleContext(Output_port_identifierContext,0);
};

Output_identifierContext.prototype.inout_port_identifier = function() {
    return this.getTypedRuleContext(Inout_port_identifierContext,0);
};

Output_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_identifier(this);
	}
};

Output_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_identifier(this);
	}
};




vlogParser.Output_identifierContext = Output_identifierContext;

vlogParser.prototype.output_identifier = function() {

    var localctx = new Output_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, vlogParser.RULE_output_identifier);
    try {
        this.state = 3316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3314;
            this.output_port_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3315;
            this.inout_port_identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Path_delay_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_path_delay_value;
    return this;
}

Path_delay_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Path_delay_valueContext.prototype.constructor = Path_delay_valueContext;

Path_delay_valueContext.prototype.list_of_path_delay_expressions = function() {
    return this.getTypedRuleContext(List_of_path_delay_expressionsContext,0);
};

Path_delay_valueContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Path_delay_valueContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Path_delay_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPath_delay_value(this);
	}
};

Path_delay_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPath_delay_value(this);
	}
};




vlogParser.Path_delay_valueContext = Path_delay_valueContext;

vlogParser.prototype.path_delay_value = function() {

    var localctx = new Path_delay_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, vlogParser.RULE_path_delay_value);
    try {
        this.state = 3323;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3318;
            this.list_of_path_delay_expressions();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3319;
            this.match(vlogParser.LP);
            this.state = 3320;
            this.list_of_path_delay_expressions();
            this.state = 3321;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function List_of_path_delay_expressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_list_of_path_delay_expressions;
    return this;
}

List_of_path_delay_expressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_of_path_delay_expressionsContext.prototype.constructor = List_of_path_delay_expressionsContext;

List_of_path_delay_expressionsContext.prototype.t_path_delay_expression = function() {
    return this.getTypedRuleContext(T_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.trise_path_delay_expression = function() {
    return this.getTypedRuleContext(Trise_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


List_of_path_delay_expressionsContext.prototype.tfall_path_delay_expression = function() {
    return this.getTypedRuleContext(Tfall_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tz_path_delay_expression = function() {
    return this.getTypedRuleContext(Tz_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t01_path_delay_expression = function() {
    return this.getTypedRuleContext(T01_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t10_path_delay_expression = function() {
    return this.getTypedRuleContext(T10_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t0z_path_delay_expression = function() {
    return this.getTypedRuleContext(T0z_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tz1_path_delay_expression = function() {
    return this.getTypedRuleContext(Tz1_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t1z_path_delay_expression = function() {
    return this.getTypedRuleContext(T1z_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tz0_path_delay_expression = function() {
    return this.getTypedRuleContext(Tz0_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t0x_path_delay_expression = function() {
    return this.getTypedRuleContext(T0x_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tx1_path_delay_expression = function() {
    return this.getTypedRuleContext(Tx1_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.t1x_path_delay_expression = function() {
    return this.getTypedRuleContext(T1x_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tx0_path_delay_expression = function() {
    return this.getTypedRuleContext(Tx0_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.txz_path_delay_expression = function() {
    return this.getTypedRuleContext(Txz_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.tzx_path_delay_expression = function() {
    return this.getTypedRuleContext(Tzx_path_delay_expressionContext,0);
};

List_of_path_delay_expressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterList_of_path_delay_expressions(this);
	}
};

List_of_path_delay_expressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitList_of_path_delay_expressions(this);
	}
};




vlogParser.List_of_path_delay_expressionsContext = List_of_path_delay_expressionsContext;

vlogParser.prototype.list_of_path_delay_expressions = function() {

    var localctx = new List_of_path_delay_expressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, vlogParser.RULE_list_of_path_delay_expressions);
    try {
        this.state = 3372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3325;
            this.t_path_delay_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3326;
            this.trise_path_delay_expression();
            this.state = 3327;
            this.match(vlogParser.CO);
            this.state = 3328;
            this.tfall_path_delay_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3330;
            this.trise_path_delay_expression();
            this.state = 3331;
            this.match(vlogParser.CO);
            this.state = 3332;
            this.tfall_path_delay_expression();
            this.state = 3333;
            this.match(vlogParser.CO);
            this.state = 3334;
            this.tz_path_delay_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3336;
            this.t01_path_delay_expression();
            this.state = 3337;
            this.match(vlogParser.CO);
            this.state = 3338;
            this.t10_path_delay_expression();
            this.state = 3339;
            this.match(vlogParser.CO);
            this.state = 3340;
            this.t0z_path_delay_expression();
            this.state = 3341;
            this.match(vlogParser.CO);
            this.state = 3342;
            this.tz1_path_delay_expression();
            this.state = 3343;
            this.match(vlogParser.CO);
            this.state = 3344;
            this.t1z_path_delay_expression();
            this.state = 3345;
            this.match(vlogParser.CO);
            this.state = 3346;
            this.tz0_path_delay_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3348;
            this.t01_path_delay_expression();
            this.state = 3349;
            this.match(vlogParser.CO);
            this.state = 3350;
            this.t10_path_delay_expression();
            this.state = 3351;
            this.match(vlogParser.CO);
            this.state = 3352;
            this.t0z_path_delay_expression();
            this.state = 3353;
            this.match(vlogParser.CO);
            this.state = 3354;
            this.tz1_path_delay_expression();
            this.state = 3355;
            this.match(vlogParser.CO);
            this.state = 3356;
            this.t1z_path_delay_expression();
            this.state = 3357;
            this.match(vlogParser.CO);
            this.state = 3358;
            this.tz0_path_delay_expression();
            this.state = 3359;
            this.match(vlogParser.CO);
            this.state = 3360;
            this.t0x_path_delay_expression();
            this.state = 3361;
            this.match(vlogParser.CO);
            this.state = 3362;
            this.tx1_path_delay_expression();
            this.state = 3363;
            this.match(vlogParser.CO);
            this.state = 3364;
            this.t1x_path_delay_expression();
            this.state = 3365;
            this.match(vlogParser.CO);
            this.state = 3366;
            this.tx0_path_delay_expression();
            this.state = 3367;
            this.match(vlogParser.CO);
            this.state = 3368;
            this.txz_path_delay_expression();
            this.state = 3369;
            this.match(vlogParser.CO);
            this.state = 3370;
            this.tzx_path_delay_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t_path_delay_expression;
    return this;
}

T_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T_path_delay_expressionContext.prototype.constructor = T_path_delay_expressionContext;

T_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT_path_delay_expression(this);
	}
};

T_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT_path_delay_expression(this);
	}
};




vlogParser.T_path_delay_expressionContext = T_path_delay_expressionContext;

vlogParser.prototype.t_path_delay_expression = function() {

    var localctx = new T_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, vlogParser.RULE_t_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3374;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Trise_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_trise_path_delay_expression;
    return this;
}

Trise_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trise_path_delay_expressionContext.prototype.constructor = Trise_path_delay_expressionContext;

Trise_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Trise_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTrise_path_delay_expression(this);
	}
};

Trise_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTrise_path_delay_expression(this);
	}
};




vlogParser.Trise_path_delay_expressionContext = Trise_path_delay_expressionContext;

vlogParser.prototype.trise_path_delay_expression = function() {

    var localctx = new Trise_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, vlogParser.RULE_trise_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3376;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tfall_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tfall_path_delay_expression;
    return this;
}

Tfall_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tfall_path_delay_expressionContext.prototype.constructor = Tfall_path_delay_expressionContext;

Tfall_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tfall_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTfall_path_delay_expression(this);
	}
};

Tfall_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTfall_path_delay_expression(this);
	}
};




vlogParser.Tfall_path_delay_expressionContext = Tfall_path_delay_expressionContext;

vlogParser.prototype.tfall_path_delay_expression = function() {

    var localctx = new Tfall_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, vlogParser.RULE_tfall_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3378;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tz_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tz_path_delay_expression;
    return this;
}

Tz_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tz_path_delay_expressionContext.prototype.constructor = Tz_path_delay_expressionContext;

Tz_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tz_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTz_path_delay_expression(this);
	}
};

Tz_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTz_path_delay_expression(this);
	}
};




vlogParser.Tz_path_delay_expressionContext = Tz_path_delay_expressionContext;

vlogParser.prototype.tz_path_delay_expression = function() {

    var localctx = new Tz_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, vlogParser.RULE_tz_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3380;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T01_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t01_path_delay_expression;
    return this;
}

T01_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T01_path_delay_expressionContext.prototype.constructor = T01_path_delay_expressionContext;

T01_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T01_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT01_path_delay_expression(this);
	}
};

T01_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT01_path_delay_expression(this);
	}
};




vlogParser.T01_path_delay_expressionContext = T01_path_delay_expressionContext;

vlogParser.prototype.t01_path_delay_expression = function() {

    var localctx = new T01_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, vlogParser.RULE_t01_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3382;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T10_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t10_path_delay_expression;
    return this;
}

T10_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T10_path_delay_expressionContext.prototype.constructor = T10_path_delay_expressionContext;

T10_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T10_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT10_path_delay_expression(this);
	}
};

T10_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT10_path_delay_expression(this);
	}
};




vlogParser.T10_path_delay_expressionContext = T10_path_delay_expressionContext;

vlogParser.prototype.t10_path_delay_expression = function() {

    var localctx = new T10_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, vlogParser.RULE_t10_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3384;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T0z_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t0z_path_delay_expression;
    return this;
}

T0z_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T0z_path_delay_expressionContext.prototype.constructor = T0z_path_delay_expressionContext;

T0z_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T0z_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT0z_path_delay_expression(this);
	}
};

T0z_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT0z_path_delay_expression(this);
	}
};




vlogParser.T0z_path_delay_expressionContext = T0z_path_delay_expressionContext;

vlogParser.prototype.t0z_path_delay_expression = function() {

    var localctx = new T0z_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, vlogParser.RULE_t0z_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3386;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tz1_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tz1_path_delay_expression;
    return this;
}

Tz1_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tz1_path_delay_expressionContext.prototype.constructor = Tz1_path_delay_expressionContext;

Tz1_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tz1_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTz1_path_delay_expression(this);
	}
};

Tz1_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTz1_path_delay_expression(this);
	}
};




vlogParser.Tz1_path_delay_expressionContext = Tz1_path_delay_expressionContext;

vlogParser.prototype.tz1_path_delay_expression = function() {

    var localctx = new Tz1_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, vlogParser.RULE_tz1_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3388;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T1z_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t1z_path_delay_expression;
    return this;
}

T1z_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T1z_path_delay_expressionContext.prototype.constructor = T1z_path_delay_expressionContext;

T1z_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T1z_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT1z_path_delay_expression(this);
	}
};

T1z_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT1z_path_delay_expression(this);
	}
};




vlogParser.T1z_path_delay_expressionContext = T1z_path_delay_expressionContext;

vlogParser.prototype.t1z_path_delay_expression = function() {

    var localctx = new T1z_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, vlogParser.RULE_t1z_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3390;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tz0_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tz0_path_delay_expression;
    return this;
}

Tz0_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tz0_path_delay_expressionContext.prototype.constructor = Tz0_path_delay_expressionContext;

Tz0_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tz0_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTz0_path_delay_expression(this);
	}
};

Tz0_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTz0_path_delay_expression(this);
	}
};




vlogParser.Tz0_path_delay_expressionContext = Tz0_path_delay_expressionContext;

vlogParser.prototype.tz0_path_delay_expression = function() {

    var localctx = new Tz0_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, vlogParser.RULE_tz0_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3392;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T0x_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t0x_path_delay_expression;
    return this;
}

T0x_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T0x_path_delay_expressionContext.prototype.constructor = T0x_path_delay_expressionContext;

T0x_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T0x_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT0x_path_delay_expression(this);
	}
};

T0x_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT0x_path_delay_expression(this);
	}
};




vlogParser.T0x_path_delay_expressionContext = T0x_path_delay_expressionContext;

vlogParser.prototype.t0x_path_delay_expression = function() {

    var localctx = new T0x_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, vlogParser.RULE_t0x_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3394;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tx1_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tx1_path_delay_expression;
    return this;
}

Tx1_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tx1_path_delay_expressionContext.prototype.constructor = Tx1_path_delay_expressionContext;

Tx1_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tx1_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTx1_path_delay_expression(this);
	}
};

Tx1_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTx1_path_delay_expression(this);
	}
};




vlogParser.Tx1_path_delay_expressionContext = Tx1_path_delay_expressionContext;

vlogParser.prototype.tx1_path_delay_expression = function() {

    var localctx = new Tx1_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, vlogParser.RULE_tx1_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3396;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function T1x_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_t1x_path_delay_expression;
    return this;
}

T1x_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
T1x_path_delay_expressionContext.prototype.constructor = T1x_path_delay_expressionContext;

T1x_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

T1x_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterT1x_path_delay_expression(this);
	}
};

T1x_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitT1x_path_delay_expression(this);
	}
};




vlogParser.T1x_path_delay_expressionContext = T1x_path_delay_expressionContext;

vlogParser.prototype.t1x_path_delay_expression = function() {

    var localctx = new T1x_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, vlogParser.RULE_t1x_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3398;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tx0_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tx0_path_delay_expression;
    return this;
}

Tx0_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tx0_path_delay_expressionContext.prototype.constructor = Tx0_path_delay_expressionContext;

Tx0_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tx0_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTx0_path_delay_expression(this);
	}
};

Tx0_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTx0_path_delay_expression(this);
	}
};




vlogParser.Tx0_path_delay_expressionContext = Tx0_path_delay_expressionContext;

vlogParser.prototype.tx0_path_delay_expression = function() {

    var localctx = new Tx0_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, vlogParser.RULE_tx0_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3400;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Txz_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_txz_path_delay_expression;
    return this;
}

Txz_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Txz_path_delay_expressionContext.prototype.constructor = Txz_path_delay_expressionContext;

Txz_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Txz_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTxz_path_delay_expression(this);
	}
};

Txz_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTxz_path_delay_expression(this);
	}
};




vlogParser.Txz_path_delay_expressionContext = Txz_path_delay_expressionContext;

vlogParser.prototype.txz_path_delay_expression = function() {

    var localctx = new Txz_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, vlogParser.RULE_txz_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3402;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tzx_path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_tzx_path_delay_expression;
    return this;
}

Tzx_path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tzx_path_delay_expressionContext.prototype.constructor = Tzx_path_delay_expressionContext;

Tzx_path_delay_expressionContext.prototype.path_delay_expression = function() {
    return this.getTypedRuleContext(Path_delay_expressionContext,0);
};

Tzx_path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTzx_path_delay_expression(this);
	}
};

Tzx_path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTzx_path_delay_expression(this);
	}
};




vlogParser.Tzx_path_delay_expressionContext = Tzx_path_delay_expressionContext;

vlogParser.prototype.tzx_path_delay_expression = function() {

    var localctx = new Tzx_path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, vlogParser.RULE_tzx_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3404;
        this.path_delay_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Path_delay_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_path_delay_expression;
    return this;
}

Path_delay_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Path_delay_expressionContext.prototype.constructor = Path_delay_expressionContext;

Path_delay_expressionContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Path_delay_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPath_delay_expression(this);
	}
};

Path_delay_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPath_delay_expression(this);
	}
};




vlogParser.Path_delay_expressionContext = Path_delay_expressionContext;

vlogParser.prototype.path_delay_expression = function() {

    var localctx = new Path_delay_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, vlogParser.RULE_path_delay_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3406;
        this.constant_mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_sensitive_path_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_sensitive_path_declaration;
    return this;
}

Edge_sensitive_path_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_sensitive_path_declarationContext.prototype.constructor = Edge_sensitive_path_declarationContext;

Edge_sensitive_path_declarationContext.prototype.parallel_edge_sensitive_path_description = function() {
    return this.getTypedRuleContext(Parallel_edge_sensitive_path_descriptionContext,0);
};

Edge_sensitive_path_declarationContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Edge_sensitive_path_declarationContext.prototype.path_delay_value = function() {
    return this.getTypedRuleContext(Path_delay_valueContext,0);
};

Edge_sensitive_path_declarationContext.prototype.full_edge_sensitive_path_description = function() {
    return this.getTypedRuleContext(Full_edge_sensitive_path_descriptionContext,0);
};

Edge_sensitive_path_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_sensitive_path_declaration(this);
	}
};

Edge_sensitive_path_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_sensitive_path_declaration(this);
	}
};




vlogParser.Edge_sensitive_path_declarationContext = Edge_sensitive_path_declarationContext;

vlogParser.prototype.edge_sensitive_path_declaration = function() {

    var localctx = new Edge_sensitive_path_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, vlogParser.RULE_edge_sensitive_path_declaration);
    try {
        this.state = 3416;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3408;
            this.parallel_edge_sensitive_path_description();
            this.state = 3409;
            this.match(vlogParser.EQ);
            this.state = 3410;
            this.path_delay_value();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3412;
            this.full_edge_sensitive_path_description();
            this.state = 3413;
            this.match(vlogParser.EQ);
            this.state = 3414;
            this.path_delay_value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parallel_edge_sensitive_path_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parallel_edge_sensitive_path_description;
    return this;
}

Parallel_edge_sensitive_path_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parallel_edge_sensitive_path_descriptionContext.prototype.constructor = Parallel_edge_sensitive_path_descriptionContext;

Parallel_edge_sensitive_path_descriptionContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LP);
    } else {
        return this.getToken(vlogParser.LP, i);
    }
};


Parallel_edge_sensitive_path_descriptionContext.prototype.specify_input_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_input_terminal_descriptorContext,0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.EQGT = function() {
    return this.getToken(vlogParser.EQGT, 0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.specify_output_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_output_terminal_descriptorContext,0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.data_source_expression = function() {
    return this.getTypedRuleContext(Data_source_expressionContext,0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RP);
    } else {
        return this.getToken(vlogParser.RP, i);
    }
};


Parallel_edge_sensitive_path_descriptionContext.prototype.edge_identifier = function() {
    return this.getTypedRuleContext(Edge_identifierContext,0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.polarity_operator = function() {
    return this.getTypedRuleContext(Polarity_operatorContext,0);
};

Parallel_edge_sensitive_path_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParallel_edge_sensitive_path_description(this);
	}
};

Parallel_edge_sensitive_path_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParallel_edge_sensitive_path_description(this);
	}
};




vlogParser.Parallel_edge_sensitive_path_descriptionContext = Parallel_edge_sensitive_path_descriptionContext;

vlogParser.prototype.parallel_edge_sensitive_path_description = function() {

    var localctx = new Parallel_edge_sensitive_path_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, vlogParser.RULE_parallel_edge_sensitive_path_description);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3418;
        this.match(vlogParser.LP);
        this.state = 3420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.NEGEDGE || _la===vlogParser.POSEDGE) {
            this.state = 3419;
            this.edge_identifier();
        }

        this.state = 3422;
        this.specify_input_terminal_descriptor();
        this.state = 3423;
        this.match(vlogParser.EQGT);
        this.state = 3424;
        this.match(vlogParser.LP);
        this.state = 3425;
        this.specify_output_terminal_descriptor();
        this.state = 3427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.PL || _la===vlogParser.MI) {
            this.state = 3426;
            this.polarity_operator();
        }

        this.state = 3429;
        this.match(vlogParser.CL);
        this.state = 3430;
        this.data_source_expression();
        this.state = 3431;
        this.match(vlogParser.RP);
        this.state = 3432;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Full_edge_sensitive_path_descriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_full_edge_sensitive_path_description;
    return this;
}

Full_edge_sensitive_path_descriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_edge_sensitive_path_descriptionContext.prototype.constructor = Full_edge_sensitive_path_descriptionContext;

Full_edge_sensitive_path_descriptionContext.prototype.LP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LP);
    } else {
        return this.getToken(vlogParser.LP, i);
    }
};


Full_edge_sensitive_path_descriptionContext.prototype.list_of_path_inputs = function() {
    return this.getTypedRuleContext(List_of_path_inputsContext,0);
};

Full_edge_sensitive_path_descriptionContext.prototype.ASGT = function() {
    return this.getToken(vlogParser.ASGT, 0);
};

Full_edge_sensitive_path_descriptionContext.prototype.list_of_path_outputs = function() {
    return this.getTypedRuleContext(List_of_path_outputsContext,0);
};

Full_edge_sensitive_path_descriptionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Full_edge_sensitive_path_descriptionContext.prototype.data_source_expression = function() {
    return this.getTypedRuleContext(Data_source_expressionContext,0);
};

Full_edge_sensitive_path_descriptionContext.prototype.RP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RP);
    } else {
        return this.getToken(vlogParser.RP, i);
    }
};


Full_edge_sensitive_path_descriptionContext.prototype.edge_identifier = function() {
    return this.getTypedRuleContext(Edge_identifierContext,0);
};

Full_edge_sensitive_path_descriptionContext.prototype.polarity_operator = function() {
    return this.getTypedRuleContext(Polarity_operatorContext,0);
};

Full_edge_sensitive_path_descriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFull_edge_sensitive_path_description(this);
	}
};

Full_edge_sensitive_path_descriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFull_edge_sensitive_path_description(this);
	}
};




vlogParser.Full_edge_sensitive_path_descriptionContext = Full_edge_sensitive_path_descriptionContext;

vlogParser.prototype.full_edge_sensitive_path_description = function() {

    var localctx = new Full_edge_sensitive_path_descriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, vlogParser.RULE_full_edge_sensitive_path_description);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3434;
        this.match(vlogParser.LP);
        this.state = 3436;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.NEGEDGE || _la===vlogParser.POSEDGE) {
            this.state = 3435;
            this.edge_identifier();
        }

        this.state = 3438;
        this.list_of_path_inputs();
        this.state = 3439;
        this.match(vlogParser.ASGT);
        this.state = 3440;
        this.match(vlogParser.LP);
        this.state = 3441;
        this.list_of_path_outputs();
        this.state = 3443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.PL || _la===vlogParser.MI) {
            this.state = 3442;
            this.polarity_operator();
        }

        this.state = 3445;
        this.match(vlogParser.CL);
        this.state = 3446;
        this.data_source_expression();
        this.state = 3447;
        this.match(vlogParser.RP);
        this.state = 3448;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Data_source_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_data_source_expression;
    return this;
}

Data_source_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_source_expressionContext.prototype.constructor = Data_source_expressionContext;

Data_source_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Data_source_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterData_source_expression(this);
	}
};

Data_source_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitData_source_expression(this);
	}
};




vlogParser.Data_source_expressionContext = Data_source_expressionContext;

vlogParser.prototype.data_source_expression = function() {

    var localctx = new Data_source_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, vlogParser.RULE_data_source_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3450;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_identifier;
    return this;
}

Edge_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_identifierContext.prototype.constructor = Edge_identifierContext;

Edge_identifierContext.prototype.POSEDGE = function() {
    return this.getToken(vlogParser.POSEDGE, 0);
};

Edge_identifierContext.prototype.NEGEDGE = function() {
    return this.getToken(vlogParser.NEGEDGE, 0);
};

Edge_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_identifier(this);
	}
};

Edge_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_identifier(this);
	}
};




vlogParser.Edge_identifierContext = Edge_identifierContext;

vlogParser.prototype.edge_identifier = function() {

    var localctx = new Edge_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, vlogParser.RULE_edge_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3452;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.NEGEDGE || _la===vlogParser.POSEDGE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function State_dependent_path_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_state_dependent_path_declaration;
    return this;
}

State_dependent_path_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
State_dependent_path_declarationContext.prototype.constructor = State_dependent_path_declarationContext;

State_dependent_path_declarationContext.prototype.IF = function() {
    return this.getToken(vlogParser.IF, 0);
};

State_dependent_path_declarationContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

State_dependent_path_declarationContext.prototype.module_path_expression = function() {
    return this.getTypedRuleContext(Module_path_expressionContext,0);
};

State_dependent_path_declarationContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

State_dependent_path_declarationContext.prototype.simple_path_declaration = function() {
    return this.getTypedRuleContext(Simple_path_declarationContext,0);
};

State_dependent_path_declarationContext.prototype.edge_sensitive_path_declaration = function() {
    return this.getTypedRuleContext(Edge_sensitive_path_declarationContext,0);
};

State_dependent_path_declarationContext.prototype.IFNONE = function() {
    return this.getToken(vlogParser.IFNONE, 0);
};

State_dependent_path_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterState_dependent_path_declaration(this);
	}
};

State_dependent_path_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitState_dependent_path_declaration(this);
	}
};




vlogParser.State_dependent_path_declarationContext = State_dependent_path_declarationContext;

vlogParser.prototype.state_dependent_path_declaration = function() {

    var localctx = new State_dependent_path_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, vlogParser.RULE_state_dependent_path_declaration);
    try {
        this.state = 3468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3454;
            this.match(vlogParser.IF);
            this.state = 3455;
            this.match(vlogParser.LP);
            this.state = 3456;
            this.module_path_expression(0);
            this.state = 3457;
            this.match(vlogParser.RP);
            this.state = 3458;
            this.simple_path_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3460;
            this.match(vlogParser.IF);
            this.state = 3461;
            this.match(vlogParser.LP);
            this.state = 3462;
            this.module_path_expression(0);
            this.state = 3463;
            this.match(vlogParser.RP);
            this.state = 3464;
            this.edge_sensitive_path_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3466;
            this.match(vlogParser.IFNONE);
            this.state = 3467;
            this.simple_path_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Polarity_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_polarity_operator;
    return this;
}

Polarity_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Polarity_operatorContext.prototype.constructor = Polarity_operatorContext;

Polarity_operatorContext.prototype.PL = function() {
    return this.getToken(vlogParser.PL, 0);
};

Polarity_operatorContext.prototype.MI = function() {
    return this.getToken(vlogParser.MI, 0);
};

Polarity_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPolarity_operator(this);
	}
};

Polarity_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPolarity_operator(this);
	}
};




vlogParser.Polarity_operatorContext = Polarity_operatorContext;

vlogParser.prototype.polarity_operator = function() {

    var localctx = new Polarity_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, vlogParser.RULE_polarity_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3470;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.PL || _la===vlogParser.MI)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function System_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_system_timing_check;
    return this;
}

System_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
System_timing_checkContext.prototype.constructor = System_timing_checkContext;

System_timing_checkContext.prototype.setup_timing_check = function() {
    return this.getTypedRuleContext(Setup_timing_checkContext,0);
};

System_timing_checkContext.prototype.hold_timing_check = function() {
    return this.getTypedRuleContext(Hold_timing_checkContext,0);
};

System_timing_checkContext.prototype.setuphold_timing_check = function() {
    return this.getTypedRuleContext(Setuphold_timing_checkContext,0);
};

System_timing_checkContext.prototype.recovery_timing_check = function() {
    return this.getTypedRuleContext(Recovery_timing_checkContext,0);
};

System_timing_checkContext.prototype.removal_timing_check = function() {
    return this.getTypedRuleContext(Removal_timing_checkContext,0);
};

System_timing_checkContext.prototype.recrem_timing_check = function() {
    return this.getTypedRuleContext(Recrem_timing_checkContext,0);
};

System_timing_checkContext.prototype.skew_timing_check = function() {
    return this.getTypedRuleContext(Skew_timing_checkContext,0);
};

System_timing_checkContext.prototype.timeskew_timing_check = function() {
    return this.getTypedRuleContext(Timeskew_timing_checkContext,0);
};

System_timing_checkContext.prototype.fullskew_timing_check = function() {
    return this.getTypedRuleContext(Fullskew_timing_checkContext,0);
};

System_timing_checkContext.prototype.period_timing_check = function() {
    return this.getTypedRuleContext(Period_timing_checkContext,0);
};

System_timing_checkContext.prototype.width_timing_check = function() {
    return this.getTypedRuleContext(Width_timing_checkContext,0);
};

System_timing_checkContext.prototype.nochange_timing_check = function() {
    return this.getTypedRuleContext(Nochange_timing_checkContext,0);
};

System_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSystem_timing_check(this);
	}
};

System_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSystem_timing_check(this);
	}
};




vlogParser.System_timing_checkContext = System_timing_checkContext;

vlogParser.prototype.system_timing_check = function() {

    var localctx = new System_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, vlogParser.RULE_system_timing_check);
    try {
        this.state = 3484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.DLSETUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 3472;
            this.setup_timing_check();
            break;
        case vlogParser.DLHOLD:
            this.enterOuterAlt(localctx, 2);
            this.state = 3473;
            this.hold_timing_check();
            break;
        case vlogParser.DLSETUPHOLD:
            this.enterOuterAlt(localctx, 3);
            this.state = 3474;
            this.setuphold_timing_check();
            break;
        case vlogParser.DLRECOVERY:
            this.enterOuterAlt(localctx, 4);
            this.state = 3475;
            this.recovery_timing_check();
            break;
        case vlogParser.DLREMOVAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 3476;
            this.removal_timing_check();
            break;
        case vlogParser.DLRECREM:
            this.enterOuterAlt(localctx, 6);
            this.state = 3477;
            this.recrem_timing_check();
            break;
        case vlogParser.DLSKEW:
            this.enterOuterAlt(localctx, 7);
            this.state = 3478;
            this.skew_timing_check();
            break;
        case vlogParser.DLTIMESKEW:
            this.enterOuterAlt(localctx, 8);
            this.state = 3479;
            this.timeskew_timing_check();
            break;
        case vlogParser.DLFULLSKEW:
            this.enterOuterAlt(localctx, 9);
            this.state = 3480;
            this.fullskew_timing_check();
            break;
        case vlogParser.DLPERIOD:
            this.enterOuterAlt(localctx, 10);
            this.state = 3481;
            this.period_timing_check();
            break;
        case vlogParser.DLWIDTH:
            this.enterOuterAlt(localctx, 11);
            this.state = 3482;
            this.width_timing_check();
            break;
        case vlogParser.DLNOCHANGE:
            this.enterOuterAlt(localctx, 12);
            this.state = 3483;
            this.nochange_timing_check();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Setup_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_setup_timing_check;
    return this;
}

Setup_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setup_timing_checkContext.prototype.constructor = Setup_timing_checkContext;

Setup_timing_checkContext.prototype.DLSETUP = function() {
    return this.getToken(vlogParser.DLSETUP, 0);
};

Setup_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Setup_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Setup_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Setup_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Setup_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Setup_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Setup_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Setup_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Setup_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSetup_timing_check(this);
	}
};

Setup_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSetup_timing_check(this);
	}
};




vlogParser.Setup_timing_checkContext = Setup_timing_checkContext;

vlogParser.prototype.setup_timing_check = function() {

    var localctx = new Setup_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, vlogParser.RULE_setup_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3486;
        this.match(vlogParser.DLSETUP);
        this.state = 3487;
        this.match(vlogParser.LP);
        this.state = 3488;
        this.data_event();
        this.state = 3489;
        this.match(vlogParser.CO);
        this.state = 3490;
        this.reference_event();
        this.state = 3491;
        this.match(vlogParser.CO);
        this.state = 3492;
        this.timing_check_limit();
        this.state = 3497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3493;
            this.match(vlogParser.CO);
            this.state = 3495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3494;
                this.notifier();
            }

        }

        this.state = 3499;
        this.match(vlogParser.RP);
        this.state = 3500;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hold_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hold_timing_check;
    return this;
}

Hold_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hold_timing_checkContext.prototype.constructor = Hold_timing_checkContext;

Hold_timing_checkContext.prototype.DLHOLD = function() {
    return this.getToken(vlogParser.DLHOLD, 0);
};

Hold_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Hold_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Hold_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Hold_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Hold_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Hold_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Hold_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Hold_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Hold_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHold_timing_check(this);
	}
};

Hold_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHold_timing_check(this);
	}
};




vlogParser.Hold_timing_checkContext = Hold_timing_checkContext;

vlogParser.prototype.hold_timing_check = function() {

    var localctx = new Hold_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, vlogParser.RULE_hold_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3502;
        this.match(vlogParser.DLHOLD);
        this.state = 3503;
        this.match(vlogParser.LP);
        this.state = 3504;
        this.reference_event();
        this.state = 3505;
        this.match(vlogParser.CO);
        this.state = 3506;
        this.data_event();
        this.state = 3507;
        this.match(vlogParser.CO);
        this.state = 3508;
        this.timing_check_limit();
        this.state = 3513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3509;
            this.match(vlogParser.CO);
            this.state = 3511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3510;
                this.notifier();
            }

        }

        this.state = 3515;
        this.match(vlogParser.RP);
        this.state = 3516;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Setuphold_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_setuphold_timing_check;
    return this;
}

Setuphold_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setuphold_timing_checkContext.prototype.constructor = Setuphold_timing_checkContext;

Setuphold_timing_checkContext.prototype.DLSETUPHOLD = function() {
    return this.getToken(vlogParser.DLSETUPHOLD, 0);
};

Setuphold_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Setuphold_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Setuphold_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Setuphold_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Setuphold_timing_checkContext.prototype.timing_check_limit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_check_limitContext);
    } else {
        return this.getTypedRuleContext(Timing_check_limitContext,i);
    }
};

Setuphold_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Setuphold_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Setuphold_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Setuphold_timing_checkContext.prototype.stamptime_condition = function() {
    return this.getTypedRuleContext(Stamptime_conditionContext,0);
};

Setuphold_timing_checkContext.prototype.checktime_condition = function() {
    return this.getTypedRuleContext(Checktime_conditionContext,0);
};

Setuphold_timing_checkContext.prototype.delayed_reference = function() {
    return this.getTypedRuleContext(Delayed_referenceContext,0);
};

Setuphold_timing_checkContext.prototype.delayed_data = function() {
    return this.getTypedRuleContext(Delayed_dataContext,0);
};

Setuphold_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSetuphold_timing_check(this);
	}
};

Setuphold_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSetuphold_timing_check(this);
	}
};




vlogParser.Setuphold_timing_checkContext = Setuphold_timing_checkContext;

vlogParser.prototype.setuphold_timing_check = function() {

    var localctx = new Setuphold_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, vlogParser.RULE_setuphold_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3518;
        this.match(vlogParser.DLSETUPHOLD);
        this.state = 3519;
        this.match(vlogParser.LP);
        this.state = 3520;
        this.reference_event();
        this.state = 3521;
        this.match(vlogParser.CO);
        this.state = 3522;
        this.data_event();
        this.state = 3523;
        this.match(vlogParser.CO);
        this.state = 3524;
        this.timing_check_limit();
        this.state = 3525;
        this.match(vlogParser.CO);
        this.state = 3526;
        this.timing_check_limit();
        this.state = 3555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3527;
            this.match(vlogParser.CO);
            this.state = 3529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3528;
                this.notifier();
            }

            this.state = 3553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 3531;
                this.match(vlogParser.CO);
                this.state = 3533;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                    this.state = 3532;
                    this.stamptime_condition();
                }

                this.state = 3551;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.CO) {
                    this.state = 3535;
                    this.match(vlogParser.CO);
                    this.state = 3537;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                        this.state = 3536;
                        this.checktime_condition();
                    }

                    this.state = 3549;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===vlogParser.CO) {
                        this.state = 3539;
                        this.match(vlogParser.CO);
                        this.state = 3541;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                            this.state = 3540;
                            this.delayed_reference();
                        }

                        this.state = 3547;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===vlogParser.CO) {
                            this.state = 3543;
                            this.match(vlogParser.CO);
                            this.state = 3545;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                                this.state = 3544;
                                this.delayed_data();
                            }

                        }

                    }

                }

            }

        }

        this.state = 3557;
        this.match(vlogParser.RP);
        this.state = 3558;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Recovery_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_recovery_timing_check;
    return this;
}

Recovery_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Recovery_timing_checkContext.prototype.constructor = Recovery_timing_checkContext;

Recovery_timing_checkContext.prototype.DLRECOVERY = function() {
    return this.getToken(vlogParser.DLRECOVERY, 0);
};

Recovery_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Recovery_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Recovery_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Recovery_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Recovery_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Recovery_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Recovery_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Recovery_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Recovery_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRecovery_timing_check(this);
	}
};

Recovery_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRecovery_timing_check(this);
	}
};




vlogParser.Recovery_timing_checkContext = Recovery_timing_checkContext;

vlogParser.prototype.recovery_timing_check = function() {

    var localctx = new Recovery_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, vlogParser.RULE_recovery_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3560;
        this.match(vlogParser.DLRECOVERY);
        this.state = 3561;
        this.match(vlogParser.LP);
        this.state = 3562;
        this.reference_event();
        this.state = 3563;
        this.match(vlogParser.CO);
        this.state = 3564;
        this.data_event();
        this.state = 3565;
        this.match(vlogParser.CO);
        this.state = 3566;
        this.timing_check_limit();
        this.state = 3571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3567;
            this.match(vlogParser.CO);
            this.state = 3569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3568;
                this.notifier();
            }

        }

        this.state = 3573;
        this.match(vlogParser.RP);
        this.state = 3574;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Removal_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_removal_timing_check;
    return this;
}

Removal_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Removal_timing_checkContext.prototype.constructor = Removal_timing_checkContext;

Removal_timing_checkContext.prototype.DLREMOVAL = function() {
    return this.getToken(vlogParser.DLREMOVAL, 0);
};

Removal_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Removal_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Removal_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Removal_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Removal_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Removal_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Removal_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Removal_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Removal_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRemoval_timing_check(this);
	}
};

Removal_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRemoval_timing_check(this);
	}
};




vlogParser.Removal_timing_checkContext = Removal_timing_checkContext;

vlogParser.prototype.removal_timing_check = function() {

    var localctx = new Removal_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, vlogParser.RULE_removal_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3576;
        this.match(vlogParser.DLREMOVAL);
        this.state = 3577;
        this.match(vlogParser.LP);
        this.state = 3578;
        this.reference_event();
        this.state = 3579;
        this.match(vlogParser.CO);
        this.state = 3580;
        this.data_event();
        this.state = 3581;
        this.match(vlogParser.CO);
        this.state = 3582;
        this.timing_check_limit();
        this.state = 3587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3583;
            this.match(vlogParser.CO);
            this.state = 3585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3584;
                this.notifier();
            }

        }

        this.state = 3589;
        this.match(vlogParser.RP);
        this.state = 3590;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Recrem_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_recrem_timing_check;
    return this;
}

Recrem_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Recrem_timing_checkContext.prototype.constructor = Recrem_timing_checkContext;

Recrem_timing_checkContext.prototype.DLRECREM = function() {
    return this.getToken(vlogParser.DLRECREM, 0);
};

Recrem_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Recrem_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Recrem_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Recrem_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Recrem_timing_checkContext.prototype.timing_check_limit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_check_limitContext);
    } else {
        return this.getTypedRuleContext(Timing_check_limitContext,i);
    }
};

Recrem_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Recrem_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Recrem_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Recrem_timing_checkContext.prototype.stamptime_condition = function() {
    return this.getTypedRuleContext(Stamptime_conditionContext,0);
};

Recrem_timing_checkContext.prototype.checktime_condition = function() {
    return this.getTypedRuleContext(Checktime_conditionContext,0);
};

Recrem_timing_checkContext.prototype.delayed_reference = function() {
    return this.getTypedRuleContext(Delayed_referenceContext,0);
};

Recrem_timing_checkContext.prototype.delayed_data = function() {
    return this.getTypedRuleContext(Delayed_dataContext,0);
};

Recrem_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRecrem_timing_check(this);
	}
};

Recrem_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRecrem_timing_check(this);
	}
};




vlogParser.Recrem_timing_checkContext = Recrem_timing_checkContext;

vlogParser.prototype.recrem_timing_check = function() {

    var localctx = new Recrem_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, vlogParser.RULE_recrem_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3592;
        this.match(vlogParser.DLRECREM);
        this.state = 3593;
        this.match(vlogParser.LP);
        this.state = 3594;
        this.reference_event();
        this.state = 3595;
        this.match(vlogParser.CO);
        this.state = 3596;
        this.data_event();
        this.state = 3597;
        this.match(vlogParser.CO);
        this.state = 3598;
        this.timing_check_limit();
        this.state = 3599;
        this.match(vlogParser.CO);
        this.state = 3600;
        this.timing_check_limit();
        this.state = 3629;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3601;
            this.match(vlogParser.CO);
            this.state = 3603;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3602;
                this.notifier();
            }

            this.state = 3627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 3605;
                this.match(vlogParser.CO);
                this.state = 3607;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                    this.state = 3606;
                    this.stamptime_condition();
                }

                this.state = 3625;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.CO) {
                    this.state = 3609;
                    this.match(vlogParser.CO);
                    this.state = 3611;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                        this.state = 3610;
                        this.checktime_condition();
                    }

                    this.state = 3623;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===vlogParser.CO) {
                        this.state = 3613;
                        this.match(vlogParser.CO);
                        this.state = 3615;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                            this.state = 3614;
                            this.delayed_reference();
                        }

                        this.state = 3621;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===vlogParser.CO) {
                            this.state = 3617;
                            this.match(vlogParser.CO);
                            this.state = 3619;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                                this.state = 3618;
                                this.delayed_data();
                            }

                        }

                    }

                }

            }

        }

        this.state = 3631;
        this.match(vlogParser.RP);
        this.state = 3632;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Skew_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_skew_timing_check;
    return this;
}

Skew_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Skew_timing_checkContext.prototype.constructor = Skew_timing_checkContext;

Skew_timing_checkContext.prototype.DLSKEW = function() {
    return this.getToken(vlogParser.DLSKEW, 0);
};

Skew_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Skew_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Skew_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Skew_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Skew_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Skew_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Skew_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Skew_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Skew_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSkew_timing_check(this);
	}
};

Skew_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSkew_timing_check(this);
	}
};




vlogParser.Skew_timing_checkContext = Skew_timing_checkContext;

vlogParser.prototype.skew_timing_check = function() {

    var localctx = new Skew_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, vlogParser.RULE_skew_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3634;
        this.match(vlogParser.DLSKEW);
        this.state = 3635;
        this.match(vlogParser.LP);
        this.state = 3636;
        this.reference_event();
        this.state = 3637;
        this.match(vlogParser.CO);
        this.state = 3638;
        this.data_event();
        this.state = 3639;
        this.match(vlogParser.CO);
        this.state = 3640;
        this.timing_check_limit();
        this.state = 3645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3641;
            this.match(vlogParser.CO);
            this.state = 3643;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3642;
                this.notifier();
            }

        }

        this.state = 3647;
        this.match(vlogParser.RP);
        this.state = 3648;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timeskew_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_timeskew_timing_check;
    return this;
}

Timeskew_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timeskew_timing_checkContext.prototype.constructor = Timeskew_timing_checkContext;

Timeskew_timing_checkContext.prototype.DLTIMESKEW = function() {
    return this.getToken(vlogParser.DLTIMESKEW, 0);
};

Timeskew_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Timeskew_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Timeskew_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Timeskew_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Timeskew_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Timeskew_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Timeskew_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Timeskew_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Timeskew_timing_checkContext.prototype.event_based_flag = function() {
    return this.getTypedRuleContext(Event_based_flagContext,0);
};

Timeskew_timing_checkContext.prototype.remain_active_flag = function() {
    return this.getTypedRuleContext(Remain_active_flagContext,0);
};

Timeskew_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTimeskew_timing_check(this);
	}
};

Timeskew_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTimeskew_timing_check(this);
	}
};




vlogParser.Timeskew_timing_checkContext = Timeskew_timing_checkContext;

vlogParser.prototype.timeskew_timing_check = function() {

    var localctx = new Timeskew_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, vlogParser.RULE_timeskew_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3650;
        this.match(vlogParser.DLTIMESKEW);
        this.state = 3651;
        this.match(vlogParser.LP);
        this.state = 3652;
        this.reference_event();
        this.state = 3653;
        this.match(vlogParser.CO);
        this.state = 3654;
        this.data_event();
        this.state = 3655;
        this.match(vlogParser.CO);
        this.state = 3656;
        this.timing_check_limit();
        this.state = 3673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3657;
            this.match(vlogParser.CO);
            this.state = 3659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3658;
                this.notifier();
            }

            this.state = 3671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 3661;
                this.match(vlogParser.CO);
                this.state = 3663;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                    this.state = 3662;
                    this.event_based_flag();
                }

                this.state = 3669;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.CO) {
                    this.state = 3665;
                    this.match(vlogParser.CO);
                    this.state = 3667;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                        this.state = 3666;
                        this.remain_active_flag();
                    }

                }

            }

        }

        this.state = 3675;
        this.match(vlogParser.RP);
        this.state = 3676;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fullskew_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_fullskew_timing_check;
    return this;
}

Fullskew_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fullskew_timing_checkContext.prototype.constructor = Fullskew_timing_checkContext;

Fullskew_timing_checkContext.prototype.DLFULLSKEW = function() {
    return this.getToken(vlogParser.DLFULLSKEW, 0);
};

Fullskew_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Fullskew_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Fullskew_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Fullskew_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Fullskew_timing_checkContext.prototype.timing_check_limit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Timing_check_limitContext);
    } else {
        return this.getTypedRuleContext(Timing_check_limitContext,i);
    }
};

Fullskew_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Fullskew_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Fullskew_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Fullskew_timing_checkContext.prototype.event_based_flag = function() {
    return this.getTypedRuleContext(Event_based_flagContext,0);
};

Fullskew_timing_checkContext.prototype.remain_active_flag = function() {
    return this.getTypedRuleContext(Remain_active_flagContext,0);
};

Fullskew_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFullskew_timing_check(this);
	}
};

Fullskew_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFullskew_timing_check(this);
	}
};




vlogParser.Fullskew_timing_checkContext = Fullskew_timing_checkContext;

vlogParser.prototype.fullskew_timing_check = function() {

    var localctx = new Fullskew_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, vlogParser.RULE_fullskew_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3678;
        this.match(vlogParser.DLFULLSKEW);
        this.state = 3679;
        this.match(vlogParser.LP);
        this.state = 3680;
        this.reference_event();
        this.state = 3681;
        this.match(vlogParser.CO);
        this.state = 3682;
        this.data_event();
        this.state = 3683;
        this.match(vlogParser.CO);
        this.state = 3684;
        this.timing_check_limit();
        this.state = 3685;
        this.match(vlogParser.CO);
        this.state = 3686;
        this.timing_check_limit();
        this.state = 3703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3687;
            this.match(vlogParser.CO);
            this.state = 3689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3688;
                this.notifier();
            }

            this.state = 3701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 3691;
                this.match(vlogParser.CO);
                this.state = 3693;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                    this.state = 3692;
                    this.event_based_flag();
                }

                this.state = 3699;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.CO) {
                    this.state = 3695;
                    this.match(vlogParser.CO);
                    this.state = 3697;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.LP) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 184)) & ~0x1f) == 0 && ((1 << (_la - 184)) & ((1 << (vlogParser.LC - 184)) | (1 << (vlogParser.VL - 184)) | (1 << (vlogParser.TI - 184)) | (1 << (vlogParser.TIAM - 184)) | (1 << (vlogParser.TICA - 184)) | (1 << (vlogParser.TIVL - 184)) | (1 << (vlogParser.DECIMAL_NUMBER - 184)) | (1 << (vlogParser.BINARY_NUMBER - 184)) | (1 << (vlogParser.OCTAL_NUMBER - 184)) | (1 << (vlogParser.HEX_NUMBER - 184)) | (1 << (vlogParser.REAL_NUMBER - 184)) | (1 << (vlogParser.STRING - 184)) | (1 << (vlogParser.ESCAPED_IDENTIFIER - 184)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 184)) | (1 << (vlogParser.SYSTEM_TF_IDENTIFIER - 184)) | (1 << (vlogParser.MACRO_USAGE - 184)))) !== 0)) {
                        this.state = 3696;
                        this.remain_active_flag();
                    }

                }

            }

        }

        this.state = 3705;
        this.match(vlogParser.RP);
        this.state = 3706;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Period_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_period_timing_check;
    return this;
}

Period_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Period_timing_checkContext.prototype.constructor = Period_timing_checkContext;

Period_timing_checkContext.prototype.DLPERIOD = function() {
    return this.getToken(vlogParser.DLPERIOD, 0);
};

Period_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Period_timing_checkContext.prototype.controlled_reference_event = function() {
    return this.getTypedRuleContext(Controlled_reference_eventContext,0);
};

Period_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Period_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Period_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Period_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Period_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Period_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPeriod_timing_check(this);
	}
};

Period_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPeriod_timing_check(this);
	}
};




vlogParser.Period_timing_checkContext = Period_timing_checkContext;

vlogParser.prototype.period_timing_check = function() {

    var localctx = new Period_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, vlogParser.RULE_period_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3708;
        this.match(vlogParser.DLPERIOD);
        this.state = 3709;
        this.match(vlogParser.LP);
        this.state = 3710;
        this.controlled_reference_event();
        this.state = 3711;
        this.match(vlogParser.CO);
        this.state = 3712;
        this.timing_check_limit();
        this.state = 3717;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3713;
            this.match(vlogParser.CO);
            this.state = 3715;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3714;
                this.notifier();
            }

        }

        this.state = 3719;
        this.match(vlogParser.RP);
        this.state = 3720;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Width_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_width_timing_check;
    return this;
}

Width_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Width_timing_checkContext.prototype.constructor = Width_timing_checkContext;

Width_timing_checkContext.prototype.DLWIDTH = function() {
    return this.getToken(vlogParser.DLWIDTH, 0);
};

Width_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Width_timing_checkContext.prototype.controlled_reference_event = function() {
    return this.getTypedRuleContext(Controlled_reference_eventContext,0);
};

Width_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Width_timing_checkContext.prototype.timing_check_limit = function() {
    return this.getTypedRuleContext(Timing_check_limitContext,0);
};

Width_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Width_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Width_timing_checkContext.prototype.threshold = function() {
    return this.getTypedRuleContext(ThresholdContext,0);
};

Width_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Width_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterWidth_timing_check(this);
	}
};

Width_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitWidth_timing_check(this);
	}
};




vlogParser.Width_timing_checkContext = Width_timing_checkContext;

vlogParser.prototype.width_timing_check = function() {

    var localctx = new Width_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, vlogParser.RULE_width_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3722;
        this.match(vlogParser.DLWIDTH);
        this.state = 3723;
        this.match(vlogParser.LP);
        this.state = 3724;
        this.controlled_reference_event();
        this.state = 3725;
        this.match(vlogParser.CO);
        this.state = 3726;
        this.timing_check_limit();
        this.state = 3733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3727;
            this.match(vlogParser.CO);
            this.state = 3728;
            this.threshold();
            this.state = 3731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.CO) {
                this.state = 3729;
                this.match(vlogParser.CO);
                this.state = 3730;
                this.notifier();
            }

        }

        this.state = 3735;
        this.match(vlogParser.RP);
        this.state = 3736;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nochange_timing_checkContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_nochange_timing_check;
    return this;
}

Nochange_timing_checkContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nochange_timing_checkContext.prototype.constructor = Nochange_timing_checkContext;

Nochange_timing_checkContext.prototype.DLNOCHANGE = function() {
    return this.getToken(vlogParser.DLNOCHANGE, 0);
};

Nochange_timing_checkContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Nochange_timing_checkContext.prototype.reference_event = function() {
    return this.getTypedRuleContext(Reference_eventContext,0);
};

Nochange_timing_checkContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Nochange_timing_checkContext.prototype.data_event = function() {
    return this.getTypedRuleContext(Data_eventContext,0);
};

Nochange_timing_checkContext.prototype.start_edge_offset = function() {
    return this.getTypedRuleContext(Start_edge_offsetContext,0);
};

Nochange_timing_checkContext.prototype.end_edge_offset = function() {
    return this.getTypedRuleContext(End_edge_offsetContext,0);
};

Nochange_timing_checkContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Nochange_timing_checkContext.prototype.SC = function() {
    return this.getToken(vlogParser.SC, 0);
};

Nochange_timing_checkContext.prototype.notifier = function() {
    return this.getTypedRuleContext(NotifierContext,0);
};

Nochange_timing_checkContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNochange_timing_check(this);
	}
};

Nochange_timing_checkContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNochange_timing_check(this);
	}
};




vlogParser.Nochange_timing_checkContext = Nochange_timing_checkContext;

vlogParser.prototype.nochange_timing_check = function() {

    var localctx = new Nochange_timing_checkContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, vlogParser.RULE_nochange_timing_check);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3738;
        this.match(vlogParser.DLNOCHANGE);
        this.state = 3739;
        this.match(vlogParser.LP);
        this.state = 3740;
        this.reference_event();
        this.state = 3741;
        this.match(vlogParser.CO);
        this.state = 3742;
        this.data_event();
        this.state = 3743;
        this.match(vlogParser.CO);
        this.state = 3744;
        this.start_edge_offset();
        this.state = 3745;
        this.match(vlogParser.CO);
        this.state = 3746;
        this.end_edge_offset();
        this.state = 3751;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.CO) {
            this.state = 3747;
            this.match(vlogParser.CO);
            this.state = 3749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vlogParser.ESCAPED_IDENTIFIER - 199)) | (1 << (vlogParser.SIMPLE_IDENTIFIER - 199)) | (1 << (vlogParser.MACRO_USAGE - 199)))) !== 0)) {
                this.state = 3748;
                this.notifier();
            }

        }

        this.state = 3753;
        this.match(vlogParser.RP);
        this.state = 3754;
        this.match(vlogParser.SC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Checktime_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_checktime_condition;
    return this;
}

Checktime_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Checktime_conditionContext.prototype.constructor = Checktime_conditionContext;

Checktime_conditionContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

Checktime_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterChecktime_condition(this);
	}
};

Checktime_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitChecktime_condition(this);
	}
};




vlogParser.Checktime_conditionContext = Checktime_conditionContext;

vlogParser.prototype.checktime_condition = function() {

    var localctx = new Checktime_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, vlogParser.RULE_checktime_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3756;
        this.mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Controlled_reference_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_controlled_reference_event;
    return this;
}

Controlled_reference_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Controlled_reference_eventContext.prototype.constructor = Controlled_reference_eventContext;

Controlled_reference_eventContext.prototype.controlled_timing_check_event = function() {
    return this.getTypedRuleContext(Controlled_timing_check_eventContext,0);
};

Controlled_reference_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterControlled_reference_event(this);
	}
};

Controlled_reference_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitControlled_reference_event(this);
	}
};




vlogParser.Controlled_reference_eventContext = Controlled_reference_eventContext;

vlogParser.prototype.controlled_reference_event = function() {

    var localctx = new Controlled_reference_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, vlogParser.RULE_controlled_reference_event);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3758;
        this.controlled_timing_check_event();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Data_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_data_event;
    return this;
}

Data_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_eventContext.prototype.constructor = Data_eventContext;

Data_eventContext.prototype.timing_check_event = function() {
    return this.getTypedRuleContext(Timing_check_eventContext,0);
};

Data_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterData_event(this);
	}
};

Data_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitData_event(this);
	}
};




vlogParser.Data_eventContext = Data_eventContext;

vlogParser.prototype.data_event = function() {

    var localctx = new Data_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, vlogParser.RULE_data_event);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3760;
        this.timing_check_event();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delayed_dataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delayed_data;
    return this;
}

Delayed_dataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delayed_dataContext.prototype.constructor = Delayed_dataContext;

Delayed_dataContext.prototype.terminal_identifier = function() {
    return this.getTypedRuleContext(Terminal_identifierContext,0);
};

Delayed_dataContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Delayed_dataContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Delayed_dataContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Delayed_dataContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelayed_data(this);
	}
};

Delayed_dataContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelayed_data(this);
	}
};




vlogParser.Delayed_dataContext = Delayed_dataContext;

vlogParser.prototype.delayed_data = function() {

    var localctx = new Delayed_dataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, vlogParser.RULE_delayed_data);
    try {
        this.state = 3768;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3762;
            this.terminal_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3763;
            this.terminal_identifier();
            this.state = 3764;
            this.match(vlogParser.LB);
            this.state = 3765;
            this.constant_mintypmax_expression();
            this.state = 3766;
            this.match(vlogParser.RB);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delayed_referenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_delayed_reference;
    return this;
}

Delayed_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delayed_referenceContext.prototype.constructor = Delayed_referenceContext;

Delayed_referenceContext.prototype.terminal_identifier = function() {
    return this.getTypedRuleContext(Terminal_identifierContext,0);
};

Delayed_referenceContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Delayed_referenceContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Delayed_referenceContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Delayed_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDelayed_reference(this);
	}
};

Delayed_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDelayed_reference(this);
	}
};




vlogParser.Delayed_referenceContext = Delayed_referenceContext;

vlogParser.prototype.delayed_reference = function() {

    var localctx = new Delayed_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, vlogParser.RULE_delayed_reference);
    try {
        this.state = 3776;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3770;
            this.terminal_identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3771;
            this.terminal_identifier();
            this.state = 3772;
            this.match(vlogParser.LB);
            this.state = 3773;
            this.constant_mintypmax_expression();
            this.state = 3774;
            this.match(vlogParser.RB);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_edge_offsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_end_edge_offset;
    return this;
}

End_edge_offsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_edge_offsetContext.prototype.constructor = End_edge_offsetContext;

End_edge_offsetContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

End_edge_offsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEnd_edge_offset(this);
	}
};

End_edge_offsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEnd_edge_offset(this);
	}
};




vlogParser.End_edge_offsetContext = End_edge_offsetContext;

vlogParser.prototype.end_edge_offset = function() {

    var localctx = new End_edge_offsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, vlogParser.RULE_end_edge_offset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3778;
        this.mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_based_flagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_based_flag;
    return this;
}

Event_based_flagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_based_flagContext.prototype.constructor = Event_based_flagContext;

Event_based_flagContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Event_based_flagContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_based_flag(this);
	}
};

Event_based_flagContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_based_flag(this);
	}
};




vlogParser.Event_based_flagContext = Event_based_flagContext;

vlogParser.prototype.event_based_flag = function() {

    var localctx = new Event_based_flagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, vlogParser.RULE_event_based_flag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3780;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NotifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_notifier;
    return this;
}

NotifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotifierContext.prototype.constructor = NotifierContext;

NotifierContext.prototype.variable_identifier = function() {
    return this.getTypedRuleContext(Variable_identifierContext,0);
};

NotifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNotifier(this);
	}
};

NotifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNotifier(this);
	}
};




vlogParser.NotifierContext = NotifierContext;

vlogParser.prototype.notifier = function() {

    var localctx = new NotifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, vlogParser.RULE_notifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3782;
        this.variable_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Reference_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_reference_event;
    return this;
}

Reference_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reference_eventContext.prototype.constructor = Reference_eventContext;

Reference_eventContext.prototype.timing_check_event = function() {
    return this.getTypedRuleContext(Timing_check_eventContext,0);
};

Reference_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReference_event(this);
	}
};

Reference_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReference_event(this);
	}
};




vlogParser.Reference_eventContext = Reference_eventContext;

vlogParser.prototype.reference_event = function() {

    var localctx = new Reference_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, vlogParser.RULE_reference_event);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3784;
        this.timing_check_event();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Remain_active_flagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_remain_active_flag;
    return this;
}

Remain_active_flagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Remain_active_flagContext.prototype.constructor = Remain_active_flagContext;

Remain_active_flagContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Remain_active_flagContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRemain_active_flag(this);
	}
};

Remain_active_flagContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRemain_active_flag(this);
	}
};




vlogParser.Remain_active_flagContext = Remain_active_flagContext;

vlogParser.prototype.remain_active_flag = function() {

    var localctx = new Remain_active_flagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, vlogParser.RULE_remain_active_flag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3786;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Stamptime_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_stamptime_condition;
    return this;
}

Stamptime_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stamptime_conditionContext.prototype.constructor = Stamptime_conditionContext;

Stamptime_conditionContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

Stamptime_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStamptime_condition(this);
	}
};

Stamptime_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStamptime_condition(this);
	}
};




vlogParser.Stamptime_conditionContext = Stamptime_conditionContext;

vlogParser.prototype.stamptime_condition = function() {

    var localctx = new Stamptime_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, vlogParser.RULE_stamptime_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3788;
        this.mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Start_edge_offsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_start_edge_offset;
    return this;
}

Start_edge_offsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Start_edge_offsetContext.prototype.constructor = Start_edge_offsetContext;

Start_edge_offsetContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

Start_edge_offsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterStart_edge_offset(this);
	}
};

Start_edge_offsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitStart_edge_offset(this);
	}
};




vlogParser.Start_edge_offsetContext = Start_edge_offsetContext;

vlogParser.prototype.start_edge_offset = function() {

    var localctx = new Start_edge_offsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, vlogParser.RULE_start_edge_offset);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3790;
        this.mintypmax_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThresholdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_threshold;
    return this;
}

ThresholdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThresholdContext.prototype.constructor = ThresholdContext;

ThresholdContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

ThresholdContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterThreshold(this);
	}
};

ThresholdContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitThreshold(this);
	}
};




vlogParser.ThresholdContext = ThresholdContext;

vlogParser.prototype.threshold = function() {

    var localctx = new ThresholdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, vlogParser.RULE_threshold);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3792;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timing_check_limitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_timing_check_limit;
    return this;
}

Timing_check_limitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_check_limitContext.prototype.constructor = Timing_check_limitContext;

Timing_check_limitContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Timing_check_limitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTiming_check_limit(this);
	}
};

Timing_check_limitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTiming_check_limit(this);
	}
};




vlogParser.Timing_check_limitContext = Timing_check_limitContext;

vlogParser.prototype.timing_check_limit = function() {

    var localctx = new Timing_check_limitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, vlogParser.RULE_timing_check_limit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3794;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timing_check_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_timing_check_event;
    return this;
}

Timing_check_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_check_eventContext.prototype.constructor = Timing_check_eventContext;

Timing_check_eventContext.prototype.specify_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_terminal_descriptorContext,0);
};

Timing_check_eventContext.prototype.timing_check_event_control = function() {
    return this.getTypedRuleContext(Timing_check_event_controlContext,0);
};

Timing_check_eventContext.prototype.AMAMAM = function() {
    return this.getToken(vlogParser.AMAMAM, 0);
};

Timing_check_eventContext.prototype.timing_check_condition = function() {
    return this.getTypedRuleContext(Timing_check_conditionContext,0);
};

Timing_check_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTiming_check_event(this);
	}
};

Timing_check_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTiming_check_event(this);
	}
};




vlogParser.Timing_check_eventContext = Timing_check_eventContext;

vlogParser.prototype.timing_check_event = function() {

    var localctx = new Timing_check_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, vlogParser.RULE_timing_check_event);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.EDGE || _la===vlogParser.NEGEDGE || _la===vlogParser.POSEDGE) {
            this.state = 3796;
            this.timing_check_event_control();
        }

        this.state = 3799;
        this.specify_terminal_descriptor();
        this.state = 3802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.AMAMAM) {
            this.state = 3800;
            this.match(vlogParser.AMAMAM);
            this.state = 3801;
            this.timing_check_condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Controlled_timing_check_eventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_controlled_timing_check_event;
    return this;
}

Controlled_timing_check_eventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Controlled_timing_check_eventContext.prototype.constructor = Controlled_timing_check_eventContext;

Controlled_timing_check_eventContext.prototype.timing_check_event_control = function() {
    return this.getTypedRuleContext(Timing_check_event_controlContext,0);
};

Controlled_timing_check_eventContext.prototype.specify_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_terminal_descriptorContext,0);
};

Controlled_timing_check_eventContext.prototype.AMAMAM = function() {
    return this.getToken(vlogParser.AMAMAM, 0);
};

Controlled_timing_check_eventContext.prototype.timing_check_condition = function() {
    return this.getTypedRuleContext(Timing_check_conditionContext,0);
};

Controlled_timing_check_eventContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterControlled_timing_check_event(this);
	}
};

Controlled_timing_check_eventContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitControlled_timing_check_event(this);
	}
};




vlogParser.Controlled_timing_check_eventContext = Controlled_timing_check_eventContext;

vlogParser.prototype.controlled_timing_check_event = function() {

    var localctx = new Controlled_timing_check_eventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, vlogParser.RULE_controlled_timing_check_event);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3804;
        this.timing_check_event_control();
        this.state = 3805;
        this.specify_terminal_descriptor();
        this.state = 3808;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.AMAMAM) {
            this.state = 3806;
            this.match(vlogParser.AMAMAM);
            this.state = 3807;
            this.timing_check_condition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timing_check_event_controlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_timing_check_event_control;
    return this;
}

Timing_check_event_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_check_event_controlContext.prototype.constructor = Timing_check_event_controlContext;

Timing_check_event_controlContext.prototype.POSEDGE = function() {
    return this.getToken(vlogParser.POSEDGE, 0);
};

Timing_check_event_controlContext.prototype.NEGEDGE = function() {
    return this.getToken(vlogParser.NEGEDGE, 0);
};

Timing_check_event_controlContext.prototype.edge_control_specifier = function() {
    return this.getTypedRuleContext(Edge_control_specifierContext,0);
};

Timing_check_event_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTiming_check_event_control(this);
	}
};

Timing_check_event_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTiming_check_event_control(this);
	}
};




vlogParser.Timing_check_event_controlContext = Timing_check_event_controlContext;

vlogParser.prototype.timing_check_event_control = function() {

    var localctx = new Timing_check_event_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, vlogParser.RULE_timing_check_event_control);
    try {
        this.state = 3813;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.POSEDGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3810;
            this.match(vlogParser.POSEDGE);
            break;
        case vlogParser.NEGEDGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3811;
            this.match(vlogParser.NEGEDGE);
            break;
        case vlogParser.EDGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 3812;
            this.edge_control_specifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specify_terminal_descriptorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specify_terminal_descriptor;
    return this;
}

Specify_terminal_descriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specify_terminal_descriptorContext.prototype.constructor = Specify_terminal_descriptorContext;

Specify_terminal_descriptorContext.prototype.specify_input_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_input_terminal_descriptorContext,0);
};

Specify_terminal_descriptorContext.prototype.specify_output_terminal_descriptor = function() {
    return this.getTypedRuleContext(Specify_output_terminal_descriptorContext,0);
};

Specify_terminal_descriptorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecify_terminal_descriptor(this);
	}
};

Specify_terminal_descriptorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecify_terminal_descriptor(this);
	}
};




vlogParser.Specify_terminal_descriptorContext = Specify_terminal_descriptorContext;

vlogParser.prototype.specify_terminal_descriptor = function() {

    var localctx = new Specify_terminal_descriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, vlogParser.RULE_specify_terminal_descriptor);
    try {
        this.state = 3817;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3815;
            this.specify_input_terminal_descriptor();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3816;
            this.specify_output_terminal_descriptor();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_control_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_control_specifier;
    return this;
}

Edge_control_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_control_specifierContext.prototype.constructor = Edge_control_specifierContext;

Edge_control_specifierContext.prototype.EDGE = function() {
    return this.getToken(vlogParser.EDGE, 0);
};

Edge_control_specifierContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Edge_control_specifierContext.prototype.edge_descriptor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Edge_descriptorContext);
    } else {
        return this.getTypedRuleContext(Edge_descriptorContext,i);
    }
};

Edge_control_specifierContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Edge_control_specifierContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Edge_control_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_control_specifier(this);
	}
};

Edge_control_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_control_specifier(this);
	}
};




vlogParser.Edge_control_specifierContext = Edge_control_specifierContext;

vlogParser.prototype.edge_control_specifier = function() {

    var localctx = new Edge_control_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, vlogParser.RULE_edge_control_specifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3819;
        this.match(vlogParser.EDGE);
        this.state = 3820;
        this.match(vlogParser.LB);
        this.state = 3821;
        this.edge_descriptor();
        this.state = 3826;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3822;
            this.match(vlogParser.CO);
            this.state = 3823;
            this.edge_descriptor();
            this.state = 3828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3829;
        this.match(vlogParser.RB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Edge_descriptorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_edge_descriptor;
    return this;
}

Edge_descriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Edge_descriptorContext.prototype.constructor = Edge_descriptorContext;

Edge_descriptorContext.prototype.EDGE_DESCRIPTOR = function() {
    return this.getToken(vlogParser.EDGE_DESCRIPTOR, 0);
};

Edge_descriptorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEdge_descriptor(this);
	}
};

Edge_descriptorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEdge_descriptor(this);
	}
};




vlogParser.Edge_descriptorContext = Edge_descriptorContext;

vlogParser.prototype.edge_descriptor = function() {

    var localctx = new Edge_descriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, vlogParser.RULE_edge_descriptor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3831;
        this.match(vlogParser.EDGE_DESCRIPTOR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timing_check_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_timing_check_condition;
    return this;
}

Timing_check_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timing_check_conditionContext.prototype.constructor = Timing_check_conditionContext;

Timing_check_conditionContext.prototype.scalar_timing_check_condition = function() {
    return this.getTypedRuleContext(Scalar_timing_check_conditionContext,0);
};

Timing_check_conditionContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Timing_check_conditionContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Timing_check_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTiming_check_condition(this);
	}
};

Timing_check_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTiming_check_condition(this);
	}
};




vlogParser.Timing_check_conditionContext = Timing_check_conditionContext;

vlogParser.prototype.timing_check_condition = function() {

    var localctx = new Timing_check_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, vlogParser.RULE_timing_check_condition);
    try {
        this.state = 3838;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3833;
            this.scalar_timing_check_condition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3834;
            this.match(vlogParser.LP);
            this.state = 3835;
            this.scalar_timing_check_condition();
            this.state = 3836;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scalar_timing_check_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_scalar_timing_check_condition;
    return this;
}

Scalar_timing_check_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_timing_check_conditionContext.prototype.constructor = Scalar_timing_check_conditionContext;

Scalar_timing_check_conditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Scalar_timing_check_conditionContext.prototype.TI = function() {
    return this.getToken(vlogParser.TI, 0);
};

Scalar_timing_check_conditionContext.prototype.EQEQ = function() {
    return this.getToken(vlogParser.EQEQ, 0);
};

Scalar_timing_check_conditionContext.prototype.scalar_constant = function() {
    return this.getTypedRuleContext(Scalar_constantContext,0);
};

Scalar_timing_check_conditionContext.prototype.EQEQEQ = function() {
    return this.getToken(vlogParser.EQEQEQ, 0);
};

Scalar_timing_check_conditionContext.prototype.EMEQ = function() {
    return this.getToken(vlogParser.EMEQ, 0);
};

Scalar_timing_check_conditionContext.prototype.EMEQEQ = function() {
    return this.getToken(vlogParser.EMEQEQ, 0);
};

Scalar_timing_check_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterScalar_timing_check_condition(this);
	}
};

Scalar_timing_check_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitScalar_timing_check_condition(this);
	}
};




vlogParser.Scalar_timing_check_conditionContext = Scalar_timing_check_conditionContext;

vlogParser.prototype.scalar_timing_check_condition = function() {

    var localctx = new Scalar_timing_check_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, vlogParser.RULE_scalar_timing_check_condition);
    try {
        this.state = 3859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3840;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3841;
            this.match(vlogParser.TI);
            this.state = 3842;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3843;
            this.expression(0);
            this.state = 3844;
            this.match(vlogParser.EQEQ);
            this.state = 3845;
            this.scalar_constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3847;
            this.expression(0);
            this.state = 3848;
            this.match(vlogParser.EQEQEQ);
            this.state = 3849;
            this.scalar_constant();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3851;
            this.expression(0);
            this.state = 3852;
            this.match(vlogParser.EMEQ);
            this.state = 3853;
            this.scalar_constant();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3855;
            this.expression(0);
            this.state = 3856;
            this.match(vlogParser.EMEQEQ);
            this.state = 3857;
            this.scalar_constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scalar_constantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_scalar_constant;
    return this;
}

Scalar_constantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_constantContext.prototype.constructor = Scalar_constantContext;

Scalar_constantContext.prototype.BINARY_NUMBER = function() {
    return this.getToken(vlogParser.BINARY_NUMBER, 0);
};

Scalar_constantContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(vlogParser.DECIMAL_NUMBER, 0);
};

Scalar_constantContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterScalar_constant(this);
	}
};

Scalar_constantContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitScalar_constant(this);
	}
};




vlogParser.Scalar_constantContext = Scalar_constantContext;

vlogParser.prototype.scalar_constant = function() {

    var localctx = new Scalar_constantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, vlogParser.RULE_scalar_constant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3861;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.DECIMAL_NUMBER || _la===vlogParser.BINARY_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConcatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_concatenation;
    return this;
}

ConcatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConcatenationContext.prototype.constructor = ConcatenationContext;

ConcatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

ConcatenationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConcatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

ConcatenationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


ConcatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConcatenation(this);
	}
};

ConcatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConcatenation(this);
	}
};




vlogParser.ConcatenationContext = ConcatenationContext;

vlogParser.prototype.concatenation = function() {

    var localctx = new ConcatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, vlogParser.RULE_concatenation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3863;
        this.match(vlogParser.LC);
        this.state = 3864;
        this.expression(0);
        this.state = 3869;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3865;
            this.match(vlogParser.CO);
            this.state = 3866;
            this.expression(0);
            this.state = 3871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3872;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_concatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_concatenation;
    return this;
}

Constant_concatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_concatenationContext.prototype.constructor = Constant_concatenationContext;

Constant_concatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Constant_concatenationContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Constant_concatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Constant_concatenationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Constant_concatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_concatenation(this);
	}
};

Constant_concatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_concatenation(this);
	}
};




vlogParser.Constant_concatenationContext = Constant_concatenationContext;

vlogParser.prototype.constant_concatenation = function() {

    var localctx = new Constant_concatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, vlogParser.RULE_constant_concatenation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3874;
        this.match(vlogParser.LC);
        this.state = 3875;
        this.constant_expression(0);
        this.state = 3880;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3876;
            this.match(vlogParser.CO);
            this.state = 3877;
            this.constant_expression(0);
            this.state = 3882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3883;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_multiple_concatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_multiple_concatenation;
    return this;
}

Constant_multiple_concatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_multiple_concatenationContext.prototype.constructor = Constant_multiple_concatenationContext;

Constant_multiple_concatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Constant_multiple_concatenationContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Constant_multiple_concatenationContext.prototype.constant_concatenation = function() {
    return this.getTypedRuleContext(Constant_concatenationContext,0);
};

Constant_multiple_concatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Constant_multiple_concatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_multiple_concatenation(this);
	}
};

Constant_multiple_concatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_multiple_concatenation(this);
	}
};




vlogParser.Constant_multiple_concatenationContext = Constant_multiple_concatenationContext;

vlogParser.prototype.constant_multiple_concatenation = function() {

    var localctx = new Constant_multiple_concatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, vlogParser.RULE_constant_multiple_concatenation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3885;
        this.match(vlogParser.LC);
        this.state = 3886;
        this.constant_expression(0);
        this.state = 3887;
        this.constant_concatenation();
        this.state = 3888;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_path_concatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_path_concatenation;
    return this;
}

Module_path_concatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_path_concatenationContext.prototype.constructor = Module_path_concatenationContext;

Module_path_concatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Module_path_concatenationContext.prototype.module_path_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_path_expressionContext);
    } else {
        return this.getTypedRuleContext(Module_path_expressionContext,i);
    }
};

Module_path_concatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Module_path_concatenationContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Module_path_concatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_path_concatenation(this);
	}
};

Module_path_concatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_path_concatenation(this);
	}
};




vlogParser.Module_path_concatenationContext = Module_path_concatenationContext;

vlogParser.prototype.module_path_concatenation = function() {

    var localctx = new Module_path_concatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, vlogParser.RULE_module_path_concatenation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3890;
        this.match(vlogParser.LC);
        this.state = 3891;
        this.module_path_expression(0);
        this.state = 3896;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3892;
            this.match(vlogParser.CO);
            this.state = 3893;
            this.module_path_expression(0);
            this.state = 3898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3899;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_path_multiple_concatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_path_multiple_concatenation;
    return this;
}

Module_path_multiple_concatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_path_multiple_concatenationContext.prototype.constructor = Module_path_multiple_concatenationContext;

Module_path_multiple_concatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Module_path_multiple_concatenationContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Module_path_multiple_concatenationContext.prototype.module_path_concatenation = function() {
    return this.getTypedRuleContext(Module_path_concatenationContext,0);
};

Module_path_multiple_concatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Module_path_multiple_concatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_path_multiple_concatenation(this);
	}
};

Module_path_multiple_concatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_path_multiple_concatenation(this);
	}
};




vlogParser.Module_path_multiple_concatenationContext = Module_path_multiple_concatenationContext;

vlogParser.prototype.module_path_multiple_concatenation = function() {

    var localctx = new Module_path_multiple_concatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, vlogParser.RULE_module_path_multiple_concatenation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3901;
        this.match(vlogParser.LC);
        this.state = 3902;
        this.constant_expression(0);
        this.state = 3903;
        this.module_path_concatenation();
        this.state = 3904;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Multiple_concatenationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_multiple_concatenation;
    return this;
}

Multiple_concatenationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_concatenationContext.prototype.constructor = Multiple_concatenationContext;

Multiple_concatenationContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Multiple_concatenationContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Multiple_concatenationContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

Multiple_concatenationContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Multiple_concatenationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMultiple_concatenation(this);
	}
};

Multiple_concatenationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMultiple_concatenation(this);
	}
};




vlogParser.Multiple_concatenationContext = Multiple_concatenationContext;

vlogParser.prototype.multiple_concatenation = function() {

    var localctx = new Multiple_concatenationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, vlogParser.RULE_multiple_concatenation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3906;
        this.match(vlogParser.LC);
        this.state = 3907;
        this.constant_expression(0);
        this.state = 3908;
        this.concatenation();
        this.state = 3909;
        this.match(vlogParser.RC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_function_call;
    return this;
}

Constant_function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_function_callContext.prototype.constructor = Constant_function_callContext;

Constant_function_callContext.prototype.function_identifier = function() {
    return this.getTypedRuleContext(Function_identifierContext,0);
};

Constant_function_callContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Constant_function_callContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Constant_function_callContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Constant_function_callContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Constant_function_callContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Constant_function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_function_call(this);
	}
};

Constant_function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_function_call(this);
	}
};




vlogParser.Constant_function_callContext = Constant_function_callContext;

vlogParser.prototype.constant_function_call = function() {

    var localctx = new Constant_function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, vlogParser.RULE_constant_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3911;
        this.function_identifier();
        this.state = 3915;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,424,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3912;
                this.attribute_instance(); 
            }
            this.state = 3917;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,424,this._ctx);
        }

        this.state = 3918;
        this.match(vlogParser.LP);
        this.state = 3919;
        this.constant_expression(0);
        this.state = 3924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3920;
            this.match(vlogParser.CO);
            this.state = 3921;
            this.constant_expression(0);
            this.state = 3926;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3927;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_system_function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_system_function_call;
    return this;
}

Constant_system_function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_system_function_callContext.prototype.constructor = Constant_system_function_callContext;

Constant_system_function_callContext.prototype.system_function_identifier = function() {
    return this.getTypedRuleContext(System_function_identifierContext,0);
};

Constant_system_function_callContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Constant_system_function_callContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Constant_system_function_callContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Constant_system_function_callContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Constant_system_function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_system_function_call(this);
	}
};

Constant_system_function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_system_function_call(this);
	}
};




vlogParser.Constant_system_function_callContext = Constant_system_function_callContext;

vlogParser.prototype.constant_system_function_call = function() {

    var localctx = new Constant_system_function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, vlogParser.RULE_constant_system_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3929;
        this.system_function_identifier();
        this.state = 3930;
        this.match(vlogParser.LP);
        this.state = 3931;
        this.constant_expression(0);
        this.state = 3936;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3932;
            this.match(vlogParser.CO);
            this.state = 3933;
            this.constant_expression(0);
            this.state = 3938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3939;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.hierarchical_function_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_function_identifierContext,0);
};

Function_callContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Function_callContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Function_callContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Function_callContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Function_callContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_call(this);
	}
};




vlogParser.Function_callContext = Function_callContext;

vlogParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, vlogParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3941;
        this.hierarchical_function_identifier();
        this.state = 3945;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,427,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3942;
                this.attribute_instance(); 
            }
            this.state = 3947;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,427,this._ctx);
        }

        this.state = 3948;
        this.match(vlogParser.LP);
        this.state = 3949;
        this.expression(0);
        this.state = 3954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 3950;
            this.match(vlogParser.CO);
            this.state = 3951;
            this.expression(0);
            this.state = 3956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3957;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function System_function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_system_function_call;
    return this;
}

System_function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
System_function_callContext.prototype.constructor = System_function_callContext;

System_function_callContext.prototype.system_function_identifier = function() {
    return this.getTypedRuleContext(System_function_identifierContext,0);
};

System_function_callContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

System_function_callContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

System_function_callContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

System_function_callContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


System_function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSystem_function_call(this);
	}
};

System_function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSystem_function_call(this);
	}
};




vlogParser.System_function_callContext = System_function_callContext;

vlogParser.prototype.system_function_call = function() {

    var localctx = new System_function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, vlogParser.RULE_system_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3959;
        this.system_function_identifier();
        this.state = 3971;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
        if(la_===1) {
            this.state = 3960;
            this.match(vlogParser.LP);
            this.state = 3961;
            this.expression(0);
            this.state = 3966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 3962;
                this.match(vlogParser.CO);
                this.state = 3963;
                this.expression(0);
                this.state = 3968;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3969;
            this.match(vlogParser.RP);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Base_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_base_expression;
    return this;
}

Base_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Base_expressionContext.prototype.constructor = Base_expressionContext;

Base_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Base_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBase_expression(this);
	}
};

Base_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBase_expression(this);
	}
};




vlogParser.Base_expressionContext = Base_expressionContext;

vlogParser.prototype.base_expression = function() {

    var localctx = new Base_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, vlogParser.RULE_base_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3973;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_base_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_base_expression;
    return this;
}

Constant_base_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_base_expressionContext.prototype.constructor = Constant_base_expressionContext;

Constant_base_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Constant_base_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_base_expression(this);
	}
};

Constant_base_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_base_expression(this);
	}
};




vlogParser.Constant_base_expressionContext = Constant_base_expressionContext;

vlogParser.prototype.constant_base_expression = function() {

    var localctx = new Constant_base_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, vlogParser.RULE_constant_base_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3975;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_expression;
    return this;
}

Constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_expressionContext.prototype.constructor = Constant_expressionContext;

Constant_expressionContext.prototype.constant_primary = function() {
    return this.getTypedRuleContext(Constant_primaryContext,0);
};

Constant_expressionContext.prototype.unary_operator = function() {
    return this.getTypedRuleContext(Unary_operatorContext,0);
};

Constant_expressionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Constant_expressionContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Constant_expressionContext.prototype.binary_operator = function() {
    return this.getTypedRuleContext(Binary_operatorContext,0);
};

Constant_expressionContext.prototype.QM = function() {
    return this.getToken(vlogParser.QM, 0);
};

Constant_expressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_expression(this);
	}
};

Constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_expression(this);
	}
};



vlogParser.prototype.constant_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Constant_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 566;
    this.enterRecursionRule(localctx, 566, vlogParser.RULE_constant_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3988;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.LC:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.state = 3978;
            this.constant_primary();
            break;
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
            this.state = 3979;
            this.unary_operator();
            this.state = 3983;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,431,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3980;
                    this.attribute_instance(); 
                }
                this.state = 3985;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,431,this._ctx);
            }

            this.state = 3986;
            this.constant_primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 4014;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,436,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 4012;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Constant_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_constant_expression);
                    this.state = 3990;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 3991;
                    this.binary_operator();
                    this.state = 3995;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,433,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 3992;
                            this.attribute_instance(); 
                        }
                        this.state = 3997;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,433,this._ctx);
                    }

                    this.state = 3998;
                    this.constant_expression(3);
                    break;

                case 2:
                    localctx = new Constant_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_constant_expression);
                    this.state = 4000;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 4001;
                    this.match(vlogParser.QM);
                    this.state = 4005;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,434,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 4002;
                            this.attribute_instance(); 
                        }
                        this.state = 4007;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,434,this._ctx);
                    }

                    this.state = 4008;
                    this.constant_expression(0);
                    this.state = 4009;
                    this.match(vlogParser.CL);
                    this.state = 4010;
                    this.constant_expression(2);
                    break;

                } 
            }
            this.state = 4016;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,436,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Constant_mintypmax_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_mintypmax_expression;
    return this;
}

Constant_mintypmax_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_mintypmax_expressionContext.prototype.constructor = Constant_mintypmax_expressionContext;

Constant_mintypmax_expressionContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Constant_mintypmax_expressionContext.prototype.CL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CL);
    } else {
        return this.getToken(vlogParser.CL, i);
    }
};


Constant_mintypmax_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_mintypmax_expression(this);
	}
};

Constant_mintypmax_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_mintypmax_expression(this);
	}
};




vlogParser.Constant_mintypmax_expressionContext = Constant_mintypmax_expressionContext;

vlogParser.prototype.constant_mintypmax_expression = function() {

    var localctx = new Constant_mintypmax_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, vlogParser.RULE_constant_mintypmax_expression);
    try {
        this.state = 4024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4017;
            this.constant_expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4018;
            this.constant_expression(0);
            this.state = 4019;
            this.match(vlogParser.CL);
            this.state = 4020;
            this.constant_expression(0);
            this.state = 4021;
            this.match(vlogParser.CL);
            this.state = 4022;
            this.constant_expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_range_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_range_expression;
    return this;
}

Constant_range_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_range_expressionContext.prototype.constructor = Constant_range_expressionContext;

Constant_range_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Constant_range_expressionContext.prototype.msb_constant_expression = function() {
    return this.getTypedRuleContext(Msb_constant_expressionContext,0);
};

Constant_range_expressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Constant_range_expressionContext.prototype.lsb_constant_expression = function() {
    return this.getTypedRuleContext(Lsb_constant_expressionContext,0);
};

Constant_range_expressionContext.prototype.constant_base_expression = function() {
    return this.getTypedRuleContext(Constant_base_expressionContext,0);
};

Constant_range_expressionContext.prototype.PLCL = function() {
    return this.getToken(vlogParser.PLCL, 0);
};

Constant_range_expressionContext.prototype.width_constant_expression = function() {
    return this.getTypedRuleContext(Width_constant_expressionContext,0);
};

Constant_range_expressionContext.prototype.MICL = function() {
    return this.getToken(vlogParser.MICL, 0);
};

Constant_range_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_range_expression(this);
	}
};

Constant_range_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_range_expression(this);
	}
};




vlogParser.Constant_range_expressionContext = Constant_range_expressionContext;

vlogParser.prototype.constant_range_expression = function() {

    var localctx = new Constant_range_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, vlogParser.RULE_constant_range_expression);
    try {
        this.state = 4039;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4026;
            this.constant_expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4027;
            this.msb_constant_expression();
            this.state = 4028;
            this.match(vlogParser.CL);
            this.state = 4029;
            this.lsb_constant_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4031;
            this.constant_base_expression();
            this.state = 4032;
            this.match(vlogParser.PLCL);
            this.state = 4033;
            this.width_constant_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4035;
            this.constant_base_expression();
            this.state = 4036;
            this.match(vlogParser.MICL);
            this.state = 4037;
            this.width_constant_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dimension_constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_dimension_constant_expression;
    return this;
}

Dimension_constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dimension_constant_expressionContext.prototype.constructor = Dimension_constant_expressionContext;

Dimension_constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Dimension_constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDimension_constant_expression(this);
	}
};

Dimension_constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDimension_constant_expression(this);
	}
};




vlogParser.Dimension_constant_expressionContext = Dimension_constant_expressionContext;

vlogParser.prototype.dimension_constant_expression = function() {

    var localctx = new Dimension_constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, vlogParser.RULE_dimension_constant_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4041;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.unary_operator = function() {
    return this.getTypedRuleContext(Unary_operatorContext,0);
};

ExpressionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.binary_operator = function() {
    return this.getTypedRuleContext(Binary_operatorContext,0);
};

ExpressionContext.prototype.QM = function() {
    return this.getToken(vlogParser.QM, 0);
};

ExpressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitExpression(this);
	}
};



vlogParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 574;
    this.enterRecursionRule(localctx, 574, vlogParser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4054;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.LC:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.STRING:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.state = 4044;
            this.primary();
            break;
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.PL:
        case vlogParser.MI:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
            this.state = 4045;
            this.unary_operator();
            this.state = 4049;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,439,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4046;
                    this.attribute_instance(); 
                }
                this.state = 4051;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,439,this._ctx);
            }

            this.state = 4052;
            this.primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 4080;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,444,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 4078;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_expression);
                    this.state = 4056;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 4057;
                    this.binary_operator();
                    this.state = 4061;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,441,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 4058;
                            this.attribute_instance(); 
                        }
                        this.state = 4063;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,441,this._ctx);
                    }

                    this.state = 4064;
                    this.expression(3);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_expression);
                    this.state = 4066;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 4067;
                    this.match(vlogParser.QM);
                    this.state = 4071;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,442,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 4068;
                            this.attribute_instance(); 
                        }
                        this.state = 4073;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,442,this._ctx);
                    }

                    this.state = 4074;
                    this.expression(0);
                    this.state = 4075;
                    this.match(vlogParser.CL);
                    this.state = 4076;
                    this.expression(2);
                    break;

                } 
            }
            this.state = 4082;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,444,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Lsb_constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_lsb_constant_expression;
    return this;
}

Lsb_constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lsb_constant_expressionContext.prototype.constructor = Lsb_constant_expressionContext;

Lsb_constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Lsb_constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLsb_constant_expression(this);
	}
};

Lsb_constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLsb_constant_expression(this);
	}
};




vlogParser.Lsb_constant_expressionContext = Lsb_constant_expressionContext;

vlogParser.prototype.lsb_constant_expression = function() {

    var localctx = new Lsb_constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, vlogParser.RULE_lsb_constant_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4083;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mintypmax_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_mintypmax_expression;
    return this;
}

Mintypmax_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mintypmax_expressionContext.prototype.constructor = Mintypmax_expressionContext;

Mintypmax_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Mintypmax_expressionContext.prototype.CL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CL);
    } else {
        return this.getToken(vlogParser.CL, i);
    }
};


Mintypmax_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMintypmax_expression(this);
	}
};

Mintypmax_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMintypmax_expression(this);
	}
};




vlogParser.Mintypmax_expressionContext = Mintypmax_expressionContext;

vlogParser.prototype.mintypmax_expression = function() {

    var localctx = new Mintypmax_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, vlogParser.RULE_mintypmax_expression);
    try {
        this.state = 4092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4085;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4086;
            this.expression(0);
            this.state = 4087;
            this.match(vlogParser.CL);
            this.state = 4088;
            this.expression(0);
            this.state = 4089;
            this.match(vlogParser.CL);
            this.state = 4090;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_path_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_path_expression;
    return this;
}

Module_path_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_path_expressionContext.prototype.constructor = Module_path_expressionContext;

Module_path_expressionContext.prototype.module_path_primary = function() {
    return this.getTypedRuleContext(Module_path_primaryContext,0);
};

Module_path_expressionContext.prototype.unary_module_path_operator = function() {
    return this.getTypedRuleContext(Unary_module_path_operatorContext,0);
};

Module_path_expressionContext.prototype.attribute_instance = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_instanceContext);
    } else {
        return this.getTypedRuleContext(Attribute_instanceContext,i);
    }
};

Module_path_expressionContext.prototype.module_path_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_path_expressionContext);
    } else {
        return this.getTypedRuleContext(Module_path_expressionContext,i);
    }
};

Module_path_expressionContext.prototype.binary_module_path_operator = function() {
    return this.getTypedRuleContext(Binary_module_path_operatorContext,0);
};

Module_path_expressionContext.prototype.QM = function() {
    return this.getToken(vlogParser.QM, 0);
};

Module_path_expressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Module_path_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_path_expression(this);
	}
};

Module_path_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_path_expression(this);
	}
};



vlogParser.prototype.module_path_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Module_path_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 580;
    this.enterRecursionRule(localctx, 580, vlogParser.RULE_module_path_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4105;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.LP:
        case vlogParser.LC:
        case vlogParser.DECIMAL_NUMBER:
        case vlogParser.BINARY_NUMBER:
        case vlogParser.OCTAL_NUMBER:
        case vlogParser.HEX_NUMBER:
        case vlogParser.REAL_NUMBER:
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.SYSTEM_TF_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.state = 4095;
            this.module_path_primary();
            break;
        case vlogParser.EM:
        case vlogParser.AM:
        case vlogParser.CA:
        case vlogParser.CATI:
        case vlogParser.VL:
        case vlogParser.TI:
        case vlogParser.TIAM:
        case vlogParser.TICA:
        case vlogParser.TIVL:
            this.state = 4096;
            this.unary_module_path_operator();
            this.state = 4100;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,446,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4097;
                    this.attribute_instance(); 
                }
                this.state = 4102;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,446,this._ctx);
            }

            this.state = 4103;
            this.module_path_primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 4131;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,451,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 4129;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,450,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Module_path_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_module_path_expression);
                    this.state = 4107;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 4108;
                    this.binary_module_path_operator();
                    this.state = 4112;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,448,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 4109;
                            this.attribute_instance(); 
                        }
                        this.state = 4114;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,448,this._ctx);
                    }

                    this.state = 4115;
                    this.module_path_expression(3);
                    break;

                case 2:
                    localctx = new Module_path_expressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vlogParser.RULE_module_path_expression);
                    this.state = 4117;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 4118;
                    this.match(vlogParser.QM);
                    this.state = 4122;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,449,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 4119;
                            this.attribute_instance(); 
                        }
                        this.state = 4124;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,449,this._ctx);
                    }

                    this.state = 4125;
                    this.module_path_expression(0);
                    this.state = 4126;
                    this.match(vlogParser.CL);
                    this.state = 4127;
                    this.module_path_expression(2);
                    break;

                } 
            }
            this.state = 4133;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,451,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Module_path_mintypmax_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_path_mintypmax_expression;
    return this;
}

Module_path_mintypmax_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_path_mintypmax_expressionContext.prototype.constructor = Module_path_mintypmax_expressionContext;

Module_path_mintypmax_expressionContext.prototype.module_path_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_path_expressionContext);
    } else {
        return this.getTypedRuleContext(Module_path_expressionContext,i);
    }
};

Module_path_mintypmax_expressionContext.prototype.CL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CL);
    } else {
        return this.getToken(vlogParser.CL, i);
    }
};


Module_path_mintypmax_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_path_mintypmax_expression(this);
	}
};

Module_path_mintypmax_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_path_mintypmax_expression(this);
	}
};




vlogParser.Module_path_mintypmax_expressionContext = Module_path_mintypmax_expressionContext;

vlogParser.prototype.module_path_mintypmax_expression = function() {

    var localctx = new Module_path_mintypmax_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, vlogParser.RULE_module_path_mintypmax_expression);
    try {
        this.state = 4141;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4134;
            this.module_path_expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4135;
            this.module_path_expression(0);
            this.state = 4136;
            this.match(vlogParser.CL);
            this.state = 4137;
            this.module_path_expression(0);
            this.state = 4138;
            this.match(vlogParser.CL);
            this.state = 4139;
            this.module_path_expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Msb_constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_msb_constant_expression;
    return this;
}

Msb_constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Msb_constant_expressionContext.prototype.constructor = Msb_constant_expressionContext;

Msb_constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Msb_constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMsb_constant_expression(this);
	}
};

Msb_constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMsb_constant_expression(this);
	}
};




vlogParser.Msb_constant_expressionContext = Msb_constant_expressionContext;

vlogParser.prototype.msb_constant_expression = function() {

    var localctx = new Msb_constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, vlogParser.RULE_msb_constant_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4143;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_range_expression;
    return this;
}

Range_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_expressionContext.prototype.constructor = Range_expressionContext;

Range_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Range_expressionContext.prototype.msb_constant_expression = function() {
    return this.getTypedRuleContext(Msb_constant_expressionContext,0);
};

Range_expressionContext.prototype.CL = function() {
    return this.getToken(vlogParser.CL, 0);
};

Range_expressionContext.prototype.lsb_constant_expression = function() {
    return this.getTypedRuleContext(Lsb_constant_expressionContext,0);
};

Range_expressionContext.prototype.base_expression = function() {
    return this.getTypedRuleContext(Base_expressionContext,0);
};

Range_expressionContext.prototype.PLCL = function() {
    return this.getToken(vlogParser.PLCL, 0);
};

Range_expressionContext.prototype.width_constant_expression = function() {
    return this.getTypedRuleContext(Width_constant_expressionContext,0);
};

Range_expressionContext.prototype.MICL = function() {
    return this.getToken(vlogParser.MICL, 0);
};

Range_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterRange_expression(this);
	}
};

Range_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitRange_expression(this);
	}
};




vlogParser.Range_expressionContext = Range_expressionContext;

vlogParser.prototype.range_expression = function() {

    var localctx = new Range_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, vlogParser.RULE_range_expression);
    try {
        this.state = 4158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4145;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4146;
            this.msb_constant_expression();
            this.state = 4147;
            this.match(vlogParser.CL);
            this.state = 4148;
            this.lsb_constant_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4150;
            this.base_expression();
            this.state = 4151;
            this.match(vlogParser.PLCL);
            this.state = 4152;
            this.width_constant_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4154;
            this.base_expression();
            this.state = 4155;
            this.match(vlogParser.MICL);
            this.state = 4156;
            this.width_constant_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Width_constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_width_constant_expression;
    return this;
}

Width_constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Width_constant_expressionContext.prototype.constructor = Width_constant_expressionContext;

Width_constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Width_constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterWidth_constant_expression(this);
	}
};

Width_constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitWidth_constant_expression(this);
	}
};




vlogParser.Width_constant_expressionContext = Width_constant_expressionContext;

vlogParser.prototype.width_constant_expression = function() {

    var localctx = new Width_constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, vlogParser.RULE_width_constant_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4160;
        this.constant_expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_constant_primary;
    return this;
}

Constant_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_primaryContext.prototype.constructor = Constant_primaryContext;

Constant_primaryContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

Constant_primaryContext.prototype.parameter_identifier = function() {
    return this.getTypedRuleContext(Parameter_identifierContext,0);
};

Constant_primaryContext.prototype.LB = function() {
    return this.getToken(vlogParser.LB, 0);
};

Constant_primaryContext.prototype.constant_range_expression = function() {
    return this.getTypedRuleContext(Constant_range_expressionContext,0);
};

Constant_primaryContext.prototype.RB = function() {
    return this.getToken(vlogParser.RB, 0);
};

Constant_primaryContext.prototype.specparam_identifier = function() {
    return this.getTypedRuleContext(Specparam_identifierContext,0);
};

Constant_primaryContext.prototype.constant_concatenation = function() {
    return this.getTypedRuleContext(Constant_concatenationContext,0);
};

Constant_primaryContext.prototype.constant_multiple_concatenation = function() {
    return this.getTypedRuleContext(Constant_multiple_concatenationContext,0);
};

Constant_primaryContext.prototype.constant_function_call = function() {
    return this.getTypedRuleContext(Constant_function_callContext,0);
};

Constant_primaryContext.prototype.constant_system_function_call = function() {
    return this.getTypedRuleContext(Constant_system_function_callContext,0);
};

Constant_primaryContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Constant_primaryContext.prototype.constant_mintypmax_expression = function() {
    return this.getTypedRuleContext(Constant_mintypmax_expressionContext,0);
};

Constant_primaryContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Constant_primaryContext.prototype.string_ = function() {
    return this.getTypedRuleContext(String_Context,0);
};

Constant_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConstant_primary(this);
	}
};

Constant_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConstant_primary(this);
	}
};




vlogParser.Constant_primaryContext = Constant_primaryContext;

vlogParser.prototype.constant_primary = function() {

    var localctx = new Constant_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, vlogParser.RULE_constant_primary);
    try {
        this.state = 4186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4162;
            this.number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4163;
            this.parameter_identifier();
            this.state = 4168;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
            if(la_===1) {
                this.state = 4164;
                this.match(vlogParser.LB);
                this.state = 4165;
                this.constant_range_expression();
                this.state = 4166;
                this.match(vlogParser.RB);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4170;
            this.specparam_identifier();
            this.state = 4175;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
            if(la_===1) {
                this.state = 4171;
                this.match(vlogParser.LB);
                this.state = 4172;
                this.constant_range_expression();
                this.state = 4173;
                this.match(vlogParser.RB);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4177;
            this.constant_concatenation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4178;
            this.constant_multiple_concatenation();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4179;
            this.constant_function_call();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4180;
            this.constant_system_function_call();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4181;
            this.match(vlogParser.LP);
            this.state = 4182;
            this.constant_mintypmax_expression();
            this.state = 4183;
            this.match(vlogParser.RP);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 4185;
            this.string_();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_path_primaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_path_primary;
    return this;
}

Module_path_primaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_path_primaryContext.prototype.constructor = Module_path_primaryContext;

Module_path_primaryContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

Module_path_primaryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Module_path_primaryContext.prototype.module_path_concatenation = function() {
    return this.getTypedRuleContext(Module_path_concatenationContext,0);
};

Module_path_primaryContext.prototype.module_path_multiple_concatenation = function() {
    return this.getTypedRuleContext(Module_path_multiple_concatenationContext,0);
};

Module_path_primaryContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Module_path_primaryContext.prototype.system_function_call = function() {
    return this.getTypedRuleContext(System_function_callContext,0);
};

Module_path_primaryContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Module_path_primaryContext.prototype.module_path_mintypmax_expression = function() {
    return this.getTypedRuleContext(Module_path_mintypmax_expressionContext,0);
};

Module_path_primaryContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Module_path_primaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_path_primary(this);
	}
};

Module_path_primaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_path_primary(this);
	}
};




vlogParser.Module_path_primaryContext = Module_path_primaryContext;

vlogParser.prototype.module_path_primary = function() {

    var localctx = new Module_path_primaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, vlogParser.RULE_module_path_primary);
    try {
        this.state = 4198;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4188;
            this.number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4189;
            this.identifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4190;
            this.module_path_concatenation();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4191;
            this.module_path_multiple_concatenation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4192;
            this.function_call();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4193;
            this.system_function_call();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4194;
            this.match(vlogParser.LP);
            this.state = 4195;
            this.module_path_mintypmax_expression();
            this.state = 4196;
            this.match(vlogParser.RP);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

PrimaryContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

PrimaryContext.prototype.LB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LB);
    } else {
        return this.getToken(vlogParser.LB, i);
    }
};


PrimaryContext.prototype.range_expression = function() {
    return this.getTypedRuleContext(Range_expressionContext,0);
};

PrimaryContext.prototype.RB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RB);
    } else {
        return this.getToken(vlogParser.RB, i);
    }
};


PrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrimaryContext.prototype.concatenation = function() {
    return this.getTypedRuleContext(ConcatenationContext,0);
};

PrimaryContext.prototype.multiple_concatenation = function() {
    return this.getTypedRuleContext(Multiple_concatenationContext,0);
};

PrimaryContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

PrimaryContext.prototype.system_function_call = function() {
    return this.getTypedRuleContext(System_function_callContext,0);
};

PrimaryContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

PrimaryContext.prototype.mintypmax_expression = function() {
    return this.getTypedRuleContext(Mintypmax_expressionContext,0);
};

PrimaryContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

PrimaryContext.prototype.string_ = function() {
    return this.getTypedRuleContext(String_Context,0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPrimary(this);
	}
};




vlogParser.PrimaryContext = PrimaryContext;

vlogParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, vlogParser.RULE_primary);
    try {
        this.state = 4226;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 4200;
            this.number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 4201;
            this.hierarchical_identifier();
            this.state = 4215;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
            if(la_===1) {
                this.state = 4208;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,458,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 4202;
                        this.match(vlogParser.LB);
                        this.state = 4203;
                        this.expression(0);
                        this.state = 4204;
                        this.match(vlogParser.RB); 
                    }
                    this.state = 4210;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,458,this._ctx);
                }

                this.state = 4211;
                this.match(vlogParser.LB);
                this.state = 4212;
                this.range_expression();
                this.state = 4213;
                this.match(vlogParser.RB);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 4217;
            this.concatenation();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 4218;
            this.multiple_concatenation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 4219;
            this.function_call();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 4220;
            this.system_function_call();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 4221;
            this.match(vlogParser.LP);
            this.state = 4222;
            this.mintypmax_expression();
            this.state = 4223;
            this.match(vlogParser.RP);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 4225;
            this.string_();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_lvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_lvalue;
    return this;
}

Net_lvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_lvalueContext.prototype.constructor = Net_lvalueContext;

Net_lvalueContext.prototype.hierarchical_net_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_net_identifierContext,0);
};

Net_lvalueContext.prototype.LB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LB);
    } else {
        return this.getToken(vlogParser.LB, i);
    }
};


Net_lvalueContext.prototype.constant_range_expression = function() {
    return this.getTypedRuleContext(Constant_range_expressionContext,0);
};

Net_lvalueContext.prototype.RB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RB);
    } else {
        return this.getToken(vlogParser.RB, i);
    }
};


Net_lvalueContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Net_lvalueContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Net_lvalueContext.prototype.net_lvalue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Net_lvalueContext);
    } else {
        return this.getTypedRuleContext(Net_lvalueContext,i);
    }
};

Net_lvalueContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Net_lvalueContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Net_lvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_lvalue(this);
	}
};

Net_lvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_lvalue(this);
	}
};




vlogParser.Net_lvalueContext = Net_lvalueContext;

vlogParser.prototype.net_lvalue = function() {

    var localctx = new Net_lvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, vlogParser.RULE_net_lvalue);
    var _la = 0; // Token type
    try {
        this.state = 4255;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4228;
            this.hierarchical_net_identifier();
            this.state = 4242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 4235;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,461,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 4229;
                        this.match(vlogParser.LB);
                        this.state = 4230;
                        this.constant_expression(0);
                        this.state = 4231;
                        this.match(vlogParser.RB); 
                    }
                    this.state = 4237;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,461,this._ctx);
                }

                this.state = 4238;
                this.match(vlogParser.LB);
                this.state = 4239;
                this.constant_range_expression();
                this.state = 4240;
                this.match(vlogParser.RB);
            }

            break;
        case vlogParser.LC:
            this.enterOuterAlt(localctx, 2);
            this.state = 4244;
            this.match(vlogParser.LC);
            this.state = 4245;
            this.net_lvalue();
            this.state = 4250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 4246;
                this.match(vlogParser.CO);
                this.state = 4247;
                this.net_lvalue();
                this.state = 4252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4253;
            this.match(vlogParser.RC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_lvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_variable_lvalue;
    return this;
}

Variable_lvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_lvalueContext.prototype.constructor = Variable_lvalueContext;

Variable_lvalueContext.prototype.hierarchical_variable_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_variable_identifierContext,0);
};

Variable_lvalueContext.prototype.LB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LB);
    } else {
        return this.getToken(vlogParser.LB, i);
    }
};


Variable_lvalueContext.prototype.range_expression = function() {
    return this.getTypedRuleContext(Range_expressionContext,0);
};

Variable_lvalueContext.prototype.RB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RB);
    } else {
        return this.getToken(vlogParser.RB, i);
    }
};


Variable_lvalueContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Variable_lvalueContext.prototype.LC = function() {
    return this.getToken(vlogParser.LC, 0);
};

Variable_lvalueContext.prototype.variable_lvalue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_lvalueContext);
    } else {
        return this.getTypedRuleContext(Variable_lvalueContext,i);
    }
};

Variable_lvalueContext.prototype.RC = function() {
    return this.getToken(vlogParser.RC, 0);
};

Variable_lvalueContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Variable_lvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterVariable_lvalue(this);
	}
};

Variable_lvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitVariable_lvalue(this);
	}
};




vlogParser.Variable_lvalueContext = Variable_lvalueContext;

vlogParser.prototype.variable_lvalue = function() {

    var localctx = new Variable_lvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, vlogParser.RULE_variable_lvalue);
    var _la = 0; // Token type
    try {
        this.state = 4284;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.ESCAPED_IDENTIFIER:
        case vlogParser.SIMPLE_IDENTIFIER:
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 4257;
            this.hierarchical_variable_identifier();
            this.state = 4271;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vlogParser.LB) {
                this.state = 4264;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,465,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 4258;
                        this.match(vlogParser.LB);
                        this.state = 4259;
                        this.expression(0);
                        this.state = 4260;
                        this.match(vlogParser.RB); 
                    }
                    this.state = 4266;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,465,this._ctx);
                }

                this.state = 4267;
                this.match(vlogParser.LB);
                this.state = 4268;
                this.range_expression();
                this.state = 4269;
                this.match(vlogParser.RB);
            }

            break;
        case vlogParser.LC:
            this.enterOuterAlt(localctx, 2);
            this.state = 4273;
            this.match(vlogParser.LC);
            this.state = 4274;
            this.variable_lvalue();
            this.state = 4279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vlogParser.CO) {
                this.state = 4275;
                this.match(vlogParser.CO);
                this.state = 4276;
                this.variable_lvalue();
                this.state = 4281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4282;
            this.match(vlogParser.RC);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_unary_operator;
    return this;
}

Unary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_operatorContext.prototype.constructor = Unary_operatorContext;

Unary_operatorContext.prototype.PL = function() {
    return this.getToken(vlogParser.PL, 0);
};

Unary_operatorContext.prototype.MI = function() {
    return this.getToken(vlogParser.MI, 0);
};

Unary_operatorContext.prototype.EM = function() {
    return this.getToken(vlogParser.EM, 0);
};

Unary_operatorContext.prototype.TI = function() {
    return this.getToken(vlogParser.TI, 0);
};

Unary_operatorContext.prototype.AM = function() {
    return this.getToken(vlogParser.AM, 0);
};

Unary_operatorContext.prototype.TIAM = function() {
    return this.getToken(vlogParser.TIAM, 0);
};

Unary_operatorContext.prototype.VL = function() {
    return this.getToken(vlogParser.VL, 0);
};

Unary_operatorContext.prototype.TIVL = function() {
    return this.getToken(vlogParser.TIVL, 0);
};

Unary_operatorContext.prototype.CA = function() {
    return this.getToken(vlogParser.CA, 0);
};

Unary_operatorContext.prototype.TICA = function() {
    return this.getToken(vlogParser.TICA, 0);
};

Unary_operatorContext.prototype.CATI = function() {
    return this.getToken(vlogParser.CATI, 0);
};

Unary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUnary_operator(this);
	}
};

Unary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUnary_operator(this);
	}
};




vlogParser.Unary_operatorContext = Unary_operatorContext;

vlogParser.prototype.unary_operator = function() {

    var localctx = new Unary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, vlogParser.RULE_unary_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4286;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EM) | (1 << vlogParser.AM) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (vlogParser.VL - 185)) | (1 << (vlogParser.TI - 185)) | (1 << (vlogParser.TIAM - 185)) | (1 << (vlogParser.TICA - 185)) | (1 << (vlogParser.TIVL - 185)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_binary_operator;
    return this;
}

Binary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_operatorContext.prototype.constructor = Binary_operatorContext;

Binary_operatorContext.prototype.PL = function() {
    return this.getToken(vlogParser.PL, 0);
};

Binary_operatorContext.prototype.MI = function() {
    return this.getToken(vlogParser.MI, 0);
};

Binary_operatorContext.prototype.AS = function() {
    return this.getToken(vlogParser.AS, 0);
};

Binary_operatorContext.prototype.SL = function() {
    return this.getToken(vlogParser.SL, 0);
};

Binary_operatorContext.prototype.MO = function() {
    return this.getToken(vlogParser.MO, 0);
};

Binary_operatorContext.prototype.EQEQ = function() {
    return this.getToken(vlogParser.EQEQ, 0);
};

Binary_operatorContext.prototype.EMEQ = function() {
    return this.getToken(vlogParser.EMEQ, 0);
};

Binary_operatorContext.prototype.EQEQEQ = function() {
    return this.getToken(vlogParser.EQEQEQ, 0);
};

Binary_operatorContext.prototype.EMEQEQ = function() {
    return this.getToken(vlogParser.EMEQEQ, 0);
};

Binary_operatorContext.prototype.AMAM = function() {
    return this.getToken(vlogParser.AMAM, 0);
};

Binary_operatorContext.prototype.VLVL = function() {
    return this.getToken(vlogParser.VLVL, 0);
};

Binary_operatorContext.prototype.ASAS = function() {
    return this.getToken(vlogParser.ASAS, 0);
};

Binary_operatorContext.prototype.LT = function() {
    return this.getToken(vlogParser.LT, 0);
};

Binary_operatorContext.prototype.LTEQ = function() {
    return this.getToken(vlogParser.LTEQ, 0);
};

Binary_operatorContext.prototype.GT = function() {
    return this.getToken(vlogParser.GT, 0);
};

Binary_operatorContext.prototype.GTEQ = function() {
    return this.getToken(vlogParser.GTEQ, 0);
};

Binary_operatorContext.prototype.AM = function() {
    return this.getToken(vlogParser.AM, 0);
};

Binary_operatorContext.prototype.VL = function() {
    return this.getToken(vlogParser.VL, 0);
};

Binary_operatorContext.prototype.CA = function() {
    return this.getToken(vlogParser.CA, 0);
};

Binary_operatorContext.prototype.CATI = function() {
    return this.getToken(vlogParser.CATI, 0);
};

Binary_operatorContext.prototype.TICA = function() {
    return this.getToken(vlogParser.TICA, 0);
};

Binary_operatorContext.prototype.GTGT = function() {
    return this.getToken(vlogParser.GTGT, 0);
};

Binary_operatorContext.prototype.LTLT = function() {
    return this.getToken(vlogParser.LTLT, 0);
};

Binary_operatorContext.prototype.GTGTGT = function() {
    return this.getToken(vlogParser.GTGTGT, 0);
};

Binary_operatorContext.prototype.LTLTLT = function() {
    return this.getToken(vlogParser.LTLTLT, 0);
};

Binary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBinary_operator(this);
	}
};

Binary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBinary_operator(this);
	}
};




vlogParser.Binary_operatorContext = Binary_operatorContext;

vlogParser.prototype.binary_operator = function() {

    var localctx = new Binary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, vlogParser.RULE_binary_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4288;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EMEQ) | (1 << vlogParser.EMEQEQ) | (1 << vlogParser.MO) | (1 << vlogParser.AM) | (1 << vlogParser.AMAM) | (1 << vlogParser.AS) | (1 << vlogParser.ASAS) | (1 << vlogParser.PL))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (vlogParser.MI - 33)) | (1 << (vlogParser.SL - 33)) | (1 << (vlogParser.LT - 33)) | (1 << (vlogParser.LTLT - 33)) | (1 << (vlogParser.LTLTLT - 33)) | (1 << (vlogParser.LTEQ - 33)) | (1 << (vlogParser.EQEQ - 33)) | (1 << (vlogParser.EQEQEQ - 33)) | (1 << (vlogParser.GT - 33)) | (1 << (vlogParser.GTEQ - 33)) | (1 << (vlogParser.GTGT - 33)) | (1 << (vlogParser.GTGTGT - 33)) | (1 << (vlogParser.CA - 33)) | (1 << (vlogParser.CATI - 33)))) !== 0) || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (vlogParser.VL - 185)) | (1 << (vlogParser.VLVL - 185)) | (1 << (vlogParser.TICA - 185)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unary_module_path_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_unary_module_path_operator;
    return this;
}

Unary_module_path_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_module_path_operatorContext.prototype.constructor = Unary_module_path_operatorContext;

Unary_module_path_operatorContext.prototype.EM = function() {
    return this.getToken(vlogParser.EM, 0);
};

Unary_module_path_operatorContext.prototype.TI = function() {
    return this.getToken(vlogParser.TI, 0);
};

Unary_module_path_operatorContext.prototype.AM = function() {
    return this.getToken(vlogParser.AM, 0);
};

Unary_module_path_operatorContext.prototype.TIAM = function() {
    return this.getToken(vlogParser.TIAM, 0);
};

Unary_module_path_operatorContext.prototype.VL = function() {
    return this.getToken(vlogParser.VL, 0);
};

Unary_module_path_operatorContext.prototype.TIVL = function() {
    return this.getToken(vlogParser.TIVL, 0);
};

Unary_module_path_operatorContext.prototype.CA = function() {
    return this.getToken(vlogParser.CA, 0);
};

Unary_module_path_operatorContext.prototype.TICA = function() {
    return this.getToken(vlogParser.TICA, 0);
};

Unary_module_path_operatorContext.prototype.CATI = function() {
    return this.getToken(vlogParser.CATI, 0);
};

Unary_module_path_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUnary_module_path_operator(this);
	}
};

Unary_module_path_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUnary_module_path_operator(this);
	}
};




vlogParser.Unary_module_path_operatorContext = Unary_module_path_operatorContext;

vlogParser.prototype.unary_module_path_operator = function() {

    var localctx = new Unary_module_path_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, vlogParser.RULE_unary_module_path_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4290;
        _la = this._input.LA(1);
        if(!(_la===vlogParser.EM || _la===vlogParser.AM || _la===vlogParser.CA || _la===vlogParser.CATI || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (vlogParser.VL - 185)) | (1 << (vlogParser.TI - 185)) | (1 << (vlogParser.TIAM - 185)) | (1 << (vlogParser.TICA - 185)) | (1 << (vlogParser.TIVL - 185)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_module_path_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_binary_module_path_operator;
    return this;
}

Binary_module_path_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_module_path_operatorContext.prototype.constructor = Binary_module_path_operatorContext;

Binary_module_path_operatorContext.prototype.EQEQ = function() {
    return this.getToken(vlogParser.EQEQ, 0);
};

Binary_module_path_operatorContext.prototype.EMEQ = function() {
    return this.getToken(vlogParser.EMEQ, 0);
};

Binary_module_path_operatorContext.prototype.AMAM = function() {
    return this.getToken(vlogParser.AMAM, 0);
};

Binary_module_path_operatorContext.prototype.VLVL = function() {
    return this.getToken(vlogParser.VLVL, 0);
};

Binary_module_path_operatorContext.prototype.AM = function() {
    return this.getToken(vlogParser.AM, 0);
};

Binary_module_path_operatorContext.prototype.VL = function() {
    return this.getToken(vlogParser.VL, 0);
};

Binary_module_path_operatorContext.prototype.CA = function() {
    return this.getToken(vlogParser.CA, 0);
};

Binary_module_path_operatorContext.prototype.CATI = function() {
    return this.getToken(vlogParser.CATI, 0);
};

Binary_module_path_operatorContext.prototype.TICA = function() {
    return this.getToken(vlogParser.TICA, 0);
};

Binary_module_path_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBinary_module_path_operator(this);
	}
};

Binary_module_path_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBinary_module_path_operator(this);
	}
};




vlogParser.Binary_module_path_operatorContext = Binary_module_path_operatorContext;

vlogParser.prototype.binary_module_path_operator = function() {

    var localctx = new Binary_module_path_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, vlogParser.RULE_binary_module_path_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4292;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vlogParser.EMEQ) | (1 << vlogParser.AM) | (1 << vlogParser.AMAM))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (vlogParser.EQEQ - 47)) | (1 << (vlogParser.CA - 47)) | (1 << (vlogParser.CATI - 47)))) !== 0) || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (vlogParser.VL - 185)) | (1 << (vlogParser.VLVL - 185)) | (1 << (vlogParser.TICA - 185)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.decimal_number = function() {
    return this.getTypedRuleContext(Decimal_numberContext,0);
};

NumberContext.prototype.octal_number = function() {
    return this.getTypedRuleContext(Octal_numberContext,0);
};

NumberContext.prototype.binary_number = function() {
    return this.getTypedRuleContext(Binary_numberContext,0);
};

NumberContext.prototype.hex_number = function() {
    return this.getTypedRuleContext(Hex_numberContext,0);
};

NumberContext.prototype.real_number = function() {
    return this.getTypedRuleContext(Real_numberContext,0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNumber(this);
	}
};




vlogParser.NumberContext = NumberContext;

vlogParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, vlogParser.RULE_number);
    try {
        this.state = 4299;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.DECIMAL_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 4294;
            this.decimal_number();
            break;
        case vlogParser.OCTAL_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4295;
            this.octal_number();
            break;
        case vlogParser.BINARY_NUMBER:
            this.enterOuterAlt(localctx, 3);
            this.state = 4296;
            this.binary_number();
            break;
        case vlogParser.HEX_NUMBER:
            this.enterOuterAlt(localctx, 4);
            this.state = 4297;
            this.hex_number();
            break;
        case vlogParser.REAL_NUMBER:
            this.enterOuterAlt(localctx, 5);
            this.state = 4298;
            this.real_number();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_real_number;
    return this;
}

Real_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_numberContext.prototype.constructor = Real_numberContext;

Real_numberContext.prototype.REAL_NUMBER = function() {
    return this.getToken(vlogParser.REAL_NUMBER, 0);
};

Real_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReal_number(this);
	}
};

Real_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReal_number(this);
	}
};




vlogParser.Real_numberContext = Real_numberContext;

vlogParser.prototype.real_number = function() {

    var localctx = new Real_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, vlogParser.RULE_real_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4301;
        this.match(vlogParser.REAL_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Decimal_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_decimal_number;
    return this;
}

Decimal_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Decimal_numberContext.prototype.constructor = Decimal_numberContext;

Decimal_numberContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(vlogParser.DECIMAL_NUMBER, 0);
};

Decimal_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterDecimal_number(this);
	}
};

Decimal_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitDecimal_number(this);
	}
};




vlogParser.Decimal_numberContext = Decimal_numberContext;

vlogParser.prototype.decimal_number = function() {

    var localctx = new Decimal_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, vlogParser.RULE_decimal_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4303;
        this.match(vlogParser.DECIMAL_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_binary_number;
    return this;
}

Binary_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_numberContext.prototype.constructor = Binary_numberContext;

Binary_numberContext.prototype.BINARY_NUMBER = function() {
    return this.getToken(vlogParser.BINARY_NUMBER, 0);
};

Binary_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBinary_number(this);
	}
};

Binary_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBinary_number(this);
	}
};




vlogParser.Binary_numberContext = Binary_numberContext;

vlogParser.prototype.binary_number = function() {

    var localctx = new Binary_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, vlogParser.RULE_binary_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4305;
        this.match(vlogParser.BINARY_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Octal_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_octal_number;
    return this;
}

Octal_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Octal_numberContext.prototype.constructor = Octal_numberContext;

Octal_numberContext.prototype.OCTAL_NUMBER = function() {
    return this.getToken(vlogParser.OCTAL_NUMBER, 0);
};

Octal_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOctal_number(this);
	}
};

Octal_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOctal_number(this);
	}
};




vlogParser.Octal_numberContext = Octal_numberContext;

vlogParser.prototype.octal_number = function() {

    var localctx = new Octal_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, vlogParser.RULE_octal_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4307;
        this.match(vlogParser.OCTAL_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hex_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hex_number;
    return this;
}

Hex_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hex_numberContext.prototype.constructor = Hex_numberContext;

Hex_numberContext.prototype.HEX_NUMBER = function() {
    return this.getToken(vlogParser.HEX_NUMBER, 0);
};

Hex_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHex_number(this);
	}
};

Hex_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHex_number(this);
	}
};




vlogParser.Hex_numberContext = Hex_numberContext;

vlogParser.prototype.hex_number = function() {

    var localctx = new Hex_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, vlogParser.RULE_hex_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4309;
        this.match(vlogParser.HEX_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unsigned_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_unsigned_number;
    return this;
}

Unsigned_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unsigned_numberContext.prototype.constructor = Unsigned_numberContext;

Unsigned_numberContext.prototype.DECIMAL_NUMBER = function() {
    return this.getToken(vlogParser.DECIMAL_NUMBER, 0);
};

Unsigned_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUnsigned_number(this);
	}
};

Unsigned_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUnsigned_number(this);
	}
};




vlogParser.Unsigned_numberContext = Unsigned_numberContext;

vlogParser.prototype.unsigned_number = function() {

    var localctx = new Unsigned_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, vlogParser.RULE_unsigned_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4311;
        this.match(vlogParser.DECIMAL_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_string_;
    return this;
}

String_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_Context.prototype.constructor = String_Context;

String_Context.prototype.STRING = function() {
    return this.getToken(vlogParser.STRING, 0);
};

String_Context.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterString_(this);
	}
};

String_Context.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitString_(this);
	}
};




vlogParser.String_Context = String_Context;

vlogParser.prototype.string_ = function() {

    var localctx = new String_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 622, vlogParser.RULE_string_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4313;
        this.match(vlogParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_instanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_attribute_instance;
    return this;
}

Attribute_instanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_instanceContext.prototype.constructor = Attribute_instanceContext;

Attribute_instanceContext.prototype.LP = function() {
    return this.getToken(vlogParser.LP, 0);
};

Attribute_instanceContext.prototype.AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.AS);
    } else {
        return this.getToken(vlogParser.AS, i);
    }
};


Attribute_instanceContext.prototype.attr_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attr_specContext);
    } else {
        return this.getTypedRuleContext(Attr_specContext,i);
    }
};

Attribute_instanceContext.prototype.RP = function() {
    return this.getToken(vlogParser.RP, 0);
};

Attribute_instanceContext.prototype.CO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.CO);
    } else {
        return this.getToken(vlogParser.CO, i);
    }
};


Attribute_instanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterAttribute_instance(this);
	}
};

Attribute_instanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitAttribute_instance(this);
	}
};




vlogParser.Attribute_instanceContext = Attribute_instanceContext;

vlogParser.prototype.attribute_instance = function() {

    var localctx = new Attribute_instanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, vlogParser.RULE_attribute_instance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4315;
        this.match(vlogParser.LP);
        this.state = 4316;
        this.match(vlogParser.AS);
        this.state = 4317;
        this.attr_spec();
        this.state = 4322;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vlogParser.CO) {
            this.state = 4318;
            this.match(vlogParser.CO);
            this.state = 4319;
            this.attr_spec();
            this.state = 4324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4325;
        this.match(vlogParser.AS);
        this.state = 4326;
        this.match(vlogParser.RP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attr_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_attr_spec;
    return this;
}

Attr_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attr_specContext.prototype.constructor = Attr_specContext;

Attr_specContext.prototype.attr_name = function() {
    return this.getTypedRuleContext(Attr_nameContext,0);
};

Attr_specContext.prototype.EQ = function() {
    return this.getToken(vlogParser.EQ, 0);
};

Attr_specContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Attr_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterAttr_spec(this);
	}
};

Attr_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitAttr_spec(this);
	}
};




vlogParser.Attr_specContext = Attr_specContext;

vlogParser.prototype.attr_spec = function() {

    var localctx = new Attr_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, vlogParser.RULE_attr_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4328;
        this.attr_name();
        this.state = 4331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vlogParser.EQ) {
            this.state = 4329;
            this.match(vlogParser.EQ);
            this.state = 4330;
            this.constant_expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attr_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_attr_name;
    return this;
}

Attr_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attr_nameContext.prototype.constructor = Attr_nameContext;

Attr_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attr_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterAttr_name(this);
	}
};

Attr_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitAttr_name(this);
	}
};




vlogParser.Attr_nameContext = Attr_nameContext;

vlogParser.prototype.attr_name = function() {

    var localctx = new Attr_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, vlogParser.RULE_attr_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4333;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_block_identifier;
    return this;
}

Block_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_identifierContext.prototype.constructor = Block_identifierContext;

Block_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Block_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterBlock_identifier(this);
	}
};

Block_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitBlock_identifier(this);
	}
};




vlogParser.Block_identifierContext = Block_identifierContext;

vlogParser.prototype.block_identifier = function() {

    var localctx = new Block_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, vlogParser.RULE_block_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4335;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Cell_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_cell_identifier;
    return this;
}

Cell_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cell_identifierContext.prototype.constructor = Cell_identifierContext;

Cell_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Cell_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterCell_identifier(this);
	}
};

Cell_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitCell_identifier(this);
	}
};




vlogParser.Cell_identifierContext = Cell_identifierContext;

vlogParser.prototype.cell_identifier = function() {

    var localctx = new Cell_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, vlogParser.RULE_cell_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4337;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Config_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_config_identifier;
    return this;
}

Config_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Config_identifierContext.prototype.constructor = Config_identifierContext;

Config_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Config_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterConfig_identifier(this);
	}
};

Config_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitConfig_identifier(this);
	}
};




vlogParser.Config_identifierContext = Config_identifierContext;

vlogParser.prototype.config_identifier = function() {

    var localctx = new Config_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, vlogParser.RULE_config_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4339;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Escaped_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_escaped_identifier;
    return this;
}

Escaped_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Escaped_identifierContext.prototype.constructor = Escaped_identifierContext;

Escaped_identifierContext.prototype.ESCAPED_IDENTIFIER = function() {
    return this.getToken(vlogParser.ESCAPED_IDENTIFIER, 0);
};

Escaped_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEscaped_identifier(this);
	}
};

Escaped_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEscaped_identifier(this);
	}
};




vlogParser.Escaped_identifierContext = Escaped_identifierContext;

vlogParser.prototype.escaped_identifier = function() {

    var localctx = new Escaped_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, vlogParser.RULE_escaped_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4341;
        this.match(vlogParser.ESCAPED_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_event_identifier;
    return this;
}

Event_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_identifierContext.prototype.constructor = Event_identifierContext;

Event_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Event_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterEvent_identifier(this);
	}
};

Event_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitEvent_identifier(this);
	}
};




vlogParser.Event_identifierContext = Event_identifierContext;

vlogParser.prototype.event_identifier = function() {

    var localctx = new Event_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, vlogParser.RULE_event_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4343;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_function_identifier;
    return this;
}

Function_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_identifierContext.prototype.constructor = Function_identifierContext;

Function_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterFunction_identifier(this);
	}
};

Function_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitFunction_identifier(this);
	}
};




vlogParser.Function_identifierContext = Function_identifierContext;

vlogParser.prototype.function_identifier = function() {

    var localctx = new Function_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, vlogParser.RULE_function_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4345;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Gate_instance_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_gate_instance_identifier;
    return this;
}

Gate_instance_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Gate_instance_identifierContext.prototype.constructor = Gate_instance_identifierContext;

Gate_instance_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Gate_instance_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGate_instance_identifier(this);
	}
};

Gate_instance_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGate_instance_identifier(this);
	}
};




vlogParser.Gate_instance_identifierContext = Gate_instance_identifierContext;

vlogParser.prototype.gate_instance_identifier = function() {

    var localctx = new Gate_instance_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, vlogParser.RULE_gate_instance_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4347;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generate_block_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_generate_block_identifier;
    return this;
}

Generate_block_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_block_identifierContext.prototype.constructor = Generate_block_identifierContext;

Generate_block_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Generate_block_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenerate_block_identifier(this);
	}
};

Generate_block_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenerate_block_identifier(this);
	}
};




vlogParser.Generate_block_identifierContext = Generate_block_identifierContext;

vlogParser.prototype.generate_block_identifier = function() {

    var localctx = new Generate_block_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, vlogParser.RULE_generate_block_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4349;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Genvar_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_genvar_identifier;
    return this;
}

Genvar_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Genvar_identifierContext.prototype.constructor = Genvar_identifierContext;

Genvar_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Genvar_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterGenvar_identifier(this);
	}
};

Genvar_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitGenvar_identifier(this);
	}
};




vlogParser.Genvar_identifierContext = Genvar_identifierContext;

vlogParser.prototype.genvar_identifier = function() {

    var localctx = new Genvar_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, vlogParser.RULE_genvar_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4351;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_block_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_block_identifier;
    return this;
}

Hierarchical_block_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_block_identifierContext.prototype.constructor = Hierarchical_block_identifierContext;

Hierarchical_block_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_block_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_block_identifier(this);
	}
};

Hierarchical_block_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_block_identifier(this);
	}
};




vlogParser.Hierarchical_block_identifierContext = Hierarchical_block_identifierContext;

vlogParser.prototype.hierarchical_block_identifier = function() {

    var localctx = new Hierarchical_block_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, vlogParser.RULE_hierarchical_block_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4353;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_event_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_event_identifier;
    return this;
}

Hierarchical_event_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_event_identifierContext.prototype.constructor = Hierarchical_event_identifierContext;

Hierarchical_event_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_event_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_event_identifier(this);
	}
};

Hierarchical_event_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_event_identifier(this);
	}
};




vlogParser.Hierarchical_event_identifierContext = Hierarchical_event_identifierContext;

vlogParser.prototype.hierarchical_event_identifier = function() {

    var localctx = new Hierarchical_event_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, vlogParser.RULE_hierarchical_event_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4355;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_function_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_function_identifier;
    return this;
}

Hierarchical_function_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_function_identifierContext.prototype.constructor = Hierarchical_function_identifierContext;

Hierarchical_function_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_function_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_function_identifier(this);
	}
};

Hierarchical_function_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_function_identifier(this);
	}
};




vlogParser.Hierarchical_function_identifierContext = Hierarchical_function_identifierContext;

vlogParser.prototype.hierarchical_function_identifier = function() {

    var localctx = new Hierarchical_function_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, vlogParser.RULE_hierarchical_function_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4357;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_identifier;
    return this;
}

Hierarchical_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_identifierContext.prototype.constructor = Hierarchical_identifierContext;

Hierarchical_identifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Hierarchical_identifierContext.prototype.DT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.DT);
    } else {
        return this.getToken(vlogParser.DT, i);
    }
};


Hierarchical_identifierContext.prototype.LB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.LB);
    } else {
        return this.getToken(vlogParser.LB, i);
    }
};


Hierarchical_identifierContext.prototype.constant_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_expressionContext);
    } else {
        return this.getTypedRuleContext(Constant_expressionContext,i);
    }
};

Hierarchical_identifierContext.prototype.RB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vlogParser.RB);
    } else {
        return this.getToken(vlogParser.RB, i);
    }
};


Hierarchical_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_identifier(this);
	}
};

Hierarchical_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_identifier(this);
	}
};




vlogParser.Hierarchical_identifierContext = Hierarchical_identifierContext;

vlogParser.prototype.hierarchical_identifier = function() {

    var localctx = new Hierarchical_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, vlogParser.RULE_hierarchical_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4370;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,473,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4359;
                this.identifier();
                this.state = 4364;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===vlogParser.LB) {
                    this.state = 4360;
                    this.match(vlogParser.LB);
                    this.state = 4361;
                    this.constant_expression(0);
                    this.state = 4362;
                    this.match(vlogParser.RB);
                }

                this.state = 4366;
                this.match(vlogParser.DT); 
            }
            this.state = 4372;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,473,this._ctx);
        }

        this.state = 4373;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_net_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_net_identifier;
    return this;
}

Hierarchical_net_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_net_identifierContext.prototype.constructor = Hierarchical_net_identifierContext;

Hierarchical_net_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_net_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_net_identifier(this);
	}
};

Hierarchical_net_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_net_identifier(this);
	}
};




vlogParser.Hierarchical_net_identifierContext = Hierarchical_net_identifierContext;

vlogParser.prototype.hierarchical_net_identifier = function() {

    var localctx = new Hierarchical_net_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, vlogParser.RULE_hierarchical_net_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4375;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_parameter_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_parameter_identifier;
    return this;
}

Hierarchical_parameter_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_parameter_identifierContext.prototype.constructor = Hierarchical_parameter_identifierContext;

Hierarchical_parameter_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_parameter_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_parameter_identifier(this);
	}
};

Hierarchical_parameter_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_parameter_identifier(this);
	}
};




vlogParser.Hierarchical_parameter_identifierContext = Hierarchical_parameter_identifierContext;

vlogParser.prototype.hierarchical_parameter_identifier = function() {

    var localctx = new Hierarchical_parameter_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, vlogParser.RULE_hierarchical_parameter_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4377;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_variable_identifier;
    return this;
}

Hierarchical_variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_variable_identifierContext.prototype.constructor = Hierarchical_variable_identifierContext;

Hierarchical_variable_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_variable_identifier(this);
	}
};

Hierarchical_variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_variable_identifier(this);
	}
};




vlogParser.Hierarchical_variable_identifierContext = Hierarchical_variable_identifierContext;

vlogParser.prototype.hierarchical_variable_identifier = function() {

    var localctx = new Hierarchical_variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, vlogParser.RULE_hierarchical_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4379;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Hierarchical_task_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_hierarchical_task_identifier;
    return this;
}

Hierarchical_task_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hierarchical_task_identifierContext.prototype.constructor = Hierarchical_task_identifierContext;

Hierarchical_task_identifierContext.prototype.hierarchical_identifier = function() {
    return this.getTypedRuleContext(Hierarchical_identifierContext,0);
};

Hierarchical_task_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterHierarchical_task_identifier(this);
	}
};

Hierarchical_task_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitHierarchical_task_identifier(this);
	}
};




vlogParser.Hierarchical_task_identifierContext = Hierarchical_task_identifierContext;

vlogParser.prototype.hierarchical_task_identifier = function() {

    var localctx = new Hierarchical_task_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, vlogParser.RULE_hierarchical_task_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4381;
        this.hierarchical_identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.simple_identifier = function() {
    return this.getTypedRuleContext(Simple_identifierContext,0);
};

IdentifierContext.prototype.escaped_identifier = function() {
    return this.getTypedRuleContext(Escaped_identifierContext,0);
};

IdentifierContext.prototype.macro_usage_identifier = function() {
    return this.getTypedRuleContext(Macro_usage_identifierContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitIdentifier(this);
	}
};




vlogParser.IdentifierContext = IdentifierContext;

vlogParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, vlogParser.RULE_identifier);
    try {
        this.state = 4386;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vlogParser.SIMPLE_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 4383;
            this.simple_identifier();
            break;
        case vlogParser.ESCAPED_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 4384;
            this.escaped_identifier();
            break;
        case vlogParser.MACRO_USAGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 4385;
            this.macro_usage_identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Macro_usage_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_macro_usage_identifier;
    return this;
}

Macro_usage_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Macro_usage_identifierContext.prototype.constructor = Macro_usage_identifierContext;

Macro_usage_identifierContext.prototype.MACRO_USAGE = function() {
    return this.getToken(vlogParser.MACRO_USAGE, 0);
};

Macro_usage_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterMacro_usage_identifier(this);
	}
};

Macro_usage_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitMacro_usage_identifier(this);
	}
};




vlogParser.Macro_usage_identifierContext = Macro_usage_identifierContext;

vlogParser.prototype.macro_usage_identifier = function() {

    var localctx = new Macro_usage_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, vlogParser.RULE_macro_usage_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4388;
        this.match(vlogParser.MACRO_USAGE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Inout_port_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_inout_port_identifier;
    return this;
}

Inout_port_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inout_port_identifierContext.prototype.constructor = Inout_port_identifierContext;

Inout_port_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Inout_port_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInout_port_identifier(this);
	}
};

Inout_port_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInout_port_identifier(this);
	}
};




vlogParser.Inout_port_identifierContext = Inout_port_identifierContext;

vlogParser.prototype.inout_port_identifier = function() {

    var localctx = new Inout_port_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, vlogParser.RULE_inout_port_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4390;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Input_port_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_input_port_identifier;
    return this;
}

Input_port_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_port_identifierContext.prototype.constructor = Input_port_identifierContext;

Input_port_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Input_port_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInput_port_identifier(this);
	}
};

Input_port_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInput_port_identifier(this);
	}
};




vlogParser.Input_port_identifierContext = Input_port_identifierContext;

vlogParser.prototype.input_port_identifier = function() {

    var localctx = new Input_port_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, vlogParser.RULE_input_port_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4392;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Instance_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_instance_identifier;
    return this;
}

Instance_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instance_identifierContext.prototype.constructor = Instance_identifierContext;

Instance_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Instance_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterInstance_identifier(this);
	}
};

Instance_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitInstance_identifier(this);
	}
};




vlogParser.Instance_identifierContext = Instance_identifierContext;

vlogParser.prototype.instance_identifier = function() {

    var localctx = new Instance_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, vlogParser.RULE_instance_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4394;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Library_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_library_identifier;
    return this;
}

Library_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Library_identifierContext.prototype.constructor = Library_identifierContext;

Library_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Library_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterLibrary_identifier(this);
	}
};

Library_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitLibrary_identifier(this);
	}
};




vlogParser.Library_identifierContext = Library_identifierContext;

vlogParser.prototype.library_identifier = function() {

    var localctx = new Library_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, vlogParser.RULE_library_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4396;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_identifier;
    return this;
}

Module_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_identifierContext.prototype.constructor = Module_identifierContext;

Module_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Module_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_identifier(this);
	}
};

Module_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_identifier(this);
	}
};




vlogParser.Module_identifierContext = Module_identifierContext;

vlogParser.prototype.module_identifier = function() {

    var localctx = new Module_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, vlogParser.RULE_module_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4398;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_instance_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_module_instance_identifier;
    return this;
}

Module_instance_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_instance_identifierContext.prototype.constructor = Module_instance_identifierContext;

Module_instance_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Module_instance_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterModule_instance_identifier(this);
	}
};

Module_instance_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitModule_instance_identifier(this);
	}
};




vlogParser.Module_instance_identifierContext = Module_instance_identifierContext;

vlogParser.prototype.module_instance_identifier = function() {

    var localctx = new Module_instance_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, vlogParser.RULE_module_instance_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4400;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Net_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_net_identifier;
    return this;
}

Net_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Net_identifierContext.prototype.constructor = Net_identifierContext;

Net_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Net_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterNet_identifier(this);
	}
};

Net_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitNet_identifier(this);
	}
};




vlogParser.Net_identifierContext = Net_identifierContext;

vlogParser.prototype.net_identifier = function() {

    var localctx = new Net_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, vlogParser.RULE_net_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4402;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Output_port_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_output_port_identifier;
    return this;
}

Output_port_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_port_identifierContext.prototype.constructor = Output_port_identifierContext;

Output_port_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Output_port_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterOutput_port_identifier(this);
	}
};

Output_port_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitOutput_port_identifier(this);
	}
};




vlogParser.Output_port_identifierContext = Output_port_identifierContext;

vlogParser.prototype.output_port_identifier = function() {

    var localctx = new Output_port_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, vlogParser.RULE_output_port_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4404;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_parameter_identifier;
    return this;
}

Parameter_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_identifierContext.prototype.constructor = Parameter_identifierContext;

Parameter_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Parameter_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterParameter_identifier(this);
	}
};

Parameter_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitParameter_identifier(this);
	}
};




vlogParser.Parameter_identifierContext = Parameter_identifierContext;

vlogParser.prototype.parameter_identifier = function() {

    var localctx = new Parameter_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, vlogParser.RULE_parameter_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4406;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_port_identifier;
    return this;
}

Port_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_identifierContext.prototype.constructor = Port_identifierContext;

Port_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Port_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterPort_identifier(this);
	}
};

Port_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitPort_identifier(this);
	}
};




vlogParser.Port_identifierContext = Port_identifierContext;

vlogParser.prototype.port_identifier = function() {

    var localctx = new Port_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, vlogParser.RULE_port_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4408;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Real_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_real_identifier;
    return this;
}

Real_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_identifierContext.prototype.constructor = Real_identifierContext;

Real_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Real_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterReal_identifier(this);
	}
};

Real_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitReal_identifier(this);
	}
};




vlogParser.Real_identifierContext = Real_identifierContext;

vlogParser.prototype.real_identifier = function() {

    var localctx = new Real_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, vlogParser.RULE_real_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4410;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_simple_identifier;
    return this;
}

Simple_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_identifierContext.prototype.constructor = Simple_identifierContext;

Simple_identifierContext.prototype.SIMPLE_IDENTIFIER = function() {
    return this.getToken(vlogParser.SIMPLE_IDENTIFIER, 0);
};

Simple_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSimple_identifier(this);
	}
};

Simple_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSimple_identifier(this);
	}
};




vlogParser.Simple_identifierContext = Simple_identifierContext;

vlogParser.prototype.simple_identifier = function() {

    var localctx = new Simple_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, vlogParser.RULE_simple_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4412;
        this.match(vlogParser.SIMPLE_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Specparam_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_specparam_identifier;
    return this;
}

Specparam_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Specparam_identifierContext.prototype.constructor = Specparam_identifierContext;

Specparam_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Specparam_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSpecparam_identifier(this);
	}
};

Specparam_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSpecparam_identifier(this);
	}
};




vlogParser.Specparam_identifierContext = Specparam_identifierContext;

vlogParser.prototype.specparam_identifier = function() {

    var localctx = new Specparam_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, vlogParser.RULE_specparam_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4414;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function System_function_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_system_function_identifier;
    return this;
}

System_function_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
System_function_identifierContext.prototype.constructor = System_function_identifierContext;

System_function_identifierContext.prototype.SYSTEM_TF_IDENTIFIER = function() {
    return this.getToken(vlogParser.SYSTEM_TF_IDENTIFIER, 0);
};

System_function_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSystem_function_identifier(this);
	}
};

System_function_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSystem_function_identifier(this);
	}
};




vlogParser.System_function_identifierContext = System_function_identifierContext;

vlogParser.prototype.system_function_identifier = function() {

    var localctx = new System_function_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, vlogParser.RULE_system_function_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4416;
        this.match(vlogParser.SYSTEM_TF_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function System_task_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_system_task_identifier;
    return this;
}

System_task_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
System_task_identifierContext.prototype.constructor = System_task_identifierContext;

System_task_identifierContext.prototype.SYSTEM_TF_IDENTIFIER = function() {
    return this.getToken(vlogParser.SYSTEM_TF_IDENTIFIER, 0);
};

System_task_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterSystem_task_identifier(this);
	}
};

System_task_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitSystem_task_identifier(this);
	}
};




vlogParser.System_task_identifierContext = System_task_identifierContext;

vlogParser.prototype.system_task_identifier = function() {

    var localctx = new System_task_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, vlogParser.RULE_system_task_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4418;
        this.match(vlogParser.SYSTEM_TF_IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Task_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_task_identifier;
    return this;
}

Task_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Task_identifierContext.prototype.constructor = Task_identifierContext;

Task_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Task_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTask_identifier(this);
	}
};

Task_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTask_identifier(this);
	}
};




vlogParser.Task_identifierContext = Task_identifierContext;

vlogParser.prototype.task_identifier = function() {

    var localctx = new Task_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, vlogParser.RULE_task_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4420;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Terminal_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_terminal_identifier;
    return this;
}

Terminal_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Terminal_identifierContext.prototype.constructor = Terminal_identifierContext;

Terminal_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Terminal_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTerminal_identifier(this);
	}
};

Terminal_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTerminal_identifier(this);
	}
};




vlogParser.Terminal_identifierContext = Terminal_identifierContext;

vlogParser.prototype.terminal_identifier = function() {

    var localctx = new Terminal_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, vlogParser.RULE_terminal_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4422;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Text_macro_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_text_macro_identifier;
    return this;
}

Text_macro_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Text_macro_identifierContext.prototype.constructor = Text_macro_identifierContext;

Text_macro_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Text_macro_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterText_macro_identifier(this);
	}
};

Text_macro_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitText_macro_identifier(this);
	}
};




vlogParser.Text_macro_identifierContext = Text_macro_identifierContext;

vlogParser.prototype.text_macro_identifier = function() {

    var localctx = new Text_macro_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, vlogParser.RULE_text_macro_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4424;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Topmodule_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_topmodule_identifier;
    return this;
}

Topmodule_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Topmodule_identifierContext.prototype.constructor = Topmodule_identifierContext;

Topmodule_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Topmodule_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterTopmodule_identifier(this);
	}
};

Topmodule_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitTopmodule_identifier(this);
	}
};




vlogParser.Topmodule_identifierContext = Topmodule_identifierContext;

vlogParser.prototype.topmodule_identifier = function() {

    var localctx = new Topmodule_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 704, vlogParser.RULE_topmodule_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4426;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_identifier;
    return this;
}

Udp_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_identifierContext.prototype.constructor = Udp_identifierContext;

Udp_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Udp_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_identifier(this);
	}
};

Udp_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_identifier(this);
	}
};




vlogParser.Udp_identifierContext = Udp_identifierContext;

vlogParser.prototype.udp_identifier = function() {

    var localctx = new Udp_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, vlogParser.RULE_udp_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4428;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Udp_instance_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_udp_instance_identifier;
    return this;
}

Udp_instance_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udp_instance_identifierContext.prototype.constructor = Udp_instance_identifierContext;

Udp_instance_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Udp_instance_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterUdp_instance_identifier(this);
	}
};

Udp_instance_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitUdp_instance_identifier(this);
	}
};




vlogParser.Udp_instance_identifierContext = Udp_instance_identifierContext;

vlogParser.prototype.udp_instance_identifier = function() {

    var localctx = new Udp_instance_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, vlogParser.RULE_udp_instance_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4430;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vlogParser.RULE_variable_identifier;
    return this;
}

Variable_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_identifierContext.prototype.constructor = Variable_identifierContext;

Variable_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.enterVariable_identifier(this);
	}
};

Variable_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vlogParserListener ) {
        listener.exitVariable_identifier(this);
	}
};




vlogParser.Variable_identifierContext = Variable_identifierContext;

vlogParser.prototype.variable_identifier = function() {

    var localctx = new Variable_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, vlogParser.RULE_variable_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4432;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


vlogParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 131:
			return this.genvar_expression_sempred(localctx, predIndex);
	case 185:
			return this.event_expression_sempred(localctx, predIndex);
	case 283:
			return this.constant_expression_sempred(localctx, predIndex);
	case 287:
			return this.expression_sempred(localctx, predIndex);
	case 290:
			return this.module_path_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

vlogParser.prototype.genvar_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

vlogParser.prototype.event_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

vlogParser.prototype.constant_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

vlogParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 2);
		case 7:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

vlogParser.prototype.module_path_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 2);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.vlogParser = vlogParser;
