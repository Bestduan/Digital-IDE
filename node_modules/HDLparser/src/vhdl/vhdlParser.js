// Generated from src/vhdl/vhdl.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var vhdlListener = require('./vhdlListener').vhdlListener;
var grammarFileName = "vhdl.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00a4\u0a29\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u0208\n\u0004\u0003\u0004\u0003\u0004",
    "\u0005\u0004\u020c\n\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0212\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u021c\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u0224\n\t\f\t\u000e\t\u0227\u000b\t\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u022f\n\n\u0003\n\u0003\n\u0003\n\u0005\n",
    "\u0234\n\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u023b\n\u000b\u0003\f\u0003\f\u0005\f\u023f\n\f\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u0244\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u0250\n\u000e\u0003\u000e\u0005\u000e\u0253\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0007\u000f\u0258\n\u000f\f\u000f",
    "\u000e\u000f\u025b\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0260\n\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0264\n\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0268\n\u0010\u0003\u0010\u0005",
    "\u0010\u026b\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u0272\n\u0010\u0003\u0011\u0007\u0011\u0275",
    "\n\u0011\f\u0011\u000e\u0011\u0278\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u027c\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0280",
    "\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0286\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u028a\n\u0014\u0003",
    "\u0015\u0005\u0015\u028d\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0295\n\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u029c",
    "\n\u0017\f\u0017\u000e\u0017\u029f\u000b\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02ad\n",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u02bc\n\u001c\u0003\u001c\u0005\u001c",
    "\u02bf\n\u001c\u0003\u001c\u0005\u001c\u02c2\n\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0007\u001d\u02c7\n\u001d\f\u001d\u000e\u001d\u02ca",
    "\u000b\u001d\u0003\u001d\u0007\u001d\u02cd\n\u001d\f\u001d\u000e\u001d",
    "\u02d0\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u02ec\n\u001e",
    "\u0003\u001f\u0007\u001f\u02ef\n\u001f\f\u001f\u000e\u001f\u02f2\u000b",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0005 \u02f8\n \u0005 \u02fa\n \u0003",
    " \u0003 \u0003 \u0003 \u0005 \u0300\n \u0005 \u0302\n \u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u0309\n!\u0003!\u0005!\u030c\n!\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0314\n\"\u0003\"",
    "\u0005\"\u0317\n\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0005\"\u0320\n\"\u0003\"\u0003\"\u0003#\u0007#\u0325\n#\f#\u000e",
    "#\u0328\u000b#\u0003$\u0003$\u0005$\u032c\n$\u0003$\u0005$\u032f\n$",
    "\u0003$\u0003$\u0003$\u0003%\u0005%\u0335\n%\u0003%\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003&\u0007&\u033e\n&\f&\u000e&\u0341\u000b&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003(\u0005(\u0348\n(\u0003(\u0003(\u0005",
    "(\u034c\n(\u0003(\u0003(\u0005(\u0350\n(\u0003(\u0003(\u0003)\u0005",
    ")\u0355\n)\u0003)\u0003)\u0003)\u0003)\u0006)\u035b\n)\r)\u000e)\u035c",
    "\u0003)\u0003)\u0003)\u0005)\u0362\n)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0005+\u036f\n+\u0003,\u0003",
    ",\u0003,\u0007,\u0374\n,\f,\u000e,\u0377\u000b,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0005-\u037e\n-\u0003-\u0005-\u0381\n-\u0003-\u0003",
    "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0005.\u038a\n.\u0003.\u0005.\u038d",
    "\n.\u0003.\u0005.\u0390\n.\u0003.\u0003.\u0003.\u0005.\u0395\n.\u0003",
    ".\u0003.\u0003/\u0003/\u0003/\u0005/\u039c\n/\u0003/\u0005/\u039f\n",
    "/\u0003/\u0003/\u00030\u00030\u00030\u00030\u00031\u00031\u00051\u03a9",
    "\n1\u00032\u00032\u00052\u03ad\n2\u00033\u00053\u03b0\n3\u00033\u0005",
    "3\u03b3\n3\u00033\u00033\u00033\u00034\u00054\u03b9\n4\u00034\u0003",
    "4\u00054\u03bd\n4\u00034\u00054\u03c0\n4\u00034\u00034\u00054\u03c4",
    "\n4\u00034\u00034\u00035\u00055\u03c9\n5\u00035\u00055\u03cc\n5\u0003",
    "5\u00035\u00035\u00036\u00056\u03d2\n6\u00036\u00056\u03d5\n6\u0003",
    "6\u00036\u00056\u03d9\n6\u00037\u00037\u00038\u00038\u00038\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0005",
    ":\u03eb\n:\u0005:\u03ed\n:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u03f8\n;\u0003;\u0005;\u03fb\n;\u0003",
    ";\u0003;\u0003<\u0003<\u0003<\u0005<\u0402\n<\u0003=\u0007=\u0405\n",
    "=\f=\u000e=\u0408\u000b=\u0003>\u0003>\u0005>\u040c\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u0419\n@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003C\u0003C\u0005C\u0429\nC\u0003D\u0007D\u042c",
    "\nD\fD\u000eD\u042f\u000bD\u0003E\u0003E\u0005E\u0433\nE\u0003F\u0003",
    "F\u0003F\u0005F\u0438\nF\u0003F\u0005F\u043b\nF\u0003G\u0007G\u043e",
    "\nG\fG\u000eG\u0441\u000bG\u0003G\u0003G\u0003H\u0003H\u0003H\u0003",
    "I\u0003I\u0005I\u044a\nI\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003L\u0003L\u0005L\u0456\nL\u0003M\u0003M\u0003M\u0005M\u045b",
    "\nM\u0003M\u0003M\u0003N\u0003N\u0003N\u0003N\u0003N\u0003O\u0003O\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u046e\nQ\u0003",
    "Q\u0003Q\u0003Q\u0005Q\u0473\nQ\u0003R\u0003R\u0003S\u0003S\u0005S\u0479",
    "\nS\u0003T\u0003T\u0003T\u0007T\u047e\nT\fT\u000eT\u0481\u000bT\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u048a\nU\u0003U\u0003",
    "U\u0005U\u048e\nU\u0003U\u0005U\u0491\nU\u0003U\u0003U\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u04a9",
    "\nV\u0003W\u0007W\u04ac\nW\fW\u000eW\u04af\u000bW\u0003X\u0003X\u0005",
    "X\u04b3\nX\u0003Y\u0005Y\u04b6\nY\u0003Y\u0005Y\u04b9\nY\u0003Z\u0003",
    "Z\u0003Z\u0007Z\u04be\nZ\fZ\u000eZ\u04c1\u000bZ\u0003Z\u0003Z\u0005",
    "Z\u04c5\nZ\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0005",
    "\\\u04ce\n\\\u0003]\u0007]\u04d1\n]\f]\u000e]\u04d4\u000b]\u0003^\u0003",
    "^\u0003^\u0005^\u04d9\n^\u0003_\u0003_\u0005_\u04dd\n_\u0003`\u0003",
    "`\u0003`\u0003`\u0007`\u04e3\n`\f`\u000e`\u04e6\u000b`\u0003`\u0003",
    "`\u0003a\u0005a\u04eb\na\u0003a\u0003a\u0005a\u04ef\na\u0003a\u0003",
    "a\u0005a\u04f3\na\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0007b\u04fb",
    "\nb\fb\u000eb\u04fe\u000bb\u0003c\u0003c\u0003c\u0005c\u0503\nc\u0003",
    "c\u0003c\u0003c\u0003c\u0005c\u0509\nc\u0003d\u0003d\u0003d\u0003d\u0003",
    "d\u0005d\u0510\nd\u0003d\u0003d\u0003e\u0003e\u0003f\u0003f\u0005f\u0518",
    "\nf\u0003f\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0003h\u0003h\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0529\ni\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0005j\u0531\nj\u0003j\u0003j\u0003k\u0003k\u0003",
    "k\u0003k\u0007k\u0539\nk\fk\u000ek\u053c\u000bk\u0003k\u0005k\u053f",
    "\nk\u0003k\u0007k\u0542\nk\fk\u000ek\u0545\u000bk\u0003k\u0003k\u0003",
    "k\u0005k\u054a\nk\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0005l\u0552",
    "\nl\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003n\u0003n\u0003n\u0007",
    "n\u055d\nn\fn\u000en\u0560\u000bn\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003p\u0003p\u0005p\u056a\np\u0003q\u0003q\u0003q\u0007q\u056f",
    "\nq\fq\u000eq\u0572\u000bq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0003v\u0003v\u0003v\u0007",
    "v\u058d\nv\fv\u000ev\u0590\u000bv\u0003w\u0005w\u0593\nw\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0007w\u059e\nw\f",
    "w\u000ew\u05a1\u000bw\u0003w\u0003w\u0005w\u05a5\nw\u0003w\u0003w\u0003",
    "w\u0005w\u05aa\nw\u0003w\u0003w\u0003x\u0003x\u0003x\u0003x\u0007x\u05b2",
    "\nx\fx\u000ex\u05b5\u000bx\u0003x\u0003x\u0003y\u0003y\u0005y\u05bb",
    "\ny\u0003z\u0003z\u0003z\u0003z\u0003{\u0005{\u05c2\n{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005{\u05cb\n{\u0003{\u0003{\u0005",
    "{\u05cf\n{\u0003|\u0003|\u0003|\u0007|\u05d4\n|\f|\u000e|\u05d7\u000b",
    "|\u0003|\u0003|\u0005|\u05db\n|\u0003}\u0005}\u05de\n}\u0003}\u0003",
    "}\u0003}\u0005}\u05e3\n}\u0003}\u0003}\u0003}\u0005}\u05e8\n}\u0003",
    "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005~\u05f0\n~\u0003\u007f\u0003",
    "\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0007\u0081\u05fc\n\u0081\f\u0081\u000e",
    "\u0081\u05ff\u000b\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082",
    "\u0604\n\u0082\f\u0082\u000e\u0082\u0607\u000b\u0082\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0007\u0083\u060c\n\u0083\f\u0083\u000e\u0083\u060f",
    "\u000b\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084",
    "\u0615\n\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u061a",
    "\n\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u061f\n\u0085",
    "\u0003\u0085\u0003\u0085\u0005\u0085\u0623\n\u0085\u0003\u0085\u0003",
    "\u0085\u0005\u0085\u0627\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0005\u0086\u062d\n\u0086\u0003\u0086\u0003\u0086\u0005",
    "\u0086\u0631\n\u0086\u0003\u0086\u0003\u0086\u0005\u0086\u0635\n\u0086",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0088",
    "\u0005\u0088\u063d\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005",
    "\u0088\u0642\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088",
    "\u0647\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005",
    "\u0089\u064d\n\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008b",
    "\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0005\u008c",
    "\u0658\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0005\u008d\u065f\n\u008d\u0003\u008e\u0003\u008e\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0007\u008f\u0666\n\u008f\f\u008f\u000e\u008f",
    "\u0669\u000b\u008f\u0003\u0090\u0003\u0090\u0003\u0091\u0005\u0091\u066e",
    "\n\u0091\u0003\u0091\u0005\u0091\u0671\n\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0678\n\u0091\u0003",
    "\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003",
    "\u0094\u0003\u0094\u0005\u0094\u0682\n\u0094\u0003\u0094\u0007\u0094",
    "\u0685\n\u0094\f\u0094\u000e\u0094\u0688\u000b\u0094\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u068e\n\u0095\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0007\u0096\u0693\n\u0096\f\u0096\u000e\u0096",
    "\u0696\u000b\u0096\u0003\u0097\u0003\u0097\u0006\u0097\u069a\n\u0097",
    "\r\u0097\u000e\u0097\u069b\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u009a\u0005",
    "\u009a\u06a7\n\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u06af\n\u009a\u0003\u009b\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u06b9\n\u009c\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009e\u0005\u009e\u06c0\n\u009e\u0003\u009e\u0003",
    "\u009e\u0005\u009e\u06c4\n\u009e\u0003\u009e\u0003\u009e\u0005\u009e",
    "\u06c8\n\u009e\u0003\u009e\u0003\u009e\u0003\u009f\u0003\u009f\u0005",
    "\u009f\u06ce\n\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u06d6\n\u00a0\u0003\u00a1\u0005",
    "\u00a1\u06d9\n\u00a1\u0003\u00a1\u0005\u00a1\u06dc\n\u00a1\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0005\u00a2\u06e6\n\u00a2\u0003\u00a2\u0005\u00a2\u06e9",
    "\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0005\u00a3\u06f8\n\u00a3\u0003\u00a4\u0007",
    "\u00a4\u06fb\n\u00a4\f\u00a4\u000e\u00a4\u06fe\u000b\u00a4\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5",
    "\u0706\n\u00a5\u0003\u00a5\u0005\u00a5\u0709\n\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0005\u00a6\u0720\n\u00a6\u0003\u00a7\u0007\u00a7",
    "\u0723\n\u00a7\f\u00a7\u000e\u00a7\u0726\u000b\u00a7\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0007\u00aa\u0733\n\u00aa",
    "\f\u00aa\u000e\u00aa\u0736\u000b\u00aa\u0003\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0005\u00aa\u073b\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0754\n\u00ae\u0003\u00af\u0003",
    "\u00af\u0003\u00af\u0005\u00af\u0759\n\u00af\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0767\n",
    "\u00b0\u0003\u00b1\u0007\u00b1\u076a\n\u00b1\f\u00b1\u000e\u00b1\u076d",
    "\u000b\u00b1\u0003\u00b2\u0007\u00b2\u0770\n\u00b2\f\u00b2\u000e\u00b2",
    "\u0773\u000b\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0005\u00b3\u077a\n\u00b3\u0003\u00b4\u0005\u00b4\u077d\n\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0005\u00b5\u078f\n",
    "\u00b5\u0003\u00b6\u0007\u00b6\u0792\n\u00b6\f\u00b6\u000e\u00b6\u0795",
    "\u000b\u00b6\u0003\u00b7\u0005\u00b7\u0798\n\u00b7\u0003\u00b7\u0005",
    "\u00b7\u079b\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0005\u00b7\u07a2\n\u00b7\u0003\u00b7\u0005\u00b7\u07a5",
    "\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0005\u00b7\u07ac\n\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u07b0",
    "\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b8\u0007\u00b8\u07b5\n\u00b8",
    "\f\u00b8\u000e\u00b8\u07b8\u000b\u00b8\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u07c1",
    "\n\u00b9\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u07c6\n\u00ba",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb\u07cb\n\u00bb\f\u00bb",
    "\u000e\u00bb\u07ce\u000b\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u07d2",
    "\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0005\u00bd\u07da\n\u00bd\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0005\u00be\u07e0\n\u00be\u0003\u00bf\u0003\u00bf",
    "\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0006\u00c0\u07e7\n\u00c0\r\u00c0",
    "\u000e\u00c0\u07e8\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u07ee",
    "\n\u00c0\u0003\u00c1\u0003\u00c1\u0006\u00c1\u07f2\n\u00c1\r\u00c1\u000e",
    "\u00c1\u07f3\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u07f9\n",
    "\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u07ff",
    "\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c4\u0005\u00c4\u0804\n\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u080a\n",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c5\u0005\u00c5\u080f\n\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0813\n\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0821",
    "\n\u00c7\u0003\u00c8\u0003\u00c8\u0005\u00c8\u0825\n\u00c8\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0007\u00cb\u083d\n\u00cb\f\u00cb",
    "\u000e\u00cb\u0840\u000b\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cd\u0003\u00cd\u0003\u00cd\u0007\u00cd\u0848\n\u00cd\f\u00cd\u000e",
    "\u00cd\u084b\u000b\u00cd\u0003\u00ce\u0007\u00ce\u084e\n\u00ce\f\u00ce",
    "\u000e\u00ce\u0851\u000b\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u085f\n\u00cf\u0003\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0865\n\u00cf\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u086b\n\u00d0",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0005\u00d2\u0870\n\u00d2\u0003",
    "\u00d2\u0003\u00d2\u0003\u00d2\u0005\u00d2\u0875\n\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3",
    "\u0003\u00d3\u0005\u00d3\u087f\n\u00d3\u0003\u00d3\u0003\u00d3\u0005",
    "\u00d3\u0883\n\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0007\u00d5\u088c\n\u00d5\f\u00d5",
    "\u000e\u00d5\u088f\u000b\u00d5\u0003\u00d5\u0003\u00d5\u0005\u00d5\u0893",
    "\n\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0007\u00d6",
    "\u0899\n\u00d6\f\u00d6\u000e\u00d6\u089c\u000b\u00d6\u0005\u00d6\u089e",
    "\n\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u08a2\n\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d7\u0005\u00d7\u08a7\n\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0007\u00d7\u08ad\n\u00d7\f\u00d7\u000e",
    "\u00d7\u08b0\u000b\u00d7\u0003\u00d8\u0005\u00d8\u08b3\n\u00d8\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u08b9\n\u00d8",
    "\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0003\u00d9\u0003\u00da\u0005\u00da\u08c3\n\u00da\u0003\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0006\u00da\u08c9\n\u00da\r\u00da\u000e",
    "\u00da\u08ca\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u08d0\n",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00db\u0005\u00db\u08d5\n\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00db\u0007\u00db\u08e0\n\u00db\f\u00db",
    "\u000e\u00db\u08e3\u000b\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u08e7",
    "\n\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0005\u00db\u08ec\n\u00db",
    "\u0003\u00db\u0003\u00db\u0003\u00dc\u0005\u00dc\u08f1\n\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0005\u00dc\u08f5\n\u00dc\u0003\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u08fd\n",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0005\u00dd\u0906\n\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0005\u00dd\u090a\n\u00dd\u0003\u00de\u0007\u00de\u090d\n\u00de\f\u00de",
    "\u000e\u00de\u0910\u000b\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0003",
    "\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0005\u00df\u0919\n\u00df",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0",
    "\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0005\u00e3\u0930\n\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0005",
    "\u00e3\u0938\n\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4\u0941\n\u00e4\u0003",
    "\u00e4\u0005\u00e4\u0944\n\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u0958\n\u00e6\u0003",
    "\u00e7\u0007\u00e7\u095b\n\u00e7\f\u00e7\u000e\u00e7\u095e\u000b\u00e7",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0964\n",
    "\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00ea\u0005\u00ea\u096c\n\u00ea\u0003\u00eb\u0005\u00eb\u096f\n\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb",
    "\u0005\u00eb\u0977\n\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003",
    "\u00ec\u0007\u00ec\u097d\n\u00ec\f\u00ec\u000e\u00ec\u0980\u000b\u00ec",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ee\u0003\u00ee\u0005\u00ee\u098a\n\u00ee\u0003\u00ee\u0005",
    "\u00ee\u098d\n\u00ee\u0003\u00ee\u0005\u00ee\u0990\n\u00ee\u0003\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0996\n\u00ef\u0003",
    "\u00f0\u0003\u00f0\u0005\u00f0\u099a\n\u00f0\u0003\u00f1\u0003\u00f1",
    "\u0003\u00f1\u0003\u00f1\u0007\u00f1\u09a0\n\u00f1\f\u00f1\u000e\u00f1",
    "\u09a3\u000b\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u09a8",
    "\n\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0003\u00f3\u0003\u00f4\u0003\u00f4\u0005\u00f4\u09b2\n\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0005\u00f4\u09b6\n\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u09c4\n",
    "\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003",
    "\u00f8\u0005\u00f8\u09cc\n\u00f8\u0003\u00f9\u0003\u00f9\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0007\u00f9\u09d3\n\u00f9\f\u00f9\u000e\u00f9",
    "\u09d6\u000b\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0007\u00fa\u09e1",
    "\n\u00fa\f\u00fa\u000e\u00fa\u09e4\u000b\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb",
    "\u0007\u00fb\u09ee\n\u00fb\f\u00fb\u000e\u00fb\u09f1\u000b\u00fb\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fc\u0005\u00fc\u09f6\n\u00fc\u0003\u00fc",
    "\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fd\u0005\u00fd",
    "\u09fe\n\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0003\u00fd\u0005\u00fd\u0a06\n\u00fd\u0003\u00fd\u0003\u00fd",
    "\u0003\u00fe\u0005\u00fe\u0a0b\n\u00fe\u0003\u00fe\u0003\u00fe\u0005",
    "\u00fe\u0a0f\n\u00fe\u0003\u00fe\u0005\u00fe\u0a12\n\u00fe\u0003\u00fe",
    "\u0005\u00fe\u0a15\n\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00ff\u0003",
    "\u00ff\u0003\u00ff\u0007\u00ff\u0a1c\n\u00ff\f\u00ff\u000e\u00ff\u0a1f",
    "\u000b\u00ff\u0003\u00ff\u0005\u00ff\u0a22\n\u00ff\u0003\u0100\u0003",
    "\u0100\u0003\u0100\u0005\u0100\u0a27\n\u0100\u0003\u0100\u0002\u0002",
    "\u0101\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0",
    "\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8",
    "\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0",
    "\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8",
    "\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0002",
    "\u0011\u0005\u0002rrww\u00a0\u00a0\u0004\u0002\u008e\u008e\u0096\u0097",
    "\u0004\u0002\u0019\u0019cc\u0013\u0002\n\n\u0015\u0017\u001b\u001b\u001f",
    "\u001f!!$$,,0055BBFFIIXX^`ffhhkk\u0003\u0002xy\u0004\u0002((AA\u0007",
    "\u0002\t\t4499??pq\u0007\u0002\u0012\u0012((**//AA\u0005\u000233MM\u0094",
    "\u0095\u0005\u0002\u0085\u0086\u0088\u0088\u0098\u009a\u0005\u0002S",
    "TYZ\\]\u0004\u0002\u0013\u0013PP\u0003\u0002\u0096\u0097\u0004\u0002",
    "!!FF\u0004\u0002\'\'HH\u0002\u0aef\u0002\u0200\u0003\u0002\u0002\u0002",
    "\u0004\u0202\u0003\u0002\u0002\u0002\u0006\u0205\u0003\u0002\u0002\u0002",
    "\b\u0211\u0003\u0002\u0002\u0002\n\u0213\u0003\u0002\u0002\u0002\f\u021b",
    "\u0003\u0002\u0002\u0002\u000e\u021d\u0003\u0002\u0002\u0002\u0010\u021f",
    "\u0003\u0002\u0002\u0002\u0012\u022a\u0003\u0002\u0002\u0002\u0014\u023a",
    "\u0003\u0002\u0002\u0002\u0016\u023e\u0003\u0002\u0002\u0002\u0018\u0240",
    "\u0003\u0002\u0002\u0002\u001a\u0245\u0003\u0002\u0002\u0002\u001c\u0259",
    "\u0003\u0002\u0002\u0002\u001e\u0271\u0003\u0002\u0002\u0002 \u0276",
    "\u0003\u0002\u0002\u0002\"\u027b\u0003\u0002\u0002\u0002$\u027f\u0003",
    "\u0002\u0002\u0002&\u0281\u0003\u0002\u0002\u0002(\u028c\u0003\u0002",
    "\u0002\u0002*\u0294\u0003\u0002\u0002\u0002,\u0298\u0003\u0002\u0002",
    "\u0002.\u02a0\u0003\u0002\u0002\u00020\u02ac\u0003\u0002\u0002\u0002",
    "2\u02ae\u0003\u0002\u0002\u00024\u02b6\u0003\u0002\u0002\u00026\u02bb",
    "\u0003\u0002\u0002\u00028\u02c3\u0003\u0002\u0002\u0002:\u02eb\u0003",
    "\u0002\u0002\u0002<\u02f0\u0003\u0002\u0002\u0002>\u02f9\u0003\u0002",
    "\u0002\u0002@\u030b\u0003\u0002\u0002\u0002B\u030d\u0003\u0002\u0002",
    "\u0002D\u0326\u0003\u0002\u0002\u0002F\u0329\u0003\u0002\u0002\u0002",
    "H\u0334\u0003\u0002\u0002\u0002J\u033a\u0003\u0002\u0002\u0002L\u0342",
    "\u0003\u0002\u0002\u0002N\u0347\u0003\u0002\u0002\u0002P\u0354\u0003",
    "\u0002\u0002\u0002R\u0365\u0003\u0002\u0002\u0002T\u036e\u0003\u0002",
    "\u0002\u0002V\u0370\u0003\u0002\u0002\u0002X\u0378\u0003\u0002\u0002",
    "\u0002Z\u0386\u0003\u0002\u0002\u0002\\\u0398\u0003\u0002\u0002\u0002",
    "^\u03a2\u0003\u0002\u0002\u0002`\u03a8\u0003\u0002\u0002\u0002b\u03ac",
    "\u0003\u0002\u0002\u0002d\u03af\u0003\u0002\u0002\u0002f\u03b8\u0003",
    "\u0002\u0002\u0002h\u03c8\u0003\u0002\u0002\u0002j\u03d1\u0003\u0002",
    "\u0002\u0002l\u03da\u0003\u0002\u0002\u0002n\u03dc\u0003\u0002\u0002",
    "\u0002p\u03df\u0003\u0002\u0002\u0002r\u03e5\u0003\u0002\u0002\u0002",
    "t\u03ee\u0003\u0002\u0002\u0002v\u0401\u0003\u0002\u0002\u0002x\u0406",
    "\u0003\u0002\u0002\u0002z\u040b\u0003\u0002\u0002\u0002|\u040d\u0003",
    "\u0002\u0002\u0002~\u0412\u0003\u0002\u0002\u0002\u0080\u041c\u0003",
    "\u0002\u0002\u0002\u0082\u0421\u0003\u0002\u0002\u0002\u0084\u0428\u0003",
    "\u0002\u0002\u0002\u0086\u042d\u0003\u0002\u0002\u0002\u0088\u0432\u0003",
    "\u0002\u0002\u0002\u008a\u043a\u0003\u0002\u0002\u0002\u008c\u043f\u0003",
    "\u0002\u0002\u0002\u008e\u0444\u0003\u0002\u0002\u0002\u0090\u0449\u0003",
    "\u0002\u0002\u0002\u0092\u044b\u0003\u0002\u0002\u0002\u0094\u044d\u0003",
    "\u0002\u0002\u0002\u0096\u0455\u0003\u0002\u0002\u0002\u0098\u045a\u0003",
    "\u0002\u0002\u0002\u009a\u045e\u0003\u0002\u0002\u0002\u009c\u0463\u0003",
    "\u0002\u0002\u0002\u009e\u0465\u0003\u0002\u0002\u0002\u00a0\u0472\u0003",
    "\u0002\u0002\u0002\u00a2\u0474\u0003\u0002\u0002\u0002\u00a4\u0476\u0003",
    "\u0002\u0002\u0002\u00a6\u047a\u0003\u0002\u0002\u0002\u00a8\u0482\u0003",
    "\u0002\u0002\u0002\u00aa\u04a8\u0003\u0002\u0002\u0002\u00ac\u04ad\u0003",
    "\u0002\u0002\u0002\u00ae\u04b0\u0003\u0002\u0002\u0002\u00b0\u04b5\u0003",
    "\u0002\u0002\u0002\u00b2\u04c4\u0003\u0002\u0002\u0002\u00b4\u04c6\u0003",
    "\u0002\u0002\u0002\u00b6\u04cd\u0003\u0002\u0002\u0002\u00b8\u04d2\u0003",
    "\u0002\u0002\u0002\u00ba\u04d8\u0003\u0002\u0002\u0002\u00bc\u04dc\u0003",
    "\u0002\u0002\u0002\u00be\u04de\u0003\u0002\u0002\u0002\u00c0\u04ea\u0003",
    "\u0002\u0002\u0002\u00c2\u04f6\u0003\u0002\u0002\u0002\u00c4\u0508\u0003",
    "\u0002\u0002\u0002\u00c6\u050a\u0003\u0002\u0002\u0002\u00c8\u0513\u0003",
    "\u0002\u0002\u0002\u00ca\u0517\u0003\u0002\u0002\u0002\u00cc\u051c\u0003",
    "\u0002\u0002\u0002\u00ce\u0520\u0003\u0002\u0002\u0002\u00d0\u0528\u0003",
    "\u0002\u0002\u0002\u00d2\u052a\u0003\u0002\u0002\u0002\u00d4\u0534\u0003",
    "\u0002\u0002\u0002\u00d6\u0551\u0003\u0002\u0002\u0002\u00d8\u0553\u0003",
    "\u0002\u0002\u0002\u00da\u0559\u0003\u0002\u0002\u0002\u00dc\u0561\u0003",
    "\u0002\u0002\u0002\u00de\u0569\u0003\u0002\u0002\u0002\u00e0\u056b\u0003",
    "\u0002\u0002\u0002\u00e2\u0573\u0003\u0002\u0002\u0002\u00e4\u057b\u0003",
    "\u0002\u0002\u0002\u00e6\u0583\u0003\u0002\u0002\u0002\u00e8\u0587\u0003",
    "\u0002\u0002\u0002\u00ea\u0589\u0003\u0002\u0002\u0002\u00ec\u0592\u0003",
    "\u0002\u0002\u0002\u00ee\u05ad\u0003\u0002\u0002\u0002\u00f0\u05ba\u0003",
    "\u0002\u0002\u0002\u00f2\u05bc\u0003\u0002\u0002\u0002\u00f4\u05ce\u0003",
    "\u0002\u0002\u0002\u00f6\u05da\u0003\u0002\u0002\u0002\u00f8\u05dd\u0003",
    "\u0002\u0002\u0002\u00fa\u05ef\u0003\u0002\u0002\u0002\u00fc\u05f1\u0003",
    "\u0002\u0002\u0002\u00fe\u05f3\u0003\u0002\u0002\u0002\u0100\u05f8\u0003",
    "\u0002\u0002\u0002\u0102\u0600\u0003\u0002\u0002\u0002\u0104\u0608\u0003",
    "\u0002\u0002\u0002\u0106\u0610\u0003\u0002\u0002\u0002\u0108\u061b\u0003",
    "\u0002\u0002\u0002\u010a\u0628\u0003\u0002\u0002\u0002\u010c\u0636\u0003",
    "\u0002\u0002\u0002\u010e\u063c\u0003\u0002\u0002\u0002\u0110\u064c\u0003",
    "\u0002\u0002\u0002\u0112\u064e\u0003\u0002\u0002\u0002\u0114\u0651\u0003",
    "\u0002\u0002\u0002\u0116\u0657\u0003\u0002\u0002\u0002\u0118\u065e\u0003",
    "\u0002\u0002\u0002\u011a\u0660\u0003\u0002\u0002\u0002\u011c\u0662\u0003",
    "\u0002\u0002\u0002\u011e\u066a\u0003\u0002\u0002\u0002\u0120\u066d\u0003",
    "\u0002\u0002\u0002\u0122\u067b\u0003\u0002\u0002\u0002\u0124\u067d\u0003",
    "\u0002\u0002\u0002\u0126\u0681\u0003\u0002\u0002\u0002\u0128\u068d\u0003",
    "\u0002\u0002\u0002\u012a\u068f\u0003\u0002\u0002\u0002\u012c\u0699\u0003",
    "\u0002\u0002\u0002\u012e\u069d\u0003\u0002\u0002\u0002\u0130\u06a1\u0003",
    "\u0002\u0002\u0002\u0132\u06a6\u0003\u0002\u0002\u0002\u0134\u06b0\u0003",
    "\u0002\u0002\u0002\u0136\u06b8\u0003\u0002\u0002\u0002\u0138\u06ba\u0003",
    "\u0002\u0002\u0002\u013a\u06bf\u0003\u0002\u0002\u0002\u013c\u06cd\u0003",
    "\u0002\u0002\u0002\u013e\u06d5\u0003\u0002\u0002\u0002\u0140\u06d8\u0003",
    "\u0002\u0002\u0002\u0142\u06dd\u0003\u0002\u0002\u0002\u0144\u06f7\u0003",
    "\u0002\u0002\u0002\u0146\u06fc\u0003\u0002\u0002\u0002\u0148\u06ff\u0003",
    "\u0002\u0002\u0002\u014a\u071f\u0003\u0002\u0002\u0002\u014c\u0724\u0003",
    "\u0002\u0002\u0002\u014e\u0727\u0003\u0002\u0002\u0002\u0150\u072b\u0003",
    "\u0002\u0002\u0002\u0152\u072e\u0003\u0002\u0002\u0002\u0154\u073c\u0003",
    "\u0002\u0002\u0002\u0156\u0742\u0003\u0002\u0002\u0002\u0158\u0744\u0003",
    "\u0002\u0002\u0002\u015a\u0753\u0003\u0002\u0002\u0002\u015c\u0758\u0003",
    "\u0002\u0002\u0002\u015e\u0766\u0003\u0002\u0002\u0002\u0160\u076b\u0003",
    "\u0002\u0002\u0002\u0162\u0771\u0003\u0002\u0002\u0002\u0164\u0774\u0003",
    "\u0002\u0002\u0002\u0166\u077c\u0003\u0002\u0002\u0002\u0168\u078e\u0003",
    "\u0002\u0002\u0002\u016a\u0793\u0003\u0002\u0002\u0002\u016c\u0797\u0003",
    "\u0002\u0002\u0002\u016e\u07b6\u0003\u0002\u0002\u0002\u0170\u07b9\u0003",
    "\u0002\u0002\u0002\u0172\u07c5\u0003\u0002\u0002\u0002\u0174\u07d1\u0003",
    "\u0002\u0002\u0002\u0176\u07d3\u0003\u0002\u0002\u0002\u0178\u07d9\u0003",
    "\u0002\u0002\u0002\u017a\u07db\u0003\u0002\u0002\u0002\u017c\u07e1\u0003",
    "\u0002\u0002\u0002\u017e\u07e4\u0003\u0002\u0002\u0002\u0180\u07ef\u0003",
    "\u0002\u0002\u0002\u0182\u07fa\u0003\u0002\u0002\u0002\u0184\u0800\u0003",
    "\u0002\u0002\u0002\u0186\u0803\u0003\u0002\u0002\u0002\u0188\u080e\u0003",
    "\u0002\u0002\u0002\u018a\u0816\u0003\u0002\u0002\u0002\u018c\u0820\u0003",
    "\u0002\u0002\u0002\u018e\u0824\u0003\u0002\u0002\u0002\u0190\u0826\u0003",
    "\u0002\u0002\u0002\u0192\u082b\u0003\u0002\u0002\u0002\u0194\u0834\u0003",
    "\u0002\u0002\u0002\u0196\u0841\u0003\u0002\u0002\u0002\u0198\u0844\u0003",
    "\u0002\u0002\u0002\u019a\u084f\u0003\u0002\u0002\u0002\u019c\u0864\u0003",
    "\u0002\u0002\u0002\u019e\u0866\u0003\u0002\u0002\u0002\u01a0\u086c\u0003",
    "\u0002\u0002\u0002\u01a2\u086f\u0003\u0002\u0002\u0002\u01a4\u0879\u0003",
    "\u0002\u0002\u0002\u01a6\u0886\u0003\u0002\u0002\u0002\u01a8\u0892\u0003",
    "\u0002\u0002\u0002\u01aa\u0894\u0003\u0002\u0002\u0002\u01ac\u08a6\u0003",
    "\u0002\u0002\u0002\u01ae\u08b2\u0003\u0002\u0002\u0002\u01b0\u08bc\u0003",
    "\u0002\u0002\u0002\u01b2\u08c2\u0003\u0002\u0002\u0002\u01b4\u08d4\u0003",
    "\u0002\u0002\u0002\u01b6\u08f0\u0003\u0002\u0002\u0002\u01b8\u0909\u0003",
    "\u0002\u0002\u0002\u01ba\u090e\u0003\u0002\u0002\u0002\u01bc\u0918\u0003",
    "\u0002\u0002\u0002\u01be\u091a\u0003\u0002\u0002\u0002\u01c0\u0921\u0003",
    "\u0002\u0002\u0002\u01c2\u0927\u0003\u0002\u0002\u0002\u01c4\u092d\u0003",
    "\u0002\u0002\u0002\u01c6\u0939\u0003\u0002\u0002\u0002\u01c8\u0947\u0003",
    "\u0002\u0002\u0002\u01ca\u0957\u0003\u0002\u0002\u0002\u01cc\u095c\u0003",
    "\u0002\u0002\u0002\u01ce\u095f\u0003\u0002\u0002\u0002\u01d0\u0963\u0003",
    "\u0002\u0002\u0002\u01d2\u0965\u0003\u0002\u0002\u0002\u01d4\u096e\u0003",
    "\u0002\u0002\u0002\u01d6\u097e\u0003\u0002\u0002\u0002\u01d8\u0981\u0003",
    "\u0002\u0002\u0002\u01da\u0987\u0003\u0002\u0002\u0002\u01dc\u0995\u0003",
    "\u0002\u0002\u0002\u01de\u0999\u0003\u0002\u0002\u0002\u01e0\u099b\u0003",
    "\u0002\u0002\u0002\u01e2\u09a4\u0003\u0002\u0002\u0002\u01e4\u09a9\u0003",
    "\u0002\u0002\u0002\u01e6\u09af\u0003\u0002\u0002\u0002\u01e8\u09b9\u0003",
    "\u0002\u0002\u0002\u01ea\u09bc\u0003\u0002\u0002\u0002\u01ec\u09bf\u0003",
    "\u0002\u0002\u0002\u01ee\u09cb\u0003\u0002\u0002\u0002\u01f0\u09cd\u0003",
    "\u0002\u0002\u0002\u01f2\u09db\u0003\u0002\u0002\u0002\u01f4\u09e9\u0003",
    "\u0002\u0002\u0002\u01f6\u09f5\u0003\u0002\u0002\u0002\u01f8\u09fd\u0003",
    "\u0002\u0002\u0002\u01fa\u0a0a\u0003\u0002\u0002\u0002\u01fc\u0a21\u0003",
    "\u0002\u0002\u0002\u01fe\u0a23\u0003\u0002\u0002\u0002\u0200\u0201\t",
    "\u0002\u0002\u0002\u0201\u0003\u0003\u0002\u0002\u0002\u0202\u0203\u0007",
    "\u0004\u0002\u0002\u0203\u0204\u0005\u01da\u00ee\u0002\u0204\u0005\u0003",
    "\u0002\u0002\u0002\u0205\u0207\u0005\u00eav\u0002\u0206\u0208\u0005",
    "\u01ea\u00f6\u0002\u0207\u0206\u0003\u0002\u0002\u0002\u0207\u0208\u0003",
    "\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002\u0002\u0209\u020a\u0007",
    "\u0089\u0002\u0002\u020a\u020c\u0005\u00c2b\u0002\u020b\u0209\u0003",
    "\u0002\u0002\u0002\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d\u020e\u0007\u0005\u0002\u0002\u020e\u0007\u0003",
    "\u0002\u0002\u0002\u020f\u0212\u0005\u00c2b\u0002\u0210\u0212\u0007",
    ">\u0002\u0002\u0211\u020f\u0003\u0002\u0002\u0002\u0211\u0210\u0003",
    "\u0002\u0002\u0002\u0212\t\u0003\u0002\u0002\u0002\u0213\u0214\u0005",
    ",\u0017\u0002\u0214\u000b\u0003\u0002\u0002\u0002\u0215\u0216\u0005",
    "\u0126\u0094\u0002\u0216\u0217\u0007\u008f\u0002\u0002\u0217\u0218\u0005",
    "\b\u0005\u0002\u0218\u0219\u0007\u0090\u0002\u0002\u0219\u021c\u0003",
    "\u0002\u0002\u0002\u021a\u021c\u0005\b\u0005\u0002\u021b\u0215\u0003",
    "\u0002\u0002\u0002\u021b\u021a\u0003\u0002\u0002\u0002\u021c\r\u0003",
    "\u0002\u0002\u0002\u021d\u021e\t\u0003\u0002\u0002\u021e\u000f\u0003",
    "\u0002\u0002\u0002\u021f\u0220\u0007\u008f\u0002\u0002\u0220\u0225\u0005",
    "\u0098M\u0002\u0221\u0222\u0007\u008d\u0002\u0002\u0222\u0224\u0005",
    "\u0098M\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0224\u0227\u0003",
    "\u0002\u0002\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225\u0226\u0003",
    "\u0002\u0002\u0002\u0226\u0228\u0003\u0002\u0002\u0002\u0227\u0225\u0003",
    "\u0002\u0002\u0002\u0228\u0229\u0007\u0090\u0002\u0002\u0229\u0011\u0003",
    "\u0002\u0002\u0002\u022a\u022b\u0007\u0007\u0002\u0002\u022b\u022e\u0005",
    "\u0014\u000b\u0002\u022c\u022d\u0007\u0093\u0002\u0002\u022d\u022f\u0005",
    "\u0016\f\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003",
    "\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0231\u0007",
    "+\u0002\u0002\u0231\u0233\u0005\u0126\u0094\u0002\u0232\u0234\u0005",
    "\u01aa\u00d6\u0002\u0233\u0232\u0003\u0002\u0002\u0002\u0233\u0234\u0003",
    "\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002\u0235\u0236\u0007",
    "\u008c\u0002\u0002\u0236\u0013\u0003\u0002\u0002\u0002\u0237\u023b\u0005",
    "\u00e8u\u0002\u0238\u023b\u0007\u0080\u0002\u0002\u0239\u023b\u0007",
    "\u0081\u0002\u0002\u023a\u0237\u0003\u0002\u0002\u0002\u023a\u0238\u0003",
    "\u0002\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023b\u0015\u0003",
    "\u0002\u0002\u0002\u023c\u023f\u0005\u01c4\u00e3\u0002\u023d\u023f\u0005",
    "\u01da\u00ee\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023d\u0003",
    "\u0002\u0002\u0002\u023f\u0017\u0003\u0002\u0002\u0002\u0240\u0243\u0007",
    "6\u0002\u0002\u0241\u0244\u0005\u0170\u00b9\u0002\u0242\u0244\u0005",
    "\u01da\u00ee\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0242\u0003",
    "\u0002\u0002\u0002\u0244\u0019\u0003\u0002\u0002\u0002\u0245\u0246\u0007",
    "\n\u0002\u0002\u0246\u0247\u0005\u00e8u\u0002\u0247\u0248\u0007<\u0002",
    "\u0002\u0248\u0249\u0005\u00e8u\u0002\u0249\u024a\u0007+\u0002\u0002",
    "\u024a\u024b\u0005\u001c\u000f\u0002\u024b\u024c\u0007\u000e\u0002\u0002",
    "\u024c\u024d\u0005 \u0011\u0002\u024d\u024f\u0007\u001a\u0002\u0002",
    "\u024e\u0250\u0007\n\u0002\u0002\u024f\u024e\u0003\u0002\u0002\u0002",
    "\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0252\u0003\u0002\u0002\u0002",
    "\u0251\u0253\u0005\u00e8u\u0002\u0252\u0251\u0003\u0002\u0002\u0002",
    "\u0252\u0253\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0007\u008c\u0002\u0002\u0255\u001b\u0003\u0002\u0002\u0002",
    "\u0256\u0258\u0005:\u001e\u0002\u0257\u0256\u0003\u0002\u0002\u0002",
    "\u0258\u025b\u0003\u0002\u0002\u0002\u0259\u0257\u0003\u0002\u0002\u0002",
    "\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u001d\u0003\u0002\u0002\u0002",
    "\u025b\u0259\u0003\u0002\u0002\u0002\u025c\u0272\u0005B\"\u0002\u025d",
    "\u0272\u0005\u016c\u00b7\u0002\u025e\u0260\u0005\u0112\u008a\u0002\u025f",
    "\u025e\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260",
    "\u0261\u0003\u0002\u0002\u0002\u0261\u0272\u0005h5\u0002\u0262\u0264",
    "\u0005\u0112\u008a\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0263\u0264",
    "\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265\u0272",
    "\u0005d3\u0002\u0266\u0268\u0005\u0112\u008a\u0002\u0267\u0266\u0003",
    "\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u026a\u0003",
    "\u0002\u0002\u0002\u0269\u026b\u0007D\u0002\u0002\u026a\u0269\u0003",
    "\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026c\u0003",
    "\u0002\u0002\u0002\u026c\u0272\u0005j6\u0002\u026d\u0272\u0005\\/\u0002",
    "\u026e\u0272\u0005\u00d4k\u0002\u026f\u0272\u0005f4\u0002\u0270\u0272",
    "\u0005\u01b8\u00dd\u0002\u0271\u025c\u0003\u0002\u0002\u0002\u0271\u025d",
    "\u0003\u0002\u0002\u0002\u0271\u025f\u0003\u0002\u0002\u0002\u0271\u0263",
    "\u0003\u0002\u0002\u0002\u0271\u0267\u0003\u0002\u0002\u0002\u0271\u026d",
    "\u0003\u0002\u0002\u0002\u0271\u026e\u0003\u0002\u0002\u0002\u0271\u026f",
    "\u0003\u0002\u0002\u0002\u0271\u0270\u0003\u0002\u0002\u0002\u0272\u001f",
    "\u0003\u0002\u0002\u0002\u0273\u0275\u0005\u001e\u0010\u0002\u0274\u0273",
    "\u0003\u0002\u0002\u0002\u0275\u0278\u0003\u0002\u0002\u0002\u0276\u0274",
    "\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002\u0002\u0277!",
    "\u0003\u0002\u0002\u0002\u0278\u0276\u0003\u0002\u0002\u0002\u0279\u027c",
    "\u0005\u01f2\u00fa\u0002\u027a\u027c\u0005\u0082B\u0002\u027b\u0279",
    "\u0003\u0002\u0002\u0002\u027b\u027a\u0003\u0002\u0002\u0002\u027c#",
    "\u0003\u0002\u0002\u0002\u027d\u0280\u0005\u01f0\u00f9\u0002\u027e\u0280",
    "\u0005\u0080A\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u027f\u027e",
    "\u0003\u0002\u0002\u0002\u0280%\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0007\f\u0002\u0002\u0282\u0285\u0005l7\u0002\u0283\u0284\u0007Q\u0002",
    "\u0002\u0284\u0286\u0005\u00c2b\u0002\u0285\u0283\u0003\u0002\u0002",
    "\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0289\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0007V\u0002\u0002\u0288\u028a\u0005\u00c2b\u0002",
    "\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002\u0002",
    "\u028a\'\u0003\u0002\u0002\u0002\u028b\u028d\u0005\u0112\u008a\u0002",
    "\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002",
    "\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u028f\u0005&\u0014\u0002",
    "\u028f\u0290\u0007\u008c\u0002\u0002\u0290)\u0003\u0002\u0002\u0002",
    "\u0291\u0292\u0005\u00d0i\u0002\u0292\u0293\u0007\u0087\u0002\u0002",
    "\u0293\u0295\u0003\u0002\u0002\u0002\u0294\u0291\u0003\u0002\u0002\u0002",
    "\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002",
    "\u0296\u0297\u0005\f\u0007\u0002\u0297+\u0003\u0002\u0002\u0002\u0298",
    "\u029d\u0005*\u0016\u0002\u0299\u029a\u0007\u008d\u0002\u0002\u029a",
    "\u029c\u0005*\u0016\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029c",
    "\u029f\u0003\u0002\u0002\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029d",
    "\u029e\u0003\u0002\u0002\u0002\u029e-\u0003\u0002\u0002\u0002\u029f",
    "\u029d\u0003\u0002\u0002\u0002\u02a0\u02a1\u0007\r\u0002\u0002\u02a1",
    "\u02a2\u0005\u0112\u008a\u0002\u02a2\u02a3\u0005\u0126\u0094\u0002\u02a3",
    "\u02a4\u0007\u008c\u0002\u0002\u02a4/\u0003\u0002\u0002\u0002\u02a5",
    "\u02ad\u0005\u00e8u\u0002\u02a6\u02ad\u0007J\u0002\u0002\u02a7\u02ad",
    "\u0007K\u0002\u0002\u02a8\u02ad\u0007\u0005\u0002\u0002\u02a9\u02ad",
    "\u0007b\u0002\u0002\u02aa\u02ad\u0007O\u0002\u0002\u02ab\u02ad\u0007",
    "d\u0002\u0002\u02ac\u02a5\u0003\u0002\u0002\u0002\u02ac\u02a6\u0003",
    "\u0002\u0002\u0002\u02ac\u02a7\u0003\u0002\u0002\u0002\u02ac\u02a8\u0003",
    "\u0002\u0002\u0002\u02ac\u02a9\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003",
    "\u0002\u0002\u0002\u02ac\u02ab\u0003\u0002\u0002\u0002\u02ad1\u0003",
    "\u0002\u0002\u0002\u02ae\u02af\u0007\r\u0002\u0002\u02af\u02b0\u0005",
    "0\u0019\u0002\u02b0\u02b1\u0007<\u0002\u0002\u02b1\u02b2\u0005\u00b4",
    "[\u0002\u02b2\u02b3\u0007+\u0002\u0002\u02b3\u02b4\u0005\u00c2b\u0002",
    "\u02b4\u02b5\u0007\u008c\u0002\u0002\u02b53\u0003\u0002\u0002\u0002",
    "\u02b6\u02b7\u0005\u00e8u\u0002\u02b7\u02b8\u0007\u008c\u0002\u0002",
    "\u02b85\u0003\u0002\u0002\u0002\u02b9\u02ba\u0007j\u0002\u0002\u02ba",
    "\u02bc\u0005\u00a0Q\u0002\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bb",
    "\u02bc\u0003\u0002\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd",
    "\u02bf\u0005\u00dco\u0002\u02be\u02bd\u0003\u0002\u0002\u0002\u02be",
    "\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c1\u0003\u0002\u0002\u0002\u02c0",
    "\u02c2\u0005\u0158\u00ad\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0003\u0002\u0002\u0002\u02c27\u0003\u0002\u0002\u0002\u02c3",
    "\u02c4\u0007 \u0002\u0002\u02c4\u02c8\u0005@!\u0002\u02c5\u02c7\u0005",
    "\u01f4\u00fb\u0002\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c7\u02ca\u0003",
    "\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003",
    "\u0002\u0002\u0002\u02c9\u02ce\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003",
    "\u0002\u0002\u0002\u02cb\u02cd\u0005z>\u0002\u02cc\u02cb\u0003\u0002",
    "\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002",
    "\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02d1\u0003\u0002",
    "\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d1\u02d2\u0007\u001a",
    "\u0002\u0002\u02d2\u02d3\u0007 \u0002\u0002\u02d3\u02d4\u0007\u008c",
    "\u0002\u0002\u02d49\u0003\u0002\u0002\u0002\u02d5\u02ec\u0005\u01c8",
    "\u00e5\u0002\u02d6\u02ec\u0005\u01c6\u00e4\u0002\u02d7\u02ec\u0005\u01ec",
    "\u00f7\u0002\u02d8\u02ec\u0005\u01d8\u00ed\u0002\u02d9\u02ec\u0005~",
    "@\u0002\u02da\u02ec\u0005\u01a4\u00d3\u0002\u02db\u02ec\u0005\u01f8",
    "\u00fd\u0002\u02dc\u02ec\u0005\u00c6d\u0002\u02dd\u02ec\u0005\u0012",
    "\n\u0002\u02de\u02ec\u0005Z.\u0002\u02df\u02ec\u0005.\u0018\u0002\u02e0",
    "\u02ec\u00052\u001a\u0002\u02e1\u02ec\u0005|?\u0002\u02e2\u02ec\u0005",
    "\u0094K\u0002\u02e3\u02ec\u0005\u01c0\u00e1\u0002\u02e4\u02ec\u0005",
    "\u01f4\u00fb\u0002\u02e5\u02ec\u0005\u00e4s\u0002\u02e6\u02ec\u0005",
    "\u00e2r\u0002\u02e7\u02ec\u0005\u0134\u009b\u0002\u02e8\u02ec\u0005",
    "\u01c2\u00e2\u0002\u02e9\u02ec\u0005\u0172\u00ba\u0002\u02ea\u02ec\u0005",
    "\u01e4\u00f3\u0002\u02eb\u02d5\u0003\u0002\u0002\u0002\u02eb\u02d6\u0003",
    "\u0002\u0002\u0002\u02eb\u02d7\u0003\u0002\u0002\u0002\u02eb\u02d8\u0003",
    "\u0002\u0002\u0002\u02eb\u02d9\u0003\u0002\u0002\u0002\u02eb\u02da\u0003",
    "\u0002\u0002\u0002\u02eb\u02db\u0003\u0002\u0002\u0002\u02eb\u02dc\u0003",
    "\u0002\u0002\u0002\u02eb\u02dd\u0003\u0002\u0002\u0002\u02eb\u02de\u0003",
    "\u0002\u0002\u0002\u02eb\u02df\u0003\u0002\u0002\u0002\u02eb\u02e0\u0003",
    "\u0002\u0002\u0002\u02eb\u02e1\u0003\u0002\u0002\u0002\u02eb\u02e2\u0003",
    "\u0002\u0002\u0002\u02eb\u02e3\u0003\u0002\u0002\u0002\u02eb\u02e4\u0003",
    "\u0002\u0002\u0002\u02eb\u02e5\u0003\u0002\u0002\u0002\u02eb\u02e6\u0003",
    "\u0002\u0002\u0002\u02eb\u02e7\u0003\u0002\u0002\u0002\u02eb\u02e8\u0003",
    "\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ea\u0003",
    "\u0002\u0002\u0002\u02ec;\u0003\u0002\u0002\u0002\u02ed\u02ef\u0005",
    ":\u001e\u0002\u02ee\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f2\u0003",
    "\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003",
    "\u0002\u0002\u0002\u02f1=\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003",
    "\u0002\u0002\u0002\u02f3\u02f7\u0005\u00d8m\u0002\u02f4\u02f5\u0005",
    "\u00dco\u0002\u02f5\u02f6\u0007\u008c\u0002\u0002\u02f6\u02f8\u0003",
    "\u0002\u0002\u0002\u02f7\u02f4\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003",
    "\u0002\u0002\u0002\u02f8\u02fa\u0003\u0002\u0002\u0002\u02f9\u02f3\u0003",
    "\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u0301\u0003",
    "\u0002\u0002\u0002\u02fb\u02ff\u0005\u0154\u00ab\u0002\u02fc\u02fd\u0005",
    "\u0158\u00ad\u0002\u02fd\u02fe\u0007\u008c\u0002\u0002\u02fe\u0300\u0003",
    "\u0002\u0002\u0002\u02ff\u02fc\u0003\u0002\u0002\u0002\u02ff\u0300\u0003",
    "\u0002\u0002\u0002\u0300\u0302\u0003\u0002\u0002\u0002\u0301\u02fb\u0003",
    "\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302?\u0003",
    "\u0002\u0002\u0002\u0303\u0308\u0005\u00e8u\u0002\u0304\u0305\u0007",
    "\u008f\u0002\u0002\u0305\u0306\u0005\u00f0y\u0002\u0306\u0307\u0007",
    "\u0090\u0002\u0002\u0307\u0309\u0003\u0002\u0002\u0002\u0308\u0304\u0003",
    "\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030c\u0003",
    "\u0002\u0002\u0002\u030a\u030c\u0005\u0126\u0094\u0002\u030b\u0303\u0003",
    "\u0002\u0002\u0002\u030b\u030a\u0003\u0002\u0002\u0002\u030cA\u0003",
    "\u0002\u0002\u0002\u030d\u030e\u0005\u0112\u008a\u0002\u030e\u0313\u0007",
    "\u000f\u0002\u0002\u030f\u0310\u0007\u008f\u0002\u0002\u0310\u0311\u0005",
    "\u00c2b\u0002\u0311\u0312\u0007\u0090\u0002\u0002\u0312\u0314\u0003",
    "\u0002\u0002\u0002\u0313\u030f\u0003\u0002\u0002\u0002\u0313\u0314\u0003",
    "\u0002\u0002\u0002\u0314\u0316\u0003\u0002\u0002\u0002\u0315\u0317\u0007",
    "+\u0002\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0316\u0317\u0003",
    "\u0002\u0002\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u0319\u0005",
    "> \u0002\u0319\u031a\u0005<\u001f\u0002\u031a\u031b\u0007\u000e\u0002",
    "\u0002\u031b\u031c\u0005D#\u0002\u031c\u031d\u0007\u001a\u0002\u0002",
    "\u031d\u031f\u0007\u000f\u0002\u0002\u031e\u0320\u0005\u00e8u\u0002",
    "\u031f\u031e\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002",
    "\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322\u0007\u008c\u0002\u0002",
    "\u0322C\u0003\u0002\u0002\u0002\u0323\u0325\u0005\u001e\u0010\u0002",
    "\u0324\u0323\u0003\u0002\u0002\u0002\u0325\u0328\u0003\u0002\u0002\u0002",
    "\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002",
    "\u0327E\u0003\u0002\u0002\u0002\u0328\u0326\u0003\u0002\u0002\u0002",
    "\u0329\u032b\u0007I\u0002\u0002\u032a\u032c\u0005\u0006\u0004\u0002",
    "\u032b\u032a\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002",
    "\u032c\u032e\u0003\u0002\u0002\u0002\u032d\u032f\u0005\u01e6\u00f4\u0002",
    "\u032e\u032d\u0003\u0002\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002",
    "\u032f\u0330\u0003\u0002\u0002\u0002\u0330\u0331\u0005\u01e2\u00f2\u0002",
    "\u0331\u0332\u0007\u008c\u0002\u0002\u0332G\u0003\u0002\u0002\u0002",
    "\u0333\u0335\u0005L\'\u0002\u0334\u0333\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0005\u0126\u0094\u0002\u0337\u0338\u0007\u0087\u0002\u0002\u0338",
    "\u0339\u0005\u00c2b\u0002\u0339I\u0003\u0002\u0002\u0002\u033a\u033f",
    "\u0005H%\u0002\u033b\u033c\u0007\u008d\u0002\u0002\u033c\u033e\u0005",
    "H%\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033e\u0341\u0003\u0002",
    "\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002",
    "\u0002\u0002\u0340K\u0003\u0002\u0002\u0002\u0341\u033f\u0003\u0002",
    "\u0002\u0002\u0342\u0343\u0007 \u0002\u0002\u0343\u0344\u0005\u0126",
    "\u0094\u0002\u0344\u0345\u0007j\u0002\u0002\u0345M\u0003\u0002\u0002",
    "\u0002\u0346\u0348\u0005\u0112\u008a\u0002\u0347\u0346\u0003\u0002\u0002",
    "\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002",
    "\u0002\u0349\u034b\u0007\u0011\u0002\u0002\u034a\u034c\u0005J&\u0002",
    "\u034b\u034a\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002",
    "\u034c\u034f\u0003\u0002\u0002\u0002\u034d\u034e\u0007n\u0002\u0002",
    "\u034e\u0350\u0005l7\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u034f",
    "\u0350\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351",
    "\u0352\u0007\u008c\u0002\u0002\u0352O\u0003\u0002\u0002\u0002\u0353",
    "\u0355\u0005\u0112\u008a\u0002\u0354\u0353\u0003\u0002\u0002\u0002\u0354",
    "\u0355\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356",
    "\u0357\u0007\u0014\u0002\u0002\u0357\u0358\u0005\u00c2b\u0002\u0358",
    "\u035a\u0007+\u0002\u0002\u0359\u035b\u0005R*\u0002\u035a\u0359\u0003",
    "\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002\u0002\u035c\u035a\u0003",
    "\u0002\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035e\u0003",
    "\u0002\u0002\u0002\u035e\u035f\u0007\u001a\u0002\u0002\u035f\u0361\u0007",
    "\u0014\u0002\u0002\u0360\u0362\u0005\u00e8u\u0002\u0361\u0360\u0003",
    "\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u0363\u0003",
    "\u0002\u0002\u0002\u0363\u0364\u0007\u008c\u0002\u0002\u0364Q\u0003",
    "\u0002\u0002\u0002\u0365\u0366\u0007n\u0002\u0002\u0366\u0367\u0005",
    "V,\u0002\u0367\u0368\u0007\u0087\u0002\u0002\u0368\u0369\u0005\u019a",
    "\u00ce\u0002\u0369S\u0003\u0002\u0002\u0002\u036a\u036f\u0005\u00e8",
    "u\u0002\u036b\u036f\u0005\u0096L\u0002\u036c\u036f\u0005\u01ac\u00d7",
    "\u0002\u036d\u036f\u0007@\u0002\u0002\u036e\u036a\u0003\u0002\u0002",
    "\u0002\u036e\u036b\u0003\u0002\u0002\u0002\u036e\u036c\u0003\u0002\u0002",
    "\u0002\u036e\u036d\u0003\u0002\u0002\u0002\u036fU\u0003\u0002\u0002",
    "\u0002\u0370\u0375\u0005T+\u0002\u0371\u0372\u0007\u009b\u0002\u0002",
    "\u0372\u0374\u0005T+\u0002\u0373\u0371\u0003\u0002\u0002\u0002\u0374",
    "\u0377\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0375",
    "\u0376\u0003\u0002\u0002\u0002\u0376W\u0003\u0002\u0002\u0002\u0377",
    "\u0375\u0003\u0002\u0002\u0002\u0378\u0379\u0007 \u0002\u0002\u0379",
    "\u037d\u0005^0\u0002\u037a\u037b\u00056\u001c\u0002\u037b\u037c\u0007",
    "\u008c\u0002\u0002\u037c\u037e\u0003\u0002\u0002\u0002\u037d\u037a\u0003",
    "\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037e\u0380\u0003",
    "\u0002\u0002\u0002\u037f\u0381\u00058\u001d\u0002\u0380\u037f\u0003",
    "\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0382\u0003",
    "\u0002\u0002\u0002\u0382\u0383\u0007\u001a\u0002\u0002\u0383\u0384\u0007",
    " \u0002\u0002\u0384\u0385\u0007\u008c\u0002\u0002\u0385Y\u0003\u0002",
    "\u0002\u0002\u0386\u0387\u0007\u0015\u0002\u0002\u0387\u0389\u0005\u00e8",
    "u\u0002\u0388\u038a\u0007+\u0002\u0002\u0389\u0388\u0003\u0002\u0002",
    "\u0002\u0389\u038a\u0003\u0002\u0002\u0002\u038a\u038c\u0003\u0002\u0002",
    "\u0002\u038b\u038d\u0005\u00d8m\u0002\u038c\u038b\u0003\u0002\u0002",
    "\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d\u038f\u0003\u0002\u0002",
    "\u0002\u038e\u0390\u0005\u0154\u00ab\u0002\u038f\u038e\u0003\u0002\u0002",
    "\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002",
    "\u0002\u0391\u0392\u0007\u001a\u0002\u0002\u0392\u0394\u0007\u0015\u0002",
    "\u0002\u0393\u0395\u0005\u00e8u\u0002\u0394\u0393\u0003\u0002\u0002",
    "\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002",
    "\u0002\u0396\u0397\u0007\u008c\u0002\u0002\u0397[\u0003\u0002\u0002",
    "\u0002\u0398\u0399\u0005\u0112\u008a\u0002\u0399\u039b\u0005\u00f4{",
    "\u0002\u039a\u039c\u0005\u00dco\u0002\u039b\u039a\u0003\u0002\u0002",
    "\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c\u039e\u0003\u0002\u0002",
    "\u0002\u039d\u039f\u0005\u0158\u00ad\u0002\u039e\u039d\u0003\u0002\u0002",
    "\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002",
    "\u0002\u03a0\u03a1\u0007\u008c\u0002\u0002\u03a1]\u0003\u0002\u0002",
    "\u0002\u03a2\u03a3\u0005\u00f6|\u0002\u03a3\u03a4\u0007\u0093\u0002",
    "\u0002\u03a4\u03a5\u0005\u0126\u0094\u0002\u03a5_\u0003\u0002\u0002",
    "\u0002\u03a6\u03a9\u0005\"\u0012\u0002\u03a7\u03a9\u0005\u017e\u00c0",
    "\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a8\u03a7\u0003\u0002\u0002",
    "\u0002\u03a9a\u0003\u0002\u0002\u0002\u03aa\u03ad\u0005$\u0013\u0002",
    "\u03ab\u03ad\u0005\u0180\u00c1\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002",
    "\u03ac\u03ab\u0003\u0002\u0002\u0002\u03adc\u0003\u0002\u0002\u0002",
    "\u03ae\u03b0\u0005\u0112\u008a\u0002\u03af\u03ae\u0003\u0002\u0002\u0002",
    "\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b2\u0003\u0002\u0002\u0002",
    "\u03b1\u03b3\u0007D\u0002\u0002\u03b2\u03b1\u0003\u0002\u0002\u0002",
    "\u03b2\u03b3\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002",
    "\u03b4\u03b5\u0005&\u0014\u0002\u03b5\u03b6\u0007\u008c\u0002\u0002",
    "\u03b6e\u0003\u0002\u0002\u0002\u03b7\u03b9\u0005\u0112\u008a\u0002",
    "\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002",
    "\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bc\u0007\u0011\u0002\u0002",
    "\u03bb\u03bd\u0005J&\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bc",
    "\u03bd\u0003\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002\u03be",
    "\u03c0\u0005\u0196\u00cc\u0002\u03bf\u03be\u0003\u0002\u0002\u0002\u03bf",
    "\u03c0\u0003\u0002\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1",
    "\u03c2\u0007n\u0002\u0002\u03c2\u03c4\u0005l7\u0002\u03c3\u03c1\u0003",
    "\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003",
    "\u0002\u0002\u0002\u03c5\u03c6\u0007\u008c\u0002\u0002\u03c6g\u0003",
    "\u0002\u0002\u0002\u03c7\u03c9\u0005\u0112\u008a\u0002\u03c8\u03c7\u0003",
    "\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03cb\u0003",
    "\u0002\u0002\u0002\u03ca\u03cc\u0007D\u0002\u0002\u03cb\u03ca\u0003",
    "\u0002\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003",
    "\u0002\u0002\u0002\u03cd\u03ce\u0005\u0164\u00b3\u0002\u03ce\u03cf\u0007",
    "\u008c\u0002\u0002\u03cfi\u0003\u0002\u0002\u0002\u03d0\u03d2\u0005",
    "\u0112\u008a\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003",
    "\u0002\u0002\u0002\u03d2\u03d4\u0003\u0002\u0002\u0002\u03d3\u03d5\u0007",
    "D\u0002\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003",
    "\u0002\u0002\u0002\u03d5\u03d8\u0003\u0002\u0002\u0002\u03d6\u03d9\u0005",
    "p9\u0002\u03d7\u03d9\u0005\u0192\u00ca\u0002\u03d8\u03d6\u0003\u0002",
    "\u0002\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d9k\u0003\u0002",
    "\u0002\u0002\u03da\u03db\u0005\u00c2b\u0002\u03dbm\u0003\u0002\u0002",
    "\u0002\u03dc\u03dd\u0007i\u0002\u0002\u03dd\u03de\u0005l7\u0002\u03de",
    "o\u0003\u0002\u0002\u0002\u03df\u03e0\u0005\u01de\u00f0\u0002\u03e0",
    "\u03e1\u0007\u0085\u0002\u0002\u03e1\u03e2\u0005\u0140\u00a1\u0002\u03e2",
    "\u03e3\u0005r:\u0002\u03e3\u03e4\u0007\u008c\u0002\u0002\u03e4q\u0003",
    "\u0002\u0002\u0002\u03e5\u03ec\u0005\u01fc\u00ff\u0002\u03e6\u03e7\u0007",
    "n\u0002\u0002\u03e7\u03ea\u0005l7\u0002\u03e8\u03e9\u0007\u001c\u0002",
    "\u0002\u03e9\u03eb\u0005r:\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002",
    "\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ed\u0003\u0002\u0002\u0002",
    "\u03ec\u03e6\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002",
    "\u03eds\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u0016\u0002\u0002",
    "\u03ef\u03f0\u0005\u00e8u\u0002\u03f0\u03f1\u0007<\u0002\u0002\u03f1",
    "\u03f2\u0005\u0126\u0094\u0002\u03f2\u03f3\u0007+\u0002\u0002\u03f3",
    "\u03f4\u0005x=\u0002\u03f4\u03f5\u00058\u001d\u0002\u03f5\u03f7\u0007",
    "\u001a\u0002\u0002\u03f6\u03f8\u0007\u0016\u0002\u0002\u03f7\u03f6\u0003",
    "\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002\u03f8\u03fa\u0003",
    "\u0002\u0002\u0002\u03f9\u03fb\u0005\u00e8u\u0002\u03fa\u03f9\u0003",
    "\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003",
    "\u0002\u0002\u0002\u03fc\u03fd\u0007\u008c\u0002\u0002\u03fdu\u0003",
    "\u0002\u0002\u0002\u03fe\u0402\u0005\u01f4\u00fb\u0002\u03ff\u0402\u0005",
    "2\u001a\u0002\u0400\u0402\u0005\u00e2r\u0002\u0401\u03fe\u0003\u0002",
    "\u0002\u0002\u0401\u03ff\u0003\u0002\u0002\u0002\u0401\u0400\u0003\u0002",
    "\u0002\u0002\u0402w\u0003\u0002\u0002\u0002\u0403\u0405\u0005v<\u0002",
    "\u0404\u0403\u0003\u0002\u0002\u0002\u0405\u0408\u0003\u0002\u0002\u0002",
    "\u0406\u0404\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002",
    "\u0407y\u0003\u0002\u0002\u0002\u0408\u0406\u0003\u0002\u0002\u0002",
    "\u0409\u040c\u00058\u001d\u0002\u040a\u040c\u0005X-\u0002\u040b\u0409",
    "\u0003\u0002\u0002\u0002\u040b\u040a\u0003\u0002\u0002\u0002\u040c{",
    "\u0003\u0002\u0002\u0002\u040d\u040e\u0007 \u0002\u0002\u040e\u040f",
    "\u0005^0\u0002\u040f\u0410\u00056\u001c\u0002\u0410\u0411\u0007\u008c",
    "\u0002\u0002\u0411}\u0003\u0002\u0002\u0002\u0412\u0413\u0007\u0017",
    "\u0002\u0002\u0413\u0414\u0005\u00eav\u0002\u0414\u0415\u0007\u0093",
    "\u0002\u0002\u0415\u0418\u0005\u01da\u00ee\u0002\u0416\u0417\u0007\u0089",
    "\u0002\u0002\u0417\u0419\u0005\u00c2b\u0002\u0418\u0416\u0003\u0002",
    "\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041a\u0003\u0002",
    "\u0002\u0002\u041a\u041b\u0007\u008c\u0002\u0002\u041b\u007f\u0003\u0002",
    "\u0002\u0002\u041c\u041d\u0007\u000b\u0002\u0002\u041d\u041e\u0005\u00ee",
    "x\u0002\u041e\u041f\u0007<\u0002\u0002\u041f\u0420\u0005\u01da\u00ee",
    "\u0002\u0420\u0081\u0003\u0002\u0002\u0002\u0421\u0422\u0007\u000b\u0002",
    "\u0002\u0422\u0423\u0005\u00eex\u0002\u0423\u0424\u0007<\u0002\u0002",
    "\u0424\u0425\u0005\u01c4\u00e3\u0002\u0425\u0083\u0003\u0002\u0002\u0002",
    "\u0426\u0429\u0005\u017c\u00bf\u0002\u0427\u0429\u0005\u00eex\u0002",
    "\u0428\u0426\u0003\u0002\u0002\u0002\u0428\u0427\u0003\u0002\u0002\u0002",
    "\u0429\u0085\u0003\u0002\u0002\u0002\u042a\u042c\u0005\u0088E\u0002",
    "\u042b\u042a\u0003\u0002\u0002\u0002\u042c\u042f\u0003\u0002\u0002\u0002",
    "\u042d\u042b\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002",
    "\u042e\u0087\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002\u0002\u0002",
    "\u0430\u0433\u0005\u0114\u008b\u0002\u0431\u0433\u0005\u01f4\u00fb\u0002",
    "\u0432\u0430\u0003\u0002\u0002\u0002\u0432\u0431\u0003\u0002\u0002\u0002",
    "\u0433\u0089\u0003\u0002\u0002\u0002\u0434\u043b\u0007e\u0002\u0002",
    "\u0435\u0436\u0007L\u0002\u0002\u0436\u0438\u0005\u00c2b\u0002\u0437",
    "\u0435\u0003\u0002\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438",
    "\u0439\u0003\u0002\u0002\u0002\u0439\u043b\u0007)\u0002\u0002\u043a",
    "\u0434\u0003\u0002\u0002\u0002\u043a\u0437\u0003\u0002\u0002\u0002\u043b",
    "\u008b\u0003\u0002\u0002\u0002\u043c\u043e\u0005\u008eH\u0002\u043d",
    "\u043c\u0003\u0002\u0002\u0002\u043e\u0441\u0003\u0002\u0002\u0002\u043f",
    "\u043d\u0003\u0002\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002\u0440",
    "\u0442\u0003\u0002\u0002\u0002\u0441\u043f\u0003\u0002\u0002\u0002\u0442",
    "\u0443\u0007\u0002\u0002\u0003\u0443\u008d\u0003\u0002\u0002\u0002\u0444",
    "\u0445\u0005\u0086D\u0002\u0445\u0446\u0005\u0116\u008c\u0002\u0446",
    "\u008f\u0003\u0002\u0002\u0002\u0447\u044a\u0005\u00e8u\u0002\u0448",
    "\u044a\u0007\u0081\u0002\u0002\u0449\u0447\u0003\u0002\u0002\u0002\u0449",
    "\u0448\u0003\u0002\u0002\u0002\u044a\u0091\u0003\u0002\u0002\u0002\u044b",
    "\u044c\t\u0004\u0002\u0002\u044c\u0093\u0003\u0002\u0002\u0002\u044d",
    "\u044e\u0007\u0018\u0002\u0002\u044e\u044f\u0005\u00e6t\u0002\u044f",
    "\u0450\u0007\u0006\u0002\u0002\u0450\u0451\u0005\u00c2b\u0002\u0451",
    "\u0452\u0007\u008c\u0002\u0002\u0452\u0095\u0003\u0002\u0002\u0002\u0453",
    "\u0456\u0005\u0178\u00bd\u0002\u0454\u0456\u0005\u01da\u00ee\u0002\u0455",
    "\u0453\u0003\u0002\u0002\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0456",
    "\u0097\u0003\u0002\u0002\u0002\u0457\u0458\u0005V,\u0002\u0458\u0459",
    "\u0007\u0087\u0002\u0002\u0459\u045b\u0003\u0002\u0002\u0002\u045a\u0457",
    "\u0003\u0002\u0002\u0002\u045a\u045b\u0003\u0002\u0002\u0002\u045b\u045c",
    "\u0003\u0002\u0002\u0002\u045c\u045d\u0005\u00c2b\u0002\u045d\u0099",
    "\u0003\u0002\u0002\u0002\u045e\u045f\u0005\u00eav\u0002\u045f\u0460",
    "\u0007\u0093\u0002\u0002\u0460\u0461\u0005\u009eP\u0002\u0461\u0462",
    "\u0007\u008c\u0002\u0002\u0462\u009b\u0003\u0002\u0002\u0002\u0463\u0464",
    "\u0005\u01c4\u00e3\u0002\u0464\u009d\u0003\u0002\u0002\u0002\u0465\u0466",
    "\u0005\u01da\u00ee\u0002\u0466\u009f\u0003\u0002\u0002\u0002\u0467\u0468",
    "\u0007\u001b\u0002\u0002\u0468\u046d\u0005\u0126\u0094\u0002\u0469\u046a",
    "\u0007\u008f\u0002\u0002\u046a\u046b\u0005\u00e8u\u0002\u046b\u046c",
    "\u0007\u0090\u0002\u0002\u046c\u046e\u0003\u0002\u0002\u0002\u046d\u0469",
    "\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002\u0002\u0002\u046e\u0473",
    "\u0003\u0002\u0002\u0002\u046f\u0470\u0007\u0016\u0002\u0002\u0470\u0473",
    "\u0005\u0126\u0094\u0002\u0471\u0473\u0007>\u0002\u0002\u0472\u0467",
    "\u0003\u0002\u0002\u0002\u0472\u046f\u0003\u0002\u0002\u0002\u0472\u0471",
    "\u0003\u0002\u0002\u0002\u0473\u00a1\u0003\u0002\u0002\u0002\u0474\u0475",
    "\t\u0005\u0002\u0002\u0475\u00a3\u0003\u0002\u0002\u0002\u0476\u0478",
    "\u0005\u00a2R\u0002\u0477\u0479\u0007\u008a\u0002\u0002\u0478\u0477",
    "\u0003\u0002\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u00a5",
    "\u0003\u0002\u0002\u0002\u047a\u047f\u0005\u00a4S\u0002\u047b\u047c",
    "\u0007\u008d\u0002\u0002\u047c\u047e\u0005\u00a4S\u0002\u047d\u047b",
    "\u0003\u0002\u0002\u0002\u047e\u0481\u0003\u0002\u0002\u0002\u047f\u047d",
    "\u0003\u0002\u0002\u0002\u047f\u0480\u0003\u0002\u0002\u0002\u0480\u00a7",
    "\u0003\u0002\u0002\u0002\u0481\u047f\u0003\u0002\u0002\u0002\u0482\u0483",
    "\u0007\u001b\u0002\u0002\u0483\u0484\u0005\u00e8u\u0002\u0484\u0485",
    "\u0007+\u0002\u0002\u0485\u0486\u0005\u00b0Y\u0002\u0486\u0489\u0005",
    "\u00acW\u0002\u0487\u0488\u0007\u000e\u0002\u0002\u0488\u048a\u0005",
    "\u00b8]\u0002\u0489\u0487\u0003\u0002\u0002\u0002\u0489\u048a\u0003",
    "\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002\u0002\u048b\u048d\u0007",
    "\u001a\u0002\u0002\u048c\u048e\u0007\u001b\u0002\u0002\u048d\u048c\u0003",
    "\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u0490\u0003",
    "\u0002\u0002\u0002\u048f\u0491\u0005\u00e8u\u0002\u0490\u048f\u0003",
    "\u0002\u0002\u0002\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0492\u0003",
    "\u0002\u0002\u0002\u0492\u0493\u0007\u008c\u0002\u0002\u0493\u00a9\u0003",
    "\u0002\u0002\u0002\u0494\u04a9\u0005\u01c8\u00e5\u0002\u0495\u04a9\u0005",
    "\u01c6\u00e4\u0002\u0496\u04a9\u0005\u01ec\u00f7\u0002\u0497\u04a9\u0005",
    "\u01d8\u00ed\u0002\u0498\u04a9\u0005~@\u0002\u0499\u04a9\u0005\u01a4",
    "\u00d3\u0002\u049a\u04a9\u0005\u01f8\u00fd\u0002\u049b\u04a9\u0005\u00c6",
    "d\u0002\u049c\u04a9\u0005\u0012\n\u0002\u049d\u04a9\u0005.\u0018\u0002",
    "\u049e\u04a9\u00052\u001a\u0002\u049f\u04a9\u0005\u0094K\u0002\u04a0",
    "\u04a9\u0005\u01c0\u00e1\u0002\u04a1\u04a9\u0005\u01f4\u00fb\u0002\u04a2",
    "\u04a9\u0005\u00e4s\u0002\u04a3\u04a9\u0005\u00e2r\u0002\u04a4\u04a9",
    "\u0005\u0134\u009b\u0002\u04a5\u04a9\u0005\u01c2\u00e2\u0002\u04a6\u04a9",
    "\u0005\u0172\u00ba\u0002\u04a7\u04a9\u0005\u01e4\u00f3\u0002\u04a8\u0494",
    "\u0003\u0002\u0002\u0002\u04a8\u0495\u0003\u0002\u0002\u0002\u04a8\u0496",
    "\u0003\u0002\u0002\u0002\u04a8\u0497\u0003\u0002\u0002\u0002\u04a8\u0498",
    "\u0003\u0002\u0002\u0002\u04a8\u0499\u0003\u0002\u0002\u0002\u04a8\u049a",
    "\u0003\u0002\u0002\u0002\u04a8\u049b\u0003\u0002\u0002\u0002\u04a8\u049c",
    "\u0003\u0002\u0002\u0002\u04a8\u049d\u0003\u0002\u0002\u0002\u04a8\u049e",
    "\u0003\u0002\u0002\u0002\u04a8\u049f\u0003\u0002\u0002\u0002\u04a8\u04a0",
    "\u0003\u0002\u0002\u0002\u04a8\u04a1\u0003\u0002\u0002\u0002\u04a8\u04a2",
    "\u0003\u0002\u0002\u0002\u04a8\u04a3\u0003\u0002\u0002\u0002\u04a8\u04a4",
    "\u0003\u0002\u0002\u0002\u04a8\u04a5\u0003\u0002\u0002\u0002\u04a8\u04a6",
    "\u0003\u0002\u0002\u0002\u04a8\u04a7\u0003\u0002\u0002\u0002\u04a9\u00ab",
    "\u0003\u0002\u0002\u0002\u04aa\u04ac\u0005\u00aaV\u0002\u04ab\u04aa",
    "\u0003\u0002\u0002\u0002\u04ac\u04af\u0003\u0002\u0002\u0002\u04ad\u04ab",
    "\u0003\u0002\u0002\u0002\u04ad\u04ae\u0003\u0002\u0002\u0002\u04ae\u00ad",
    "\u0003\u0002\u0002\u0002\u04af\u04ad\u0003\u0002\u0002\u0002\u04b0\u04b2",
    "\u0005\u00ba^\u0002\u04b1\u04b3\u0005\u01aa\u00d6\u0002\u04b2\u04b1",
    "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u00af",
    "\u0003\u0002\u0002\u0002\u04b4\u04b6\u0005\u00d8m\u0002\u04b5\u04b4",
    "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b8",
    "\u0003\u0002\u0002\u0002\u04b7\u04b9\u0005\u0154\u00ab\u0002\u04b8\u04b7",
    "\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002\u0002\u04b9\u00b1",
    "\u0003\u0002\u0002\u0002\u04ba\u04bf\u0005\u00aeX\u0002\u04bb\u04bc",
    "\u0007\u008d\u0002\u0002\u04bc\u04be\u0005\u00aeX\u0002\u04bd\u04bb",
    "\u0003\u0002\u0002\u0002\u04be\u04c1\u0003\u0002\u0002\u0002\u04bf\u04bd",
    "\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c5",
    "\u0003\u0002\u0002\u0002\u04c1\u04bf\u0003\u0002\u0002\u0002\u04c2\u04c5",
    "\u0007@\u0002\u0002\u04c3\u04c5\u0007\b\u0002\u0002\u04c4\u04ba\u0003",
    "\u0002\u0002\u0002\u04c4\u04c2\u0003\u0002\u0002\u0002\u04c4\u04c3\u0003",
    "\u0002\u0002\u0002\u04c5\u00b3\u0003\u0002\u0002\u0002\u04c6\u04c7\u0005",
    "\u00b2Z\u0002\u04c7\u04c8\u0007\u0093\u0002\u0002\u04c8\u04c9\u0005",
    "\u00a2R\u0002\u04c9\u00b5\u0003\u0002\u0002\u0002\u04ca\u04ce\u0005",
    "d3\u0002\u04cb\u04ce\u0005\u016c\u00b7\u0002\u04cc\u04ce\u0005h5\u0002",
    "\u04cd\u04ca\u0003\u0002\u0002\u0002\u04cd\u04cb\u0003\u0002\u0002\u0002",
    "\u04cd\u04cc\u0003\u0002\u0002\u0002\u04ce\u00b7\u0003\u0002\u0002\u0002",
    "\u04cf\u04d1\u0005\u00b6\\\u0002\u04d0\u04cf\u0003\u0002\u0002\u0002",
    "\u04d1\u04d4\u0003\u0002\u0002\u0002\u04d2\u04d0\u0003\u0002\u0002\u0002",
    "\u04d2\u04d3\u0003\u0002\u0002\u0002\u04d3\u00b9\u0003\u0002\u0002\u0002",
    "\u04d4\u04d2\u0003\u0002\u0002\u0002\u04d5\u04d9\u0005\u00e8u\u0002",
    "\u04d6\u04d9\u0007\u0080\u0002\u0002\u04d7\u04d9\u0007\u0081\u0002\u0002",
    "\u04d8\u04d5\u0003\u0002\u0002\u0002\u04d8\u04d6\u0003\u0002\u0002\u0002",
    "\u04d8\u04d7\u0003\u0002\u0002\u0002\u04d9\u00bb\u0003\u0002\u0002\u0002",
    "\u04da\u04dd\u0005\u00e8u\u0002\u04db\u04dd\u0007\u0080\u0002\u0002",
    "\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc\u04db\u0003\u0002\u0002\u0002",
    "\u04dd\u00bd\u0003\u0002\u0002\u0002\u04de\u04df\u0007\u008f\u0002\u0002",
    "\u04df\u04e4\u0005\u00bc_\u0002\u04e0\u04e1\u0007\u008d\u0002\u0002",
    "\u04e1\u04e3\u0005\u00bc_\u0002\u04e2\u04e0\u0003\u0002\u0002\u0002",
    "\u04e3\u04e6\u0003\u0002\u0002\u0002\u04e4\u04e2\u0003\u0002\u0002\u0002",
    "\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5\u04e7\u0003\u0002\u0002\u0002",
    "\u04e6\u04e4\u0003\u0002\u0002\u0002\u04e7\u04e8\u0007\u0090\u0002\u0002",
    "\u04e8\u00bf\u0003\u0002\u0002\u0002\u04e9\u04eb\u0005\u0112\u008a\u0002",
    "\u04ea\u04e9\u0003\u0002\u0002\u0002\u04ea\u04eb\u0003\u0002\u0002\u0002",
    "\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec\u04ee\u0007\u001e\u0002\u0002",
    "\u04ed\u04ef\u0005\u00e8u\u0002\u04ee\u04ed\u0003\u0002\u0002\u0002",
    "\u04ee\u04ef\u0003\u0002\u0002\u0002\u04ef\u04f2\u0003\u0002\u0002\u0002",
    "\u04f0\u04f1\u0007n\u0002\u0002\u04f1\u04f3\u0005l7\u0002\u04f2\u04f0",
    "\u0003\u0002\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4",
    "\u0003\u0002\u0002\u0002\u04f4\u04f5\u0007\u008c\u0002\u0002\u04f5\u00c1",
    "\u0003\u0002\u0002\u0002\u04f6\u04fc\u0005\u0182\u00c2\u0002\u04f7\u04f8",
    "\u0005\u011e\u0090\u0002\u04f8\u04f9\u0005\u0182\u00c2\u0002\u04f9\u04fb",
    "\u0003\u0002\u0002\u0002\u04fa\u04f7\u0003\u0002\u0002\u0002\u04fb\u04fe",
    "\u0003\u0002\u0002\u0002\u04fc\u04fa\u0003\u0002\u0002\u0002\u04fc\u04fd",
    "\u0003\u0002\u0002\u0002\u04fd\u00c3\u0003\u0002\u0002\u0002\u04fe\u04fc",
    "\u0003\u0002\u0002\u0002\u04ff\u0502\u0005\u015a\u00ae\u0002\u0500\u0501",
    "\u0007\u0083\u0002\u0002\u0501\u0503\u0005\u015a\u00ae\u0002\u0502\u0500",
    "\u0003\u0002\u0002\u0002\u0502\u0503\u0003\u0002\u0002\u0002\u0503\u0509",
    "\u0003\u0002\u0002\u0002\u0504\u0505\u0007\u0003\u0002\u0002\u0505\u0509",
    "\u0005\u015a\u00ae\u0002\u0506\u0507\u0007:\u0002\u0002\u0507\u0509",
    "\u0005\u015a\u00ae\u0002\u0508\u04ff\u0003\u0002\u0002\u0002\u0508\u0504",
    "\u0003\u0002\u0002\u0002\u0508\u0506\u0003\u0002\u0002\u0002\u0509\u00c5",
    "\u0003\u0002\u0002\u0002\u050a\u050b\u0007\u001f\u0002\u0002\u050b\u050c",
    "\u0005\u00eav\u0002\u050c\u050d\u0007\u0093\u0002\u0002\u050d\u050f",
    "\u0005\u01da\u00ee\u0002\u050e\u0510\u0005\u00caf\u0002\u050f\u050e",
    "\u0003\u0002\u0002\u0002\u050f\u0510\u0003\u0002\u0002\u0002\u0510\u0511",
    "\u0003\u0002\u0002\u0002\u0511\u0512\u0007\u008c\u0002\u0002\u0512\u00c7",
    "\u0003\u0002\u0002\u0002\u0513\u0514\u0005\u00c2b\u0002\u0514\u00c9",
    "\u0003\u0002\u0002\u0002\u0515\u0516\u0007>\u0002\u0002\u0516\u0518",
    "\u0005\u00c2b\u0002\u0517\u0515\u0003\u0002\u0002\u0002\u0517\u0518",
    "\u0003\u0002\u0002\u0002\u0518\u0519\u0003\u0002\u0002\u0002\u0519\u051a",
    "\u0007+\u0002\u0002\u051a\u051b\u0005\u00c8e\u0002\u051b\u00cb\u0003",
    "\u0002\u0002\u0002\u051c\u051d\u0007\u001f\u0002\u0002\u051d\u051e\u0007",
    "<\u0002\u0002\u051e\u051f\u0005\u01da\u00ee\u0002\u051f\u00cd\u0003",
    "\u0002\u0002\u0002\u0520\u0521\u0005\u0104\u0083\u0002\u0521\u00cf\u0003",
    "\u0002\u0002\u0002\u0522\u0529\u0005\u00e8u\u0002\u0523\u0524\u0005",
    "\u00e8u\u0002\u0524\u0525\u0007\u008f\u0002\u0002\u0525\u0526\u0005",
    "\u017a\u00be\u0002\u0526\u0527\u0007\u0090\u0002\u0002\u0527\u0529\u0003",
    "\u0002\u0002\u0002\u0528\u0522\u0003\u0002\u0002\u0002\u0528\u0523\u0003",
    "\u0002\u0002\u0002\u0529\u00d1\u0003\u0002\u0002\u0002\u052a\u052b\u0007",
    "I\u0002\u0002\u052b\u052c\u0005\u00eav\u0002\u052c\u052d\u0007\u0093",
    "\u0002\u0002\u052d\u0530\u0005\u01da\u00ee\u0002\u052e\u052f\u0007\u0089",
    "\u0002\u0002\u052f\u0531\u0005\u00c2b\u0002\u0530\u052e\u0003\u0002",
    "\u0002\u0002\u0530\u0531\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002",
    "\u0002\u0002\u0532\u0533\u0007\u008c\u0002\u0002\u0533\u00d3\u0003\u0002",
    "\u0002\u0002\u0534\u0535\u0005\u0112\u008a\u0002\u0535\u0536\u0005\u00d6",
    "l\u0002\u0536\u053e\u0007\"\u0002\u0002\u0537\u0539\u0005:\u001e\u0002",
    "\u0538\u0537\u0003\u0002\u0002\u0002\u0539\u053c\u0003\u0002\u0002\u0002",
    "\u053a\u0538\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002",
    "\u053b\u053d\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002\u0002\u0002",
    "\u053d\u053f\u0007\u000e\u0002\u0002\u053e\u053a\u0003\u0002\u0002\u0002",
    "\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u0543\u0003\u0002\u0002\u0002",
    "\u0540\u0542\u0005\u001e\u0010\u0002\u0541\u0540\u0003\u0002\u0002\u0002",
    "\u0542\u0545\u0003\u0002\u0002\u0002\u0543\u0541\u0003\u0002\u0002\u0002",
    "\u0543\u0544\u0003\u0002\u0002\u0002\u0544\u0546\u0003\u0002\u0002\u0002",
    "\u0545\u0543\u0003\u0002\u0002\u0002\u0546\u0547\u0007\u001a\u0002\u0002",
    "\u0547\u0549\u0007\"\u0002\u0002\u0548\u054a\u0005\u00e8u\u0002\u0549",
    "\u0548\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002\u0002\u054a",
    "\u054b\u0003\u0002\u0002\u0002\u054b\u054c\u0007\u008c\u0002\u0002\u054c",
    "\u00d5\u0003\u0002\u0002\u0002\u054d\u054e\u0007 \u0002\u0002\u054e",
    "\u0552\u0005\u014e\u00a8\u0002\u054f\u0550\u0007&\u0002\u0002\u0550",
    "\u0552\u0005l7\u0002\u0551\u054d\u0003\u0002\u0002\u0002\u0551\u054f",
    "\u0003\u0002\u0002\u0002\u0552\u00d7\u0003\u0002\u0002\u0002\u0553\u0554",
    "\u0007#\u0002\u0002\u0554\u0555\u0007\u008f\u0002\u0002\u0555\u0556",
    "\u0005\u00dan\u0002\u0556\u0557\u0007\u0090\u0002\u0002\u0557\u0558",
    "\u0007\u008c\u0002\u0002\u0558\u00d9\u0003\u0002\u0002\u0002\u0559\u055e",
    "\u0005\u00f8}\u0002\u055a\u055b\u0007\u008c\u0002\u0002\u055b\u055d",
    "\u0005\u00f8}\u0002\u055c\u055a\u0003\u0002\u0002\u0002\u055d\u0560",
    "\u0003\u0002\u0002\u0002\u055e\u055c\u0003\u0002\u0002\u0002\u055e\u055f",
    "\u0003\u0002\u0002\u0002\u055f\u00db\u0003\u0002\u0002\u0002\u0560\u055e",
    "\u0003\u0002\u0002\u0002\u0561\u0562\u0007#\u0002\u0002\u0562\u0563",
    "\u00072\u0002\u0002\u0563\u0564\u0007\u008f\u0002\u0002\u0564\u0565",
    "\u0005,\u0017\u0002\u0565\u0566\u0007\u0090\u0002\u0002\u0566\u00dd",
    "\u0003\u0002\u0002\u0002\u0567\u056a\u0005\u0126\u0094\u0002\u0568\u056a",
    "\u0007\u0080\u0002\u0002\u0569\u0567\u0003\u0002\u0002\u0002\u0569\u0568",
    "\u0003\u0002\u0002\u0002\u056a\u00df\u0003\u0002\u0002\u0002\u056b\u0570",
    "\u0005\u00dep\u0002\u056c\u056d\u0007\u008d\u0002\u0002\u056d\u056f",
    "\u0005\u00dep\u0002\u056e\u056c\u0003\u0002\u0002\u0002\u056f\u0572",
    "\u0003\u0002\u0002\u0002\u0570\u056e\u0003\u0002\u0002\u0002\u0570\u0571",
    "\u0003\u0002\u0002\u0002\u0571\u00e1\u0003\u0002\u0002\u0002\u0572\u0570",
    "\u0003\u0002\u0002\u0002\u0573\u0574\u0007$\u0002\u0002\u0574\u0575",
    "\u0005\u0112\u008a\u0002\u0575\u0576\u0005\u0126\u0094\u0002\u0576\u0577",
    "\u0007\u008f\u0002\u0002\u0577\u0578\u0005\u00e0q\u0002\u0578\u0579",
    "\u0007\u0090\u0002\u0002\u0579\u057a\u0007\u008c\u0002\u0002\u057a\u00e3",
    "\u0003\u0002\u0002\u0002\u057b\u057c\u0007$\u0002\u0002\u057c\u057d",
    "\u0005\u00e8u\u0002\u057d\u057e\u0007+\u0002\u0002\u057e\u057f\u0007",
    "\u008f\u0002\u0002\u057f\u0580\u0005\u00a6T\u0002\u0580\u0581\u0007",
    "\u0090\u0002\u0002\u0581\u0582\u0007\u008c\u0002\u0002\u0582\u00e5\u0003",
    "\u0002\u0002\u0002\u0583\u0584\u0005\u01a8\u00d5\u0002\u0584\u0585\u0007",
    "\u0093\u0002\u0002\u0585\u0586\u0005\u0126\u0094\u0002\u0586\u00e7\u0003",
    "\u0002\u0002\u0002\u0587\u0588\t\u0006\u0002\u0002\u0588\u00e9\u0003",
    "\u0002\u0002\u0002\u0589\u058e\u0005\u00e8u\u0002\u058a\u058b\u0007",
    "\u008d\u0002\u0002\u058b\u058d\u0005\u00e8u\u0002\u058c\u058a\u0003",
    "\u0002\u0002\u0002\u058d\u0590\u0003\u0002\u0002\u0002\u058e\u058c\u0003",
    "\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u00eb\u0003",
    "\u0002\u0002\u0002\u0590\u058e\u0003\u0002\u0002\u0002\u0591\u0593\u0005",
    "\u0112\u008a\u0002\u0592\u0591\u0003\u0002\u0002\u0002\u0592\u0593\u0003",
    "\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0595\u0007",
    "&\u0002\u0002\u0595\u0596\u0005l7\u0002\u0596\u0597\u0007a\u0002\u0002",
    "\u0597\u059f\u0005\u019a\u00ce\u0002\u0598\u0599\u0007\u001d\u0002\u0002",
    "\u0599\u059a\u0005l7\u0002\u059a\u059b\u0007a\u0002\u0002\u059b\u059c",
    "\u0005\u019a\u00ce\u0002\u059c\u059e\u0003\u0002\u0002\u0002\u059d\u0598",
    "\u0003\u0002\u0002\u0002\u059e\u05a1\u0003\u0002\u0002\u0002\u059f\u059d",
    "\u0003\u0002\u0002\u0002\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0\u05a4",
    "\u0003\u0002\u0002\u0002\u05a1\u059f\u0003\u0002\u0002\u0002\u05a2\u05a3",
    "\u0007\u001c\u0002\u0002\u05a3\u05a5\u0005\u019a\u00ce\u0002\u05a4\u05a2",
    "\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5\u05a6",
    "\u0003\u0002\u0002\u0002\u05a6\u05a7\u0007\u001a\u0002\u0002\u05a7\u05a9",
    "\u0007&\u0002\u0002\u05a8\u05aa\u0005\u00e8u\u0002\u05a9\u05a8\u0003",
    "\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aa\u05ab\u0003",
    "\u0002\u0002\u0002\u05ab\u05ac\u0007\u008c\u0002\u0002\u05ac\u00ed\u0003",
    "\u0002\u0002\u0002\u05ad\u05ae\u0007\u008f\u0002\u0002\u05ae\u05b3\u0005",
    "\u0096L\u0002\u05af\u05b0\u0007\u008d\u0002\u0002\u05b0\u05b2\u0005",
    "\u0096L\u0002\u05b1\u05af\u0003\u0002\u0002\u0002\u05b2\u05b5\u0003",
    "\u0002\u0002\u0002\u05b3\u05b1\u0003\u0002\u0002\u0002\u05b3\u05b4\u0003",
    "\u0002\u0002\u0002\u05b4\u05b6\u0003\u0002\u0002\u0002\u05b5\u05b3\u0003",
    "\u0002\u0002\u0002\u05b6\u05b7\u0007\u0090\u0002\u0002\u05b7\u00ef\u0003",
    "\u0002\u0002\u0002\u05b8\u05bb\u0005\u0096L\u0002\u05b9\u05bb\u0005",
    "\u00c2b\u0002\u05ba\u05b8\u0003\u0002\u0002\u0002\u05ba\u05b9\u0003",
    "\u0002\u0002\u0002\u05bb\u00f1\u0003\u0002\u0002\u0002\u05bc\u05bd\u0005",
    "\u0126\u0094\u0002\u05bd\u05be\u0007J\u0002\u0002\u05be\u05bf\u0007",
    "\u008a\u0002\u0002\u05bf\u00f3\u0003\u0002\u0002\u0002\u05c0\u05c2\u0007",
    "\u0015\u0002\u0002\u05c1\u05c0\u0003\u0002\u0002\u0002\u05c1\u05c2\u0003",
    "\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3\u05cf\u0005",
    "\u0126\u0094\u0002\u05c4\u05c5\u0007\u001b\u0002\u0002\u05c5\u05ca\u0005",
    "\u0126\u0094\u0002\u05c6\u05c7\u0007\u008f\u0002\u0002\u05c7\u05c8\u0005",
    "\u00e8u\u0002\u05c8\u05c9\u0007\u0090\u0002\u0002\u05c9\u05cb\u0003",
    "\u0002\u0002\u0002\u05ca\u05c6\u0003\u0002\u0002\u0002\u05ca\u05cb\u0003",
    "\u0002\u0002\u0002\u05cb\u05cf\u0003\u0002\u0002\u0002\u05cc\u05cd\u0007",
    "\u0016\u0002\u0002\u05cd\u05cf\u0005\u0126\u0094\u0002\u05ce\u05c1\u0003",
    "\u0002\u0002\u0002\u05ce\u05c4\u0003\u0002\u0002\u0002\u05ce\u05cc\u0003",
    "\u0002\u0002\u0002\u05cf\u00f5\u0003\u0002\u0002\u0002\u05d0\u05d5\u0005",
    "\u00e8u\u0002\u05d1\u05d2\u0007\u008d\u0002\u0002\u05d2\u05d4\u0005",
    "\u00e8u\u0002\u05d3\u05d1\u0003\u0002\u0002\u0002\u05d4\u05d7\u0003",
    "\u0002\u0002\u0002\u05d5\u05d3\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003",
    "\u0002\u0002\u0002\u05d6\u05db\u0003\u0002\u0002\u0002\u05d7\u05d5\u0003",
    "\u0002\u0002\u0002\u05d8\u05db\u0007@\u0002\u0002\u05d9\u05db\u0007",
    "\b\u0002\u0002\u05da\u05d0\u0003\u0002\u0002\u0002\u05da\u05d8\u0003",
    "\u0002\u0002\u0002\u05da\u05d9\u0003\u0002\u0002\u0002\u05db\u00f7\u0003",
    "\u0002\u0002\u0002\u05dc\u05de\u0007\u0017\u0002\u0002\u05dd\u05dc\u0003",
    "\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u05df\u0003",
    "\u0002\u0002\u0002\u05df\u05e0\u0005\u00eav\u0002\u05e0\u05e2\u0007",
    "\u0093\u0002\u0002\u05e1\u05e3\u0007(\u0002\u0002\u05e2\u05e1\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003",
    "\u0002\u0002\u0002\u05e4\u05e7\u0005\u01da\u00ee\u0002\u05e5\u05e6\u0007",
    "\u0089\u0002\u0002\u05e6\u05e8\u0005\u00c2b\u0002\u05e7\u05e5\u0003",
    "\u0002\u0002\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8\u00f9\u0003",
    "\u0002\u0002\u0002\u05e9\u05f0\u0005\u00f8}\u0002\u05ea\u05f0\u0005",
    "\u010a\u0086\u0002\u05eb\u05f0\u0005\u010e\u0088\u0002\u05ec\u05f0\u0005",
    "\u00fe\u0080\u0002\u05ed\u05f0\u0005\u010c\u0087\u0002\u05ee\u05f0\u0005",
    "\u0106\u0084\u0002\u05ef\u05e9\u0003\u0002\u0002\u0002\u05ef\u05ea\u0003",
    "\u0002\u0002\u0002\u05ef\u05eb\u0003\u0002\u0002\u0002\u05ef\u05ec\u0003",
    "\u0002\u0002\u0002\u05ef\u05ed\u0003\u0002\u0002\u0002\u05ef\u05ee\u0003",
    "\u0002\u0002\u0002\u05f0\u00fb\u0003\u0002\u0002\u0002\u05f1\u05f2\u0005",
    "\u00fa~\u0002\u05f2\u00fd\u0003\u0002\u0002\u0002\u05f3\u05f4\u0007",
    "\u001f\u0002\u0002\u05f4\u05f5\u0005\u00eav\u0002\u05f5\u05f6\u0007",
    "\u0093\u0002\u0002\u05f6\u05f7\u0005\u01da\u00ee\u0002\u05f7\u00ff\u0003",
    "\u0002\u0002\u0002\u05f8\u05fd\u0005\u010a\u0086\u0002\u05f9\u05fa\u0007",
    "\u008c\u0002\u0002\u05fa\u05fc\u0005\u010a\u0086\u0002\u05fb\u05f9\u0003",
    "\u0002\u0002\u0002\u05fc\u05ff\u0003\u0002\u0002\u0002\u05fd\u05fb\u0003",
    "\u0002\u0002\u0002\u05fd\u05fe\u0003\u0002\u0002\u0002\u05fe\u0101\u0003",
    "\u0002\u0002\u0002\u05ff\u05fd\u0003\u0002\u0002\u0002\u0600\u0605\u0005",
    "\u0108\u0085\u0002\u0601\u0602\u0007\u008c\u0002\u0002\u0602\u0604\u0005",
    "\u0108\u0085\u0002\u0603\u0601\u0003\u0002\u0002\u0002\u0604\u0607\u0003",
    "\u0002\u0002\u0002\u0605\u0603\u0003\u0002\u0002\u0002\u0605\u0606\u0003",
    "\u0002\u0002\u0002\u0606\u0103\u0003\u0002\u0002\u0002\u0607\u0605\u0003",
    "\u0002\u0002\u0002\u0608\u060d\u0005\u00fc\u007f\u0002\u0609\u060a\u0007",
    "\u008c\u0002\u0002\u060a\u060c\u0005\u00fc\u007f\u0002\u060b\u0609\u0003",
    "\u0002\u0002\u0002\u060c\u060f\u0003\u0002\u0002\u0002\u060d\u060b\u0003",
    "\u0002\u0002\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u0105\u0003",
    "\u0002\u0002\u0002\u060f\u060d\u0003\u0002\u0002\u0002\u0610\u0611\u0007",
    "I\u0002\u0002\u0611\u0612\u0005\u00eav\u0002\u0612\u0614\u0007\u0093",
    "\u0002\u0002\u0613\u0615\t\u0007\u0002\u0002\u0614\u0613\u0003\u0002",
    "\u0002\u0002\u0614\u0615\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002",
    "\u0002\u0002\u0616\u0619\u0005\u01da\u00ee\u0002\u0617\u0618\u0007\u0089",
    "\u0002\u0002\u0618\u061a\u0005\u00c2b\u0002\u0619\u0617\u0003\u0002",
    "\u0002\u0002\u0619\u061a\u0003\u0002\u0002\u0002\u061a\u0107\u0003\u0002",
    "\u0002\u0002\u061b\u061c\u0005\u00eav\u0002\u061c\u061e\u0007\u0093",
    "\u0002\u0002\u061d\u061f\u0005\u0122\u0092\u0002\u061e\u061d\u0003\u0002",
    "\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0620\u0003\u0002",
    "\u0002\u0002\u0620\u0622\u0005\u01da\u00ee\u0002\u0621\u0623\u0007\u0013",
    "\u0002\u0002\u0622\u0621\u0003\u0002\u0002\u0002\u0622\u0623\u0003\u0002",
    "\u0002\u0002\u0623\u0626\u0003\u0002\u0002\u0002\u0624\u0625\u0007\u0089",
    "\u0002\u0002\u0625\u0627\u0005\u00c2b\u0002\u0626\u0624\u0003\u0002",
    "\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002\u0627\u0109\u0003\u0002",
    "\u0002\u0002\u0628\u0629\u0007X\u0002\u0002\u0629\u062a\u0005\u00ea",
    "v\u0002\u062a\u062c\u0007\u0093\u0002\u0002\u062b\u062d\u0005\u0122",
    "\u0092\u0002\u062c\u062b\u0003\u0002\u0002\u0002\u062c\u062d\u0003\u0002",
    "\u0002\u0002\u062d\u062e\u0003\u0002\u0002\u0002\u062e\u0630\u0005\u01da",
    "\u00ee\u0002\u062f\u0631\u0007\u0013\u0002\u0002\u0630\u062f\u0003\u0002",
    "\u0002\u0002\u0630\u0631\u0003\u0002\u0002\u0002\u0631\u0634\u0003\u0002",
    "\u0002\u0002\u0632\u0633\u0007\u0089\u0002\u0002\u0633\u0635\u0005\u00c2",
    "b\u0002\u0634\u0632\u0003\u0002\u0002\u0002\u0634\u0635\u0003\u0002",
    "\u0002\u0002\u0635\u010b\u0003\u0002\u0002\u0002\u0636\u0637\u0007`",
    "\u0002\u0002\u0637\u0638\u0005\u00eav\u0002\u0638\u0639\u0007\u0093",
    "\u0002\u0002\u0639\u063a\u0005\u01c4\u00e3\u0002\u063a\u010d\u0003\u0002",
    "\u0002\u0002\u063b\u063d\u0007k\u0002\u0002\u063c\u063b\u0003\u0002",
    "\u0002\u0002\u063c\u063d\u0003\u0002\u0002\u0002\u063d\u063e\u0003\u0002",
    "\u0002\u0002\u063e\u063f\u0005\u00eav\u0002\u063f\u0641\u0007\u0093",
    "\u0002\u0002\u0640\u0642\u0005\u0122\u0092\u0002\u0641\u0640\u0003\u0002",
    "\u0002\u0002\u0641\u0642\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002",
    "\u0002\u0002\u0643\u0646\u0005\u01da\u00ee\u0002\u0644\u0645\u0007\u0089",
    "\u0002\u0002\u0645\u0647\u0005\u00c2b\u0002\u0646\u0644\u0003\u0002",
    "\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647\u010f\u0003\u0002",
    "\u0002\u0002\u0648\u0649\u0007o\u0002\u0002\u0649\u064d\u0005l7\u0002",
    "\u064a\u064b\u0007 \u0002\u0002\u064b\u064d\u0005\u014e\u00a8\u0002",
    "\u064c\u0648\u0003\u0002\u0002\u0002\u064c\u064a\u0003\u0002\u0002\u0002",
    "\u064d\u0111\u0003\u0002\u0002\u0002\u064e\u064f\u0005\u00e8u\u0002",
    "\u064f\u0650\u0007\u0093\u0002\u0002\u0650\u0113\u0003\u0002\u0002\u0002",
    "\u0651\u0652\u0007-\u0002\u0002\u0652\u0653\u0005\u011c\u008f\u0002",
    "\u0653\u0654\u0007\u008c\u0002\u0002\u0654\u0115\u0003\u0002\u0002\u0002",
    "\u0655\u0658\u0005\u018e\u00c8\u0002\u0656\u0658\u0005\u015c\u00af\u0002",
    "\u0657\u0655\u0003\u0002\u0002\u0002\u0657\u0656\u0003\u0002\u0002\u0002",
    "\u0658\u0117\u0003\u0002\u0002\u0002\u0659\u065f\u0007;\u0002\u0002",
    "\u065a\u065f\u0007s\u0002\u0002\u065b\u065f\u0007\u0081\u0002\u0002",
    "\u065c\u065f\u0005\u00bc_\u0002\u065d\u065f\u0005\u013c\u009f\u0002",
    "\u065e\u0659\u0003\u0002\u0002\u0002\u065e\u065a\u0003\u0002\u0002\u0002",
    "\u065e\u065b\u0003\u0002\u0002\u0002\u065e\u065c\u0003\u0002\u0002\u0002",
    "\u065e\u065d\u0003\u0002\u0002\u0002\u065f\u0119\u0003\u0002\u0002\u0002",
    "\u0660\u0661\u0005\u00e8u\u0002\u0661\u011b\u0003\u0002\u0002\u0002",
    "\u0662\u0667\u0005\u011a\u008e\u0002\u0663\u0664\u0007\u008d\u0002\u0002",
    "\u0664\u0666\u0005\u011a\u008e\u0002\u0665\u0663\u0003\u0002\u0002\u0002",
    "\u0666\u0669\u0003\u0002\u0002\u0002\u0667\u0665\u0003\u0002\u0002\u0002",
    "\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u011d\u0003\u0002\u0002\u0002",
    "\u0669\u0667\u0003\u0002\u0002\u0002\u066a\u066b\t\b\u0002\u0002\u066b",
    "\u011f\u0003\u0002\u0002\u0002\u066c\u066e\u0005\u0112\u008a\u0002\u066d",
    "\u066c\u0003\u0002\u0002\u0002\u066d\u066e\u0003\u0002\u0002\u0002\u066e",
    "\u0670\u0003\u0002\u0002\u0002\u066f\u0671\u0005\u0110\u0089\u0002\u0670",
    "\u066f\u0003\u0002\u0002\u0002\u0670\u0671\u0003\u0002\u0002\u0002\u0671",
    "\u0672\u0003\u0002\u0002\u0002\u0672\u0673\u00071\u0002\u0002\u0673",
    "\u0674\u0005\u019a\u00ce\u0002\u0674\u0675\u0007\u001a\u0002\u0002\u0675",
    "\u0677\u00071\u0002\u0002\u0676\u0678\u0005\u00e8u\u0002\u0677\u0676",
    "\u0003\u0002\u0002\u0002\u0677\u0678\u0003\u0002\u0002\u0002\u0678\u0679",
    "\u0003\u0002\u0002\u0002\u0679\u067a\u0007\u008c\u0002\u0002\u067a\u0121",
    "\u0003\u0002\u0002\u0002\u067b\u067c\t\t\u0002\u0002\u067c\u0123\u0003",
    "\u0002\u0002\u0002\u067d\u067e\t\n\u0002\u0002\u067e\u0125\u0003\u0002",
    "\u0002\u0002\u067f\u0682\u0005\u00e8u\u0002\u0680\u0682\u0007\u0081",
    "\u0002\u0002\u0681\u067f\u0003\u0002\u0002\u0002\u0681\u0680\u0003\u0002",
    "\u0002\u0002\u0682\u0686\u0003\u0002\u0002\u0002\u0683\u0685\u0005\u0128",
    "\u0095\u0002\u0684\u0683\u0003\u0002\u0002\u0002\u0685\u0688\u0003\u0002",
    "\u0002\u0002\u0686\u0684\u0003\u0002\u0002\u0002\u0686\u0687\u0003\u0002",
    "\u0002\u0002\u0687\u0127\u0003\u0002\u0002\u0002\u0688\u0686\u0003\u0002",
    "\u0002\u0002\u0689\u068e\u0005\u012c\u0097\u0002\u068a\u068e\u0005\u012e",
    "\u0098\u0002\u068b\u068e\u0005\u0130\u0099\u0002\u068c\u068e\u0005\u0132",
    "\u009a\u0002\u068d\u0689\u0003\u0002\u0002\u0002\u068d\u068a\u0003\u0002",
    "\u0002\u0002\u068d\u068b\u0003\u0002\u0002\u0002\u068d\u068c\u0003\u0002",
    "\u0002\u0002\u068e\u0129\u0003\u0002\u0002\u0002\u068f\u0694\u0005\u00e8",
    "u\u0002\u0690\u0691\u0007\u009c\u0002\u0002\u0691\u0693\u0005\u01dc",
    "\u00ef\u0002\u0692\u0690\u0003\u0002\u0002\u0002\u0693\u0696\u0003\u0002",
    "\u0002\u0002\u0694\u0692\u0003\u0002\u0002\u0002\u0694\u0695\u0003\u0002",
    "\u0002\u0002\u0695\u012b\u0003\u0002\u0002\u0002\u0696\u0694\u0003\u0002",
    "\u0002\u0002\u0697\u0698\u0007\u009c\u0002\u0002\u0698\u069a\u0005\u01dc",
    "\u00ef\u0002\u0699\u0697\u0003\u0002\u0002\u0002\u069a\u069b\u0003\u0002",
    "\u0002\u0002\u069b\u0699\u0003\u0002\u0002\u0002\u069b\u069c\u0003\u0002",
    "\u0002\u0002\u069c\u012d\u0003\u0002\u0002\u0002\u069d\u069e\u0007\u008f",
    "\u0002\u0002\u069e\u069f\u0005\n\u0006\u0002\u069f\u06a0\u0007\u0090",
    "\u0002\u0002\u06a0\u012f\u0003\u0002\u0002\u0002\u06a1\u06a2\u0007\u008f",
    "\u0002\u0002\u06a2\u06a3\u0005\u0096L\u0002\u06a3\u06a4\u0007\u0090",
    "\u0002\u0002\u06a4\u0131\u0003\u0002\u0002\u0002\u06a5\u06a7\u0005\u01aa",
    "\u00d6\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002",
    "\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9\u0007\u00a4",
    "\u0002\u0002\u06a9\u06ae\u00050\u0019\u0002\u06aa\u06ab\u0007\u008f",
    "\u0002\u0002\u06ab\u06ac\u0005\u00c2b\u0002\u06ac\u06ad\u0007\u0090",
    "\u0002\u0002\u06ad\u06af\u0003\u0002\u0002\u0002\u06ae\u06aa\u0003\u0002",
    "\u0002\u0002\u06ae\u06af\u0003\u0002\u0002\u0002\u06af\u0133\u0003\u0002",
    "\u0002\u0002\u06b0\u06b1\u00075\u0002\u0002\u06b1\u06b2\u0005\u00e8",
    "u\u0002\u06b2\u06b3\u0007+\u0002\u0002\u06b3\u06b4\u0005\u0136\u009c",
    "\u0002\u06b4\u06b5\u0007\u008c\u0002\u0002\u06b5\u0135\u0003\u0002\u0002",
    "\u0002\u06b6\u06b9\u0005\u018a\u00c6\u0002\u06b7\u06b9\u0005`1\u0002",
    "\u06b8\u06b6\u0003\u0002\u0002\u0002\u06b8\u06b7\u0003\u0002\u0002\u0002",
    "\u06b9\u0137\u0003\u0002\u0002\u0002\u06ba\u06bb\u0005\u00eav\u0002",
    "\u06bb\u06bc\u0007\u0093\u0002\u0002\u06bc\u06bd\u0005\u009cO\u0002",
    "\u06bd\u0139\u0003\u0002\u0002\u0002\u06be\u06c0\u0005\u0112\u008a\u0002",
    "\u06bf\u06be\u0003\u0002\u0002\u0002\u06bf\u06c0\u0003\u0002\u0002\u0002",
    "\u06c0\u06c1\u0003\u0002\u0002\u0002\u06c1\u06c3\u00077\u0002\u0002",
    "\u06c2\u06c4\u0005\u00e8u\u0002\u06c3\u06c2\u0003\u0002\u0002\u0002",
    "\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4\u06c7\u0003\u0002\u0002\u0002",
    "\u06c5\u06c6\u0007n\u0002\u0002\u06c6\u06c8\u0005l7\u0002\u06c7\u06c5",
    "\u0003\u0002\u0002\u0002\u06c7\u06c8\u0003\u0002\u0002\u0002\u06c8\u06c9",
    "\u0003\u0002\u0002\u0002\u06c9\u06ca\u0007\u008c\u0002\u0002\u06ca\u013b",
    "\u0003\u0002\u0002\u0002\u06cb\u06ce\u0005\u0002\u0002\u0002\u06cc\u06ce",
    "\u0005\u0150\u00a9\u0002\u06cd\u06cb\u0003\u0002\u0002\u0002\u06cd\u06cc",
    "\u0003\u0002\u0002\u0002\u06ce\u013d\u0003\u0002\u0002\u0002\u06cf\u06d6",
    "\u0005~@\u0002\u06d0\u06d6\u0005\u01a4\u00d3\u0002\u06d1\u06d6\u0005",
    "\u01f8\u00fd\u0002\u06d2\u06d6\u0005\u00c6d\u0002\u06d3\u06d6\u0005",
    "\u01e4\u00f3\u0002\u06d4\u06d6\u0005\u0172\u00ba\u0002\u06d5\u06cf\u0003",
    "\u0002\u0002\u0002\u06d5\u06d0\u0003\u0002\u0002\u0002\u06d5\u06d1\u0003",
    "\u0002\u0002\u0002\u06d5\u06d2\u0003\u0002\u0002\u0002\u06d5\u06d3\u0003",
    "\u0002\u0002\u0002\u06d5\u06d4\u0003\u0002\u0002\u0002\u06d6\u013f\u0003",
    "\u0002\u0002\u0002\u06d7\u06d9\u0007%\u0002\u0002\u06d8\u06d7\u0003",
    "\u0002\u0002\u0002\u06d8\u06d9\u0003\u0002\u0002\u0002\u06d9\u06db\u0003",
    "\u0002\u0002\u0002\u06da\u06dc\u0005\u008aF\u0002\u06db\u06da\u0003",
    "\u0002\u0002\u0002\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc\u0141\u0003",
    "\u0002\u0002\u0002\u06dd\u06de\u0007B\u0002\u0002\u06de\u06df\u0007",
    "\u0010\u0002\u0002\u06df\u06e0\u0005\u00e8u\u0002\u06e0\u06e1\u0007",
    "+\u0002\u0002\u06e1\u06e2\u0005\u0146\u00a4\u0002\u06e2\u06e5\u0007",
    "\u001a\u0002\u0002\u06e3\u06e4\u0007B\u0002\u0002\u06e4\u06e6\u0007",
    "\u0010\u0002\u0002\u06e5\u06e3\u0003\u0002\u0002\u0002\u06e5\u06e6\u0003",
    "\u0002\u0002\u0002\u06e6\u06e8\u0003\u0002\u0002\u0002\u06e7\u06e9\u0005",
    "\u00e8u\u0002\u06e8\u06e7\u0003\u0002\u0002\u0002\u06e8\u06e9\u0003",
    "\u0002\u0002\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06eb\u0007",
    "\u008c\u0002\u0002\u06eb\u0143\u0003\u0002\u0002\u0002\u06ec\u06f8\u0005",
    "\u01c8\u00e5\u0002\u06ed\u06f8\u0005\u01c6\u00e4\u0002\u06ee\u06f8\u0005",
    "\u01ec\u00f7\u0002\u06ef\u06f8\u0005\u01d8\u00ed\u0002\u06f0\u06f8\u0005",
    "~@\u0002\u06f1\u06f8\u0005\u01f8\u00fd\u0002\u06f2\u06f8\u0005\u00c6",
    "d\u0002\u06f3\u06f8\u0005\u0012\n\u0002\u06f4\u06f8\u0005\u01f4\u00fb",
    "\u0002\u06f5\u06f8\u0005\u00e4s\u0002\u06f6\u06f8\u0005\u00e2r\u0002",
    "\u06f7\u06ec\u0003\u0002\u0002\u0002\u06f7\u06ed\u0003\u0002\u0002\u0002",
    "\u06f7\u06ee\u0003\u0002\u0002\u0002\u06f7\u06ef\u0003\u0002\u0002\u0002",
    "\u06f7\u06f0\u0003\u0002\u0002\u0002\u06f7\u06f1\u0003\u0002\u0002\u0002",
    "\u06f7\u06f2\u0003\u0002\u0002\u0002\u06f7\u06f3\u0003\u0002\u0002\u0002",
    "\u06f7\u06f4\u0003\u0002\u0002\u0002\u06f7\u06f5\u0003\u0002\u0002\u0002",
    "\u06f7\u06f6\u0003\u0002\u0002\u0002\u06f8\u0145\u0003\u0002\u0002\u0002",
    "\u06f9\u06fb\u0005\u0144\u00a3\u0002\u06fa\u06f9\u0003\u0002\u0002\u0002",
    "\u06fb\u06fe\u0003\u0002\u0002\u0002\u06fc\u06fa\u0003\u0002\u0002\u0002",
    "\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u0147\u0003\u0002\u0002\u0002",
    "\u06fe\u06fc\u0003\u0002\u0002\u0002\u06ff\u0700\u0007B\u0002\u0002",
    "\u0700\u0701\u0005\u00e8u\u0002\u0701\u0702\u0007+\u0002\u0002\u0702",
    "\u0703\u0005\u014c\u00a7\u0002\u0703\u0705\u0007\u001a\u0002\u0002\u0704",
    "\u0706\u0007B\u0002\u0002\u0705\u0704\u0003\u0002\u0002\u0002\u0705",
    "\u0706\u0003\u0002\u0002\u0002\u0706\u0708\u0003\u0002\u0002\u0002\u0707",
    "\u0709\u0005\u00e8u\u0002\u0708\u0707\u0003\u0002\u0002\u0002\u0708",
    "\u0709\u0003\u0002\u0002\u0002\u0709\u070a\u0003\u0002\u0002\u0002\u070a",
    "\u070b\u0007\u008c\u0002\u0002\u070b\u0149\u0003\u0002\u0002\u0002\u070c",
    "\u0720\u0005\u01c8\u00e5\u0002\u070d\u0720\u0005\u01c6\u00e4\u0002\u070e",
    "\u0720\u0005\u01ec\u00f7\u0002\u070f\u0720\u0005\u01d8\u00ed\u0002\u0710",
    "\u0720\u0005~@\u0002\u0711\u0720\u0005\u01a4\u00d3\u0002\u0712\u0720",
    "\u0005\u01f8\u00fd\u0002\u0713\u0720\u0005\u00c6d\u0002\u0714\u0720",
    "\u0005\u0012\n\u0002\u0715\u0720\u0005Z.\u0002\u0716\u0720\u0005.\u0018",
    "\u0002\u0717\u0720\u00052\u001a\u0002\u0718\u0720\u0005\u0094K\u0002",
    "\u0719\u0720\u0005\u01f4\u00fb\u0002\u071a\u0720\u0005\u00e4s\u0002",
    "\u071b\u0720\u0005\u00e2r\u0002\u071c\u0720\u0005\u0134\u009b\u0002",
    "\u071d\u0720\u0005\u01c2\u00e2\u0002\u071e\u0720\u0005\u01e4\u00f3\u0002",
    "\u071f\u070c\u0003\u0002\u0002\u0002\u071f\u070d\u0003\u0002\u0002\u0002",
    "\u071f\u070e\u0003\u0002\u0002\u0002\u071f\u070f\u0003\u0002\u0002\u0002",
    "\u071f\u0710\u0003\u0002\u0002\u0002\u071f\u0711\u0003\u0002\u0002\u0002",
    "\u071f\u0712\u0003\u0002\u0002\u0002\u071f\u0713\u0003\u0002\u0002\u0002",
    "\u071f\u0714\u0003\u0002\u0002\u0002\u071f\u0715\u0003\u0002\u0002\u0002",
    "\u071f\u0716\u0003\u0002\u0002\u0002\u071f\u0717\u0003\u0002\u0002\u0002",
    "\u071f\u0718\u0003\u0002\u0002\u0002\u071f\u0719\u0003\u0002\u0002\u0002",
    "\u071f\u071a\u0003\u0002\u0002\u0002\u071f\u071b\u0003\u0002\u0002\u0002",
    "\u071f\u071c\u0003\u0002\u0002\u0002\u071f\u071d\u0003\u0002\u0002\u0002",
    "\u071f\u071e\u0003\u0002\u0002\u0002\u0720\u014b\u0003\u0002\u0002\u0002",
    "\u0721\u0723\u0005\u014a\u00a6\u0002\u0722\u0721\u0003\u0002\u0002\u0002",
    "\u0723\u0726\u0003\u0002\u0002\u0002\u0724\u0722\u0003\u0002\u0002\u0002",
    "\u0724\u0725\u0003\u0002\u0002\u0002\u0725\u014d\u0003\u0002\u0002\u0002",
    "\u0726\u0724\u0003\u0002\u0002\u0002\u0727\u0728\u0005\u00e8u\u0002",
    "\u0728\u0729\u0007(\u0002\u0002\u0729\u072a\u0005\u0096L\u0002\u072a",
    "\u014f\u0003\u0002\u0002\u0002\u072b\u072c\u0005\u0002\u0002\u0002\u072c",
    "\u072d\u0005\u00e8u\u0002\u072d\u0151\u0003\u0002\u0002\u0002\u072e",
    "\u072f\u0005\u017c\u00bf\u0002\u072f\u0730\u0007h\u0002\u0002\u0730",
    "\u0734\u00054\u001b\u0002\u0731\u0733\u0005\u0190\u00c9\u0002\u0732",
    "\u0731\u0003\u0002\u0002\u0002\u0733\u0736\u0003\u0002\u0002\u0002\u0734",
    "\u0732\u0003\u0002\u0002\u0002\u0734\u0735\u0003\u0002\u0002\u0002\u0735",
    "\u0737\u0003\u0002\u0002\u0002\u0736\u0734\u0003\u0002\u0002\u0002\u0737",
    "\u0738\u0007\u001a\u0002\u0002\u0738\u073a\u0007h\u0002\u0002\u0739",
    "\u073b\u0005\u00e8u\u0002\u073a\u0739\u0003\u0002\u0002\u0002\u073a",
    "\u073b\u0003\u0002\u0002\u0002\u073b\u0153\u0003\u0002\u0002\u0002\u073c",
    "\u073d\u0007C\u0002\u0002\u073d\u073e\u0007\u008f\u0002\u0002\u073e",
    "\u073f\u0005\u0156\u00ac\u0002\u073f\u0740\u0007\u0090\u0002\u0002\u0740",
    "\u0741\u0007\u008c\u0002\u0002\u0741\u0155\u0003\u0002\u0002\u0002\u0742",
    "\u0743\u0005\u0102\u0082\u0002\u0743\u0157\u0003\u0002\u0002\u0002\u0744",
    "\u0745\u0007C\u0002\u0002\u0745\u0746\u00072\u0002\u0002\u0746\u0747",
    "\u0007\u008f\u0002\u0002\u0747\u0748\u0005,\u0017\u0002\u0748\u0749",
    "\u0007\u0090\u0002\u0002\u0749\u0159\u0003\u0002\u0002\u0002\u074a\u0754",
    "\u0005\u0118\u008d\u0002\u074b\u0754\u0005\u0170\u00b9\u0002\u074c\u074d",
    "\u0007\u008f\u0002\u0002\u074d\u074e\u0005\u00c2b\u0002\u074e\u074f",
    "\u0007\u0090\u0002\u0002\u074f\u0754\u0003\u0002\u0002\u0002\u0750\u0754",
    "\u0005\u0018\r\u0002\u0751\u0754\u0005\u0010\t\u0002\u0752\u0754\u0005",
    "\u0126\u0094\u0002\u0753\u074a\u0003\u0002\u0002\u0002\u0753\u074b\u0003",
    "\u0002\u0002\u0002\u0753\u074c\u0003\u0002\u0002\u0002\u0753\u0750\u0003",
    "\u0002\u0002\u0002\u0753\u0751\u0003\u0002\u0002\u0002\u0753\u0752\u0003",
    "\u0002\u0002\u0002\u0754\u015b\u0003\u0002\u0002\u0002\u0755\u0759\u0005",
    "\u00a8U\u0002\u0756\u0759\u0005t;\u0002\u0757\u0759\u0005\u0148\u00a5",
    "\u0002\u0758\u0755\u0003\u0002\u0002\u0002\u0758\u0756\u0003\u0002\u0002",
    "\u0002\u0758\u0757\u0003\u0002\u0002\u0002\u0759\u015d\u0003\u0002\u0002",
    "\u0002\u075a\u0767\u0005\u01c8\u00e5\u0002\u075b\u0767\u0005\u01c6\u00e4",
    "\u0002\u075c\u0767\u0005\u01ec\u00f7\u0002\u075d\u0767\u0005\u01d8\u00ed",
    "\u0002\u075e\u0767\u0005~@\u0002\u075f\u0767\u0005\u01f8\u00fd\u0002",
    "\u0760\u0767\u0005\u0012\n\u0002\u0761\u0767\u0005.\u0018\u0002\u0762",
    "\u0767\u00052\u001a\u0002\u0763\u0767\u0005\u01f4\u00fb\u0002\u0764",
    "\u0767\u0005\u00e4s\u0002\u0765\u0767\u0005\u00e2r\u0002\u0766\u075a",
    "\u0003\u0002\u0002\u0002\u0766\u075b\u0003\u0002\u0002\u0002\u0766\u075c",
    "\u0003\u0002\u0002\u0002\u0766\u075d\u0003\u0002\u0002\u0002\u0766\u075e",
    "\u0003\u0002\u0002\u0002\u0766\u075f\u0003\u0002\u0002\u0002\u0766\u0760",
    "\u0003\u0002\u0002\u0002\u0766\u0761\u0003\u0002\u0002\u0002\u0766\u0762",
    "\u0003\u0002\u0002\u0002\u0766\u0763\u0003\u0002\u0002\u0002\u0766\u0764",
    "\u0003\u0002\u0002\u0002\u0766\u0765\u0003\u0002\u0002\u0002\u0767\u015f",
    "\u0003\u0002\u0002\u0002\u0768\u076a\u0005\u015e\u00b0\u0002\u0769\u0768",
    "\u0003\u0002\u0002\u0002\u076a\u076d\u0003\u0002\u0002\u0002\u076b\u0769",
    "\u0003\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002\u0002\u076c\u0161",
    "\u0003\u0002\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002\u076e\u0770",
    "\u0005\u019c\u00cf\u0002\u076f\u076e\u0003\u0002\u0002\u0002\u0770\u0773",
    "\u0003\u0002\u0002\u0002\u0771\u076f\u0003\u0002\u0002\u0002\u0771\u0772",
    "\u0003\u0002\u0002\u0002\u0772\u0163\u0003\u0002\u0002\u0002\u0773\u0771",
    "\u0003\u0002\u0002\u0002\u0774\u0779\u0005\u012a\u0096\u0002\u0775\u0776",
    "\u0007\u008f\u0002\u0002\u0776\u0777\u0005\n\u0006\u0002\u0777\u0778",
    "\u0007\u0090\u0002\u0002\u0778\u077a\u0003\u0002\u0002\u0002\u0779\u0775",
    "\u0003\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u0165",
    "\u0003\u0002\u0002\u0002\u077b\u077d\u0005\u0112\u008a\u0002\u077c\u077b",
    "\u0003\u0002\u0002\u0002\u077c\u077d\u0003\u0002\u0002\u0002\u077d\u077e",
    "\u0003\u0002\u0002\u0002\u077e\u077f\u0005\u0164\u00b3\u0002\u077f\u0780",
    "\u0007\u008c\u0002\u0002\u0780\u0167\u0003\u0002\u0002\u0002\u0781\u078f",
    "\u0005\u01c8\u00e5\u0002\u0782\u078f\u0005\u01c6\u00e4\u0002\u0783\u078f",
    "\u0005\u01ec\u00f7\u0002\u0784\u078f\u0005\u01d8\u00ed\u0002\u0785\u078f",
    "\u0005~@\u0002\u0786\u078f\u0005\u01f8\u00fd\u0002\u0787\u078f\u0005",
    "\u00c6d\u0002\u0788\u078f\u0005\u0012\n\u0002\u0789\u078f\u0005.\u0018",
    "\u0002\u078a\u078f\u00052\u001a\u0002\u078b\u078f\u0005\u01f4\u00fb",
    "\u0002\u078c\u078f\u0005\u00e4s\u0002\u078d\u078f\u0005\u00e2r\u0002",
    "\u078e\u0781\u0003\u0002\u0002\u0002\u078e\u0782\u0003\u0002\u0002\u0002",
    "\u078e\u0783\u0003\u0002\u0002\u0002\u078e\u0784\u0003\u0002\u0002\u0002",
    "\u078e\u0785\u0003\u0002\u0002\u0002\u078e\u0786\u0003\u0002\u0002\u0002",
    "\u078e\u0787\u0003\u0002\u0002\u0002\u078e\u0788\u0003\u0002\u0002\u0002",
    "\u078e\u0789\u0003\u0002\u0002\u0002\u078e\u078a\u0003\u0002\u0002\u0002",
    "\u078e\u078b\u0003\u0002\u0002\u0002\u078e\u078c\u0003\u0002\u0002\u0002",
    "\u078e\u078d\u0003\u0002\u0002\u0002\u078f\u0169\u0003\u0002\u0002\u0002",
    "\u0790\u0792\u0005\u0168\u00b5\u0002\u0791\u0790\u0003\u0002\u0002\u0002",
    "\u0792\u0795\u0003\u0002\u0002\u0002\u0793\u0791\u0003\u0002\u0002\u0002",
    "\u0793\u0794\u0003\u0002\u0002\u0002\u0794\u016b\u0003\u0002\u0002\u0002",
    "\u0795\u0793\u0003\u0002\u0002\u0002\u0796\u0798\u0005\u0112\u008a\u0002",
    "\u0797\u0796\u0003\u0002\u0002\u0002\u0797\u0798\u0003\u0002\u0002\u0002",
    "\u0798\u079a\u0003\u0002\u0002\u0002\u0799\u079b\u0007D\u0002\u0002",
    "\u079a\u0799\u0003\u0002\u0002\u0002\u079a\u079b\u0003\u0002\u0002\u0002",
    "\u079b\u079c\u0003\u0002\u0002\u0002\u079c\u07a1\u0007E\u0002\u0002",
    "\u079d\u079e\u0007\u008f\u0002\u0002\u079e\u079f\u0005\u0198\u00cd\u0002",
    "\u079f\u07a0\u0007\u0090\u0002\u0002\u07a0\u07a2\u0003\u0002\u0002\u0002",
    "\u07a1\u079d\u0003\u0002\u0002\u0002\u07a1\u07a2\u0003\u0002\u0002\u0002",
    "\u07a2\u07a4\u0003\u0002\u0002\u0002\u07a3\u07a5\u0007+\u0002\u0002",
    "\u07a4\u07a3\u0003\u0002\u0002\u0002\u07a4\u07a5\u0003\u0002\u0002\u0002",
    "\u07a5\u07a6\u0003\u0002\u0002\u0002\u07a6\u07a7\u0005\u016a\u00b6\u0002",
    "\u07a7\u07a8\u0007\u000e\u0002\u0002\u07a8\u07a9\u0005\u016e\u00b8\u0002",
    "\u07a9\u07ab\u0007\u001a\u0002\u0002\u07aa\u07ac\u0007D\u0002\u0002",
    "\u07ab\u07aa\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002",
    "\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad\u07af\u0007E\u0002\u0002",
    "\u07ae\u07b0\u0005\u00e8u\u0002\u07af\u07ae\u0003\u0002\u0002\u0002",
    "\u07af\u07b0\u0003\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002",
    "\u07b1\u07b2\u0007\u008c\u0002\u0002\u07b2\u016d\u0003\u0002\u0002\u0002",
    "\u07b3\u07b5\u0005\u019c\u00cf\u0002\u07b4\u07b3\u0003\u0002\u0002\u0002",
    "\u07b5\u07b8\u0003\u0002\u0002\u0002\u07b6\u07b4\u0003\u0002\u0002\u0002",
    "\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7\u016f\u0003\u0002\u0002\u0002",
    "\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b9\u07ba\u0005\u01da\u00ee\u0002",
    "\u07ba\u07c0\u0007\u00a4\u0002\u0002\u07bb\u07c1\u0005\u0010\t\u0002",
    "\u07bc\u07bd\u0007\u008f\u0002\u0002\u07bd\u07be\u0005\u00c2b\u0002",
    "\u07be\u07bf\u0007\u0090\u0002\u0002\u07bf\u07c1\u0003\u0002\u0002\u0002",
    "\u07c0\u07bb\u0003\u0002\u0002\u0002\u07c0\u07bc\u0003\u0002\u0002\u0002",
    "\u07c1\u0171\u0003\u0002\u0002\u0002\u07c2\u07c6\u0005\u00d2j\u0002",
    "\u07c3\u07c6\u0005F$\u0002\u07c4\u07c6\u0005\u01be\u00e0\u0002\u07c5",
    "\u07c2\u0003\u0002\u0002\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002\u07c5",
    "\u07c4\u0003\u0002\u0002\u0002\u07c6\u0173\u0003\u0002\u0002\u0002\u07c7",
    "\u07cc\u0005\u0126\u0094\u0002\u07c8\u07c9\u0007\u008d\u0002\u0002\u07c9",
    "\u07cb\u0005\u0126\u0094\u0002\u07ca\u07c8\u0003\u0002\u0002\u0002\u07cb",
    "\u07ce\u0003\u0002\u0002\u0002\u07cc\u07ca\u0003\u0002\u0002\u0002\u07cc",
    "\u07cd\u0003\u0002\u0002\u0002\u07cd\u07d2\u0003\u0002\u0002\u0002\u07ce",
    "\u07cc\u0003\u0002\u0002\u0002\u07cf\u07d2\u0007@\u0002\u0002\u07d0",
    "\u07d2\u0007\b\u0002\u0002\u07d1\u07c7\u0003\u0002\u0002\u0002\u07d1",
    "\u07cf\u0003\u0002\u0002\u0002\u07d1\u07d0\u0003\u0002\u0002\u0002\u07d2",
    "\u0175\u0003\u0002\u0002\u0002\u07d3\u07d4\u0005\u0174\u00bb\u0002\u07d4",
    "\u07d5\u0007\u0093\u0002\u0002\u07d5\u07d6\u0005\u0126\u0094\u0002\u07d6",
    "\u0177\u0003\u0002\u0002\u0002\u07d7\u07da\u0005\u017a\u00be\u0002\u07d8",
    "\u07da\u0005\u0126\u0094\u0002\u07d9\u07d7\u0003\u0002\u0002\u0002\u07d9",
    "\u07d8\u0003\u0002\u0002\u0002\u07da\u0179\u0003\u0002\u0002\u0002\u07db",
    "\u07df\u0005\u01ac\u00d7\u0002\u07dc\u07dd\u0005\u0092J\u0002\u07dd",
    "\u07de\u0005\u01ac\u00d7\u0002\u07de\u07e0\u0003\u0002\u0002\u0002\u07df",
    "\u07dc\u0003\u0002\u0002\u0002\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0",
    "\u017b\u0003\u0002\u0002\u0002\u07e1\u07e2\u0007J\u0002\u0002\u07e2",
    "\u07e3\u0005\u0178\u00bd\u0002\u07e3\u017d\u0003\u0002\u0002\u0002\u07e4",
    "\u07e6\u0007N\u0002\u0002\u07e5\u07e7\u0005\u0138\u009d\u0002\u07e6",
    "\u07e5\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003\u0002\u0002\u0002\u07e8",
    "\u07e6\u0003\u0002\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002\u07e9",
    "\u07ea\u0003\u0002\u0002\u0002\u07ea\u07eb\u0007\u001a\u0002\u0002\u07eb",
    "\u07ed\u0007N\u0002\u0002\u07ec\u07ee\u0005\u00e8u\u0002\u07ed\u07ec",
    "\u0003\u0002\u0002\u0002\u07ed\u07ee\u0003\u0002\u0002\u0002\u07ee\u017f",
    "\u0003\u0002\u0002\u0002\u07ef\u07f1\u0007N\u0002\u0002\u07f0\u07f2",
    "\u0005\u009aN\u0002\u07f1\u07f0\u0003\u0002\u0002\u0002\u07f2\u07f3",
    "\u0003\u0002\u0002\u0002\u07f3\u07f1\u0003\u0002\u0002\u0002\u07f3\u07f4",
    "\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f6",
    "\u0007\u001a\u0002\u0002\u07f6\u07f8\u0007N\u0002\u0002\u07f7\u07f9",
    "\u0005\u00e8u\u0002\u07f8\u07f7\u0003\u0002\u0002\u0002\u07f8\u07f9",
    "\u0003\u0002\u0002\u0002\u07f9\u0181\u0003\u0002\u0002\u0002\u07fa\u07fe",
    "\u0005\u019e\u00d0\u0002\u07fb\u07fc\u0005\u0184\u00c3\u0002\u07fc\u07fd",
    "\u0005\u019e\u00d0\u0002\u07fd\u07ff\u0003\u0002\u0002\u0002\u07fe\u07fb",
    "\u0003\u0002\u0002\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0183",
    "\u0003\u0002\u0002\u0002\u0800\u0801\t\u000b\u0002\u0002\u0801\u0185",
    "\u0003\u0002\u0002\u0002\u0802\u0804\u0005\u0112\u008a\u0002\u0803\u0802",
    "\u0003\u0002\u0002\u0002\u0803\u0804\u0003\u0002\u0002\u0002\u0804\u0805",
    "\u0003\u0002\u0002\u0002\u0805\u0806\u0007Q\u0002\u0002\u0806\u0809",
    "\u0005\u00c2b\u0002\u0807\u0808\u0007V\u0002\u0002\u0808\u080a\u0005",
    "\u00c2b\u0002\u0809\u0807\u0003\u0002\u0002\u0002\u0809\u080a\u0003",
    "\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b\u080c\u0007",
    "\u008c\u0002\u0002\u080c\u0187\u0003\u0002\u0002\u0002\u080d\u080f\u0005",
    "\u0112\u008a\u0002\u080e\u080d\u0003\u0002\u0002\u0002\u080e\u080f\u0003",
    "\u0002\u0002\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0812\u0007",
    "R\u0002\u0002\u0811\u0813\u0005\u00c2b\u0002\u0812\u0811\u0003\u0002",
    "\u0002\u0002\u0812\u0813\u0003\u0002\u0002\u0002\u0813\u0814\u0003\u0002",
    "\u0002\u0002\u0814\u0815\u0007\u008c\u0002\u0002\u0815\u0189\u0003\u0002",
    "\u0002\u0002\u0816\u0817\u0005\u0126\u0094\u0002\u0817\u0818\u0007\u0005",
    "\u0002\u0002\u0818\u0819\u0005\u0126\u0094\u0002\u0819\u081a\u0007b",
    "\u0002\u0002\u081a\u081b\u0005\u0126\u0094\u0002\u081b\u081c\u0007O",
    "\u0002\u0002\u081c\u018b\u0003\u0002\u0002\u0002\u081d\u0821\u0005\u0152",
    "\u00aa\u0002\u081e\u0821\u0005\u00be`\u0002\u081f\u0821\u0005\u017c",
    "\u00bf\u0002\u0820\u081d\u0003\u0002\u0002\u0002\u0820\u081e\u0003\u0002",
    "\u0002\u0002\u0820\u081f\u0003\u0002\u0002\u0002\u0821\u018d\u0003\u0002",
    "\u0002\u0002\u0822\u0825\u0005\u001a\u000e\u0002\u0823\u0825\u0005\u0142",
    "\u00a2\u0002\u0824\u0822\u0003\u0002\u0002\u0002\u0824\u0823\u0003\u0002",
    "\u0002\u0002\u0825\u018f\u0003\u0002\u0002\u0002\u0826\u0827\u0005\u00e8",
    "u\u0002\u0827\u0828\u0007\u009a\u0002\u0002\u0828\u0829\u0005\u0150",
    "\u00a9\u0002\u0829\u082a\u0007\u008c\u0002\u0002\u082a\u0191\u0003\u0002",
    "\u0002\u0002\u082b\u082c\u0007m\u0002\u0002\u082c\u082d\u0005\u00c2",
    "b\u0002\u082d\u082e\u0007U\u0002\u0002\u082e\u082f\u0005\u01de\u00f0",
    "\u0002\u082f\u0830\u0007\u0085\u0002\u0002\u0830\u0831\u0005\u0140\u00a1",
    "\u0002\u0831\u0832\u0005\u0194\u00cb\u0002\u0832\u0833\u0007\u008c\u0002",
    "\u0002\u0833\u0193\u0003\u0002\u0002\u0002\u0834\u0835\u0005\u01fc\u00ff",
    "\u0002\u0835\u0836\u0007n\u0002\u0002\u0836\u083e\u0005V,\u0002\u0837",
    "\u0838\u0007\u008d\u0002\u0002\u0838\u0839\u0005\u01fc\u00ff\u0002\u0839",
    "\u083a\u0007n\u0002\u0002\u083a\u083b\u0005V,\u0002\u083b\u083d\u0003",
    "\u0002\u0002\u0002\u083c\u0837\u0003\u0002\u0002\u0002\u083d\u0840\u0003",
    "\u0002\u0002\u0002\u083e\u083c\u0003\u0002\u0002\u0002\u083e\u083f\u0003",
    "\u0002\u0002\u0002\u083f\u0195\u0003\u0002\u0002\u0002\u0840\u083e\u0003",
    "\u0002\u0002\u0002\u0841\u0842\u0007=\u0002\u0002\u0842\u0843\u0005",
    "\u0198\u00cd\u0002\u0843\u0197\u0003\u0002\u0002\u0002\u0844\u0849\u0005",
    "\u0126\u0094\u0002\u0845\u0846\u0007\u008d\u0002\u0002\u0846\u0848\u0005",
    "\u0126\u0094\u0002\u0847\u0845\u0003\u0002\u0002\u0002\u0848\u084b\u0003",
    "\u0002\u0002\u0002\u0849\u0847\u0003\u0002\u0002\u0002\u0849\u084a\u0003",
    "\u0002\u0002\u0002\u084a\u0199\u0003\u0002\u0002\u0002\u084b\u0849\u0003",
    "\u0002\u0002\u0002\u084c\u084e\u0005\u019c\u00cf\u0002\u084d\u084c\u0003",
    "\u0002\u0002\u0002\u084e\u0851\u0003\u0002\u0002\u0002\u084f\u084d\u0003",
    "\u0002\u0002\u0002\u084f\u0850\u0003\u0002\u0002\u0002\u0850\u019b\u0003",
    "\u0002\u0002\u0002\u0851\u084f\u0003\u0002\u0002\u0002\u0852\u0865\u0005",
    "\u01fa\u00fe\u0002\u0853\u0865\u0005(\u0015\u0002\u0854\u0865\u0005",
    "\u0186\u00c4\u0002\u0855\u0865\u0005\u01a2\u00d2\u0002\u0856\u0865\u0005",
    "\u01f6\u00fc\u0002\u0857\u0865\u0005\u00ecw\u0002\u0858\u0865\u0005",
    "P)\u0002\u0859\u0865\u0005\u0120\u0091\u0002\u085a\u0865\u0005\u013a",
    "\u009e\u0002\u085b\u0865\u0005\u00c0a\u0002\u085c\u0865\u0005\u0188",
    "\u00c5\u0002\u085d\u085f\u0005\u0112\u008a\u0002\u085e\u085d\u0003\u0002",
    "\u0002\u0002\u085e\u085f\u0003\u0002\u0002\u0002\u085f\u0860\u0003\u0002",
    "\u0002\u0002\u0860\u0861\u0007;\u0002\u0002\u0861\u0865\u0007\u008c",
    "\u0002\u0002\u0862\u0865\u0005N(\u0002\u0863\u0865\u0005\u0166\u00b4",
    "\u0002\u0864\u0852\u0003\u0002\u0002\u0002\u0864\u0853\u0003\u0002\u0002",
    "\u0002\u0864\u0854\u0003\u0002\u0002\u0002\u0864\u0855\u0003\u0002\u0002",
    "\u0002\u0864\u0856\u0003\u0002\u0002\u0002\u0864\u0857\u0003\u0002\u0002",
    "\u0002\u0864\u0858\u0003\u0002\u0002\u0002\u0864\u0859\u0003\u0002\u0002",
    "\u0002\u0864\u085a\u0003\u0002\u0002\u0002\u0864\u085b\u0003\u0002\u0002",
    "\u0002\u0864\u085c\u0003\u0002\u0002\u0002\u0864\u085e\u0003\u0002\u0002",
    "\u0002\u0864\u0862\u0003\u0002\u0002\u0002\u0864\u0863\u0003\u0002\u0002",
    "\u0002\u0865\u019d\u0003\u0002\u0002\u0002\u0866\u086a\u0005\u01ac\u00d7",
    "\u0002\u0867\u0868\u0005\u01a0\u00d1\u0002\u0868\u0869\u0005\u01ac\u00d7",
    "\u0002\u0869\u086b\u0003\u0002\u0002\u0002\u086a\u0867\u0003\u0002\u0002",
    "\u0002\u086a\u086b\u0003\u0002\u0002\u0002\u086b\u019f\u0003\u0002\u0002",
    "\u0002\u086c\u086d\t\f\u0002\u0002\u086d\u01a1\u0003\u0002\u0002\u0002",
    "\u086e\u0870\u0005\u0112\u008a\u0002\u086f\u086e\u0003\u0002\u0002\u0002",
    "\u086f\u0870\u0003\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002",
    "\u0871\u0872\u0005\u01de\u00f0\u0002\u0872\u0874\u0007\u0085\u0002\u0002",
    "\u0873\u0875\u0005\u008aF\u0002\u0874\u0873\u0003\u0002\u0002\u0002",
    "\u0874\u0875\u0003\u0002\u0002\u0002\u0875\u0876\u0003\u0002\u0002\u0002",
    "\u0876\u0877\u0005\u01fc\u00ff\u0002\u0877\u0878\u0007\u008c\u0002\u0002",
    "\u0878\u01a3\u0003\u0002\u0002\u0002\u0879\u087a\u0007X\u0002\u0002",
    "\u087a\u087b\u0005\u00eav\u0002\u087b\u087c\u0007\u0093\u0002\u0002",
    "\u087c\u087e\u0005\u01da\u00ee\u0002\u087d\u087f\u0005\u01a6\u00d4\u0002",
    "\u087e\u087d\u0003\u0002\u0002\u0002\u087e\u087f\u0003\u0002\u0002\u0002",
    "\u087f\u0882\u0003\u0002\u0002\u0002\u0880\u0881\u0007\u0089\u0002\u0002",
    "\u0881\u0883\u0005\u00c2b\u0002\u0882\u0880\u0003\u0002\u0002\u0002",
    "\u0882\u0883\u0003\u0002\u0002\u0002\u0883\u0884\u0003\u0002\u0002\u0002",
    "\u0884\u0885\u0007\u008c\u0002\u0002\u0885\u01a5\u0003\u0002\u0002\u0002",
    "\u0886\u0887\t\r\u0002\u0002\u0887\u01a7\u0003\u0002\u0002\u0002\u0888",
    "\u088d\u0005\u0126\u0094\u0002\u0889\u088a\u0007\u008d\u0002\u0002\u088a",
    "\u088c\u0005\u0126\u0094\u0002\u088b\u0889\u0003\u0002\u0002\u0002\u088c",
    "\u088f\u0003\u0002\u0002\u0002\u088d\u088b\u0003\u0002\u0002\u0002\u088d",
    "\u088e\u0003\u0002\u0002\u0002\u088e\u0893\u0003\u0002\u0002\u0002\u088f",
    "\u088d\u0003\u0002\u0002\u0002\u0890\u0893\u0007@\u0002\u0002\u0891",
    "\u0893\u0007\b\u0002\u0002\u0892\u0888\u0003\u0002\u0002\u0002\u0892",
    "\u0890\u0003\u0002\u0002\u0002\u0892\u0891\u0003\u0002\u0002\u0002\u0893",
    "\u01a9\u0003\u0002\u0002\u0002\u0894\u089d\u0007\u0091\u0002\u0002\u0895",
    "\u089a\u0005\u0126\u0094\u0002\u0896\u0897\u0007\u008d\u0002\u0002\u0897",
    "\u0899\u0005\u0126\u0094\u0002\u0898\u0896\u0003\u0002\u0002\u0002\u0899",
    "\u089c\u0003\u0002\u0002\u0002\u089a\u0898\u0003\u0002\u0002\u0002\u089a",
    "\u089b\u0003\u0002\u0002\u0002\u089b\u089e\u0003\u0002\u0002\u0002\u089c",
    "\u089a\u0003\u0002\u0002\u0002\u089d\u0895\u0003\u0002\u0002\u0002\u089d",
    "\u089e\u0003\u0002\u0002\u0002\u089e\u08a1\u0003\u0002\u0002\u0002\u089f",
    "\u08a0\u0007R\u0002\u0002\u08a0\u08a2\u0005\u0126\u0094\u0002\u08a1",
    "\u089f\u0003\u0002\u0002\u0002\u08a1\u08a2\u0003\u0002\u0002\u0002\u08a2",
    "\u08a3\u0003\u0002\u0002\u0002\u08a3\u08a4\u0007\u0092\u0002\u0002\u08a4",
    "\u01ab\u0003\u0002\u0002\u0002\u08a5\u08a7\t\u000e\u0002\u0002\u08a6",
    "\u08a5\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002\u0002\u0002\u08a7",
    "\u08a8\u0003\u0002\u0002\u0002\u08a8\u08ae\u0005\u01e0\u00f1\u0002\u08a9",
    "\u08aa\u0005\u000e\b\u0002\u08aa\u08ab\u0005\u01e0\u00f1\u0002\u08ab",
    "\u08ad\u0003\u0002\u0002\u0002\u08ac\u08a9\u0003\u0002\u0002\u0002\u08ad",
    "\u08b0\u0003\u0002\u0002\u0002\u08ae\u08ac\u0003\u0002\u0002\u0002\u08ae",
    "\u08af\u0003\u0002\u0002\u0002\u08af\u01ad\u0003\u0002\u0002\u0002\u08b0",
    "\u08ae\u0003\u0002\u0002\u0002\u08b1\u08b3\u0005\u0112\u008a\u0002\u08b2",
    "\u08b1\u0003\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3",
    "\u08b4\u0003\u0002\u0002\u0002\u08b4\u08b5\u0005\u01ac\u00d7\u0002\u08b5",
    "\u08b6\u0007\u0084\u0002\u0002\u08b6\u08b8\u0005\u01ac\u00d7\u0002\u08b7",
    "\u08b9\u0005\u01ea\u00f6\u0002\u08b8\u08b7\u0003\u0002\u0002\u0002\u08b8",
    "\u08b9\u0003\u0002\u0002\u0002\u08b9\u08ba\u0003\u0002\u0002\u0002\u08ba",
    "\u08bb\u0007\u008c\u0002\u0002\u08bb\u01af\u0003\u0002\u0002\u0002\u08bc",
    "\u08bd\u0007n\u0002\u0002\u08bd\u08be\u0005V,\u0002\u08be\u08bf\u0007",
    "\u0087\u0002\u0002\u08bf\u08c0\u0005\u01ba\u00de\u0002\u08c0\u01b1\u0003",
    "\u0002\u0002\u0002\u08c1\u08c3\u0005\u0112\u008a\u0002\u08c2\u08c1\u0003",
    "\u0002\u0002\u0002\u08c2\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003",
    "\u0002\u0002\u0002\u08c4\u08c5\u0007\u0014\u0002\u0002\u08c5\u08c6\u0005",
    "\u00c2b\u0002\u08c6\u08c8\u0007j\u0002\u0002\u08c7\u08c9\u0005\u01b0",
    "\u00d9\u0002\u08c8\u08c7\u0003\u0002\u0002\u0002\u08c9\u08ca\u0003\u0002",
    "\u0002\u0002\u08ca\u08c8\u0003\u0002\u0002\u0002\u08ca\u08cb\u0003\u0002",
    "\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002\u08cc\u08cd\u0007\u001a",
    "\u0002\u0002\u08cd\u08cf\u0007\u0014\u0002\u0002\u08ce\u08d0\u0005\u00e8",
    "u\u0002\u08cf\u08ce\u0003\u0002\u0002\u0002\u08cf\u08d0\u0003\u0002",
    "\u0002\u0002\u08d0\u08d1\u0003\u0002\u0002\u0002\u08d1\u08d2\u0007\u008c",
    "\u0002\u0002\u08d2\u01b3\u0003\u0002\u0002\u0002\u08d3\u08d5\u0005\u0112",
    "\u008a\u0002\u08d4\u08d3\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003\u0002",
    "\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002\u0002\u08d6\u08d7\u0007&",
    "\u0002\u0002\u08d7\u08d8\u0005l7\u0002\u08d8\u08d9\u0007j\u0002\u0002",
    "\u08d9\u08e1\u0005\u01ba\u00de\u0002\u08da\u08db\u0007\u001d\u0002\u0002",
    "\u08db\u08dc\u0005l7\u0002\u08dc\u08dd\u0007j\u0002\u0002\u08dd\u08de",
    "\u0005\u01ba\u00de\u0002\u08de\u08e0\u0003\u0002\u0002\u0002\u08df\u08da",
    "\u0003\u0002\u0002\u0002\u08e0\u08e3\u0003\u0002\u0002\u0002\u08e1\u08df",
    "\u0003\u0002\u0002\u0002\u08e1\u08e2\u0003\u0002\u0002\u0002\u08e2\u08e6",
    "\u0003\u0002\u0002\u0002\u08e3\u08e1\u0003\u0002\u0002\u0002\u08e4\u08e5",
    "\u0007\u001c\u0002\u0002\u08e5\u08e7\u0005\u01ba\u00de\u0002\u08e6\u08e4",
    "\u0003\u0002\u0002\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7\u08e8",
    "\u0003\u0002\u0002\u0002\u08e8\u08e9\u0007\u001a\u0002\u0002\u08e9\u08eb",
    "\u0007j\u0002\u0002\u08ea\u08ec\u0005\u00e8u\u0002\u08eb\u08ea\u0003",
    "\u0002\u0002\u0002\u08eb\u08ec\u0003\u0002\u0002\u0002\u08ec\u08ed\u0003",
    "\u0002\u0002\u0002\u08ed\u08ee\u0007\u008c\u0002\u0002\u08ee\u01b5\u0003",
    "\u0002\u0002\u0002\u08ef\u08f1\u0005\u0112\u008a\u0002\u08f0\u08ef\u0003",
    "\u0002\u0002\u0002\u08f0\u08f1\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003",
    "\u0002\u0002\u0002\u08f2\u08f4\u0007G\u0002\u0002\u08f3\u08f5\u0007",
    "+\u0002\u0002\u08f4\u08f3\u0003\u0002\u0002\u0002\u08f4\u08f5\u0003",
    "\u0002\u0002\u0002\u08f5\u08f6\u0003\u0002\u0002\u0002\u08f6\u08f7\u0005",
    "\u0160\u00b1\u0002\u08f7\u08f8\u0007\u000e\u0002\u0002\u08f8\u08f9\u0005",
    "\u0162\u00b2\u0002\u08f9\u08fa\u0007\u001a\u0002\u0002\u08fa\u08fc\u0007",
    "G\u0002\u0002\u08fb\u08fd\u0005\u00e8u\u0002\u08fc\u08fb\u0003\u0002",
    "\u0002\u0002\u08fc\u08fd\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002",
    "\u0002\u0002\u08fe\u08ff\u0007\u008c\u0002\u0002\u08ff\u01b7\u0003\u0002",
    "\u0002\u0002\u0900\u090a\u0005\u01ae\u00d8\u0002\u0901\u090a\u0005\u01b4",
    "\u00db\u0002\u0902\u090a\u0005\u01b2\u00da\u0002\u0903\u090a\u0005\u01b6",
    "\u00dc\u0002\u0904\u0906\u0005\u0112\u008a\u0002\u0905\u0904\u0003\u0002",
    "\u0002\u0002\u0905\u0906\u0003\u0002\u0002\u0002\u0906\u0907\u0003\u0002",
    "\u0002\u0002\u0907\u0908\u0007;\u0002\u0002\u0908\u090a\u0007\u008c",
    "\u0002\u0002\u0909\u0900\u0003\u0002\u0002\u0002\u0909\u0901\u0003\u0002",
    "\u0002\u0002\u0909\u0902\u0003\u0002\u0002\u0002\u0909\u0903\u0003\u0002",
    "\u0002\u0002\u0909\u0905\u0003\u0002\u0002\u0002\u090a\u01b9\u0003\u0002",
    "\u0002\u0002\u090b\u090d\u0005\u01b8\u00dd\u0002\u090c\u090b\u0003\u0002",
    "\u0002\u0002\u090d\u0910\u0003\u0002\u0002\u0002\u090e\u090c\u0003\u0002",
    "\u0002\u0002\u090e\u090f\u0003\u0002\u0002\u0002\u090f\u01bb\u0003\u0002",
    "\u0002\u0002\u0910\u090e\u0003\u0002\u0002\u0002\u0911\u0912\u0007[",
    "\u0002\u0002\u0912\u0913\u0005\u01ac\u00d7\u0002\u0913\u0914\u0007\u008d",
    "\u0002\u0002\u0914\u0915\u0005\u01ac\u00d7\u0002\u0915\u0919\u0003\u0002",
    "\u0002\u0002\u0916\u0917\u00078\u0002\u0002\u0917\u0919\u0005\u01ac",
    "\u00d7\u0002\u0918\u0911\u0003\u0002\u0002\u0002\u0918\u0916\u0003\u0002",
    "\u0002\u0002\u0919\u01bd\u0003\u0002\u0002\u0002\u091a\u091b\u0007I",
    "\u0002\u0002\u091b\u091c\u0005\u00eav\u0002\u091c\u091d\u0007\u0093",
    "\u0002\u0002\u091d\u091e\u0005\u01da\u00ee\u0002\u091e\u091f\u0005\u01bc",
    "\u00df\u0002\u091f\u0920\u0007\u008c\u0002\u0002\u0920\u01bf\u0003\u0002",
    "\u0002\u0002\u0921\u0922\u0007.\u0002\u0002\u0922\u0923\u0005\u0176",
    "\u00bc\u0002\u0923\u0924\u0007m\u0002\u0002\u0924\u0925\u0005\u00c2",
    "b\u0002\u0925\u0926\u0007\u008c\u0002\u0002\u0926\u01c1\u0003\u0002",
    "\u0002\u0002\u0927\u0928\u0007^\u0002\u0002\u0928\u0929\u0005\u00e8",
    "u\u0002\u0929\u092a\u0007+\u0002\u0002\u092a\u092b\u0005\u01c4\u00e3",
    "\u0002\u092b\u092c\u0007\u008c\u0002\u0002\u092c\u01c3\u0003\u0002\u0002",
    "\u0002\u092d\u092f\u0005\u0126\u0094\u0002\u092e\u0930\u0005\u00eex",
    "\u0002\u092f\u092e\u0003\u0002\u0002\u0002\u092f\u0930\u0003\u0002\u0002",
    "\u0002\u0930\u0937\u0003\u0002\u0002\u0002\u0931\u0932\u0007d\u0002",
    "\u0002\u0932\u0933\u0005\u00c2b\u0002\u0933\u0934\u0007\u0005\u0002",
    "\u0002\u0934\u0935\u0005\u00c2b\u0002\u0935\u0936\u0007b\u0002\u0002",
    "\u0936\u0938\u0003\u0002\u0002\u0002\u0937\u0931\u0003\u0002\u0002\u0002",
    "\u0937\u0938\u0003\u0002\u0002\u0002\u0938\u01c5\u0003\u0002\u0002\u0002",
    "\u0939\u093a\u0005\u01d0\u00e9\u0002\u093a\u093b\u0007+\u0002\u0002",
    "\u093b\u093c\u0005\u01cc\u00e7\u0002\u093c\u093d\u0007\u000e\u0002\u0002",
    "\u093d\u093e\u0005\u01d6\u00ec\u0002\u093e\u0940\u0007\u001a\u0002\u0002",
    "\u093f\u0941\u0005\u01ce\u00e8\u0002\u0940\u093f\u0003\u0002\u0002\u0002",
    "\u0940\u0941\u0003\u0002\u0002\u0002\u0941\u0943\u0003\u0002\u0002\u0002",
    "\u0942\u0944\u0005\u0090I\u0002\u0943\u0942\u0003\u0002\u0002\u0002",
    "\u0943\u0944\u0003\u0002\u0002\u0002\u0944\u0945\u0003\u0002\u0002\u0002",
    "\u0945\u0946\u0007\u008c\u0002\u0002\u0946\u01c7\u0003\u0002\u0002\u0002",
    "\u0947\u0948\u0005\u01d0\u00e9\u0002\u0948\u0949\u0007\u008c\u0002\u0002",
    "\u0949\u01c9\u0003\u0002\u0002\u0002\u094a\u0958\u0005\u01c8\u00e5\u0002",
    "\u094b\u0958\u0005\u01c6\u00e4\u0002\u094c\u0958\u0005\u01ec\u00f7\u0002",
    "\u094d\u0958\u0005\u01d8\u00ed\u0002\u094e\u0958\u0005~@\u0002\u094f",
    "\u0958\u0005\u01f8\u00fd\u0002\u0950\u0958\u0005\u00c6d\u0002\u0951",
    "\u0958\u0005\u0012\n\u0002\u0952\u0958\u0005.\u0018\u0002\u0953\u0958",
    "\u00052\u001a\u0002\u0954\u0958\u0005\u01f4\u00fb\u0002\u0955\u0958",
    "\u0005\u00e4s\u0002\u0956\u0958\u0005\u00e2r\u0002\u0957\u094a\u0003",
    "\u0002\u0002\u0002\u0957\u094b\u0003\u0002\u0002\u0002\u0957\u094c\u0003",
    "\u0002\u0002\u0002\u0957\u094d\u0003\u0002\u0002\u0002\u0957\u094e\u0003",
    "\u0002\u0002\u0002\u0957\u094f\u0003\u0002\u0002\u0002\u0957\u0950\u0003",
    "\u0002\u0002\u0002\u0957\u0951\u0003\u0002\u0002\u0002\u0957\u0952\u0003",
    "\u0002\u0002\u0002\u0957\u0953\u0003\u0002\u0002\u0002\u0957\u0954\u0003",
    "\u0002\u0002\u0002\u0957\u0955\u0003\u0002\u0002\u0002\u0957\u0956\u0003",
    "\u0002\u0002\u0002\u0958\u01cb\u0003\u0002\u0002\u0002\u0959\u095b\u0005",
    "\u01ca\u00e6\u0002\u095a\u0959\u0003\u0002\u0002\u0002\u095b\u095e\u0003",
    "\u0002\u0002\u0002\u095c\u095a\u0003\u0002\u0002\u0002\u095c\u095d\u0003",
    "\u0002\u0002\u0002\u095d\u01cd\u0003\u0002\u0002\u0002\u095e\u095c\u0003",
    "\u0002\u0002\u0002\u095f\u0960\t\u000f\u0002\u0002\u0960\u01cf\u0003",
    "\u0002\u0002\u0002\u0961\u0964\u0005\u01d2\u00ea\u0002\u0962\u0964\u0005",
    "\u01d4\u00eb\u0002\u0963\u0961\u0003\u0002\u0002\u0002\u0963\u0962\u0003",
    "\u0002\u0002\u0002\u0964\u01d1\u0003\u0002\u0002\u0002\u0965\u0966\u0007",
    "F\u0002\u0002\u0966\u096b\u0005\u0090I\u0002\u0967\u0968\u0007\u008f",
    "\u0002\u0002\u0968\u0969\u0005\u00ceh\u0002\u0969\u096a\u0007\u0090",
    "\u0002\u0002\u096a\u096c\u0003\u0002\u0002\u0002\u096b\u0967\u0003\u0002",
    "\u0002\u0002\u096b\u096c\u0003\u0002\u0002\u0002\u096c\u01d3\u0003\u0002",
    "\u0002\u0002\u096d\u096f\t\u0010\u0002\u0002\u096e\u096d\u0003\u0002",
    "\u0002\u0002\u096e\u096f\u0003\u0002\u0002\u0002\u096f\u0970\u0003\u0002",
    "\u0002\u0002\u0970\u0971\u0007!\u0002\u0002\u0971\u0976\u0005\u0090",
    "I\u0002\u0972\u0973\u0007\u008f\u0002\u0002\u0973\u0974\u0005\u00ce",
    "h\u0002\u0974\u0975\u0007\u0090\u0002\u0002\u0975\u0977\u0003\u0002",
    "\u0002\u0002\u0976\u0972\u0003\u0002\u0002\u0002\u0976\u0977\u0003\u0002",
    "\u0002\u0002\u0977\u0978\u0003\u0002\u0002\u0002\u0978\u0979\u0007R",
    "\u0002\u0002\u0979\u097a\u0005\u01da\u00ee\u0002\u097a\u01d5\u0003\u0002",
    "\u0002\u0002\u097b\u097d\u0005\u019c\u00cf\u0002\u097c\u097b\u0003\u0002",
    "\u0002\u0002\u097d\u0980\u0003\u0002\u0002\u0002\u097e\u097c\u0003\u0002",
    "\u0002\u0002\u097e\u097f\u0003\u0002\u0002\u0002\u097f\u01d7\u0003\u0002",
    "\u0002\u0002\u0980\u097e\u0003\u0002\u0002\u0002\u0981\u0982\u0007_",
    "\u0002\u0002\u0982\u0983\u0005\u00e8u\u0002\u0983\u0984\u0007+\u0002",
    "\u0002\u0984\u0985\u0005\u01da\u00ee\u0002\u0985\u0986\u0007\u008c\u0002",
    "\u0002\u0986\u01d9\u0003\u0002\u0002\u0002\u0987\u0989\u0005\u012a\u0096",
    "\u0002\u0988\u098a\u0005\u012a\u0096\u0002\u0989\u0988\u0003\u0002\u0002",
    "\u0002\u0989\u098a\u0003\u0002\u0002\u0002\u098a\u098c\u0003\u0002\u0002",
    "\u0002\u098b\u098d\u0005\u0084C\u0002\u098c\u098b\u0003\u0002\u0002",
    "\u0002\u098c\u098d\u0003\u0002\u0002\u0002\u098d\u098f\u0003\u0002\u0002",
    "\u0002\u098e\u0990\u0005\u01ea\u00f6\u0002\u098f\u098e\u0003\u0002\u0002",
    "\u0002\u098f\u0990\u0003\u0002\u0002\u0002\u0990\u01db\u0003\u0002\u0002",
    "\u0002\u0991\u0996\u0005\u00e8u\u0002\u0992\u0996\u0007\u0080\u0002",
    "\u0002\u0993\u0996\u0007\u0081\u0002\u0002\u0994\u0996\u0007\b\u0002",
    "\u0002\u0995\u0991\u0003\u0002\u0002\u0002\u0995\u0992\u0003\u0002\u0002",
    "\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0995\u0994\u0003\u0002\u0002",
    "\u0002\u0996\u01dd\u0003\u0002\u0002\u0002\u0997\u099a\u0005\u0126\u0094",
    "\u0002\u0998\u099a\u0005\u0010\t\u0002\u0999\u0997\u0003\u0002\u0002",
    "\u0002\u0999\u0998\u0003\u0002\u0002\u0002\u099a\u01df\u0003\u0002\u0002",
    "\u0002\u099b\u09a1\u0005\u00c4c\u0002\u099c\u099d\u0005\u0124\u0093",
    "\u0002\u099d\u099e\u0005\u00c4c\u0002\u099e\u09a0\u0003\u0002\u0002",
    "\u0002\u099f\u099c\u0003\u0002\u0002\u0002\u09a0\u09a3\u0003\u0002\u0002",
    "\u0002\u09a1\u099f\u0003\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002",
    "\u0002\u09a2\u01e1\u0003\u0002\u0002\u0002\u09a3\u09a1\u0003\u0002\u0002",
    "\u0002\u09a4\u09a7\u0005\u0126\u0094\u0002\u09a5\u09a6\u0007c\u0002",
    "\u0002\u09a6\u09a8\u0005\u0126\u0094\u0002\u09a7\u09a5\u0003\u0002\u0002",
    "\u0002\u09a7\u09a8\u0003\u0002\u0002\u0002\u09a8\u01e3\u0003\u0002\u0002",
    "\u0002\u09a9\u09aa\u0007`\u0002\u0002\u09aa\u09ab\u0005\u00eav\u0002",
    "\u09ab\u09ac\u0007\u0093\u0002\u0002\u09ac\u09ad\u0005\u01c4\u00e3\u0002",
    "\u09ad\u09ae\u0007\u008c\u0002\u0002\u09ae\u01e5\u0003\u0002\u0002\u0002",
    "\u09af\u09b1\u0005\u00eav\u0002\u09b0\u09b2\u0005\u01ea\u00f6\u0002",
    "\u09b1\u09b0\u0003\u0002\u0002\u0002\u09b1\u09b2\u0003\u0002\u0002\u0002",
    "\u09b2\u09b5\u0003\u0002\u0002\u0002\u09b3\u09b4\u0007\u0089\u0002\u0002",
    "\u09b4\u09b6\u0005\u00c2b\u0002\u09b5\u09b3\u0003\u0002\u0002\u0002",
    "\u09b5\u09b6\u0003\u0002\u0002\u0002\u09b6\u09b7\u0003\u0002\u0002\u0002",
    "\u09b7\u09b8\u0007b\u0002\u0002\u09b8\u01e7\u0003\u0002\u0002\u0002",
    "\u09b9\u09ba\u0007 \u0002\u0002\u09ba\u09bb\u0005\u00c2b\u0002\u09bb",
    "\u01e9\u0003\u0002\u0002\u0002\u09bc\u09bd\u0007d\u0002\u0002\u09bd",
    "\u09be\u0005\u00c2b\u0002\u09be\u01eb\u0003\u0002\u0002\u0002\u09bf",
    "\u09c0\u0007f\u0002\u0002\u09c0\u09c3\u0005\u00e8u\u0002\u09c1\u09c2",
    "\u0007+\u0002\u0002\u09c2\u09c4\u0005\u01ee\u00f8\u0002\u09c3\u09c1",
    "\u0003\u0002\u0002\u0002\u09c3\u09c4\u0003\u0002\u0002\u0002\u09c4\u09c5",
    "\u0003\u0002\u0002\u0002\u09c5\u09c6\u0007\u008c\u0002\u0002\u09c6\u01ed",
    "\u0003\u0002\u0002\u0002\u09c7\u09cc\u0005\u018c\u00c7\u0002\u09c8\u09cc",
    "\u0005b2\u0002\u09c9\u09cc\u0005\u0004\u0003\u0002\u09ca\u09cc\u0005",
    "\u00ccg\u0002\u09cb\u09c7\u0003\u0002\u0002\u0002\u09cb\u09c8\u0003",
    "\u0002\u0002\u0002\u09cb\u09c9\u0003\u0002\u0002\u0002\u09cb\u09ca\u0003",
    "\u0002\u0002\u0002\u09cc\u01ef\u0003\u0002\u0002\u0002\u09cd\u09ce\u0007",
    "\u000b\u0002\u0002\u09ce\u09cf\u0007\u008f\u0002\u0002\u09cf\u09d4\u0005",
    "\u00f2z\u0002\u09d0\u09d1\u0007\u008d\u0002\u0002\u09d1\u09d3\u0005",
    "\u00f2z\u0002\u09d2\u09d0\u0003\u0002\u0002\u0002\u09d3\u09d6\u0003",
    "\u0002\u0002\u0002\u09d4\u09d2\u0003\u0002\u0002\u0002\u09d4\u09d5\u0003",
    "\u0002\u0002\u0002\u09d5\u09d7\u0003\u0002\u0002\u0002\u09d6\u09d4\u0003",
    "\u0002\u0002\u0002\u09d7\u09d8\u0007\u0090\u0002\u0002\u09d8\u09d9\u0007",
    "<\u0002\u0002\u09d9\u09da\u0005\u01da\u00ee\u0002\u09da\u01f1\u0003",
    "\u0002\u0002\u0002\u09db\u09dc\u0007\u000b\u0002\u0002\u09dc\u09dd\u0007",
    "\u008f\u0002\u0002\u09dd\u09e2\u0005\u00f2z\u0002\u09de\u09df\u0007",
    "\u008d\u0002\u0002\u09df\u09e1\u0005\u00f2z\u0002\u09e0\u09de\u0003",
    "\u0002\u0002\u0002\u09e1\u09e4\u0003\u0002\u0002\u0002\u09e2\u09e0\u0003",
    "\u0002\u0002\u0002\u09e2\u09e3\u0003\u0002\u0002\u0002\u09e3\u09e5\u0003",
    "\u0002\u0002\u0002\u09e4\u09e2\u0003\u0002\u0002\u0002\u09e5\u09e6\u0007",
    "\u0090\u0002\u0002\u09e6\u09e7\u0007<\u0002\u0002\u09e7\u09e8\u0005",
    "\u01c4\u00e3\u0002\u09e8\u01f3\u0003\u0002\u0002\u0002\u09e9\u09ea\u0007",
    "j\u0002\u0002\u09ea\u09ef\u0005\u012a\u0096\u0002\u09eb\u09ec\u0007",
    "\u008d\u0002\u0002\u09ec\u09ee\u0005\u012a\u0096\u0002\u09ed\u09eb\u0003",
    "\u0002\u0002\u0002\u09ee\u09f1\u0003\u0002\u0002\u0002\u09ef\u09ed\u0003",
    "\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002\u0002\u0002\u09f0\u09f2\u0003",
    "\u0002\u0002\u0002\u09f1\u09ef\u0003\u0002\u0002\u0002\u09f2\u09f3\u0007",
    "\u008c\u0002\u0002\u09f3\u01f5\u0003\u0002\u0002\u0002\u09f4\u09f6\u0005",
    "\u0112\u008a\u0002\u09f5\u09f4\u0003\u0002\u0002\u0002\u09f5\u09f6\u0003",
    "\u0002\u0002\u0002\u09f6\u09f7\u0003\u0002\u0002\u0002\u09f7\u09f8\u0005",
    "\u01de\u00f0\u0002\u09f8\u09f9\u0007\u0089\u0002\u0002\u09f9\u09fa\u0005",
    "\u00c2b\u0002\u09fa\u09fb\u0007\u008c\u0002\u0002\u09fb\u01f7\u0003",
    "\u0002\u0002\u0002\u09fc\u09fe\u0007W\u0002\u0002\u09fd\u09fc\u0003",
    "\u0002\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe\u09ff\u0003",
    "\u0002\u0002\u0002\u09ff\u0a00\u0007k\u0002\u0002\u0a00\u0a01\u0005",
    "\u00eav\u0002\u0a01\u0a02\u0007\u0093\u0002\u0002\u0a02\u0a05\u0005",
    "\u01da\u00ee\u0002\u0a03\u0a04\u0007\u0089\u0002\u0002\u0a04\u0a06\u0005",
    "\u00c2b\u0002\u0a05\u0a03\u0003\u0002\u0002\u0002\u0a05\u0a06\u0003",
    "\u0002\u0002\u0002\u0a06\u0a07\u0003\u0002\u0002\u0002\u0a07\u0a08\u0007",
    "\u008c\u0002\u0002\u0a08\u01f9\u0003\u0002\u0002\u0002\u0a09\u0a0b\u0005",
    "\u0112\u008a\u0002\u0a0a\u0a09\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0003",
    "\u0002\u0002\u0002\u0a0b\u0a0c\u0003\u0002\u0002\u0002\u0a0c\u0a0e\u0007",
    "l\u0002\u0002\u0a0d\u0a0f\u0005\u0196\u00cc\u0002\u0a0e\u0a0d\u0003",
    "\u0002\u0002\u0002\u0a0e\u0a0f\u0003\u0002\u0002\u0002\u0a0f\u0a11\u0003",
    "\u0002\u0002\u0002\u0a10\u0a12\u0005n8\u0002\u0a11\u0a10\u0003\u0002",
    "\u0002\u0002\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0a14\u0003\u0002",
    "\u0002\u0002\u0a13\u0a15\u0005\u01e8\u00f5\u0002\u0a14\u0a13\u0003\u0002",
    "\u0002\u0002\u0a14\u0a15\u0003\u0002\u0002\u0002\u0a15\u0a16\u0003\u0002",
    "\u0002\u0002\u0a16\u0a17\u0007\u008c\u0002\u0002\u0a17\u01fb\u0003\u0002",
    "\u0002\u0002\u0a18\u0a1d\u0005\u01fe\u0100\u0002\u0a19\u0a1a\u0007\u008d",
    "\u0002\u0002\u0a1a\u0a1c\u0005\u01fe\u0100\u0002\u0a1b\u0a19\u0003\u0002",
    "\u0002\u0002\u0a1c\u0a1f\u0003\u0002\u0002\u0002\u0a1d\u0a1b\u0003\u0002",
    "\u0002\u0002\u0a1d\u0a1e\u0003\u0002\u0002\u0002\u0a1e\u0a22\u0003\u0002",
    "\u0002\u0002\u0a1f\u0a1d\u0003\u0002\u0002\u0002\u0a20\u0a22\u0007g",
    "\u0002\u0002\u0a21\u0a18\u0003\u0002\u0002\u0002\u0a21\u0a20\u0003\u0002",
    "\u0002\u0002\u0a22\u01fd\u0003\u0002\u0002\u0002\u0a23\u0a26\u0005\u00c2",
    "b\u0002\u0a24\u0a25\u0007\u0006\u0002\u0002\u0a25\u0a27\u0005\u00c2",
    "b\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002\u0a26\u0a27\u0003\u0002",
    "\u0002\u0002\u0a27\u01ff\u0003\u0002\u0002\u0002\u0128\u0207\u020b\u0211",
    "\u021b\u0225\u022e\u0233\u023a\u023e\u0243\u024f\u0252\u0259\u025f\u0263",
    "\u0267\u026a\u0271\u0276\u027b\u027f\u0285\u0289\u028c\u0294\u029d\u02ac",
    "\u02bb\u02be\u02c1\u02c8\u02ce\u02eb\u02f0\u02f7\u02f9\u02ff\u0301\u0308",
    "\u030b\u0313\u0316\u031f\u0326\u032b\u032e\u0334\u033f\u0347\u034b\u034f",
    "\u0354\u035c\u0361\u036e\u0375\u037d\u0380\u0389\u038c\u038f\u0394\u039b",
    "\u039e\u03a8\u03ac\u03af\u03b2\u03b8\u03bc\u03bf\u03c3\u03c8\u03cb\u03d1",
    "\u03d4\u03d8\u03ea\u03ec\u03f7\u03fa\u0401\u0406\u040b\u0418\u0428\u042d",
    "\u0432\u0437\u043a\u043f\u0449\u0455\u045a\u046d\u0472\u0478\u047f\u0489",
    "\u048d\u0490\u04a8\u04ad\u04b2\u04b5\u04b8\u04bf\u04c4\u04cd\u04d2\u04d8",
    "\u04dc\u04e4\u04ea\u04ee\u04f2\u04fc\u0502\u0508\u050f\u0517\u0528\u0530",
    "\u053a\u053e\u0543\u0549\u0551\u055e\u0569\u0570\u058e\u0592\u059f\u05a4",
    "\u05a9\u05b3\u05ba\u05c1\u05ca\u05ce\u05d5\u05da\u05dd\u05e2\u05e7\u05ef",
    "\u05fd\u0605\u060d\u0614\u0619\u061e\u0622\u0626\u062c\u0630\u0634\u063c",
    "\u0641\u0646\u064c\u0657\u065e\u0667\u066d\u0670\u0677\u0681\u0686\u068d",
    "\u0694\u069b\u06a6\u06ae\u06b8\u06bf\u06c3\u06c7\u06cd\u06d5\u06d8\u06db",
    "\u06e5\u06e8\u06f7\u06fc\u0705\u0708\u071f\u0724\u0734\u073a\u0753\u0758",
    "\u0766\u076b\u0771\u0779\u077c\u078e\u0793\u0797\u079a\u07a1\u07a4\u07ab",
    "\u07af\u07b6\u07c0\u07c5\u07cc\u07d1\u07d9\u07df\u07e8\u07ed\u07f3\u07f8",
    "\u07fe\u0803\u0809\u080e\u0812\u0820\u0824\u083e\u0849\u084f\u085e\u0864",
    "\u086a\u086f\u0874\u087e\u0882\u088d\u0892\u089a\u089d\u08a1\u08a6\u08ae",
    "\u08b2\u08b8\u08c2\u08ca\u08cf\u08d4\u08e1\u08e6\u08eb\u08f0\u08f4\u08fc",
    "\u0905\u0909\u090e\u0918\u092f\u0937\u0940\u0943\u0957\u095c\u0963\u096b",
    "\u096e\u0976\u097e\u0989\u098c\u098f\u0995\u0999\u09a1\u09a7\u09b1\u09b5",
    "\u09c3\u09cb\u09d4\u09e2\u09ef\u09f5\u09fd\u0a05\u0a0a\u0a0e\u0a11\u0a14",
    "\u0a1d\u0a21\u0a26"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'\n'", "'\r'", 
                     null, null, null, "'**'", "'=='", "'<='", "'>='", "'=>'", 
                     "'/='", "':='", "'<>'", "'\"'", "';'", "','", "'&'", 
                     "'('", "')'", "'['", "']'", "':'", "'*'", "'/'", "'+'", 
                     "'-'", "'<'", "'>'", "'='", "'|'", "'.'", "'\\'", null, 
                     null, null, null, null, null, "'''" ];

var symbolicNames = [ null, "ABS", "ACCESS", "ACROSS", "AFTER", "ALIAS", 
                      "ALL", "AND", "ARCHITECTURE", "ARRAY", "ASSERT", "ATTRIBUTE", 
                      "BEGIN", "BLOCK", "BODY", "BREAK", "BUFFER", "BUS", 
                      "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", 
                      "DISCONNECT", "DOWNTO", "END", "ENTITY", "ELSE", "ELSIF", 
                      "EXIT", "FILE", "FOR", "FUNCTION", "GENERATE", "GENERIC", 
                      "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", 
                      "INOUT", "IS", "LABEL", "LIBRARY", "LIMIT", "LINKAGE", 
                      "LITERAL", "LOOP", "MAP", "MOD", "NAND", "NATURE", 
                      "NEW", "NEXT", "NOISE", "NOR", "NOT", "NULL_", "OF", 
                      "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", 
                      "POSTPONED", "PROCESS", "PROCEDURE", "PROCEDURAL", 
                      "PURE", "QUANTITY", "RANGE", "REVERSE_RANGE", "REJECT", 
                      "REM", "RECORD", "REFERENCE", "REGISTER", "REPORT", 
                      "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", 
                      "SIGNAL", "SLA", "SLL", "SPECTRUM", "SRA", "SRL", 
                      "SUBNATURE", "SUBTYPE", "TERMINAL", "THEN", "THROUGH", 
                      "TO", "TOLERANCE", "TRANSPORT", "TYPE", "UNAFFECTED", 
                      "UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WITH", 
                      "WHEN", "WHILE", "XNOR", "XOR", "BASE_LITERAL", "BIT_STRING_LITERAL", 
                      "BIT_STRING_LITERAL_BINARY", "BIT_STRING_LITERAL_OCTAL", 
                      "BIT_STRING_LITERAL_HEX", "REAL_LITERAL", "BASIC_IDENTIFIER", 
                      "EXTENDED_IDENTIFIER", "LETTER", "COMMENT", "TAB", 
                      "SPACE", "NEWLINE", "CR", "CHARACTER_LITERAL", "STRING_LITERAL", 
                      "OTHER_SPECIAL_CHARACTER", "DOUBLESTAR", "ASSIGN", 
                      "LE", "GE", "ARROW", "NEQ", "VARASGN", "BOX", "DBLQUOTE", 
                      "SEMI", "COMMA", "AMPERSAND", "LPAREN", "RPAREN", 
                      "LBRACKET", "RBRACKET", "COLON", "MUL", "DIV", "PLUS", 
                      "MINUS", "LOWERTHAN", "GREATERTHAN", "EQ", "BAR", 
                      "DOT", "BACKSLASH", "EXPONENT", "HEXDIGIT", "INTEGER", 
                      "DIGIT", "BASED_INTEGER", "EXTENDED_DIGIT", "APOSTROPHE" ];

var ruleNames =  [ "abstract_literal", "access_type_definition", "across_aspect", 
                   "actual_designator", "actual_parameter_part", "actual_part", 
                   "adding_operator", "aggregate", "alias_declaration", 
                   "alias_designator", "alias_indication", "allocator", 
                   "architecture_body", "architecture_declarative_part", 
                   "architecture_statement", "architecture_statement_part", 
                   "array_nature_definition", "array_type_definition", "assertion", 
                   "assertion_statement", "association_element", "association_list", 
                   "attribute_declaration", "attribute_designator", "attribute_specification", 
                   "base_unit_declaration", "binding_indication", "block_configuration", 
                   "block_declarative_item", "block_declarative_part", "block_header", 
                   "block_specification", "block_statement", "block_statement_part", 
                   "branch_quantity_declaration", "break_element", "break_list", 
                   "break_selector_clause", "break_statement", "case_statement", 
                   "case_statement_alternative", "choice", "choices", "component_configuration", 
                   "component_declaration", "component_instantiation_statement", 
                   "component_specification", "composite_nature_definition", 
                   "composite_type_definition", "concurrent_assertion_statement", 
                   "concurrent_break_statement", "concurrent_procedure_call_statement", 
                   "concurrent_signal_assignment_statement", "condition", 
                   "condition_clause", "conditional_signal_assignment", 
                   "conditional_waveforms", "configuration_declaration", 
                   "configuration_declarative_item", "configuration_declarative_part", 
                   "configuration_item", "configuration_specification", 
                   "constant_declaration", "constrained_array_definition", 
                   "constrained_nature_definition", "constraint", "context_clause", 
                   "context_item", "delay_mechanism", "parse", "design_unit", 
                   "designator", "direction", "disconnection_specification", 
                   "discrete_range", "element_association", "element_declaration", 
                   "element_subnature_definition", "element_subtype_definition", 
                   "entity_aspect", "entity_class", "entity_class_entry", 
                   "entity_class_entry_list", "entity_declaration", "entity_declarative_item", 
                   "entity_declarative_part", "entity_designator", "entity_header", 
                   "entity_name_list", "entity_specification", "entity_statement", 
                   "entity_statement_part", "entity_tag", "enumeration_literal", 
                   "enumeration_type_definition", "exit_statement", "expression", 
                   "factor", "file_declaration", "file_logical_name", "file_open_information", 
                   "file_type_definition", "formal_parameter_list", "formal_part", 
                   "free_quantity_declaration", "generate_statement", "generation_scheme", 
                   "generic_clause", "generic_list", "generic_map_aspect", 
                   "group_constituent", "group_constituent_list", "group_declaration", 
                   "group_template_declaration", "guarded_signal_specification", 
                   "identifier", "identifier_list", "if_statement", "index_constraint", 
                   "index_specification", "index_subtype_definition", "instantiated_unit", 
                   "instantiation_list", "interface_constant_declaration", 
                   "interface_declaration", "interface_element", "interface_file_declaration", 
                   "interface_signal_list", "interface_port_list", "interface_list", 
                   "interface_quantity_declaration", "interface_port_declaration", 
                   "interface_signal_declaration", "interface_terminal_declaration", 
                   "interface_variable_declaration", "iteration_scheme", 
                   "label_colon", "library_clause", "library_unit", "literal", 
                   "logical_name", "logical_name_list", "logical_operator", 
                   "loop_statement", "signal_mode", "multiplying_operator", 
                   "name", "name_part", "selected_name", "selected_name_part", 
                   "function_call_or_indexed_name_part", "slice_name_part", 
                   "attribute_name_part", "nature_declaration", "nature_definition", 
                   "nature_element_declaration", "next_statement", "numeric_literal", 
                   "object_declaration", "opts", "package_body", "package_body_declarative_item", 
                   "package_body_declarative_part", "package_declaration", 
                   "package_declarative_item", "package_declarative_part", 
                   "parameter_specification", "physical_literal", "physical_type_definition", 
                   "port_clause", "port_list", "port_map_aspect", "primary", 
                   "primary_unit", "procedural_declarative_item", "procedural_declarative_part", 
                   "procedural_statement_part", "procedure_call", "procedure_call_statement", 
                   "process_declarative_item", "process_declarative_part", 
                   "process_statement", "process_statement_part", "qualified_expression", 
                   "quantity_declaration", "quantity_list", "quantity_specification", 
                   "range_decl", "explicit_range", "range_constraint", "record_nature_definition", 
                   "record_type_definition", "relation", "relational_operator", 
                   "report_statement", "return_statement", "scalar_nature_definition", 
                   "scalar_type_definition", "secondary_unit", "secondary_unit_declaration", 
                   "selected_signal_assignment", "selected_waveforms", "sensitivity_clause", 
                   "sensitivity_list", "sequence_of_statements", "sequential_statement", 
                   "shift_expression", "shift_operator", "signal_assignment_statement", 
                   "signal_declaration", "signal_kind", "signal_list", "signature", 
                   "simple_expression", "simple_simultaneous_statement", 
                   "simultaneous_alternative", "simultaneous_case_statement", 
                   "simultaneous_if_statement", "simultaneous_procedural_statement", 
                   "simultaneous_statement", "simultaneous_statement_part", 
                   "source_aspect", "source_quantity_declaration", "step_limit_specification", 
                   "subnature_declaration", "subnature_indication", "subprogram_body", 
                   "subprogram_declaration", "subprogram_declarative_item", 
                   "subprogram_declarative_part", "subprogram_kind", "subprogram_specification", 
                   "procedure_specification", "function_specification", 
                   "subprogram_statement_part", "subtype_declaration", "subtype_indication", 
                   "suffix", "target", "term", "terminal_aspect", "terminal_declaration", 
                   "through_aspect", "timeout_clause", "tolerance_aspect", 
                   "type_declaration", "type_definition", "unconstrained_array_definition", 
                   "unconstrained_nature_definition", "use_clause", "variable_assignment_statement", 
                   "variable_declaration", "wait_statement", "waveform", 
                   "waveform_element" ];

function vhdlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

vhdlParser.prototype = Object.create(antlr4.Parser.prototype);
vhdlParser.prototype.constructor = vhdlParser;

Object.defineProperty(vhdlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

vhdlParser.EOF = antlr4.Token.EOF;
vhdlParser.ABS = 1;
vhdlParser.ACCESS = 2;
vhdlParser.ACROSS = 3;
vhdlParser.AFTER = 4;
vhdlParser.ALIAS = 5;
vhdlParser.ALL = 6;
vhdlParser.AND = 7;
vhdlParser.ARCHITECTURE = 8;
vhdlParser.ARRAY = 9;
vhdlParser.ASSERT = 10;
vhdlParser.ATTRIBUTE = 11;
vhdlParser.BEGIN = 12;
vhdlParser.BLOCK = 13;
vhdlParser.BODY = 14;
vhdlParser.BREAK = 15;
vhdlParser.BUFFER = 16;
vhdlParser.BUS = 17;
vhdlParser.CASE = 18;
vhdlParser.COMPONENT = 19;
vhdlParser.CONFIGURATION = 20;
vhdlParser.CONSTANT = 21;
vhdlParser.DISCONNECT = 22;
vhdlParser.DOWNTO = 23;
vhdlParser.END = 24;
vhdlParser.ENTITY = 25;
vhdlParser.ELSE = 26;
vhdlParser.ELSIF = 27;
vhdlParser.EXIT = 28;
vhdlParser.FILE = 29;
vhdlParser.FOR = 30;
vhdlParser.FUNCTION = 31;
vhdlParser.GENERATE = 32;
vhdlParser.GENERIC = 33;
vhdlParser.GROUP = 34;
vhdlParser.GUARDED = 35;
vhdlParser.IF = 36;
vhdlParser.IMPURE = 37;
vhdlParser.IN = 38;
vhdlParser.INERTIAL = 39;
vhdlParser.INOUT = 40;
vhdlParser.IS = 41;
vhdlParser.LABEL = 42;
vhdlParser.LIBRARY = 43;
vhdlParser.LIMIT = 44;
vhdlParser.LINKAGE = 45;
vhdlParser.LITERAL = 46;
vhdlParser.LOOP = 47;
vhdlParser.MAP = 48;
vhdlParser.MOD = 49;
vhdlParser.NAND = 50;
vhdlParser.NATURE = 51;
vhdlParser.NEW = 52;
vhdlParser.NEXT = 53;
vhdlParser.NOISE = 54;
vhdlParser.NOR = 55;
vhdlParser.NOT = 56;
vhdlParser.NULL_ = 57;
vhdlParser.OF = 58;
vhdlParser.ON = 59;
vhdlParser.OPEN = 60;
vhdlParser.OR = 61;
vhdlParser.OTHERS = 62;
vhdlParser.OUT = 63;
vhdlParser.PACKAGE = 64;
vhdlParser.PORT = 65;
vhdlParser.POSTPONED = 66;
vhdlParser.PROCESS = 67;
vhdlParser.PROCEDURE = 68;
vhdlParser.PROCEDURAL = 69;
vhdlParser.PURE = 70;
vhdlParser.QUANTITY = 71;
vhdlParser.RANGE = 72;
vhdlParser.REVERSE_RANGE = 73;
vhdlParser.REJECT = 74;
vhdlParser.REM = 75;
vhdlParser.RECORD = 76;
vhdlParser.REFERENCE = 77;
vhdlParser.REGISTER = 78;
vhdlParser.REPORT = 79;
vhdlParser.RETURN = 80;
vhdlParser.ROL = 81;
vhdlParser.ROR = 82;
vhdlParser.SELECT = 83;
vhdlParser.SEVERITY = 84;
vhdlParser.SHARED = 85;
vhdlParser.SIGNAL = 86;
vhdlParser.SLA = 87;
vhdlParser.SLL = 88;
vhdlParser.SPECTRUM = 89;
vhdlParser.SRA = 90;
vhdlParser.SRL = 91;
vhdlParser.SUBNATURE = 92;
vhdlParser.SUBTYPE = 93;
vhdlParser.TERMINAL = 94;
vhdlParser.THEN = 95;
vhdlParser.THROUGH = 96;
vhdlParser.TO = 97;
vhdlParser.TOLERANCE = 98;
vhdlParser.TRANSPORT = 99;
vhdlParser.TYPE = 100;
vhdlParser.UNAFFECTED = 101;
vhdlParser.UNITS = 102;
vhdlParser.UNTIL = 103;
vhdlParser.USE = 104;
vhdlParser.VARIABLE = 105;
vhdlParser.WAIT = 106;
vhdlParser.WITH = 107;
vhdlParser.WHEN = 108;
vhdlParser.WHILE = 109;
vhdlParser.XNOR = 110;
vhdlParser.XOR = 111;
vhdlParser.BASE_LITERAL = 112;
vhdlParser.BIT_STRING_LITERAL = 113;
vhdlParser.BIT_STRING_LITERAL_BINARY = 114;
vhdlParser.BIT_STRING_LITERAL_OCTAL = 115;
vhdlParser.BIT_STRING_LITERAL_HEX = 116;
vhdlParser.REAL_LITERAL = 117;
vhdlParser.BASIC_IDENTIFIER = 118;
vhdlParser.EXTENDED_IDENTIFIER = 119;
vhdlParser.LETTER = 120;
vhdlParser.COMMENT = 121;
vhdlParser.TAB = 122;
vhdlParser.SPACE = 123;
vhdlParser.NEWLINE = 124;
vhdlParser.CR = 125;
vhdlParser.CHARACTER_LITERAL = 126;
vhdlParser.STRING_LITERAL = 127;
vhdlParser.OTHER_SPECIAL_CHARACTER = 128;
vhdlParser.DOUBLESTAR = 129;
vhdlParser.ASSIGN = 130;
vhdlParser.LE = 131;
vhdlParser.GE = 132;
vhdlParser.ARROW = 133;
vhdlParser.NEQ = 134;
vhdlParser.VARASGN = 135;
vhdlParser.BOX = 136;
vhdlParser.DBLQUOTE = 137;
vhdlParser.SEMI = 138;
vhdlParser.COMMA = 139;
vhdlParser.AMPERSAND = 140;
vhdlParser.LPAREN = 141;
vhdlParser.RPAREN = 142;
vhdlParser.LBRACKET = 143;
vhdlParser.RBRACKET = 144;
vhdlParser.COLON = 145;
vhdlParser.MUL = 146;
vhdlParser.DIV = 147;
vhdlParser.PLUS = 148;
vhdlParser.MINUS = 149;
vhdlParser.LOWERTHAN = 150;
vhdlParser.GREATERTHAN = 151;
vhdlParser.EQ = 152;
vhdlParser.BAR = 153;
vhdlParser.DOT = 154;
vhdlParser.BACKSLASH = 155;
vhdlParser.EXPONENT = 156;
vhdlParser.HEXDIGIT = 157;
vhdlParser.INTEGER = 158;
vhdlParser.DIGIT = 159;
vhdlParser.BASED_INTEGER = 160;
vhdlParser.EXTENDED_DIGIT = 161;
vhdlParser.APOSTROPHE = 162;

vhdlParser.RULE_abstract_literal = 0;
vhdlParser.RULE_access_type_definition = 1;
vhdlParser.RULE_across_aspect = 2;
vhdlParser.RULE_actual_designator = 3;
vhdlParser.RULE_actual_parameter_part = 4;
vhdlParser.RULE_actual_part = 5;
vhdlParser.RULE_adding_operator = 6;
vhdlParser.RULE_aggregate = 7;
vhdlParser.RULE_alias_declaration = 8;
vhdlParser.RULE_alias_designator = 9;
vhdlParser.RULE_alias_indication = 10;
vhdlParser.RULE_allocator = 11;
vhdlParser.RULE_architecture_body = 12;
vhdlParser.RULE_architecture_declarative_part = 13;
vhdlParser.RULE_architecture_statement = 14;
vhdlParser.RULE_architecture_statement_part = 15;
vhdlParser.RULE_array_nature_definition = 16;
vhdlParser.RULE_array_type_definition = 17;
vhdlParser.RULE_assertion = 18;
vhdlParser.RULE_assertion_statement = 19;
vhdlParser.RULE_association_element = 20;
vhdlParser.RULE_association_list = 21;
vhdlParser.RULE_attribute_declaration = 22;
vhdlParser.RULE_attribute_designator = 23;
vhdlParser.RULE_attribute_specification = 24;
vhdlParser.RULE_base_unit_declaration = 25;
vhdlParser.RULE_binding_indication = 26;
vhdlParser.RULE_block_configuration = 27;
vhdlParser.RULE_block_declarative_item = 28;
vhdlParser.RULE_block_declarative_part = 29;
vhdlParser.RULE_block_header = 30;
vhdlParser.RULE_block_specification = 31;
vhdlParser.RULE_block_statement = 32;
vhdlParser.RULE_block_statement_part = 33;
vhdlParser.RULE_branch_quantity_declaration = 34;
vhdlParser.RULE_break_element = 35;
vhdlParser.RULE_break_list = 36;
vhdlParser.RULE_break_selector_clause = 37;
vhdlParser.RULE_break_statement = 38;
vhdlParser.RULE_case_statement = 39;
vhdlParser.RULE_case_statement_alternative = 40;
vhdlParser.RULE_choice = 41;
vhdlParser.RULE_choices = 42;
vhdlParser.RULE_component_configuration = 43;
vhdlParser.RULE_component_declaration = 44;
vhdlParser.RULE_component_instantiation_statement = 45;
vhdlParser.RULE_component_specification = 46;
vhdlParser.RULE_composite_nature_definition = 47;
vhdlParser.RULE_composite_type_definition = 48;
vhdlParser.RULE_concurrent_assertion_statement = 49;
vhdlParser.RULE_concurrent_break_statement = 50;
vhdlParser.RULE_concurrent_procedure_call_statement = 51;
vhdlParser.RULE_concurrent_signal_assignment_statement = 52;
vhdlParser.RULE_condition = 53;
vhdlParser.RULE_condition_clause = 54;
vhdlParser.RULE_conditional_signal_assignment = 55;
vhdlParser.RULE_conditional_waveforms = 56;
vhdlParser.RULE_configuration_declaration = 57;
vhdlParser.RULE_configuration_declarative_item = 58;
vhdlParser.RULE_configuration_declarative_part = 59;
vhdlParser.RULE_configuration_item = 60;
vhdlParser.RULE_configuration_specification = 61;
vhdlParser.RULE_constant_declaration = 62;
vhdlParser.RULE_constrained_array_definition = 63;
vhdlParser.RULE_constrained_nature_definition = 64;
vhdlParser.RULE_constraint = 65;
vhdlParser.RULE_context_clause = 66;
vhdlParser.RULE_context_item = 67;
vhdlParser.RULE_delay_mechanism = 68;
vhdlParser.RULE_parse = 69;
vhdlParser.RULE_design_unit = 70;
vhdlParser.RULE_designator = 71;
vhdlParser.RULE_direction = 72;
vhdlParser.RULE_disconnection_specification = 73;
vhdlParser.RULE_discrete_range = 74;
vhdlParser.RULE_element_association = 75;
vhdlParser.RULE_element_declaration = 76;
vhdlParser.RULE_element_subnature_definition = 77;
vhdlParser.RULE_element_subtype_definition = 78;
vhdlParser.RULE_entity_aspect = 79;
vhdlParser.RULE_entity_class = 80;
vhdlParser.RULE_entity_class_entry = 81;
vhdlParser.RULE_entity_class_entry_list = 82;
vhdlParser.RULE_entity_declaration = 83;
vhdlParser.RULE_entity_declarative_item = 84;
vhdlParser.RULE_entity_declarative_part = 85;
vhdlParser.RULE_entity_designator = 86;
vhdlParser.RULE_entity_header = 87;
vhdlParser.RULE_entity_name_list = 88;
vhdlParser.RULE_entity_specification = 89;
vhdlParser.RULE_entity_statement = 90;
vhdlParser.RULE_entity_statement_part = 91;
vhdlParser.RULE_entity_tag = 92;
vhdlParser.RULE_enumeration_literal = 93;
vhdlParser.RULE_enumeration_type_definition = 94;
vhdlParser.RULE_exit_statement = 95;
vhdlParser.RULE_expression = 96;
vhdlParser.RULE_factor = 97;
vhdlParser.RULE_file_declaration = 98;
vhdlParser.RULE_file_logical_name = 99;
vhdlParser.RULE_file_open_information = 100;
vhdlParser.RULE_file_type_definition = 101;
vhdlParser.RULE_formal_parameter_list = 102;
vhdlParser.RULE_formal_part = 103;
vhdlParser.RULE_free_quantity_declaration = 104;
vhdlParser.RULE_generate_statement = 105;
vhdlParser.RULE_generation_scheme = 106;
vhdlParser.RULE_generic_clause = 107;
vhdlParser.RULE_generic_list = 108;
vhdlParser.RULE_generic_map_aspect = 109;
vhdlParser.RULE_group_constituent = 110;
vhdlParser.RULE_group_constituent_list = 111;
vhdlParser.RULE_group_declaration = 112;
vhdlParser.RULE_group_template_declaration = 113;
vhdlParser.RULE_guarded_signal_specification = 114;
vhdlParser.RULE_identifier = 115;
vhdlParser.RULE_identifier_list = 116;
vhdlParser.RULE_if_statement = 117;
vhdlParser.RULE_index_constraint = 118;
vhdlParser.RULE_index_specification = 119;
vhdlParser.RULE_index_subtype_definition = 120;
vhdlParser.RULE_instantiated_unit = 121;
vhdlParser.RULE_instantiation_list = 122;
vhdlParser.RULE_interface_constant_declaration = 123;
vhdlParser.RULE_interface_declaration = 124;
vhdlParser.RULE_interface_element = 125;
vhdlParser.RULE_interface_file_declaration = 126;
vhdlParser.RULE_interface_signal_list = 127;
vhdlParser.RULE_interface_port_list = 128;
vhdlParser.RULE_interface_list = 129;
vhdlParser.RULE_interface_quantity_declaration = 130;
vhdlParser.RULE_interface_port_declaration = 131;
vhdlParser.RULE_interface_signal_declaration = 132;
vhdlParser.RULE_interface_terminal_declaration = 133;
vhdlParser.RULE_interface_variable_declaration = 134;
vhdlParser.RULE_iteration_scheme = 135;
vhdlParser.RULE_label_colon = 136;
vhdlParser.RULE_library_clause = 137;
vhdlParser.RULE_library_unit = 138;
vhdlParser.RULE_literal = 139;
vhdlParser.RULE_logical_name = 140;
vhdlParser.RULE_logical_name_list = 141;
vhdlParser.RULE_logical_operator = 142;
vhdlParser.RULE_loop_statement = 143;
vhdlParser.RULE_signal_mode = 144;
vhdlParser.RULE_multiplying_operator = 145;
vhdlParser.RULE_name = 146;
vhdlParser.RULE_name_part = 147;
vhdlParser.RULE_selected_name = 148;
vhdlParser.RULE_selected_name_part = 149;
vhdlParser.RULE_function_call_or_indexed_name_part = 150;
vhdlParser.RULE_slice_name_part = 151;
vhdlParser.RULE_attribute_name_part = 152;
vhdlParser.RULE_nature_declaration = 153;
vhdlParser.RULE_nature_definition = 154;
vhdlParser.RULE_nature_element_declaration = 155;
vhdlParser.RULE_next_statement = 156;
vhdlParser.RULE_numeric_literal = 157;
vhdlParser.RULE_object_declaration = 158;
vhdlParser.RULE_opts = 159;
vhdlParser.RULE_package_body = 160;
vhdlParser.RULE_package_body_declarative_item = 161;
vhdlParser.RULE_package_body_declarative_part = 162;
vhdlParser.RULE_package_declaration = 163;
vhdlParser.RULE_package_declarative_item = 164;
vhdlParser.RULE_package_declarative_part = 165;
vhdlParser.RULE_parameter_specification = 166;
vhdlParser.RULE_physical_literal = 167;
vhdlParser.RULE_physical_type_definition = 168;
vhdlParser.RULE_port_clause = 169;
vhdlParser.RULE_port_list = 170;
vhdlParser.RULE_port_map_aspect = 171;
vhdlParser.RULE_primary = 172;
vhdlParser.RULE_primary_unit = 173;
vhdlParser.RULE_procedural_declarative_item = 174;
vhdlParser.RULE_procedural_declarative_part = 175;
vhdlParser.RULE_procedural_statement_part = 176;
vhdlParser.RULE_procedure_call = 177;
vhdlParser.RULE_procedure_call_statement = 178;
vhdlParser.RULE_process_declarative_item = 179;
vhdlParser.RULE_process_declarative_part = 180;
vhdlParser.RULE_process_statement = 181;
vhdlParser.RULE_process_statement_part = 182;
vhdlParser.RULE_qualified_expression = 183;
vhdlParser.RULE_quantity_declaration = 184;
vhdlParser.RULE_quantity_list = 185;
vhdlParser.RULE_quantity_specification = 186;
vhdlParser.RULE_range_decl = 187;
vhdlParser.RULE_explicit_range = 188;
vhdlParser.RULE_range_constraint = 189;
vhdlParser.RULE_record_nature_definition = 190;
vhdlParser.RULE_record_type_definition = 191;
vhdlParser.RULE_relation = 192;
vhdlParser.RULE_relational_operator = 193;
vhdlParser.RULE_report_statement = 194;
vhdlParser.RULE_return_statement = 195;
vhdlParser.RULE_scalar_nature_definition = 196;
vhdlParser.RULE_scalar_type_definition = 197;
vhdlParser.RULE_secondary_unit = 198;
vhdlParser.RULE_secondary_unit_declaration = 199;
vhdlParser.RULE_selected_signal_assignment = 200;
vhdlParser.RULE_selected_waveforms = 201;
vhdlParser.RULE_sensitivity_clause = 202;
vhdlParser.RULE_sensitivity_list = 203;
vhdlParser.RULE_sequence_of_statements = 204;
vhdlParser.RULE_sequential_statement = 205;
vhdlParser.RULE_shift_expression = 206;
vhdlParser.RULE_shift_operator = 207;
vhdlParser.RULE_signal_assignment_statement = 208;
vhdlParser.RULE_signal_declaration = 209;
vhdlParser.RULE_signal_kind = 210;
vhdlParser.RULE_signal_list = 211;
vhdlParser.RULE_signature = 212;
vhdlParser.RULE_simple_expression = 213;
vhdlParser.RULE_simple_simultaneous_statement = 214;
vhdlParser.RULE_simultaneous_alternative = 215;
vhdlParser.RULE_simultaneous_case_statement = 216;
vhdlParser.RULE_simultaneous_if_statement = 217;
vhdlParser.RULE_simultaneous_procedural_statement = 218;
vhdlParser.RULE_simultaneous_statement = 219;
vhdlParser.RULE_simultaneous_statement_part = 220;
vhdlParser.RULE_source_aspect = 221;
vhdlParser.RULE_source_quantity_declaration = 222;
vhdlParser.RULE_step_limit_specification = 223;
vhdlParser.RULE_subnature_declaration = 224;
vhdlParser.RULE_subnature_indication = 225;
vhdlParser.RULE_subprogram_body = 226;
vhdlParser.RULE_subprogram_declaration = 227;
vhdlParser.RULE_subprogram_declarative_item = 228;
vhdlParser.RULE_subprogram_declarative_part = 229;
vhdlParser.RULE_subprogram_kind = 230;
vhdlParser.RULE_subprogram_specification = 231;
vhdlParser.RULE_procedure_specification = 232;
vhdlParser.RULE_function_specification = 233;
vhdlParser.RULE_subprogram_statement_part = 234;
vhdlParser.RULE_subtype_declaration = 235;
vhdlParser.RULE_subtype_indication = 236;
vhdlParser.RULE_suffix = 237;
vhdlParser.RULE_target = 238;
vhdlParser.RULE_term = 239;
vhdlParser.RULE_terminal_aspect = 240;
vhdlParser.RULE_terminal_declaration = 241;
vhdlParser.RULE_through_aspect = 242;
vhdlParser.RULE_timeout_clause = 243;
vhdlParser.RULE_tolerance_aspect = 244;
vhdlParser.RULE_type_declaration = 245;
vhdlParser.RULE_type_definition = 246;
vhdlParser.RULE_unconstrained_array_definition = 247;
vhdlParser.RULE_unconstrained_nature_definition = 248;
vhdlParser.RULE_use_clause = 249;
vhdlParser.RULE_variable_assignment_statement = 250;
vhdlParser.RULE_variable_declaration = 251;
vhdlParser.RULE_wait_statement = 252;
vhdlParser.RULE_waveform = 253;
vhdlParser.RULE_waveform_element = 254;


function Abstract_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_abstract_literal;
    return this;
}

Abstract_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abstract_literalContext.prototype.constructor = Abstract_literalContext;

Abstract_literalContext.prototype.INTEGER = function() {
    return this.getToken(vhdlParser.INTEGER, 0);
};

Abstract_literalContext.prototype.REAL_LITERAL = function() {
    return this.getToken(vhdlParser.REAL_LITERAL, 0);
};

Abstract_literalContext.prototype.BASE_LITERAL = function() {
    return this.getToken(vhdlParser.BASE_LITERAL, 0);
};

Abstract_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAbstract_literal(this);
	}
};

Abstract_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAbstract_literal(this);
	}
};




vhdlParser.Abstract_literalContext = Abstract_literalContext;

vhdlParser.prototype.abstract_literal = function() {

    var localctx = new Abstract_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, vhdlParser.RULE_abstract_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 510;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.BASE_LITERAL || _la===vhdlParser.REAL_LITERAL || _la===vhdlParser.INTEGER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Access_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_access_type_definition;
    return this;
}

Access_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Access_type_definitionContext.prototype.constructor = Access_type_definitionContext;

Access_type_definitionContext.prototype.ACCESS = function() {
    return this.getToken(vhdlParser.ACCESS, 0);
};

Access_type_definitionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Access_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAccess_type_definition(this);
	}
};

Access_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAccess_type_definition(this);
	}
};




vhdlParser.Access_type_definitionContext = Access_type_definitionContext;

vhdlParser.prototype.access_type_definition = function() {

    var localctx = new Access_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, vhdlParser.RULE_access_type_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.match(vhdlParser.ACCESS);
        this.state = 513;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Across_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_across_aspect;
    return this;
}

Across_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Across_aspectContext.prototype.constructor = Across_aspectContext;

Across_aspectContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Across_aspectContext.prototype.ACROSS = function() {
    return this.getToken(vhdlParser.ACROSS, 0);
};

Across_aspectContext.prototype.tolerance_aspect = function() {
    return this.getTypedRuleContext(Tolerance_aspectContext,0);
};

Across_aspectContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Across_aspectContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Across_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAcross_aspect(this);
	}
};

Across_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAcross_aspect(this);
	}
};




vhdlParser.Across_aspectContext = Across_aspectContext;

vhdlParser.prototype.across_aspect = function() {

    var localctx = new Across_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, vhdlParser.RULE_across_aspect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.identifier_list();
        this.state = 517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.TOLERANCE) {
            this.state = 516;
            this.tolerance_aspect();
        }

        this.state = 521;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 519;
            this.match(vhdlParser.VARASGN);
            this.state = 520;
            this.expression();
        }

        this.state = 523;
        this.match(vhdlParser.ACROSS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Actual_designatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_actual_designator;
    return this;
}

Actual_designatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Actual_designatorContext.prototype.constructor = Actual_designatorContext;

Actual_designatorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Actual_designatorContext.prototype.OPEN = function() {
    return this.getToken(vhdlParser.OPEN, 0);
};

Actual_designatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterActual_designator(this);
	}
};

Actual_designatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitActual_designator(this);
	}
};




vhdlParser.Actual_designatorContext = Actual_designatorContext;

vhdlParser.prototype.actual_designator = function() {

    var localctx = new Actual_designatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, vhdlParser.RULE_actual_designator);
    try {
        this.state = 527;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ABS:
        case vhdlParser.NEW:
        case vhdlParser.NOT:
        case vhdlParser.NULL_:
        case vhdlParser.BASE_LITERAL:
        case vhdlParser.BIT_STRING_LITERAL:
        case vhdlParser.REAL_LITERAL:
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.CHARACTER_LITERAL:
        case vhdlParser.STRING_LITERAL:
        case vhdlParser.LPAREN:
        case vhdlParser.PLUS:
        case vhdlParser.MINUS:
        case vhdlParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 525;
            this.expression();
            break;
        case vhdlParser.OPEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 526;
            this.match(vhdlParser.OPEN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Actual_parameter_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_actual_parameter_part;
    return this;
}

Actual_parameter_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Actual_parameter_partContext.prototype.constructor = Actual_parameter_partContext;

Actual_parameter_partContext.prototype.association_list = function() {
    return this.getTypedRuleContext(Association_listContext,0);
};

Actual_parameter_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterActual_parameter_part(this);
	}
};

Actual_parameter_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitActual_parameter_part(this);
	}
};




vhdlParser.Actual_parameter_partContext = Actual_parameter_partContext;

vhdlParser.prototype.actual_parameter_part = function() {

    var localctx = new Actual_parameter_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, vhdlParser.RULE_actual_parameter_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 529;
        this.association_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Actual_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_actual_part;
    return this;
}

Actual_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Actual_partContext.prototype.constructor = Actual_partContext;

Actual_partContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Actual_partContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Actual_partContext.prototype.actual_designator = function() {
    return this.getTypedRuleContext(Actual_designatorContext,0);
};

Actual_partContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Actual_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterActual_part(this);
	}
};

Actual_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitActual_part(this);
	}
};




vhdlParser.Actual_partContext = Actual_partContext;

vhdlParser.prototype.actual_part = function() {

    var localctx = new Actual_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, vhdlParser.RULE_actual_part);
    try {
        this.state = 537;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 531;
            this.name();
            this.state = 532;
            this.match(vhdlParser.LPAREN);
            this.state = 533;
            this.actual_designator();
            this.state = 534;
            this.match(vhdlParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 536;
            this.actual_designator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Adding_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_adding_operator;
    return this;
}

Adding_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Adding_operatorContext.prototype.constructor = Adding_operatorContext;

Adding_operatorContext.prototype.PLUS = function() {
    return this.getToken(vhdlParser.PLUS, 0);
};

Adding_operatorContext.prototype.MINUS = function() {
    return this.getToken(vhdlParser.MINUS, 0);
};

Adding_operatorContext.prototype.AMPERSAND = function() {
    return this.getToken(vhdlParser.AMPERSAND, 0);
};

Adding_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAdding_operator(this);
	}
};

Adding_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAdding_operator(this);
	}
};




vhdlParser.Adding_operatorContext = Adding_operatorContext;

vhdlParser.prototype.adding_operator = function() {

    var localctx = new Adding_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, vhdlParser.RULE_adding_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        _la = this._input.LA(1);
        if(!(((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (vhdlParser.AMPERSAND - 140)) | (1 << (vhdlParser.PLUS - 140)) | (1 << (vhdlParser.MINUS - 140)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_aggregate;
    return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

AggregateContext.prototype.element_association = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_associationContext);
    } else {
        return this.getTypedRuleContext(Element_associationContext,i);
    }
};

AggregateContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

AggregateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


AggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAggregate(this);
	}
};




vhdlParser.AggregateContext = AggregateContext;

vhdlParser.prototype.aggregate = function() {

    var localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, vhdlParser.RULE_aggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.match(vhdlParser.LPAREN);
        this.state = 542;
        this.element_association();
        this.state = 547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 543;
            this.match(vhdlParser.COMMA);
            this.state = 544;
            this.element_association();
            this.state = 549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 550;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Alias_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_alias_declaration;
    return this;
}

Alias_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_declarationContext.prototype.constructor = Alias_declarationContext;

Alias_declarationContext.prototype.ALIAS = function() {
    return this.getToken(vhdlParser.ALIAS, 0);
};

Alias_declarationContext.prototype.alias_designator = function() {
    return this.getTypedRuleContext(Alias_designatorContext,0);
};

Alias_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Alias_declarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Alias_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Alias_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Alias_declarationContext.prototype.alias_indication = function() {
    return this.getTypedRuleContext(Alias_indicationContext,0);
};

Alias_declarationContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

Alias_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAlias_declaration(this);
	}
};

Alias_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAlias_declaration(this);
	}
};




vhdlParser.Alias_declarationContext = Alias_declarationContext;

vhdlParser.prototype.alias_declaration = function() {

    var localctx = new Alias_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, vhdlParser.RULE_alias_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.match(vhdlParser.ALIAS);
        this.state = 553;
        this.alias_designator();
        this.state = 556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.COLON) {
            this.state = 554;
            this.match(vhdlParser.COLON);
            this.state = 555;
            this.alias_indication();
        }

        this.state = 558;
        this.match(vhdlParser.IS);
        this.state = 559;
        this.name();
        this.state = 561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LBRACKET) {
            this.state = 560;
            this.signature();
        }

        this.state = 563;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Alias_designatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_alias_designator;
    return this;
}

Alias_designatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_designatorContext.prototype.constructor = Alias_designatorContext;

Alias_designatorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Alias_designatorContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
};

Alias_designatorContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

Alias_designatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAlias_designator(this);
	}
};

Alias_designatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAlias_designator(this);
	}
};




vhdlParser.Alias_designatorContext = Alias_designatorContext;

vhdlParser.prototype.alias_designator = function() {

    var localctx = new Alias_designatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, vhdlParser.RULE_alias_designator);
    try {
        this.state = 568;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 565;
            this.identifier();
            break;
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 566;
            this.match(vhdlParser.CHARACTER_LITERAL);
            break;
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 567;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Alias_indicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_alias_indication;
    return this;
}

Alias_indicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_indicationContext.prototype.constructor = Alias_indicationContext;

Alias_indicationContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Alias_indicationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Alias_indicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAlias_indication(this);
	}
};

Alias_indicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAlias_indication(this);
	}
};




vhdlParser.Alias_indicationContext = Alias_indicationContext;

vhdlParser.prototype.alias_indication = function() {

    var localctx = new Alias_indicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, vhdlParser.RULE_alias_indication);
    try {
        this.state = 572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 570;
            this.subnature_indication();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.subtype_indication();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AllocatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_allocator;
    return this;
}

AllocatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AllocatorContext.prototype.constructor = AllocatorContext;

AllocatorContext.prototype.NEW = function() {
    return this.getToken(vhdlParser.NEW, 0);
};

AllocatorContext.prototype.qualified_expression = function() {
    return this.getTypedRuleContext(Qualified_expressionContext,0);
};

AllocatorContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

AllocatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAllocator(this);
	}
};

AllocatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAllocator(this);
	}
};




vhdlParser.AllocatorContext = AllocatorContext;

vhdlParser.prototype.allocator = function() {

    var localctx = new AllocatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, vhdlParser.RULE_allocator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(vhdlParser.NEW);
        this.state = 577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.state = 575;
            this.qualified_expression();
            break;

        case 2:
            this.state = 576;
            this.subtype_indication();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Architecture_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_architecture_body;
    return this;
}

Architecture_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Architecture_bodyContext.prototype.constructor = Architecture_bodyContext;

Architecture_bodyContext.prototype.ARCHITECTURE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.ARCHITECTURE);
    } else {
        return this.getToken(vhdlParser.ARCHITECTURE, i);
    }
};


Architecture_bodyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Architecture_bodyContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Architecture_bodyContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Architecture_bodyContext.prototype.architecture_declarative_part = function() {
    return this.getTypedRuleContext(Architecture_declarative_partContext,0);
};

Architecture_bodyContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Architecture_bodyContext.prototype.architecture_statement_part = function() {
    return this.getTypedRuleContext(Architecture_statement_partContext,0);
};

Architecture_bodyContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Architecture_bodyContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Architecture_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArchitecture_body(this);
	}
};

Architecture_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArchitecture_body(this);
	}
};




vhdlParser.Architecture_bodyContext = Architecture_bodyContext;

vhdlParser.prototype.architecture_body = function() {

    var localctx = new Architecture_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, vhdlParser.RULE_architecture_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 579;
        this.match(vhdlParser.ARCHITECTURE);
        this.state = 580;
        this.identifier();
        this.state = 581;
        this.match(vhdlParser.OF);
        this.state = 582;
        this.identifier();
        this.state = 583;
        this.match(vhdlParser.IS);
        this.state = 584;
        this.architecture_declarative_part();
        this.state = 585;
        this.match(vhdlParser.BEGIN);
        this.state = 586;
        this.architecture_statement_part();
        this.state = 587;
        this.match(vhdlParser.END);
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ARCHITECTURE) {
            this.state = 588;
            this.match(vhdlParser.ARCHITECTURE);
        }

        this.state = 592;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 591;
            this.identifier();
        }

        this.state = 594;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Architecture_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_architecture_declarative_part;
    return this;
}

Architecture_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Architecture_declarative_partContext.prototype.constructor = Architecture_declarative_partContext;

Architecture_declarative_partContext.prototype.block_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Block_declarative_itemContext,i);
    }
};

Architecture_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArchitecture_declarative_part(this);
	}
};

Architecture_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArchitecture_declarative_part(this);
	}
};




vhdlParser.Architecture_declarative_partContext = Architecture_declarative_partContext;

vhdlParser.prototype.architecture_declarative_part = function() {

    var localctx = new Architecture_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, vhdlParser.RULE_architecture_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 596;
            this.block_declarative_item();
            this.state = 601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Architecture_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_architecture_statement;
    return this;
}

Architecture_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Architecture_statementContext.prototype.constructor = Architecture_statementContext;

Architecture_statementContext.prototype.block_statement = function() {
    return this.getTypedRuleContext(Block_statementContext,0);
};

Architecture_statementContext.prototype.process_statement = function() {
    return this.getTypedRuleContext(Process_statementContext,0);
};

Architecture_statementContext.prototype.concurrent_procedure_call_statement = function() {
    return this.getTypedRuleContext(Concurrent_procedure_call_statementContext,0);
};

Architecture_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Architecture_statementContext.prototype.concurrent_assertion_statement = function() {
    return this.getTypedRuleContext(Concurrent_assertion_statementContext,0);
};

Architecture_statementContext.prototype.concurrent_signal_assignment_statement = function() {
    return this.getTypedRuleContext(Concurrent_signal_assignment_statementContext,0);
};

Architecture_statementContext.prototype.POSTPONED = function() {
    return this.getToken(vhdlParser.POSTPONED, 0);
};

Architecture_statementContext.prototype.component_instantiation_statement = function() {
    return this.getTypedRuleContext(Component_instantiation_statementContext,0);
};

Architecture_statementContext.prototype.generate_statement = function() {
    return this.getTypedRuleContext(Generate_statementContext,0);
};

Architecture_statementContext.prototype.concurrent_break_statement = function() {
    return this.getTypedRuleContext(Concurrent_break_statementContext,0);
};

Architecture_statementContext.prototype.simultaneous_statement = function() {
    return this.getTypedRuleContext(Simultaneous_statementContext,0);
};

Architecture_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArchitecture_statement(this);
	}
};

Architecture_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArchitecture_statement(this);
	}
};




vhdlParser.Architecture_statementContext = Architecture_statementContext;

vhdlParser.prototype.architecture_statement = function() {

    var localctx = new Architecture_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, vhdlParser.RULE_architecture_statement);
    try {
        this.state = 623;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.block_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 603;
            this.process_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 605;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            if(la_===1) {
                this.state = 604;
                this.label_colon();

            }
            this.state = 607;
            this.concurrent_procedure_call_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 609;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 608;
                this.label_colon();

            }
            this.state = 611;
            this.concurrent_assertion_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 613;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 612;
                this.label_colon();

            }
            this.state = 616;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 615;
                this.match(vhdlParser.POSTPONED);

            }
            this.state = 618;
            this.concurrent_signal_assignment_statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 619;
            this.component_instantiation_statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 620;
            this.generate_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 621;
            this.concurrent_break_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 622;
            this.simultaneous_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Architecture_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_architecture_statement_part;
    return this;
}

Architecture_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Architecture_statement_partContext.prototype.constructor = Architecture_statement_partContext;

Architecture_statement_partContext.prototype.architecture_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Architecture_statementContext);
    } else {
        return this.getTypedRuleContext(Architecture_statementContext,i);
    }
};

Architecture_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArchitecture_statement_part(this);
	}
};

Architecture_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArchitecture_statement_part(this);
	}
};




vhdlParser.Architecture_statement_partContext = Architecture_statement_partContext;

vhdlParser.prototype.architecture_statement_part = function() {

    var localctx = new Architecture_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, vhdlParser.RULE_architecture_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
            this.state = 625;
            this.architecture_statement();
            this.state = 630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_array_nature_definition;
    return this;
}

Array_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_nature_definitionContext.prototype.constructor = Array_nature_definitionContext;

Array_nature_definitionContext.prototype.unconstrained_nature_definition = function() {
    return this.getTypedRuleContext(Unconstrained_nature_definitionContext,0);
};

Array_nature_definitionContext.prototype.constrained_nature_definition = function() {
    return this.getTypedRuleContext(Constrained_nature_definitionContext,0);
};

Array_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArray_nature_definition(this);
	}
};

Array_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArray_nature_definition(this);
	}
};




vhdlParser.Array_nature_definitionContext = Array_nature_definitionContext;

vhdlParser.prototype.array_nature_definition = function() {

    var localctx = new Array_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, vhdlParser.RULE_array_nature_definition);
    try {
        this.state = 633;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 631;
            this.unconstrained_nature_definition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 632;
            this.constrained_nature_definition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_array_type_definition;
    return this;
}

Array_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_type_definitionContext.prototype.constructor = Array_type_definitionContext;

Array_type_definitionContext.prototype.unconstrained_array_definition = function() {
    return this.getTypedRuleContext(Unconstrained_array_definitionContext,0);
};

Array_type_definitionContext.prototype.constrained_array_definition = function() {
    return this.getTypedRuleContext(Constrained_array_definitionContext,0);
};

Array_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterArray_type_definition(this);
	}
};

Array_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitArray_type_definition(this);
	}
};




vhdlParser.Array_type_definitionContext = Array_type_definitionContext;

vhdlParser.prototype.array_type_definition = function() {

    var localctx = new Array_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, vhdlParser.RULE_array_type_definition);
    try {
        this.state = 637;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 635;
            this.unconstrained_array_definition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 636;
            this.constrained_array_definition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_assertion;
    return this;
}

AssertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssertionContext.prototype.constructor = AssertionContext;

AssertionContext.prototype.ASSERT = function() {
    return this.getToken(vhdlParser.ASSERT, 0);
};

AssertionContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

AssertionContext.prototype.REPORT = function() {
    return this.getToken(vhdlParser.REPORT, 0);
};

AssertionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

AssertionContext.prototype.SEVERITY = function() {
    return this.getToken(vhdlParser.SEVERITY, 0);
};

AssertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAssertion(this);
	}
};

AssertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAssertion(this);
	}
};




vhdlParser.AssertionContext = AssertionContext;

vhdlParser.prototype.assertion = function() {

    var localctx = new AssertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, vhdlParser.RULE_assertion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.match(vhdlParser.ASSERT);
        this.state = 640;
        this.condition();
        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.REPORT) {
            this.state = 641;
            this.match(vhdlParser.REPORT);
            this.state = 642;
            this.expression();
        }

        this.state = 647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.SEVERITY) {
            this.state = 645;
            this.match(vhdlParser.SEVERITY);
            this.state = 646;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assertion_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_assertion_statement;
    return this;
}

Assertion_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assertion_statementContext.prototype.constructor = Assertion_statementContext;

Assertion_statementContext.prototype.assertion = function() {
    return this.getTypedRuleContext(AssertionContext,0);
};

Assertion_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Assertion_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Assertion_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAssertion_statement(this);
	}
};

Assertion_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAssertion_statement(this);
	}
};




vhdlParser.Assertion_statementContext = Assertion_statementContext;

vhdlParser.prototype.assertion_statement = function() {

    var localctx = new Assertion_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, vhdlParser.RULE_assertion_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 649;
            this.label_colon();
        }

        this.state = 652;
        this.assertion();
        this.state = 653;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Association_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_association_element;
    return this;
}

Association_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Association_elementContext.prototype.constructor = Association_elementContext;

Association_elementContext.prototype.actual_part = function() {
    return this.getTypedRuleContext(Actual_partContext,0);
};

Association_elementContext.prototype.formal_part = function() {
    return this.getTypedRuleContext(Formal_partContext,0);
};

Association_elementContext.prototype.ARROW = function() {
    return this.getToken(vhdlParser.ARROW, 0);
};

Association_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAssociation_element(this);
	}
};

Association_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAssociation_element(this);
	}
};




vhdlParser.Association_elementContext = Association_elementContext;

vhdlParser.prototype.association_element = function() {

    var localctx = new Association_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, vhdlParser.RULE_association_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 655;
            this.formal_part();
            this.state = 656;
            this.match(vhdlParser.ARROW);

        }
        this.state = 660;
        this.actual_part();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Association_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_association_list;
    return this;
}

Association_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Association_listContext.prototype.constructor = Association_listContext;

Association_listContext.prototype.association_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Association_elementContext);
    } else {
        return this.getTypedRuleContext(Association_elementContext,i);
    }
};

Association_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Association_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAssociation_list(this);
	}
};

Association_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAssociation_list(this);
	}
};




vhdlParser.Association_listContext = Association_listContext;

vhdlParser.prototype.association_list = function() {

    var localctx = new Association_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, vhdlParser.RULE_association_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this.association_element();
        this.state = 667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 663;
            this.match(vhdlParser.COMMA);
            this.state = 664;
            this.association_element();
            this.state = 669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_attribute_declaration;
    return this;
}

Attribute_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_declarationContext.prototype.constructor = Attribute_declarationContext;

Attribute_declarationContext.prototype.ATTRIBUTE = function() {
    return this.getToken(vhdlParser.ATTRIBUTE, 0);
};

Attribute_declarationContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Attribute_declarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Attribute_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Attribute_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAttribute_declaration(this);
	}
};

Attribute_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAttribute_declaration(this);
	}
};




vhdlParser.Attribute_declarationContext = Attribute_declarationContext;

vhdlParser.prototype.attribute_declaration = function() {

    var localctx = new Attribute_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, vhdlParser.RULE_attribute_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this.match(vhdlParser.ATTRIBUTE);
        this.state = 671;
        this.label_colon();
        this.state = 672;
        this.name();
        this.state = 673;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_designatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_attribute_designator;
    return this;
}

Attribute_designatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_designatorContext.prototype.constructor = Attribute_designatorContext;

Attribute_designatorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Attribute_designatorContext.prototype.RANGE = function() {
    return this.getToken(vhdlParser.RANGE, 0);
};

Attribute_designatorContext.prototype.REVERSE_RANGE = function() {
    return this.getToken(vhdlParser.REVERSE_RANGE, 0);
};

Attribute_designatorContext.prototype.ACROSS = function() {
    return this.getToken(vhdlParser.ACROSS, 0);
};

Attribute_designatorContext.prototype.THROUGH = function() {
    return this.getToken(vhdlParser.THROUGH, 0);
};

Attribute_designatorContext.prototype.REFERENCE = function() {
    return this.getToken(vhdlParser.REFERENCE, 0);
};

Attribute_designatorContext.prototype.TOLERANCE = function() {
    return this.getToken(vhdlParser.TOLERANCE, 0);
};

Attribute_designatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAttribute_designator(this);
	}
};

Attribute_designatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAttribute_designator(this);
	}
};




vhdlParser.Attribute_designatorContext = Attribute_designatorContext;

vhdlParser.prototype.attribute_designator = function() {

    var localctx = new Attribute_designatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, vhdlParser.RULE_attribute_designator);
    try {
        this.state = 682;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 675;
            this.identifier();
            break;
        case vhdlParser.RANGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 676;
            this.match(vhdlParser.RANGE);
            break;
        case vhdlParser.REVERSE_RANGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 677;
            this.match(vhdlParser.REVERSE_RANGE);
            break;
        case vhdlParser.ACROSS:
            this.enterOuterAlt(localctx, 4);
            this.state = 678;
            this.match(vhdlParser.ACROSS);
            break;
        case vhdlParser.THROUGH:
            this.enterOuterAlt(localctx, 5);
            this.state = 679;
            this.match(vhdlParser.THROUGH);
            break;
        case vhdlParser.REFERENCE:
            this.enterOuterAlt(localctx, 6);
            this.state = 680;
            this.match(vhdlParser.REFERENCE);
            break;
        case vhdlParser.TOLERANCE:
            this.enterOuterAlt(localctx, 7);
            this.state = 681;
            this.match(vhdlParser.TOLERANCE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_attribute_specification;
    return this;
}

Attribute_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_specificationContext.prototype.constructor = Attribute_specificationContext;

Attribute_specificationContext.prototype.ATTRIBUTE = function() {
    return this.getToken(vhdlParser.ATTRIBUTE, 0);
};

Attribute_specificationContext.prototype.attribute_designator = function() {
    return this.getTypedRuleContext(Attribute_designatorContext,0);
};

Attribute_specificationContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Attribute_specificationContext.prototype.entity_specification = function() {
    return this.getTypedRuleContext(Entity_specificationContext,0);
};

Attribute_specificationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Attribute_specificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Attribute_specificationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Attribute_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAttribute_specification(this);
	}
};

Attribute_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAttribute_specification(this);
	}
};




vhdlParser.Attribute_specificationContext = Attribute_specificationContext;

vhdlParser.prototype.attribute_specification = function() {

    var localctx = new Attribute_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, vhdlParser.RULE_attribute_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(vhdlParser.ATTRIBUTE);
        this.state = 685;
        this.attribute_designator();
        this.state = 686;
        this.match(vhdlParser.OF);
        this.state = 687;
        this.entity_specification();
        this.state = 688;
        this.match(vhdlParser.IS);
        this.state = 689;
        this.expression();
        this.state = 690;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Base_unit_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_base_unit_declaration;
    return this;
}

Base_unit_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Base_unit_declarationContext.prototype.constructor = Base_unit_declarationContext;

Base_unit_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Base_unit_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Base_unit_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBase_unit_declaration(this);
	}
};

Base_unit_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBase_unit_declaration(this);
	}
};




vhdlParser.Base_unit_declarationContext = Base_unit_declarationContext;

vhdlParser.prototype.base_unit_declaration = function() {

    var localctx = new Base_unit_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, vhdlParser.RULE_base_unit_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.identifier();
        this.state = 693;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binding_indicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_binding_indication;
    return this;
}

Binding_indicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binding_indicationContext.prototype.constructor = Binding_indicationContext;

Binding_indicationContext.prototype.USE = function() {
    return this.getToken(vhdlParser.USE, 0);
};

Binding_indicationContext.prototype.entity_aspect = function() {
    return this.getTypedRuleContext(Entity_aspectContext,0);
};

Binding_indicationContext.prototype.generic_map_aspect = function() {
    return this.getTypedRuleContext(Generic_map_aspectContext,0);
};

Binding_indicationContext.prototype.port_map_aspect = function() {
    return this.getTypedRuleContext(Port_map_aspectContext,0);
};

Binding_indicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBinding_indication(this);
	}
};

Binding_indicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBinding_indication(this);
	}
};




vhdlParser.Binding_indicationContext = Binding_indicationContext;

vhdlParser.prototype.binding_indication = function() {

    var localctx = new Binding_indicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, vhdlParser.RULE_binding_indication);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.USE) {
            this.state = 695;
            this.match(vhdlParser.USE);
            this.state = 696;
            this.entity_aspect();
        }

        this.state = 700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC) {
            this.state = 699;
            this.generic_map_aspect();
        }

        this.state = 703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PORT) {
            this.state = 702;
            this.port_map_aspect();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_configurationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_configuration;
    return this;
}

Block_configurationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_configurationContext.prototype.constructor = Block_configurationContext;

Block_configurationContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.FOR);
    } else {
        return this.getToken(vhdlParser.FOR, i);
    }
};


Block_configurationContext.prototype.block_specification = function() {
    return this.getTypedRuleContext(Block_specificationContext,0);
};

Block_configurationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Block_configurationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Block_configurationContext.prototype.use_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Use_clauseContext);
    } else {
        return this.getTypedRuleContext(Use_clauseContext,i);
    }
};

Block_configurationContext.prototype.configuration_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Configuration_itemContext);
    } else {
        return this.getTypedRuleContext(Configuration_itemContext,i);
    }
};

Block_configurationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_configuration(this);
	}
};

Block_configurationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_configuration(this);
	}
};




vhdlParser.Block_configurationContext = Block_configurationContext;

vhdlParser.prototype.block_configuration = function() {

    var localctx = new Block_configurationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, vhdlParser.RULE_block_configuration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 705;
        this.match(vhdlParser.FOR);
        this.state = 706;
        this.block_specification();
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.USE) {
            this.state = 707;
            this.use_clause();
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.FOR) {
            this.state = 713;
            this.configuration_item();
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 719;
        this.match(vhdlParser.END);
        this.state = 720;
        this.match(vhdlParser.FOR);
        this.state = 721;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_declarative_item;
    return this;
}

Block_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_declarative_itemContext.prototype.constructor = Block_declarative_itemContext;

Block_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Block_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Block_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Block_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Block_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Block_declarative_itemContext.prototype.signal_declaration = function() {
    return this.getTypedRuleContext(Signal_declarationContext,0);
};

Block_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Block_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Block_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Block_declarative_itemContext.prototype.component_declaration = function() {
    return this.getTypedRuleContext(Component_declarationContext,0);
};

Block_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Block_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Block_declarative_itemContext.prototype.configuration_specification = function() {
    return this.getTypedRuleContext(Configuration_specificationContext,0);
};

Block_declarative_itemContext.prototype.disconnection_specification = function() {
    return this.getTypedRuleContext(Disconnection_specificationContext,0);
};

Block_declarative_itemContext.prototype.step_limit_specification = function() {
    return this.getTypedRuleContext(Step_limit_specificationContext,0);
};

Block_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Block_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Block_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Block_declarative_itemContext.prototype.nature_declaration = function() {
    return this.getTypedRuleContext(Nature_declarationContext,0);
};

Block_declarative_itemContext.prototype.subnature_declaration = function() {
    return this.getTypedRuleContext(Subnature_declarationContext,0);
};

Block_declarative_itemContext.prototype.quantity_declaration = function() {
    return this.getTypedRuleContext(Quantity_declarationContext,0);
};

Block_declarative_itemContext.prototype.terminal_declaration = function() {
    return this.getTypedRuleContext(Terminal_declarationContext,0);
};

Block_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_declarative_item(this);
	}
};

Block_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_declarative_item(this);
	}
};




vhdlParser.Block_declarative_itemContext = Block_declarative_itemContext;

vhdlParser.prototype.block_declarative_item = function() {

    var localctx = new Block_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, vhdlParser.RULE_block_declarative_item);
    try {
        this.state = 745;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 723;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 724;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 725;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 726;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 727;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 728;
            this.signal_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 729;
            this.variable_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 730;
            this.file_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 731;
            this.alias_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 732;
            this.component_declaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 733;
            this.attribute_declaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 734;
            this.attribute_specification();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 735;
            this.configuration_specification();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 736;
            this.disconnection_specification();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 737;
            this.step_limit_specification();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 738;
            this.use_clause();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 739;
            this.group_template_declaration();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 740;
            this.group_declaration();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 741;
            this.nature_declaration();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 742;
            this.subnature_declaration();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 743;
            this.quantity_declaration();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 744;
            this.terminal_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_declarative_part;
    return this;
}

Block_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_declarative_partContext.prototype.constructor = Block_declarative_partContext;

Block_declarative_partContext.prototype.block_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Block_declarative_itemContext,i);
    }
};

Block_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_declarative_part(this);
	}
};

Block_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_declarative_part(this);
	}
};




vhdlParser.Block_declarative_partContext = Block_declarative_partContext;

vhdlParser.prototype.block_declarative_part = function() {

    var localctx = new Block_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, vhdlParser.RULE_block_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 747;
            this.block_declarative_item();
            this.state = 752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_headerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_header;
    return this;
}

Block_headerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_headerContext.prototype.constructor = Block_headerContext;

Block_headerContext.prototype.generic_clause = function() {
    return this.getTypedRuleContext(Generic_clauseContext,0);
};

Block_headerContext.prototype.port_clause = function() {
    return this.getTypedRuleContext(Port_clauseContext,0);
};

Block_headerContext.prototype.generic_map_aspect = function() {
    return this.getTypedRuleContext(Generic_map_aspectContext,0);
};

Block_headerContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Block_headerContext.prototype.port_map_aspect = function() {
    return this.getTypedRuleContext(Port_map_aspectContext,0);
};

Block_headerContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_header(this);
	}
};

Block_headerContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_header(this);
	}
};




vhdlParser.Block_headerContext = Block_headerContext;

vhdlParser.prototype.block_header = function() {

    var localctx = new Block_headerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, vhdlParser.RULE_block_header);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 759;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC) {
            this.state = 753;
            this.generic_clause();
            this.state = 757;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.GENERIC) {
                this.state = 754;
                this.generic_map_aspect();
                this.state = 755;
                this.match(vhdlParser.SEMI);
            }

        }

        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PORT) {
            this.state = 761;
            this.port_clause();
            this.state = 765;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.PORT) {
                this.state = 762;
                this.port_map_aspect();
                this.state = 763;
                this.match(vhdlParser.SEMI);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_specification;
    return this;
}

Block_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_specificationContext.prototype.constructor = Block_specificationContext;

Block_specificationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Block_specificationContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Block_specificationContext.prototype.index_specification = function() {
    return this.getTypedRuleContext(Index_specificationContext,0);
};

Block_specificationContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Block_specificationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Block_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_specification(this);
	}
};

Block_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_specification(this);
	}
};




vhdlParser.Block_specificationContext = Block_specificationContext;

vhdlParser.prototype.block_specification = function() {

    var localctx = new Block_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, vhdlParser.RULE_block_specification);
    var _la = 0; // Token type
    try {
        this.state = 777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 769;
            this.identifier();
            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.LPAREN) {
                this.state = 770;
                this.match(vhdlParser.LPAREN);
                this.state = 771;
                this.index_specification();
                this.state = 772;
                this.match(vhdlParser.RPAREN);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_statement;
    return this;
}

Block_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_statementContext.prototype.constructor = Block_statementContext;

Block_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Block_statementContext.prototype.BLOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.BLOCK);
    } else {
        return this.getToken(vhdlParser.BLOCK, i);
    }
};


Block_statementContext.prototype.block_header = function() {
    return this.getTypedRuleContext(Block_headerContext,0);
};

Block_statementContext.prototype.block_declarative_part = function() {
    return this.getTypedRuleContext(Block_declarative_partContext,0);
};

Block_statementContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Block_statementContext.prototype.block_statement_part = function() {
    return this.getTypedRuleContext(Block_statement_partContext,0);
};

Block_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Block_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Block_statementContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Block_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Block_statementContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Block_statementContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Block_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Block_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_statement(this);
	}
};

Block_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_statement(this);
	}
};




vhdlParser.Block_statementContext = Block_statementContext;

vhdlParser.prototype.block_statement = function() {

    var localctx = new Block_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, vhdlParser.RULE_block_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.label_colon();
        this.state = 780;
        this.match(vhdlParser.BLOCK);
        this.state = 785;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 781;
            this.match(vhdlParser.LPAREN);
            this.state = 782;
            this.expression();
            this.state = 783;
            this.match(vhdlParser.RPAREN);
        }

        this.state = 788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS) {
            this.state = 787;
            this.match(vhdlParser.IS);
        }

        this.state = 790;
        this.block_header();
        this.state = 791;
        this.block_declarative_part();
        this.state = 792;
        this.match(vhdlParser.BEGIN);
        this.state = 793;
        this.block_statement_part();
        this.state = 794;
        this.match(vhdlParser.END);
        this.state = 795;
        this.match(vhdlParser.BLOCK);
        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 796;
            this.identifier();
        }

        this.state = 799;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Block_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_block_statement_part;
    return this;
}

Block_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_statement_partContext.prototype.constructor = Block_statement_partContext;

Block_statement_partContext.prototype.architecture_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Architecture_statementContext);
    } else {
        return this.getTypedRuleContext(Architecture_statementContext,i);
    }
};

Block_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBlock_statement_part(this);
	}
};

Block_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBlock_statement_part(this);
	}
};




vhdlParser.Block_statement_partContext = Block_statement_partContext;

vhdlParser.prototype.block_statement_part = function() {

    var localctx = new Block_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, vhdlParser.RULE_block_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
            this.state = 801;
            this.architecture_statement();
            this.state = 806;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Branch_quantity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_branch_quantity_declaration;
    return this;
}

Branch_quantity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Branch_quantity_declarationContext.prototype.constructor = Branch_quantity_declarationContext;

Branch_quantity_declarationContext.prototype.QUANTITY = function() {
    return this.getToken(vhdlParser.QUANTITY, 0);
};

Branch_quantity_declarationContext.prototype.terminal_aspect = function() {
    return this.getTypedRuleContext(Terminal_aspectContext,0);
};

Branch_quantity_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Branch_quantity_declarationContext.prototype.across_aspect = function() {
    return this.getTypedRuleContext(Across_aspectContext,0);
};

Branch_quantity_declarationContext.prototype.through_aspect = function() {
    return this.getTypedRuleContext(Through_aspectContext,0);
};

Branch_quantity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBranch_quantity_declaration(this);
	}
};

Branch_quantity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBranch_quantity_declaration(this);
	}
};




vhdlParser.Branch_quantity_declarationContext = Branch_quantity_declarationContext;

vhdlParser.prototype.branch_quantity_declaration = function() {

    var localctx = new Branch_quantity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, vhdlParser.RULE_branch_quantity_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.match(vhdlParser.QUANTITY);
        this.state = 809;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
        if(la_===1) {
            this.state = 808;
            this.across_aspect();

        }
        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 811;
            this.through_aspect();

        }
        this.state = 814;
        this.terminal_aspect();
        this.state = 815;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_break_element;
    return this;
}

Break_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_elementContext.prototype.constructor = Break_elementContext;

Break_elementContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Break_elementContext.prototype.ARROW = function() {
    return this.getToken(vhdlParser.ARROW, 0);
};

Break_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Break_elementContext.prototype.break_selector_clause = function() {
    return this.getTypedRuleContext(Break_selector_clauseContext,0);
};

Break_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBreak_element(this);
	}
};

Break_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBreak_element(this);
	}
};




vhdlParser.Break_elementContext = Break_elementContext;

vhdlParser.prototype.break_element = function() {

    var localctx = new Break_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, vhdlParser.RULE_break_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR) {
            this.state = 817;
            this.break_selector_clause();
        }

        this.state = 820;
        this.name();
        this.state = 821;
        this.match(vhdlParser.ARROW);
        this.state = 822;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_break_list;
    return this;
}

Break_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_listContext.prototype.constructor = Break_listContext;

Break_listContext.prototype.break_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Break_elementContext);
    } else {
        return this.getTypedRuleContext(Break_elementContext,i);
    }
};

Break_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Break_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBreak_list(this);
	}
};

Break_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBreak_list(this);
	}
};




vhdlParser.Break_listContext = Break_listContext;

vhdlParser.prototype.break_list = function() {

    var localctx = new Break_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, vhdlParser.RULE_break_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.break_element();
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 825;
            this.match(vhdlParser.COMMA);
            this.state = 826;
            this.break_element();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_selector_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_break_selector_clause;
    return this;
}

Break_selector_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_selector_clauseContext.prototype.constructor = Break_selector_clauseContext;

Break_selector_clauseContext.prototype.FOR = function() {
    return this.getToken(vhdlParser.FOR, 0);
};

Break_selector_clauseContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Break_selector_clauseContext.prototype.USE = function() {
    return this.getToken(vhdlParser.USE, 0);
};

Break_selector_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBreak_selector_clause(this);
	}
};

Break_selector_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBreak_selector_clause(this);
	}
};




vhdlParser.Break_selector_clauseContext = Break_selector_clauseContext;

vhdlParser.prototype.break_selector_clause = function() {

    var localctx = new Break_selector_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, vhdlParser.RULE_break_selector_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(vhdlParser.FOR);
        this.state = 833;
        this.name();
        this.state = 834;
        this.match(vhdlParser.USE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(vhdlParser.BREAK, 0);
};

Break_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Break_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Break_statementContext.prototype.break_list = function() {
    return this.getTypedRuleContext(Break_listContext,0);
};

Break_statementContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Break_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitBreak_statement(this);
	}
};




vhdlParser.Break_statementContext = Break_statementContext;

vhdlParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, vhdlParser.RULE_break_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 836;
            this.label_colon();
        }

        this.state = 839;
        this.match(vhdlParser.BREAK);
        this.state = 841;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
            this.state = 840;
            this.break_list();
        }

        this.state = 845;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.WHEN) {
            this.state = 843;
            this.match(vhdlParser.WHEN);
            this.state = 844;
            this.condition();
        }

        this.state = 847;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_case_statement;
    return this;
}

Case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statementContext.prototype.constructor = Case_statementContext;

Case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.CASE);
    } else {
        return this.getToken(vhdlParser.CASE, i);
    }
};


Case_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Case_statementContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Case_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Case_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Case_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Case_statementContext.prototype.case_statement_alternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Case_statement_alternativeContext);
    } else {
        return this.getTypedRuleContext(Case_statement_alternativeContext,i);
    }
};

Case_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterCase_statement(this);
	}
};

Case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitCase_statement(this);
	}
};




vhdlParser.Case_statementContext = Case_statementContext;

vhdlParser.prototype.case_statement = function() {

    var localctx = new Case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, vhdlParser.RULE_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 849;
            this.label_colon();
        }

        this.state = 852;
        this.match(vhdlParser.CASE);
        this.state = 853;
        this.expression();
        this.state = 854;
        this.match(vhdlParser.IS);
        this.state = 856; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 855;
            this.case_statement_alternative();
            this.state = 858; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===vhdlParser.WHEN);
        this.state = 860;
        this.match(vhdlParser.END);
        this.state = 861;
        this.match(vhdlParser.CASE);
        this.state = 863;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 862;
            this.identifier();
        }

        this.state = 865;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_statement_alternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_case_statement_alternative;
    return this;
}

Case_statement_alternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_statement_alternativeContext.prototype.constructor = Case_statement_alternativeContext;

Case_statement_alternativeContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Case_statement_alternativeContext.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Case_statement_alternativeContext.prototype.ARROW = function() {
    return this.getToken(vhdlParser.ARROW, 0);
};

Case_statement_alternativeContext.prototype.sequence_of_statements = function() {
    return this.getTypedRuleContext(Sequence_of_statementsContext,0);
};

Case_statement_alternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterCase_statement_alternative(this);
	}
};

Case_statement_alternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitCase_statement_alternative(this);
	}
};




vhdlParser.Case_statement_alternativeContext = Case_statement_alternativeContext;

vhdlParser.prototype.case_statement_alternative = function() {

    var localctx = new Case_statement_alternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, vhdlParser.RULE_case_statement_alternative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this.match(vhdlParser.WHEN);
        this.state = 868;
        this.choices();
        this.state = 869;
        this.match(vhdlParser.ARROW);
        this.state = 870;
        this.sequence_of_statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_choice;
    return this;
}

ChoiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceContext.prototype.constructor = ChoiceContext;

ChoiceContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ChoiceContext.prototype.discrete_range = function() {
    return this.getTypedRuleContext(Discrete_rangeContext,0);
};

ChoiceContext.prototype.simple_expression = function() {
    return this.getTypedRuleContext(Simple_expressionContext,0);
};

ChoiceContext.prototype.OTHERS = function() {
    return this.getToken(vhdlParser.OTHERS, 0);
};

ChoiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterChoice(this);
	}
};

ChoiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitChoice(this);
	}
};




vhdlParser.ChoiceContext = ChoiceContext;

vhdlParser.prototype.choice = function() {

    var localctx = new ChoiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, vhdlParser.RULE_choice);
    try {
        this.state = 876;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 872;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 873;
            this.discrete_range();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 874;
            this.simple_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 875;
            this.match(vhdlParser.OTHERS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ChoicesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_choices;
    return this;
}

ChoicesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoicesContext.prototype.constructor = ChoicesContext;

ChoicesContext.prototype.choice = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChoiceContext);
    } else {
        return this.getTypedRuleContext(ChoiceContext,i);
    }
};

ChoicesContext.prototype.BAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.BAR);
    } else {
        return this.getToken(vhdlParser.BAR, i);
    }
};


ChoicesContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterChoices(this);
	}
};

ChoicesContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitChoices(this);
	}
};




vhdlParser.ChoicesContext = ChoicesContext;

vhdlParser.prototype.choices = function() {

    var localctx = new ChoicesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, vhdlParser.RULE_choices);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.choice();
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.BAR) {
            this.state = 879;
            this.match(vhdlParser.BAR);
            this.state = 880;
            this.choice();
            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Component_configurationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_component_configuration;
    return this;
}

Component_configurationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Component_configurationContext.prototype.constructor = Component_configurationContext;

Component_configurationContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.FOR);
    } else {
        return this.getToken(vhdlParser.FOR, i);
    }
};


Component_configurationContext.prototype.component_specification = function() {
    return this.getTypedRuleContext(Component_specificationContext,0);
};

Component_configurationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Component_configurationContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Component_configurationContext.prototype.binding_indication = function() {
    return this.getTypedRuleContext(Binding_indicationContext,0);
};

Component_configurationContext.prototype.block_configuration = function() {
    return this.getTypedRuleContext(Block_configurationContext,0);
};

Component_configurationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComponent_configuration(this);
	}
};

Component_configurationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComponent_configuration(this);
	}
};




vhdlParser.Component_configurationContext = Component_configurationContext;

vhdlParser.prototype.component_configuration = function() {

    var localctx = new Component_configurationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, vhdlParser.RULE_component_configuration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886;
        this.match(vhdlParser.FOR);
        this.state = 887;
        this.component_specification();
        this.state = 891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC || _la===vhdlParser.PORT || _la===vhdlParser.USE || _la===vhdlParser.SEMI) {
            this.state = 888;
            this.binding_indication();
            this.state = 889;
            this.match(vhdlParser.SEMI);
        }

        this.state = 894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR) {
            this.state = 893;
            this.block_configuration();
        }

        this.state = 896;
        this.match(vhdlParser.END);
        this.state = 897;
        this.match(vhdlParser.FOR);
        this.state = 898;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Component_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_component_declaration;
    return this;
}

Component_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Component_declarationContext.prototype.constructor = Component_declarationContext;

Component_declarationContext.prototype.COMPONENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMPONENT);
    } else {
        return this.getToken(vhdlParser.COMPONENT, i);
    }
};


Component_declarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Component_declarationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Component_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Component_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Component_declarationContext.prototype.generic_clause = function() {
    return this.getTypedRuleContext(Generic_clauseContext,0);
};

Component_declarationContext.prototype.port_clause = function() {
    return this.getTypedRuleContext(Port_clauseContext,0);
};

Component_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComponent_declaration(this);
	}
};

Component_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComponent_declaration(this);
	}
};




vhdlParser.Component_declarationContext = Component_declarationContext;

vhdlParser.prototype.component_declaration = function() {

    var localctx = new Component_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, vhdlParser.RULE_component_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        this.match(vhdlParser.COMPONENT);
        this.state = 901;
        this.identifier();
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS) {
            this.state = 902;
            this.match(vhdlParser.IS);
        }

        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC) {
            this.state = 905;
            this.generic_clause();
        }

        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PORT) {
            this.state = 908;
            this.port_clause();
        }

        this.state = 911;
        this.match(vhdlParser.END);
        this.state = 912;
        this.match(vhdlParser.COMPONENT);
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 913;
            this.identifier();
        }

        this.state = 916;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Component_instantiation_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_component_instantiation_statement;
    return this;
}

Component_instantiation_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Component_instantiation_statementContext.prototype.constructor = Component_instantiation_statementContext;

Component_instantiation_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Component_instantiation_statementContext.prototype.instantiated_unit = function() {
    return this.getTypedRuleContext(Instantiated_unitContext,0);
};

Component_instantiation_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Component_instantiation_statementContext.prototype.generic_map_aspect = function() {
    return this.getTypedRuleContext(Generic_map_aspectContext,0);
};

Component_instantiation_statementContext.prototype.port_map_aspect = function() {
    return this.getTypedRuleContext(Port_map_aspectContext,0);
};

Component_instantiation_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComponent_instantiation_statement(this);
	}
};

Component_instantiation_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComponent_instantiation_statement(this);
	}
};




vhdlParser.Component_instantiation_statementContext = Component_instantiation_statementContext;

vhdlParser.prototype.component_instantiation_statement = function() {

    var localctx = new Component_instantiation_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, vhdlParser.RULE_component_instantiation_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.label_colon();
        this.state = 919;
        this.instantiated_unit();
        this.state = 921;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC) {
            this.state = 920;
            this.generic_map_aspect();
        }

        this.state = 924;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PORT) {
            this.state = 923;
            this.port_map_aspect();
        }

        this.state = 926;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Component_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_component_specification;
    return this;
}

Component_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Component_specificationContext.prototype.constructor = Component_specificationContext;

Component_specificationContext.prototype.instantiation_list = function() {
    return this.getTypedRuleContext(Instantiation_listContext,0);
};

Component_specificationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Component_specificationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Component_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComponent_specification(this);
	}
};

Component_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComponent_specification(this);
	}
};




vhdlParser.Component_specificationContext = Component_specificationContext;

vhdlParser.prototype.component_specification = function() {

    var localctx = new Component_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, vhdlParser.RULE_component_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 928;
        this.instantiation_list();
        this.state = 929;
        this.match(vhdlParser.COLON);
        this.state = 930;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Composite_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_composite_nature_definition;
    return this;
}

Composite_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Composite_nature_definitionContext.prototype.constructor = Composite_nature_definitionContext;

Composite_nature_definitionContext.prototype.array_nature_definition = function() {
    return this.getTypedRuleContext(Array_nature_definitionContext,0);
};

Composite_nature_definitionContext.prototype.record_nature_definition = function() {
    return this.getTypedRuleContext(Record_nature_definitionContext,0);
};

Composite_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComposite_nature_definition(this);
	}
};

Composite_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComposite_nature_definition(this);
	}
};




vhdlParser.Composite_nature_definitionContext = Composite_nature_definitionContext;

vhdlParser.prototype.composite_nature_definition = function() {

    var localctx = new Composite_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, vhdlParser.RULE_composite_nature_definition);
    try {
        this.state = 934;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ARRAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 932;
            this.array_nature_definition();
            break;
        case vhdlParser.RECORD:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.record_nature_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Composite_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_composite_type_definition;
    return this;
}

Composite_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Composite_type_definitionContext.prototype.constructor = Composite_type_definitionContext;

Composite_type_definitionContext.prototype.array_type_definition = function() {
    return this.getTypedRuleContext(Array_type_definitionContext,0);
};

Composite_type_definitionContext.prototype.record_type_definition = function() {
    return this.getTypedRuleContext(Record_type_definitionContext,0);
};

Composite_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterComposite_type_definition(this);
	}
};

Composite_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitComposite_type_definition(this);
	}
};




vhdlParser.Composite_type_definitionContext = Composite_type_definitionContext;

vhdlParser.prototype.composite_type_definition = function() {

    var localctx = new Composite_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, vhdlParser.RULE_composite_type_definition);
    try {
        this.state = 938;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ARRAY:
            this.enterOuterAlt(localctx, 1);
            this.state = 936;
            this.array_type_definition();
            break;
        case vhdlParser.RECORD:
            this.enterOuterAlt(localctx, 2);
            this.state = 937;
            this.record_type_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Concurrent_assertion_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_concurrent_assertion_statement;
    return this;
}

Concurrent_assertion_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concurrent_assertion_statementContext.prototype.constructor = Concurrent_assertion_statementContext;

Concurrent_assertion_statementContext.prototype.assertion = function() {
    return this.getTypedRuleContext(AssertionContext,0);
};

Concurrent_assertion_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Concurrent_assertion_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Concurrent_assertion_statementContext.prototype.POSTPONED = function() {
    return this.getToken(vhdlParser.POSTPONED, 0);
};

Concurrent_assertion_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConcurrent_assertion_statement(this);
	}
};

Concurrent_assertion_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConcurrent_assertion_statement(this);
	}
};




vhdlParser.Concurrent_assertion_statementContext = Concurrent_assertion_statementContext;

vhdlParser.prototype.concurrent_assertion_statement = function() {

    var localctx = new Concurrent_assertion_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, vhdlParser.RULE_concurrent_assertion_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 940;
            this.label_colon();
        }

        this.state = 944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.POSTPONED) {
            this.state = 943;
            this.match(vhdlParser.POSTPONED);
        }

        this.state = 946;
        this.assertion();
        this.state = 947;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Concurrent_break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_concurrent_break_statement;
    return this;
}

Concurrent_break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concurrent_break_statementContext.prototype.constructor = Concurrent_break_statementContext;

Concurrent_break_statementContext.prototype.BREAK = function() {
    return this.getToken(vhdlParser.BREAK, 0);
};

Concurrent_break_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Concurrent_break_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Concurrent_break_statementContext.prototype.break_list = function() {
    return this.getTypedRuleContext(Break_listContext,0);
};

Concurrent_break_statementContext.prototype.sensitivity_clause = function() {
    return this.getTypedRuleContext(Sensitivity_clauseContext,0);
};

Concurrent_break_statementContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Concurrent_break_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Concurrent_break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConcurrent_break_statement(this);
	}
};

Concurrent_break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConcurrent_break_statement(this);
	}
};




vhdlParser.Concurrent_break_statementContext = Concurrent_break_statementContext;

vhdlParser.prototype.concurrent_break_statement = function() {

    var localctx = new Concurrent_break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, vhdlParser.RULE_concurrent_break_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 949;
            this.label_colon();
        }

        this.state = 952;
        this.match(vhdlParser.BREAK);
        this.state = 954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
            this.state = 953;
            this.break_list();
        }

        this.state = 957;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ON) {
            this.state = 956;
            this.sensitivity_clause();
        }

        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.WHEN) {
            this.state = 959;
            this.match(vhdlParser.WHEN);
            this.state = 960;
            this.condition();
        }

        this.state = 963;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Concurrent_procedure_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_concurrent_procedure_call_statement;
    return this;
}

Concurrent_procedure_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concurrent_procedure_call_statementContext.prototype.constructor = Concurrent_procedure_call_statementContext;

Concurrent_procedure_call_statementContext.prototype.procedure_call = function() {
    return this.getTypedRuleContext(Procedure_callContext,0);
};

Concurrent_procedure_call_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Concurrent_procedure_call_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Concurrent_procedure_call_statementContext.prototype.POSTPONED = function() {
    return this.getToken(vhdlParser.POSTPONED, 0);
};

Concurrent_procedure_call_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConcurrent_procedure_call_statement(this);
	}
};

Concurrent_procedure_call_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConcurrent_procedure_call_statement(this);
	}
};




vhdlParser.Concurrent_procedure_call_statementContext = Concurrent_procedure_call_statementContext;

vhdlParser.prototype.concurrent_procedure_call_statement = function() {

    var localctx = new Concurrent_procedure_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, vhdlParser.RULE_concurrent_procedure_call_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 966;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 965;
            this.label_colon();

        }
        this.state = 969;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.POSTPONED) {
            this.state = 968;
            this.match(vhdlParser.POSTPONED);
        }

        this.state = 971;
        this.procedure_call();
        this.state = 972;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Concurrent_signal_assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_concurrent_signal_assignment_statement;
    return this;
}

Concurrent_signal_assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concurrent_signal_assignment_statementContext.prototype.constructor = Concurrent_signal_assignment_statementContext;

Concurrent_signal_assignment_statementContext.prototype.conditional_signal_assignment = function() {
    return this.getTypedRuleContext(Conditional_signal_assignmentContext,0);
};

Concurrent_signal_assignment_statementContext.prototype.selected_signal_assignment = function() {
    return this.getTypedRuleContext(Selected_signal_assignmentContext,0);
};

Concurrent_signal_assignment_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Concurrent_signal_assignment_statementContext.prototype.POSTPONED = function() {
    return this.getToken(vhdlParser.POSTPONED, 0);
};

Concurrent_signal_assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConcurrent_signal_assignment_statement(this);
	}
};

Concurrent_signal_assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConcurrent_signal_assignment_statement(this);
	}
};




vhdlParser.Concurrent_signal_assignment_statementContext = Concurrent_signal_assignment_statementContext;

vhdlParser.prototype.concurrent_signal_assignment_statement = function() {

    var localctx = new Concurrent_signal_assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, vhdlParser.RULE_concurrent_signal_assignment_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 974;
            this.label_colon();

        }
        this.state = 978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.POSTPONED) {
            this.state = 977;
            this.match(vhdlParser.POSTPONED);
        }

        this.state = 982;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
        case vhdlParser.LPAREN:
            this.state = 980;
            this.conditional_signal_assignment();
            break;
        case vhdlParser.WITH:
            this.state = 981;
            this.selected_signal_assignment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitCondition(this);
	}
};




vhdlParser.ConditionContext = ConditionContext;

vhdlParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, vhdlParser.RULE_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 984;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Condition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_condition_clause;
    return this;
}

Condition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition_clauseContext.prototype.constructor = Condition_clauseContext;

Condition_clauseContext.prototype.UNTIL = function() {
    return this.getToken(vhdlParser.UNTIL, 0);
};

Condition_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Condition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterCondition_clause(this);
	}
};

Condition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitCondition_clause(this);
	}
};




vhdlParser.Condition_clauseContext = Condition_clauseContext;

vhdlParser.prototype.condition_clause = function() {

    var localctx = new Condition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, vhdlParser.RULE_condition_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.match(vhdlParser.UNTIL);
        this.state = 987;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_signal_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_conditional_signal_assignment;
    return this;
}

Conditional_signal_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_signal_assignmentContext.prototype.constructor = Conditional_signal_assignmentContext;

Conditional_signal_assignmentContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Conditional_signal_assignmentContext.prototype.LE = function() {
    return this.getToken(vhdlParser.LE, 0);
};

Conditional_signal_assignmentContext.prototype.opts = function() {
    return this.getTypedRuleContext(OptsContext,0);
};

Conditional_signal_assignmentContext.prototype.conditional_waveforms = function() {
    return this.getTypedRuleContext(Conditional_waveformsContext,0);
};

Conditional_signal_assignmentContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Conditional_signal_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConditional_signal_assignment(this);
	}
};

Conditional_signal_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConditional_signal_assignment(this);
	}
};




vhdlParser.Conditional_signal_assignmentContext = Conditional_signal_assignmentContext;

vhdlParser.prototype.conditional_signal_assignment = function() {

    var localctx = new Conditional_signal_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, vhdlParser.RULE_conditional_signal_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 989;
        this.target();
        this.state = 990;
        this.match(vhdlParser.LE);
        this.state = 991;
        this.opts();
        this.state = 992;
        this.conditional_waveforms();
        this.state = 993;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_waveformsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_conditional_waveforms;
    return this;
}

Conditional_waveformsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_waveformsContext.prototype.constructor = Conditional_waveformsContext;

Conditional_waveformsContext.prototype.waveform = function() {
    return this.getTypedRuleContext(WaveformContext,0);
};

Conditional_waveformsContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Conditional_waveformsContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Conditional_waveformsContext.prototype.ELSE = function() {
    return this.getToken(vhdlParser.ELSE, 0);
};

Conditional_waveformsContext.prototype.conditional_waveforms = function() {
    return this.getTypedRuleContext(Conditional_waveformsContext,0);
};

Conditional_waveformsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConditional_waveforms(this);
	}
};

Conditional_waveformsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConditional_waveforms(this);
	}
};




vhdlParser.Conditional_waveformsContext = Conditional_waveformsContext;

vhdlParser.prototype.conditional_waveforms = function() {

    var localctx = new Conditional_waveformsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, vhdlParser.RULE_conditional_waveforms);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.waveform();
        this.state = 1002;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.WHEN) {
            this.state = 996;
            this.match(vhdlParser.WHEN);
            this.state = 997;
            this.condition();
            this.state = 1000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.ELSE) {
                this.state = 998;
                this.match(vhdlParser.ELSE);
                this.state = 999;
                this.conditional_waveforms();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Configuration_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_configuration_declaration;
    return this;
}

Configuration_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Configuration_declarationContext.prototype.constructor = Configuration_declarationContext;

Configuration_declarationContext.prototype.CONFIGURATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.CONFIGURATION);
    } else {
        return this.getToken(vhdlParser.CONFIGURATION, i);
    }
};


Configuration_declarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Configuration_declarationContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Configuration_declarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Configuration_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Configuration_declarationContext.prototype.configuration_declarative_part = function() {
    return this.getTypedRuleContext(Configuration_declarative_partContext,0);
};

Configuration_declarationContext.prototype.block_configuration = function() {
    return this.getTypedRuleContext(Block_configurationContext,0);
};

Configuration_declarationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Configuration_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Configuration_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConfiguration_declaration(this);
	}
};

Configuration_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConfiguration_declaration(this);
	}
};




vhdlParser.Configuration_declarationContext = Configuration_declarationContext;

vhdlParser.prototype.configuration_declaration = function() {

    var localctx = new Configuration_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, vhdlParser.RULE_configuration_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1004;
        this.match(vhdlParser.CONFIGURATION);
        this.state = 1005;
        this.identifier();
        this.state = 1006;
        this.match(vhdlParser.OF);
        this.state = 1007;
        this.name();
        this.state = 1008;
        this.match(vhdlParser.IS);
        this.state = 1009;
        this.configuration_declarative_part();
        this.state = 1010;
        this.block_configuration();
        this.state = 1011;
        this.match(vhdlParser.END);
        this.state = 1013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.CONFIGURATION) {
            this.state = 1012;
            this.match(vhdlParser.CONFIGURATION);
        }

        this.state = 1016;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1015;
            this.identifier();
        }

        this.state = 1018;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Configuration_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_configuration_declarative_item;
    return this;
}

Configuration_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Configuration_declarative_itemContext.prototype.constructor = Configuration_declarative_itemContext;

Configuration_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Configuration_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Configuration_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Configuration_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConfiguration_declarative_item(this);
	}
};

Configuration_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConfiguration_declarative_item(this);
	}
};




vhdlParser.Configuration_declarative_itemContext = Configuration_declarative_itemContext;

vhdlParser.prototype.configuration_declarative_item = function() {

    var localctx = new Configuration_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, vhdlParser.RULE_configuration_declarative_item);
    try {
        this.state = 1023;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.USE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1020;
            this.use_clause();
            break;
        case vhdlParser.ATTRIBUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1021;
            this.attribute_specification();
            break;
        case vhdlParser.GROUP:
            this.enterOuterAlt(localctx, 3);
            this.state = 1022;
            this.group_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Configuration_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_configuration_declarative_part;
    return this;
}

Configuration_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Configuration_declarative_partContext.prototype.constructor = Configuration_declarative_partContext;

Configuration_declarative_partContext.prototype.configuration_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Configuration_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Configuration_declarative_itemContext,i);
    }
};

Configuration_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConfiguration_declarative_part(this);
	}
};

Configuration_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConfiguration_declarative_part(this);
	}
};




vhdlParser.Configuration_declarative_partContext = Configuration_declarative_partContext;

vhdlParser.prototype.configuration_declarative_part = function() {

    var localctx = new Configuration_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, vhdlParser.RULE_configuration_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.ATTRIBUTE || _la===vhdlParser.GROUP || _la===vhdlParser.USE) {
            this.state = 1025;
            this.configuration_declarative_item();
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Configuration_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_configuration_item;
    return this;
}

Configuration_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Configuration_itemContext.prototype.constructor = Configuration_itemContext;

Configuration_itemContext.prototype.block_configuration = function() {
    return this.getTypedRuleContext(Block_configurationContext,0);
};

Configuration_itemContext.prototype.component_configuration = function() {
    return this.getTypedRuleContext(Component_configurationContext,0);
};

Configuration_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConfiguration_item(this);
	}
};

Configuration_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConfiguration_item(this);
	}
};




vhdlParser.Configuration_itemContext = Configuration_itemContext;

vhdlParser.prototype.configuration_item = function() {

    var localctx = new Configuration_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, vhdlParser.RULE_configuration_item);
    try {
        this.state = 1033;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1031;
            this.block_configuration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1032;
            this.component_configuration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Configuration_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_configuration_specification;
    return this;
}

Configuration_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Configuration_specificationContext.prototype.constructor = Configuration_specificationContext;

Configuration_specificationContext.prototype.FOR = function() {
    return this.getToken(vhdlParser.FOR, 0);
};

Configuration_specificationContext.prototype.component_specification = function() {
    return this.getTypedRuleContext(Component_specificationContext,0);
};

Configuration_specificationContext.prototype.binding_indication = function() {
    return this.getTypedRuleContext(Binding_indicationContext,0);
};

Configuration_specificationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Configuration_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConfiguration_specification(this);
	}
};

Configuration_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConfiguration_specification(this);
	}
};




vhdlParser.Configuration_specificationContext = Configuration_specificationContext;

vhdlParser.prototype.configuration_specification = function() {

    var localctx = new Configuration_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, vhdlParser.RULE_configuration_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        this.match(vhdlParser.FOR);
        this.state = 1036;
        this.component_specification();
        this.state = 1037;
        this.binding_indication();
        this.state = 1038;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_constant_declaration;
    return this;
}

Constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.CONSTANT = function() {
    return this.getToken(vhdlParser.CONSTANT, 0);
};

Constant_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Constant_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Constant_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Constant_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Constant_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Constant_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConstant_declaration(this);
	}
};

Constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConstant_declaration(this);
	}
};




vhdlParser.Constant_declarationContext = Constant_declarationContext;

vhdlParser.prototype.constant_declaration = function() {

    var localctx = new Constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, vhdlParser.RULE_constant_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.match(vhdlParser.CONSTANT);
        this.state = 1041;
        this.identifier_list();
        this.state = 1042;
        this.match(vhdlParser.COLON);
        this.state = 1043;
        this.subtype_indication();
        this.state = 1046;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1044;
            this.match(vhdlParser.VARASGN);
            this.state = 1045;
            this.expression();
        }

        this.state = 1048;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constrained_array_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_constrained_array_definition;
    return this;
}

Constrained_array_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constrained_array_definitionContext.prototype.constructor = Constrained_array_definitionContext;

Constrained_array_definitionContext.prototype.ARRAY = function() {
    return this.getToken(vhdlParser.ARRAY, 0);
};

Constrained_array_definitionContext.prototype.index_constraint = function() {
    return this.getTypedRuleContext(Index_constraintContext,0);
};

Constrained_array_definitionContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Constrained_array_definitionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Constrained_array_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConstrained_array_definition(this);
	}
};

Constrained_array_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConstrained_array_definition(this);
	}
};




vhdlParser.Constrained_array_definitionContext = Constrained_array_definitionContext;

vhdlParser.prototype.constrained_array_definition = function() {

    var localctx = new Constrained_array_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, vhdlParser.RULE_constrained_array_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this.match(vhdlParser.ARRAY);
        this.state = 1051;
        this.index_constraint();
        this.state = 1052;
        this.match(vhdlParser.OF);
        this.state = 1053;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constrained_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_constrained_nature_definition;
    return this;
}

Constrained_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constrained_nature_definitionContext.prototype.constructor = Constrained_nature_definitionContext;

Constrained_nature_definitionContext.prototype.ARRAY = function() {
    return this.getToken(vhdlParser.ARRAY, 0);
};

Constrained_nature_definitionContext.prototype.index_constraint = function() {
    return this.getTypedRuleContext(Index_constraintContext,0);
};

Constrained_nature_definitionContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Constrained_nature_definitionContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Constrained_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConstrained_nature_definition(this);
	}
};

Constrained_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConstrained_nature_definition(this);
	}
};




vhdlParser.Constrained_nature_definitionContext = Constrained_nature_definitionContext;

vhdlParser.prototype.constrained_nature_definition = function() {

    var localctx = new Constrained_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, vhdlParser.RULE_constrained_nature_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        this.match(vhdlParser.ARRAY);
        this.state = 1056;
        this.index_constraint();
        this.state = 1057;
        this.match(vhdlParser.OF);
        this.state = 1058;
        this.subnature_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.range_constraint = function() {
    return this.getTypedRuleContext(Range_constraintContext,0);
};

ConstraintContext.prototype.index_constraint = function() {
    return this.getTypedRuleContext(Index_constraintContext,0);
};

ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterConstraint(this);
	}
};

ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitConstraint(this);
	}
};




vhdlParser.ConstraintContext = ConstraintContext;

vhdlParser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, vhdlParser.RULE_constraint);
    try {
        this.state = 1062;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.RANGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1060;
            this.range_constraint();
            break;
        case vhdlParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1061;
            this.index_constraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Context_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_context_clause;
    return this;
}

Context_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Context_clauseContext.prototype.constructor = Context_clauseContext;

Context_clauseContext.prototype.context_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Context_itemContext);
    } else {
        return this.getTypedRuleContext(Context_itemContext,i);
    }
};

Context_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterContext_clause(this);
	}
};

Context_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitContext_clause(this);
	}
};




vhdlParser.Context_clauseContext = Context_clauseContext;

vhdlParser.prototype.context_clause = function() {

    var localctx = new Context_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, vhdlParser.RULE_context_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1067;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.LIBRARY || _la===vhdlParser.USE) {
            this.state = 1064;
            this.context_item();
            this.state = 1069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Context_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_context_item;
    return this;
}

Context_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Context_itemContext.prototype.constructor = Context_itemContext;

Context_itemContext.prototype.library_clause = function() {
    return this.getTypedRuleContext(Library_clauseContext,0);
};

Context_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Context_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterContext_item(this);
	}
};

Context_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitContext_item(this);
	}
};




vhdlParser.Context_itemContext = Context_itemContext;

vhdlParser.prototype.context_item = function() {

    var localctx = new Context_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, vhdlParser.RULE_context_item);
    try {
        this.state = 1072;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.LIBRARY:
            this.enterOuterAlt(localctx, 1);
            this.state = 1070;
            this.library_clause();
            break;
        case vhdlParser.USE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1071;
            this.use_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Delay_mechanismContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_delay_mechanism;
    return this;
}

Delay_mechanismContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delay_mechanismContext.prototype.constructor = Delay_mechanismContext;

Delay_mechanismContext.prototype.TRANSPORT = function() {
    return this.getToken(vhdlParser.TRANSPORT, 0);
};

Delay_mechanismContext.prototype.INERTIAL = function() {
    return this.getToken(vhdlParser.INERTIAL, 0);
};

Delay_mechanismContext.prototype.REJECT = function() {
    return this.getToken(vhdlParser.REJECT, 0);
};

Delay_mechanismContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Delay_mechanismContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDelay_mechanism(this);
	}
};

Delay_mechanismContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDelay_mechanism(this);
	}
};




vhdlParser.Delay_mechanismContext = Delay_mechanismContext;

vhdlParser.prototype.delay_mechanism = function() {

    var localctx = new Delay_mechanismContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, vhdlParser.RULE_delay_mechanism);
    var _la = 0; // Token type
    try {
        this.state = 1080;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.TRANSPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1074;
            this.match(vhdlParser.TRANSPORT);
            break;
        case vhdlParser.INERTIAL:
        case vhdlParser.REJECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1077;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.REJECT) {
                this.state = 1075;
                this.match(vhdlParser.REJECT);
                this.state = 1076;
                this.expression();
            }

            this.state = 1079;
            this.match(vhdlParser.INERTIAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_parse;
    return this;
}

ParseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParseContext.prototype.constructor = ParseContext;

ParseContext.prototype.EOF = function() {
    return this.getToken(vhdlParser.EOF, 0);
};

ParseContext.prototype.design_unit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Design_unitContext);
    } else {
        return this.getTypedRuleContext(Design_unitContext,i);
    }
};

ParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterParse(this);
	}
};

ParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitParse(this);
	}
};




vhdlParser.ParseContext = ParseContext;

vhdlParser.prototype.parse = function() {

    var localctx = new ParseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, vhdlParser.RULE_parse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1085;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ARCHITECTURE) | (1 << vhdlParser.CONFIGURATION) | (1 << vhdlParser.ENTITY))) !== 0) || _la===vhdlParser.LIBRARY || _la===vhdlParser.PACKAGE || _la===vhdlParser.USE) {
            this.state = 1082;
            this.design_unit();
            this.state = 1087;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1088;
        this.match(vhdlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Design_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_design_unit;
    return this;
}

Design_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Design_unitContext.prototype.constructor = Design_unitContext;

Design_unitContext.prototype.context_clause = function() {
    return this.getTypedRuleContext(Context_clauseContext,0);
};

Design_unitContext.prototype.library_unit = function() {
    return this.getTypedRuleContext(Library_unitContext,0);
};

Design_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDesign_unit(this);
	}
};

Design_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDesign_unit(this);
	}
};




vhdlParser.Design_unitContext = Design_unitContext;

vhdlParser.prototype.design_unit = function() {

    var localctx = new Design_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, vhdlParser.RULE_design_unit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this.context_clause();
        this.state = 1091;
        this.library_unit();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DesignatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_designator;
    return this;
}

DesignatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorContext.prototype.constructor = DesignatorContext;

DesignatorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DesignatorContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

DesignatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDesignator(this);
	}
};

DesignatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDesignator(this);
	}
};




vhdlParser.DesignatorContext = DesignatorContext;

vhdlParser.prototype.designator = function() {

    var localctx = new DesignatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, vhdlParser.RULE_designator);
    try {
        this.state = 1095;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1093;
            this.identifier();
            break;
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1094;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DirectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_direction;
    return this;
}

DirectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectionContext.prototype.constructor = DirectionContext;

DirectionContext.prototype.TO = function() {
    return this.getToken(vhdlParser.TO, 0);
};

DirectionContext.prototype.DOWNTO = function() {
    return this.getToken(vhdlParser.DOWNTO, 0);
};

DirectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDirection(this);
	}
};

DirectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDirection(this);
	}
};




vhdlParser.DirectionContext = DirectionContext;

vhdlParser.prototype.direction = function() {

    var localctx = new DirectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, vhdlParser.RULE_direction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.DOWNTO || _la===vhdlParser.TO)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Disconnection_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_disconnection_specification;
    return this;
}

Disconnection_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Disconnection_specificationContext.prototype.constructor = Disconnection_specificationContext;

Disconnection_specificationContext.prototype.DISCONNECT = function() {
    return this.getToken(vhdlParser.DISCONNECT, 0);
};

Disconnection_specificationContext.prototype.guarded_signal_specification = function() {
    return this.getTypedRuleContext(Guarded_signal_specificationContext,0);
};

Disconnection_specificationContext.prototype.AFTER = function() {
    return this.getToken(vhdlParser.AFTER, 0);
};

Disconnection_specificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Disconnection_specificationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Disconnection_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDisconnection_specification(this);
	}
};

Disconnection_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDisconnection_specification(this);
	}
};




vhdlParser.Disconnection_specificationContext = Disconnection_specificationContext;

vhdlParser.prototype.disconnection_specification = function() {

    var localctx = new Disconnection_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, vhdlParser.RULE_disconnection_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1099;
        this.match(vhdlParser.DISCONNECT);
        this.state = 1100;
        this.guarded_signal_specification();
        this.state = 1101;
        this.match(vhdlParser.AFTER);
        this.state = 1102;
        this.expression();
        this.state = 1103;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Discrete_rangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_discrete_range;
    return this;
}

Discrete_rangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Discrete_rangeContext.prototype.constructor = Discrete_rangeContext;

Discrete_rangeContext.prototype.range_decl = function() {
    return this.getTypedRuleContext(Range_declContext,0);
};

Discrete_rangeContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Discrete_rangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterDiscrete_range(this);
	}
};

Discrete_rangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitDiscrete_range(this);
	}
};




vhdlParser.Discrete_rangeContext = Discrete_rangeContext;

vhdlParser.prototype.discrete_range = function() {

    var localctx = new Discrete_rangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, vhdlParser.RULE_discrete_range);
    try {
        this.state = 1107;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1105;
            this.range_decl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1106;
            this.subtype_indication();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Element_associationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_element_association;
    return this;
}

Element_associationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_associationContext.prototype.constructor = Element_associationContext;

Element_associationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Element_associationContext.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Element_associationContext.prototype.ARROW = function() {
    return this.getToken(vhdlParser.ARROW, 0);
};

Element_associationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterElement_association(this);
	}
};

Element_associationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitElement_association(this);
	}
};




vhdlParser.Element_associationContext = Element_associationContext;

vhdlParser.prototype.element_association = function() {

    var localctx = new Element_associationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, vhdlParser.RULE_element_association);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1112;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        if(la_===1) {
            this.state = 1109;
            this.choices();
            this.state = 1110;
            this.match(vhdlParser.ARROW);

        }
        this.state = 1114;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Element_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_element_declaration;
    return this;
}

Element_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_declarationContext.prototype.constructor = Element_declarationContext;

Element_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Element_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Element_declarationContext.prototype.element_subtype_definition = function() {
    return this.getTypedRuleContext(Element_subtype_definitionContext,0);
};

Element_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Element_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterElement_declaration(this);
	}
};

Element_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitElement_declaration(this);
	}
};




vhdlParser.Element_declarationContext = Element_declarationContext;

vhdlParser.prototype.element_declaration = function() {

    var localctx = new Element_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, vhdlParser.RULE_element_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1116;
        this.identifier_list();
        this.state = 1117;
        this.match(vhdlParser.COLON);
        this.state = 1118;
        this.element_subtype_definition();
        this.state = 1119;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Element_subnature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_element_subnature_definition;
    return this;
}

Element_subnature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_subnature_definitionContext.prototype.constructor = Element_subnature_definitionContext;

Element_subnature_definitionContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Element_subnature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterElement_subnature_definition(this);
	}
};

Element_subnature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitElement_subnature_definition(this);
	}
};




vhdlParser.Element_subnature_definitionContext = Element_subnature_definitionContext;

vhdlParser.prototype.element_subnature_definition = function() {

    var localctx = new Element_subnature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, vhdlParser.RULE_element_subnature_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1121;
        this.subnature_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Element_subtype_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_element_subtype_definition;
    return this;
}

Element_subtype_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_subtype_definitionContext.prototype.constructor = Element_subtype_definitionContext;

Element_subtype_definitionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Element_subtype_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterElement_subtype_definition(this);
	}
};

Element_subtype_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitElement_subtype_definition(this);
	}
};




vhdlParser.Element_subtype_definitionContext = Element_subtype_definitionContext;

vhdlParser.prototype.element_subtype_definition = function() {

    var localctx = new Element_subtype_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, vhdlParser.RULE_element_subtype_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1123;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_aspect;
    return this;
}

Entity_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_aspectContext.prototype.constructor = Entity_aspectContext;

Entity_aspectContext.prototype.ENTITY = function() {
    return this.getToken(vhdlParser.ENTITY, 0);
};

Entity_aspectContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Entity_aspectContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Entity_aspectContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Entity_aspectContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Entity_aspectContext.prototype.CONFIGURATION = function() {
    return this.getToken(vhdlParser.CONFIGURATION, 0);
};

Entity_aspectContext.prototype.OPEN = function() {
    return this.getToken(vhdlParser.OPEN, 0);
};

Entity_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_aspect(this);
	}
};

Entity_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_aspect(this);
	}
};




vhdlParser.Entity_aspectContext = Entity_aspectContext;

vhdlParser.prototype.entity_aspect = function() {

    var localctx = new Entity_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, vhdlParser.RULE_entity_aspect);
    var _la = 0; // Token type
    try {
        this.state = 1136;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ENTITY:
            this.enterOuterAlt(localctx, 1);
            this.state = 1125;
            this.match(vhdlParser.ENTITY);
            this.state = 1126;
            this.name();
            this.state = 1131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.LPAREN) {
                this.state = 1127;
                this.match(vhdlParser.LPAREN);
                this.state = 1128;
                this.identifier();
                this.state = 1129;
                this.match(vhdlParser.RPAREN);
            }

            break;
        case vhdlParser.CONFIGURATION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1133;
            this.match(vhdlParser.CONFIGURATION);
            this.state = 1134;
            this.name();
            break;
        case vhdlParser.OPEN:
            this.enterOuterAlt(localctx, 3);
            this.state = 1135;
            this.match(vhdlParser.OPEN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_classContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_class;
    return this;
}

Entity_classContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_classContext.prototype.constructor = Entity_classContext;

Entity_classContext.prototype.ENTITY = function() {
    return this.getToken(vhdlParser.ENTITY, 0);
};

Entity_classContext.prototype.ARCHITECTURE = function() {
    return this.getToken(vhdlParser.ARCHITECTURE, 0);
};

Entity_classContext.prototype.CONFIGURATION = function() {
    return this.getToken(vhdlParser.CONFIGURATION, 0);
};

Entity_classContext.prototype.PROCEDURE = function() {
    return this.getToken(vhdlParser.PROCEDURE, 0);
};

Entity_classContext.prototype.FUNCTION = function() {
    return this.getToken(vhdlParser.FUNCTION, 0);
};

Entity_classContext.prototype.PACKAGE = function() {
    return this.getToken(vhdlParser.PACKAGE, 0);
};

Entity_classContext.prototype.TYPE = function() {
    return this.getToken(vhdlParser.TYPE, 0);
};

Entity_classContext.prototype.SUBTYPE = function() {
    return this.getToken(vhdlParser.SUBTYPE, 0);
};

Entity_classContext.prototype.CONSTANT = function() {
    return this.getToken(vhdlParser.CONSTANT, 0);
};

Entity_classContext.prototype.SIGNAL = function() {
    return this.getToken(vhdlParser.SIGNAL, 0);
};

Entity_classContext.prototype.VARIABLE = function() {
    return this.getToken(vhdlParser.VARIABLE, 0);
};

Entity_classContext.prototype.COMPONENT = function() {
    return this.getToken(vhdlParser.COMPONENT, 0);
};

Entity_classContext.prototype.LABEL = function() {
    return this.getToken(vhdlParser.LABEL, 0);
};

Entity_classContext.prototype.LITERAL = function() {
    return this.getToken(vhdlParser.LITERAL, 0);
};

Entity_classContext.prototype.UNITS = function() {
    return this.getToken(vhdlParser.UNITS, 0);
};

Entity_classContext.prototype.GROUP = function() {
    return this.getToken(vhdlParser.GROUP, 0);
};

Entity_classContext.prototype.FILE = function() {
    return this.getToken(vhdlParser.FILE, 0);
};

Entity_classContext.prototype.NATURE = function() {
    return this.getToken(vhdlParser.NATURE, 0);
};

Entity_classContext.prototype.SUBNATURE = function() {
    return this.getToken(vhdlParser.SUBNATURE, 0);
};

Entity_classContext.prototype.QUANTITY = function() {
    return this.getToken(vhdlParser.QUANTITY, 0);
};

Entity_classContext.prototype.TERMINAL = function() {
    return this.getToken(vhdlParser.TERMINAL, 0);
};

Entity_classContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_class(this);
	}
};

Entity_classContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_class(this);
	}
};




vhdlParser.Entity_classContext = Entity_classContext;

vhdlParser.prototype.entity_class = function() {

    var localctx = new Entity_classContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, vhdlParser.RULE_entity_class);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1138;
        _la = this._input.LA(1);
        if(!(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & ((1 << (vhdlParser.ARCHITECTURE - 8)) | (1 << (vhdlParser.COMPONENT - 8)) | (1 << (vhdlParser.CONFIGURATION - 8)) | (1 << (vhdlParser.CONSTANT - 8)) | (1 << (vhdlParser.ENTITY - 8)) | (1 << (vhdlParser.FILE - 8)) | (1 << (vhdlParser.FUNCTION - 8)) | (1 << (vhdlParser.GROUP - 8)))) !== 0) || ((((_la - 42)) & ~0x1f) == 0 && ((1 << (_la - 42)) & ((1 << (vhdlParser.LABEL - 42)) | (1 << (vhdlParser.LITERAL - 42)) | (1 << (vhdlParser.NATURE - 42)) | (1 << (vhdlParser.PACKAGE - 42)) | (1 << (vhdlParser.PROCEDURE - 42)) | (1 << (vhdlParser.QUANTITY - 42)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (vhdlParser.SIGNAL - 86)) | (1 << (vhdlParser.SUBNATURE - 86)) | (1 << (vhdlParser.SUBTYPE - 86)) | (1 << (vhdlParser.TERMINAL - 86)) | (1 << (vhdlParser.TYPE - 86)) | (1 << (vhdlParser.UNITS - 86)) | (1 << (vhdlParser.VARIABLE - 86)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_class_entryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_class_entry;
    return this;
}

Entity_class_entryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_class_entryContext.prototype.constructor = Entity_class_entryContext;

Entity_class_entryContext.prototype.entity_class = function() {
    return this.getTypedRuleContext(Entity_classContext,0);
};

Entity_class_entryContext.prototype.BOX = function() {
    return this.getToken(vhdlParser.BOX, 0);
};

Entity_class_entryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_class_entry(this);
	}
};

Entity_class_entryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_class_entry(this);
	}
};




vhdlParser.Entity_class_entryContext = Entity_class_entryContext;

vhdlParser.prototype.entity_class_entry = function() {

    var localctx = new Entity_class_entryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, vhdlParser.RULE_entity_class_entry);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1140;
        this.entity_class();
        this.state = 1142;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BOX) {
            this.state = 1141;
            this.match(vhdlParser.BOX);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_class_entry_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_class_entry_list;
    return this;
}

Entity_class_entry_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_class_entry_listContext.prototype.constructor = Entity_class_entry_listContext;

Entity_class_entry_listContext.prototype.entity_class_entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entity_class_entryContext);
    } else {
        return this.getTypedRuleContext(Entity_class_entryContext,i);
    }
};

Entity_class_entry_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Entity_class_entry_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_class_entry_list(this);
	}
};

Entity_class_entry_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_class_entry_list(this);
	}
};




vhdlParser.Entity_class_entry_listContext = Entity_class_entry_listContext;

vhdlParser.prototype.entity_class_entry_list = function() {

    var localctx = new Entity_class_entry_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, vhdlParser.RULE_entity_class_entry_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this.entity_class_entry();
        this.state = 1149;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1145;
            this.match(vhdlParser.COMMA);
            this.state = 1146;
            this.entity_class_entry();
            this.state = 1151;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_declaration;
    return this;
}

Entity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_declarationContext.prototype.constructor = Entity_declarationContext;

Entity_declarationContext.prototype.ENTITY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.ENTITY);
    } else {
        return this.getToken(vhdlParser.ENTITY, i);
    }
};


Entity_declarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Entity_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Entity_declarationContext.prototype.entity_header = function() {
    return this.getTypedRuleContext(Entity_headerContext,0);
};

Entity_declarationContext.prototype.entity_declarative_part = function() {
    return this.getTypedRuleContext(Entity_declarative_partContext,0);
};

Entity_declarationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Entity_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Entity_declarationContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Entity_declarationContext.prototype.entity_statement_part = function() {
    return this.getTypedRuleContext(Entity_statement_partContext,0);
};

Entity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_declaration(this);
	}
};

Entity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_declaration(this);
	}
};




vhdlParser.Entity_declarationContext = Entity_declarationContext;

vhdlParser.prototype.entity_declaration = function() {

    var localctx = new Entity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, vhdlParser.RULE_entity_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1152;
        this.match(vhdlParser.ENTITY);
        this.state = 1153;
        this.identifier();
        this.state = 1154;
        this.match(vhdlParser.IS);
        this.state = 1155;
        this.entity_header();
        this.state = 1156;
        this.entity_declarative_part();
        this.state = 1159;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BEGIN) {
            this.state = 1157;
            this.match(vhdlParser.BEGIN);
            this.state = 1158;
            this.entity_statement_part();
        }

        this.state = 1161;
        this.match(vhdlParser.END);
        this.state = 1163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ENTITY) {
            this.state = 1162;
            this.match(vhdlParser.ENTITY);
        }

        this.state = 1166;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1165;
            this.identifier();
        }

        this.state = 1168;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_declarative_item;
    return this;
}

Entity_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_declarative_itemContext.prototype.constructor = Entity_declarative_itemContext;

Entity_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Entity_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Entity_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Entity_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Entity_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Entity_declarative_itemContext.prototype.signal_declaration = function() {
    return this.getTypedRuleContext(Signal_declarationContext,0);
};

Entity_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Entity_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Entity_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Entity_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Entity_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Entity_declarative_itemContext.prototype.disconnection_specification = function() {
    return this.getTypedRuleContext(Disconnection_specificationContext,0);
};

Entity_declarative_itemContext.prototype.step_limit_specification = function() {
    return this.getTypedRuleContext(Step_limit_specificationContext,0);
};

Entity_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Entity_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Entity_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Entity_declarative_itemContext.prototype.nature_declaration = function() {
    return this.getTypedRuleContext(Nature_declarationContext,0);
};

Entity_declarative_itemContext.prototype.subnature_declaration = function() {
    return this.getTypedRuleContext(Subnature_declarationContext,0);
};

Entity_declarative_itemContext.prototype.quantity_declaration = function() {
    return this.getTypedRuleContext(Quantity_declarationContext,0);
};

Entity_declarative_itemContext.prototype.terminal_declaration = function() {
    return this.getTypedRuleContext(Terminal_declarationContext,0);
};

Entity_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_declarative_item(this);
	}
};

Entity_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_declarative_item(this);
	}
};




vhdlParser.Entity_declarative_itemContext = Entity_declarative_itemContext;

vhdlParser.prototype.entity_declarative_item = function() {

    var localctx = new Entity_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, vhdlParser.RULE_entity_declarative_item);
    try {
        this.state = 1190;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1170;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1171;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1172;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1173;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1174;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1175;
            this.signal_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1176;
            this.variable_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1177;
            this.file_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1178;
            this.alias_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1179;
            this.attribute_declaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1180;
            this.attribute_specification();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1181;
            this.disconnection_specification();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1182;
            this.step_limit_specification();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1183;
            this.use_clause();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1184;
            this.group_template_declaration();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1185;
            this.group_declaration();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1186;
            this.nature_declaration();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1187;
            this.subnature_declaration();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1188;
            this.quantity_declaration();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 1189;
            this.terminal_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_declarative_part;
    return this;
}

Entity_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_declarative_partContext.prototype.constructor = Entity_declarative_partContext;

Entity_declarative_partContext.prototype.entity_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entity_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Entity_declarative_itemContext,i);
    }
};

Entity_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_declarative_part(this);
	}
};

Entity_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_declarative_part(this);
	}
};




vhdlParser.Entity_declarative_partContext = Entity_declarative_partContext;

vhdlParser.prototype.entity_declarative_part = function() {

    var localctx = new Entity_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, vhdlParser.RULE_entity_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1192;
            this.entity_declarative_item();
            this.state = 1197;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_designatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_designator;
    return this;
}

Entity_designatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_designatorContext.prototype.constructor = Entity_designatorContext;

Entity_designatorContext.prototype.entity_tag = function() {
    return this.getTypedRuleContext(Entity_tagContext,0);
};

Entity_designatorContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

Entity_designatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_designator(this);
	}
};

Entity_designatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_designator(this);
	}
};




vhdlParser.Entity_designatorContext = Entity_designatorContext;

vhdlParser.prototype.entity_designator = function() {

    var localctx = new Entity_designatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, vhdlParser.RULE_entity_designator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1198;
        this.entity_tag();
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LBRACKET) {
            this.state = 1199;
            this.signature();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_headerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_header;
    return this;
}

Entity_headerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_headerContext.prototype.constructor = Entity_headerContext;

Entity_headerContext.prototype.generic_clause = function() {
    return this.getTypedRuleContext(Generic_clauseContext,0);
};

Entity_headerContext.prototype.port_clause = function() {
    return this.getTypedRuleContext(Port_clauseContext,0);
};

Entity_headerContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_header(this);
	}
};

Entity_headerContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_header(this);
	}
};




vhdlParser.Entity_headerContext = Entity_headerContext;

vhdlParser.prototype.entity_header = function() {

    var localctx = new Entity_headerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, vhdlParser.RULE_entity_header);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GENERIC) {
            this.state = 1202;
            this.generic_clause();
        }

        this.state = 1206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PORT) {
            this.state = 1205;
            this.port_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_name_list;
    return this;
}

Entity_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_name_listContext.prototype.constructor = Entity_name_listContext;

Entity_name_listContext.prototype.entity_designator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entity_designatorContext);
    } else {
        return this.getTypedRuleContext(Entity_designatorContext,i);
    }
};

Entity_name_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Entity_name_listContext.prototype.OTHERS = function() {
    return this.getToken(vhdlParser.OTHERS, 0);
};

Entity_name_listContext.prototype.ALL = function() {
    return this.getToken(vhdlParser.ALL, 0);
};

Entity_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_name_list(this);
	}
};

Entity_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_name_list(this);
	}
};




vhdlParser.Entity_name_listContext = Entity_name_listContext;

vhdlParser.prototype.entity_name_list = function() {

    var localctx = new Entity_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, vhdlParser.RULE_entity_name_list);
    var _la = 0; // Token type
    try {
        this.state = 1218;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.CHARACTER_LITERAL:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1208;
            this.entity_designator();
            this.state = 1213;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 1209;
                this.match(vhdlParser.COMMA);
                this.state = 1210;
                this.entity_designator();
                this.state = 1215;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vhdlParser.OTHERS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1216;
            this.match(vhdlParser.OTHERS);
            break;
        case vhdlParser.ALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1217;
            this.match(vhdlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_specification;
    return this;
}

Entity_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_specificationContext.prototype.constructor = Entity_specificationContext;

Entity_specificationContext.prototype.entity_name_list = function() {
    return this.getTypedRuleContext(Entity_name_listContext,0);
};

Entity_specificationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Entity_specificationContext.prototype.entity_class = function() {
    return this.getTypedRuleContext(Entity_classContext,0);
};

Entity_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_specification(this);
	}
};

Entity_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_specification(this);
	}
};




vhdlParser.Entity_specificationContext = Entity_specificationContext;

vhdlParser.prototype.entity_specification = function() {

    var localctx = new Entity_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, vhdlParser.RULE_entity_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1220;
        this.entity_name_list();
        this.state = 1221;
        this.match(vhdlParser.COLON);
        this.state = 1222;
        this.entity_class();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_statement;
    return this;
}

Entity_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_statementContext.prototype.constructor = Entity_statementContext;

Entity_statementContext.prototype.concurrent_assertion_statement = function() {
    return this.getTypedRuleContext(Concurrent_assertion_statementContext,0);
};

Entity_statementContext.prototype.process_statement = function() {
    return this.getTypedRuleContext(Process_statementContext,0);
};

Entity_statementContext.prototype.concurrent_procedure_call_statement = function() {
    return this.getTypedRuleContext(Concurrent_procedure_call_statementContext,0);
};

Entity_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_statement(this);
	}
};

Entity_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_statement(this);
	}
};




vhdlParser.Entity_statementContext = Entity_statementContext;

vhdlParser.prototype.entity_statement = function() {

    var localctx = new Entity_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, vhdlParser.RULE_entity_statement);
    try {
        this.state = 1227;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1224;
            this.concurrent_assertion_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1225;
            this.process_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1226;
            this.concurrent_procedure_call_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_statement_part;
    return this;
}

Entity_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_statement_partContext.prototype.constructor = Entity_statement_partContext;

Entity_statement_partContext.prototype.entity_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entity_statementContext);
    } else {
        return this.getTypedRuleContext(Entity_statementContext,i);
    }
};

Entity_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_statement_part(this);
	}
};

Entity_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_statement_part(this);
	}
};




vhdlParser.Entity_statement_partContext = Entity_statement_partContext;

vhdlParser.prototype.entity_statement_part = function() {

    var localctx = new Entity_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, vhdlParser.RULE_entity_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.ASSERT || _la===vhdlParser.POSTPONED || _la===vhdlParser.PROCESS || _la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1229;
            this.entity_statement();
            this.state = 1234;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Entity_tagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_entity_tag;
    return this;
}

Entity_tagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_tagContext.prototype.constructor = Entity_tagContext;

Entity_tagContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Entity_tagContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
};

Entity_tagContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

Entity_tagContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEntity_tag(this);
	}
};

Entity_tagContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEntity_tag(this);
	}
};




vhdlParser.Entity_tagContext = Entity_tagContext;

vhdlParser.prototype.entity_tag = function() {

    var localctx = new Entity_tagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, vhdlParser.RULE_entity_tag);
    try {
        this.state = 1238;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1235;
            this.identifier();
            break;
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1236;
            this.match(vhdlParser.CHARACTER_LITERAL);
            break;
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1237;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enumeration_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_enumeration_literal;
    return this;
}

Enumeration_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enumeration_literalContext.prototype.constructor = Enumeration_literalContext;

Enumeration_literalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enumeration_literalContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
};

Enumeration_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEnumeration_literal(this);
	}
};

Enumeration_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEnumeration_literal(this);
	}
};




vhdlParser.Enumeration_literalContext = Enumeration_literalContext;

vhdlParser.prototype.enumeration_literal = function() {

    var localctx = new Enumeration_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, vhdlParser.RULE_enumeration_literal);
    try {
        this.state = 1242;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1240;
            this.identifier();
            break;
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1241;
            this.match(vhdlParser.CHARACTER_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enumeration_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_enumeration_type_definition;
    return this;
}

Enumeration_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enumeration_type_definitionContext.prototype.constructor = Enumeration_type_definitionContext;

Enumeration_type_definitionContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Enumeration_type_definitionContext.prototype.enumeration_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Enumeration_literalContext);
    } else {
        return this.getTypedRuleContext(Enumeration_literalContext,i);
    }
};

Enumeration_type_definitionContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Enumeration_type_definitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Enumeration_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterEnumeration_type_definition(this);
	}
};

Enumeration_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitEnumeration_type_definition(this);
	}
};




vhdlParser.Enumeration_type_definitionContext = Enumeration_type_definitionContext;

vhdlParser.prototype.enumeration_type_definition = function() {

    var localctx = new Enumeration_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, vhdlParser.RULE_enumeration_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1244;
        this.match(vhdlParser.LPAREN);
        this.state = 1245;
        this.enumeration_literal();
        this.state = 1250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1246;
            this.match(vhdlParser.COMMA);
            this.state = 1247;
            this.enumeration_literal();
            this.state = 1252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1253;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Exit_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_exit_statement;
    return this;
}

Exit_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exit_statementContext.prototype.constructor = Exit_statementContext;

Exit_statementContext.prototype.EXIT = function() {
    return this.getToken(vhdlParser.EXIT, 0);
};

Exit_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Exit_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Exit_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Exit_statementContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Exit_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Exit_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterExit_statement(this);
	}
};

Exit_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitExit_statement(this);
	}
};




vhdlParser.Exit_statementContext = Exit_statementContext;

vhdlParser.prototype.exit_statement = function() {

    var localctx = new Exit_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, vhdlParser.RULE_exit_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1255;
            this.label_colon();
        }

        this.state = 1258;
        this.match(vhdlParser.EXIT);
        this.state = 1260;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1259;
            this.identifier();
        }

        this.state = 1264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.WHEN) {
            this.state = 1262;
            this.match(vhdlParser.WHEN);
            this.state = 1263;
            this.condition();
        }

        this.state = 1266;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.relation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationContext);
    } else {
        return this.getTypedRuleContext(RelationContext,i);
    }
};

ExpressionContext.prototype.logical_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_operatorContext);
    } else {
        return this.getTypedRuleContext(Logical_operatorContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitExpression(this);
	}
};




vhdlParser.ExpressionContext = ExpressionContext;

vhdlParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, vhdlParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268;
        this.relation();
        this.state = 1274;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1269;
                this.logical_operator();
                this.state = 1270;
                this.relation(); 
            }
            this.state = 1276;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.primary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryContext);
    } else {
        return this.getTypedRuleContext(PrimaryContext,i);
    }
};

FactorContext.prototype.DOUBLESTAR = function() {
    return this.getToken(vhdlParser.DOUBLESTAR, 0);
};

FactorContext.prototype.ABS = function() {
    return this.getToken(vhdlParser.ABS, 0);
};

FactorContext.prototype.NOT = function() {
    return this.getToken(vhdlParser.NOT, 0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFactor(this);
	}
};




vhdlParser.FactorContext = FactorContext;

vhdlParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, vhdlParser.RULE_factor);
    try {
        this.state = 1286;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.NEW:
        case vhdlParser.NULL_:
        case vhdlParser.BASE_LITERAL:
        case vhdlParser.BIT_STRING_LITERAL:
        case vhdlParser.REAL_LITERAL:
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.CHARACTER_LITERAL:
        case vhdlParser.STRING_LITERAL:
        case vhdlParser.LPAREN:
        case vhdlParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1277;
            this.primary();
            this.state = 1280;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
            if(la_===1) {
                this.state = 1278;
                this.match(vhdlParser.DOUBLESTAR);
                this.state = 1279;
                this.primary();

            }
            break;
        case vhdlParser.ABS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1282;
            this.match(vhdlParser.ABS);
            this.state = 1283;
            this.primary();
            break;
        case vhdlParser.NOT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1284;
            this.match(vhdlParser.NOT);
            this.state = 1285;
            this.primary();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_file_declaration;
    return this;
}

File_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_declarationContext.prototype.constructor = File_declarationContext;

File_declarationContext.prototype.FILE = function() {
    return this.getToken(vhdlParser.FILE, 0);
};

File_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

File_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

File_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

File_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

File_declarationContext.prototype.file_open_information = function() {
    return this.getTypedRuleContext(File_open_informationContext,0);
};

File_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFile_declaration(this);
	}
};

File_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFile_declaration(this);
	}
};




vhdlParser.File_declarationContext = File_declarationContext;

vhdlParser.prototype.file_declaration = function() {

    var localctx = new File_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, vhdlParser.RULE_file_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1288;
        this.match(vhdlParser.FILE);
        this.state = 1289;
        this.identifier_list();
        this.state = 1290;
        this.match(vhdlParser.COLON);
        this.state = 1291;
        this.subtype_indication();
        this.state = 1293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS || _la===vhdlParser.OPEN) {
            this.state = 1292;
            this.file_open_information();
        }

        this.state = 1295;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_logical_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_file_logical_name;
    return this;
}

File_logical_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_logical_nameContext.prototype.constructor = File_logical_nameContext;

File_logical_nameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

File_logical_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFile_logical_name(this);
	}
};

File_logical_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFile_logical_name(this);
	}
};




vhdlParser.File_logical_nameContext = File_logical_nameContext;

vhdlParser.prototype.file_logical_name = function() {

    var localctx = new File_logical_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, vhdlParser.RULE_file_logical_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1297;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_open_informationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_file_open_information;
    return this;
}

File_open_informationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_open_informationContext.prototype.constructor = File_open_informationContext;

File_open_informationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

File_open_informationContext.prototype.file_logical_name = function() {
    return this.getTypedRuleContext(File_logical_nameContext,0);
};

File_open_informationContext.prototype.OPEN = function() {
    return this.getToken(vhdlParser.OPEN, 0);
};

File_open_informationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

File_open_informationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFile_open_information(this);
	}
};

File_open_informationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFile_open_information(this);
	}
};




vhdlParser.File_open_informationContext = File_open_informationContext;

vhdlParser.prototype.file_open_information = function() {

    var localctx = new File_open_informationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, vhdlParser.RULE_file_open_information);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1301;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.OPEN) {
            this.state = 1299;
            this.match(vhdlParser.OPEN);
            this.state = 1300;
            this.expression();
        }

        this.state = 1303;
        this.match(vhdlParser.IS);
        this.state = 1304;
        this.file_logical_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_file_type_definition;
    return this;
}

File_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_type_definitionContext.prototype.constructor = File_type_definitionContext;

File_type_definitionContext.prototype.FILE = function() {
    return this.getToken(vhdlParser.FILE, 0);
};

File_type_definitionContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

File_type_definitionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

File_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFile_type_definition(this);
	}
};

File_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFile_type_definition(this);
	}
};




vhdlParser.File_type_definitionContext = File_type_definitionContext;

vhdlParser.prototype.file_type_definition = function() {

    var localctx = new File_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, vhdlParser.RULE_file_type_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1306;
        this.match(vhdlParser.FILE);
        this.state = 1307;
        this.match(vhdlParser.OF);
        this.state = 1308;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Formal_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_formal_parameter_list;
    return this;
}

Formal_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Formal_parameter_listContext.prototype.constructor = Formal_parameter_listContext;

Formal_parameter_listContext.prototype.interface_list = function() {
    return this.getTypedRuleContext(Interface_listContext,0);
};

Formal_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFormal_parameter_list(this);
	}
};

Formal_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFormal_parameter_list(this);
	}
};




vhdlParser.Formal_parameter_listContext = Formal_parameter_listContext;

vhdlParser.prototype.formal_parameter_list = function() {

    var localctx = new Formal_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, vhdlParser.RULE_formal_parameter_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1310;
        this.interface_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Formal_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_formal_part;
    return this;
}

Formal_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Formal_partContext.prototype.constructor = Formal_partContext;

Formal_partContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Formal_partContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Formal_partContext.prototype.explicit_range = function() {
    return this.getTypedRuleContext(Explicit_rangeContext,0);
};

Formal_partContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Formal_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFormal_part(this);
	}
};

Formal_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFormal_part(this);
	}
};




vhdlParser.Formal_partContext = Formal_partContext;

vhdlParser.prototype.formal_part = function() {

    var localctx = new Formal_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, vhdlParser.RULE_formal_part);
    try {
        this.state = 1318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1312;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1313;
            this.identifier();
            this.state = 1314;
            this.match(vhdlParser.LPAREN);
            this.state = 1315;
            this.explicit_range();
            this.state = 1316;
            this.match(vhdlParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Free_quantity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_free_quantity_declaration;
    return this;
}

Free_quantity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Free_quantity_declarationContext.prototype.constructor = Free_quantity_declarationContext;

Free_quantity_declarationContext.prototype.QUANTITY = function() {
    return this.getToken(vhdlParser.QUANTITY, 0);
};

Free_quantity_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Free_quantity_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Free_quantity_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Free_quantity_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Free_quantity_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Free_quantity_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Free_quantity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFree_quantity_declaration(this);
	}
};

Free_quantity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFree_quantity_declaration(this);
	}
};




vhdlParser.Free_quantity_declarationContext = Free_quantity_declarationContext;

vhdlParser.prototype.free_quantity_declaration = function() {

    var localctx = new Free_quantity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, vhdlParser.RULE_free_quantity_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1320;
        this.match(vhdlParser.QUANTITY);
        this.state = 1321;
        this.identifier_list();
        this.state = 1322;
        this.match(vhdlParser.COLON);
        this.state = 1323;
        this.subtype_indication();
        this.state = 1326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1324;
            this.match(vhdlParser.VARASGN);
            this.state = 1325;
            this.expression();
        }

        this.state = 1328;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generate_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_generate_statement;
    return this;
}

Generate_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_statementContext.prototype.constructor = Generate_statementContext;

Generate_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Generate_statementContext.prototype.generation_scheme = function() {
    return this.getTypedRuleContext(Generation_schemeContext,0);
};

Generate_statementContext.prototype.GENERATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.GENERATE);
    } else {
        return this.getToken(vhdlParser.GENERATE, i);
    }
};


Generate_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Generate_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Generate_statementContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Generate_statementContext.prototype.architecture_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Architecture_statementContext);
    } else {
        return this.getTypedRuleContext(Architecture_statementContext,i);
    }
};

Generate_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Generate_statementContext.prototype.block_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Block_declarative_itemContext,i);
    }
};

Generate_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGenerate_statement(this);
	}
};

Generate_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGenerate_statement(this);
	}
};




vhdlParser.Generate_statementContext = Generate_statementContext;

vhdlParser.prototype.generate_statement = function() {

    var localctx = new Generate_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, vhdlParser.RULE_generate_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1330;
        this.label_colon();
        this.state = 1331;
        this.generation_scheme();
        this.state = 1332;
        this.match(vhdlParser.GENERATE);
        this.state = 1340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.BEGIN) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FOR) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.LIMIT - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.QUANTITY - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
                this.state = 1333;
                this.block_declarative_item();
                this.state = 1338;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1339;
            this.match(vhdlParser.BEGIN);
        }

        this.state = 1345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ABS) | (1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)) | (1 << (vhdlParser.POSTPONED - 36)) | (1 << (vhdlParser.PROCESS - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (vhdlParser.WITH - 107)) | (1 << (vhdlParser.BASE_LITERAL - 107)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 107)) | (1 << (vhdlParser.REAL_LITERAL - 107)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 107)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 107)) | (1 << (vhdlParser.CHARACTER_LITERAL - 107)) | (1 << (vhdlParser.STRING_LITERAL - 107)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (vhdlParser.LPAREN - 141)) | (1 << (vhdlParser.PLUS - 141)) | (1 << (vhdlParser.MINUS - 141)) | (1 << (vhdlParser.INTEGER - 141)))) !== 0)) {
            this.state = 1342;
            this.architecture_statement();
            this.state = 1347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1348;
        this.match(vhdlParser.END);
        this.state = 1349;
        this.match(vhdlParser.GENERATE);
        this.state = 1351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1350;
            this.identifier();
        }

        this.state = 1353;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generation_schemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_generation_scheme;
    return this;
}

Generation_schemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generation_schemeContext.prototype.constructor = Generation_schemeContext;

Generation_schemeContext.prototype.FOR = function() {
    return this.getToken(vhdlParser.FOR, 0);
};

Generation_schemeContext.prototype.parameter_specification = function() {
    return this.getTypedRuleContext(Parameter_specificationContext,0);
};

Generation_schemeContext.prototype.IF = function() {
    return this.getToken(vhdlParser.IF, 0);
};

Generation_schemeContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Generation_schemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGeneration_scheme(this);
	}
};

Generation_schemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGeneration_scheme(this);
	}
};




vhdlParser.Generation_schemeContext = Generation_schemeContext;

vhdlParser.prototype.generation_scheme = function() {

    var localctx = new Generation_schemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, vhdlParser.RULE_generation_scheme);
    try {
        this.state = 1359;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1355;
            this.match(vhdlParser.FOR);
            this.state = 1356;
            this.parameter_specification();
            break;
        case vhdlParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1357;
            this.match(vhdlParser.IF);
            this.state = 1358;
            this.condition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_generic_clause;
    return this;
}

Generic_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_clauseContext.prototype.constructor = Generic_clauseContext;

Generic_clauseContext.prototype.GENERIC = function() {
    return this.getToken(vhdlParser.GENERIC, 0);
};

Generic_clauseContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Generic_clauseContext.prototype.generic_list = function() {
    return this.getTypedRuleContext(Generic_listContext,0);
};

Generic_clauseContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Generic_clauseContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Generic_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGeneric_clause(this);
	}
};

Generic_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGeneric_clause(this);
	}
};




vhdlParser.Generic_clauseContext = Generic_clauseContext;

vhdlParser.prototype.generic_clause = function() {

    var localctx = new Generic_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, vhdlParser.RULE_generic_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1361;
        this.match(vhdlParser.GENERIC);
        this.state = 1362;
        this.match(vhdlParser.LPAREN);
        this.state = 1363;
        this.generic_list();
        this.state = 1364;
        this.match(vhdlParser.RPAREN);
        this.state = 1365;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_generic_list;
    return this;
}

Generic_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_listContext.prototype.constructor = Generic_listContext;

Generic_listContext.prototype.interface_constant_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_constant_declarationContext);
    } else {
        return this.getTypedRuleContext(Interface_constant_declarationContext,i);
    }
};

Generic_listContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Generic_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGeneric_list(this);
	}
};

Generic_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGeneric_list(this);
	}
};




vhdlParser.Generic_listContext = Generic_listContext;

vhdlParser.prototype.generic_list = function() {

    var localctx = new Generic_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, vhdlParser.RULE_generic_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        this.interface_constant_declaration();
        this.state = 1372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.SEMI) {
            this.state = 1368;
            this.match(vhdlParser.SEMI);
            this.state = 1369;
            this.interface_constant_declaration();
            this.state = 1374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_map_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_generic_map_aspect;
    return this;
}

Generic_map_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_map_aspectContext.prototype.constructor = Generic_map_aspectContext;

Generic_map_aspectContext.prototype.GENERIC = function() {
    return this.getToken(vhdlParser.GENERIC, 0);
};

Generic_map_aspectContext.prototype.MAP = function() {
    return this.getToken(vhdlParser.MAP, 0);
};

Generic_map_aspectContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Generic_map_aspectContext.prototype.association_list = function() {
    return this.getTypedRuleContext(Association_listContext,0);
};

Generic_map_aspectContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Generic_map_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGeneric_map_aspect(this);
	}
};

Generic_map_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGeneric_map_aspect(this);
	}
};




vhdlParser.Generic_map_aspectContext = Generic_map_aspectContext;

vhdlParser.prototype.generic_map_aspect = function() {

    var localctx = new Generic_map_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, vhdlParser.RULE_generic_map_aspect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1375;
        this.match(vhdlParser.GENERIC);
        this.state = 1376;
        this.match(vhdlParser.MAP);
        this.state = 1377;
        this.match(vhdlParser.LPAREN);
        this.state = 1378;
        this.association_list();
        this.state = 1379;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Group_constituentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_group_constituent;
    return this;
}

Group_constituentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_constituentContext.prototype.constructor = Group_constituentContext;

Group_constituentContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Group_constituentContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
};

Group_constituentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGroup_constituent(this);
	}
};

Group_constituentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGroup_constituent(this);
	}
};




vhdlParser.Group_constituentContext = Group_constituentContext;

vhdlParser.prototype.group_constituent = function() {

    var localctx = new Group_constituentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, vhdlParser.RULE_group_constituent);
    try {
        this.state = 1383;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1381;
            this.name();
            break;
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1382;
            this.match(vhdlParser.CHARACTER_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Group_constituent_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_group_constituent_list;
    return this;
}

Group_constituent_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_constituent_listContext.prototype.constructor = Group_constituent_listContext;

Group_constituent_listContext.prototype.group_constituent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_constituentContext);
    } else {
        return this.getTypedRuleContext(Group_constituentContext,i);
    }
};

Group_constituent_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Group_constituent_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGroup_constituent_list(this);
	}
};

Group_constituent_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGroup_constituent_list(this);
	}
};




vhdlParser.Group_constituent_listContext = Group_constituent_listContext;

vhdlParser.prototype.group_constituent_list = function() {

    var localctx = new Group_constituent_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, vhdlParser.RULE_group_constituent_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1385;
        this.group_constituent();
        this.state = 1390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1386;
            this.match(vhdlParser.COMMA);
            this.state = 1387;
            this.group_constituent();
            this.state = 1392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Group_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_group_declaration;
    return this;
}

Group_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_declarationContext.prototype.constructor = Group_declarationContext;

Group_declarationContext.prototype.GROUP = function() {
    return this.getToken(vhdlParser.GROUP, 0);
};

Group_declarationContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Group_declarationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Group_declarationContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Group_declarationContext.prototype.group_constituent_list = function() {
    return this.getTypedRuleContext(Group_constituent_listContext,0);
};

Group_declarationContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Group_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Group_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGroup_declaration(this);
	}
};

Group_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGroup_declaration(this);
	}
};




vhdlParser.Group_declarationContext = Group_declarationContext;

vhdlParser.prototype.group_declaration = function() {

    var localctx = new Group_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, vhdlParser.RULE_group_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1393;
        this.match(vhdlParser.GROUP);
        this.state = 1394;
        this.label_colon();
        this.state = 1395;
        this.name();
        this.state = 1396;
        this.match(vhdlParser.LPAREN);
        this.state = 1397;
        this.group_constituent_list();
        this.state = 1398;
        this.match(vhdlParser.RPAREN);
        this.state = 1399;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Group_template_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_group_template_declaration;
    return this;
}

Group_template_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_template_declarationContext.prototype.constructor = Group_template_declarationContext;

Group_template_declarationContext.prototype.GROUP = function() {
    return this.getToken(vhdlParser.GROUP, 0);
};

Group_template_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Group_template_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Group_template_declarationContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Group_template_declarationContext.prototype.entity_class_entry_list = function() {
    return this.getTypedRuleContext(Entity_class_entry_listContext,0);
};

Group_template_declarationContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Group_template_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Group_template_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGroup_template_declaration(this);
	}
};

Group_template_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGroup_template_declaration(this);
	}
};




vhdlParser.Group_template_declarationContext = Group_template_declarationContext;

vhdlParser.prototype.group_template_declaration = function() {

    var localctx = new Group_template_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, vhdlParser.RULE_group_template_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1401;
        this.match(vhdlParser.GROUP);
        this.state = 1402;
        this.identifier();
        this.state = 1403;
        this.match(vhdlParser.IS);
        this.state = 1404;
        this.match(vhdlParser.LPAREN);
        this.state = 1405;
        this.entity_class_entry_list();
        this.state = 1406;
        this.match(vhdlParser.RPAREN);
        this.state = 1407;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Guarded_signal_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_guarded_signal_specification;
    return this;
}

Guarded_signal_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Guarded_signal_specificationContext.prototype.constructor = Guarded_signal_specificationContext;

Guarded_signal_specificationContext.prototype.signal_list = function() {
    return this.getTypedRuleContext(Signal_listContext,0);
};

Guarded_signal_specificationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Guarded_signal_specificationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Guarded_signal_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterGuarded_signal_specification(this);
	}
};

Guarded_signal_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitGuarded_signal_specification(this);
	}
};




vhdlParser.Guarded_signal_specificationContext = Guarded_signal_specificationContext;

vhdlParser.prototype.guarded_signal_specification = function() {

    var localctx = new Guarded_signal_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, vhdlParser.RULE_guarded_signal_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1409;
        this.signal_list();
        this.state = 1410;
        this.match(vhdlParser.COLON);
        this.state = 1411;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.BASIC_IDENTIFIER = function() {
    return this.getToken(vhdlParser.BASIC_IDENTIFIER, 0);
};

IdentifierContext.prototype.EXTENDED_IDENTIFIER = function() {
    return this.getToken(vhdlParser.EXTENDED_IDENTIFIER, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIdentifier(this);
	}
};




vhdlParser.IdentifierContext = IdentifierContext;

vhdlParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, vhdlParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_identifier_list;
    return this;
}

Identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_listContext.prototype.constructor = Identifier_listContext;

Identifier_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIdentifier_list(this);
	}
};

Identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIdentifier_list(this);
	}
};




vhdlParser.Identifier_listContext = Identifier_listContext;

vhdlParser.prototype.identifier_list = function() {

    var localctx = new Identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, vhdlParser.RULE_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1415;
        this.identifier();
        this.state = 1420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1416;
            this.match(vhdlParser.COMMA);
            this.state = 1417;
            this.identifier();
            this.state = 1422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.IF);
    } else {
        return this.getToken(vhdlParser.IF, i);
    }
};


If_statementContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

If_statementContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.THEN);
    } else {
        return this.getToken(vhdlParser.THEN, i);
    }
};


If_statementContext.prototype.sequence_of_statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequence_of_statementsContext);
    } else {
        return this.getTypedRuleContext(Sequence_of_statementsContext,i);
    }
};

If_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

If_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

If_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

If_statementContext.prototype.ELSIF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.ELSIF);
    } else {
        return this.getToken(vhdlParser.ELSIF, i);
    }
};


If_statementContext.prototype.ELSE = function() {
    return this.getToken(vhdlParser.ELSE, 0);
};

If_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIf_statement(this);
	}
};




vhdlParser.If_statementContext = If_statementContext;

vhdlParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, vhdlParser.RULE_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1423;
            this.label_colon();
        }

        this.state = 1426;
        this.match(vhdlParser.IF);
        this.state = 1427;
        this.condition();
        this.state = 1428;
        this.match(vhdlParser.THEN);
        this.state = 1429;
        this.sequence_of_statements();
        this.state = 1437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.ELSIF) {
            this.state = 1430;
            this.match(vhdlParser.ELSIF);
            this.state = 1431;
            this.condition();
            this.state = 1432;
            this.match(vhdlParser.THEN);
            this.state = 1433;
            this.sequence_of_statements();
            this.state = 1439;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ELSE) {
            this.state = 1440;
            this.match(vhdlParser.ELSE);
            this.state = 1441;
            this.sequence_of_statements();
        }

        this.state = 1444;
        this.match(vhdlParser.END);
        this.state = 1445;
        this.match(vhdlParser.IF);
        this.state = 1447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1446;
            this.identifier();
        }

        this.state = 1449;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Index_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_index_constraint;
    return this;
}

Index_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_constraintContext.prototype.constructor = Index_constraintContext;

Index_constraintContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Index_constraintContext.prototype.discrete_range = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Discrete_rangeContext);
    } else {
        return this.getTypedRuleContext(Discrete_rangeContext,i);
    }
};

Index_constraintContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Index_constraintContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Index_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIndex_constraint(this);
	}
};

Index_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIndex_constraint(this);
	}
};




vhdlParser.Index_constraintContext = Index_constraintContext;

vhdlParser.prototype.index_constraint = function() {

    var localctx = new Index_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, vhdlParser.RULE_index_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1451;
        this.match(vhdlParser.LPAREN);
        this.state = 1452;
        this.discrete_range();
        this.state = 1457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1453;
            this.match(vhdlParser.COMMA);
            this.state = 1454;
            this.discrete_range();
            this.state = 1459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1460;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Index_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_index_specification;
    return this;
}

Index_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_specificationContext.prototype.constructor = Index_specificationContext;

Index_specificationContext.prototype.discrete_range = function() {
    return this.getTypedRuleContext(Discrete_rangeContext,0);
};

Index_specificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Index_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIndex_specification(this);
	}
};

Index_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIndex_specification(this);
	}
};




vhdlParser.Index_specificationContext = Index_specificationContext;

vhdlParser.prototype.index_specification = function() {

    var localctx = new Index_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, vhdlParser.RULE_index_specification);
    try {
        this.state = 1464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1462;
            this.discrete_range();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1463;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Index_subtype_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_index_subtype_definition;
    return this;
}

Index_subtype_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_subtype_definitionContext.prototype.constructor = Index_subtype_definitionContext;

Index_subtype_definitionContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Index_subtype_definitionContext.prototype.RANGE = function() {
    return this.getToken(vhdlParser.RANGE, 0);
};

Index_subtype_definitionContext.prototype.BOX = function() {
    return this.getToken(vhdlParser.BOX, 0);
};

Index_subtype_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIndex_subtype_definition(this);
	}
};

Index_subtype_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIndex_subtype_definition(this);
	}
};




vhdlParser.Index_subtype_definitionContext = Index_subtype_definitionContext;

vhdlParser.prototype.index_subtype_definition = function() {

    var localctx = new Index_subtype_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, vhdlParser.RULE_index_subtype_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1466;
        this.name();
        this.state = 1467;
        this.match(vhdlParser.RANGE);
        this.state = 1468;
        this.match(vhdlParser.BOX);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Instantiated_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_instantiated_unit;
    return this;
}

Instantiated_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instantiated_unitContext.prototype.constructor = Instantiated_unitContext;

Instantiated_unitContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Instantiated_unitContext.prototype.COMPONENT = function() {
    return this.getToken(vhdlParser.COMPONENT, 0);
};

Instantiated_unitContext.prototype.ENTITY = function() {
    return this.getToken(vhdlParser.ENTITY, 0);
};

Instantiated_unitContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Instantiated_unitContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Instantiated_unitContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Instantiated_unitContext.prototype.CONFIGURATION = function() {
    return this.getToken(vhdlParser.CONFIGURATION, 0);
};

Instantiated_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInstantiated_unit(this);
	}
};

Instantiated_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInstantiated_unit(this);
	}
};




vhdlParser.Instantiated_unitContext = Instantiated_unitContext;

vhdlParser.prototype.instantiated_unit = function() {

    var localctx = new Instantiated_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, vhdlParser.RULE_instantiated_unit);
    var _la = 0; // Token type
    try {
        this.state = 1484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.COMPONENT:
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1471;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.COMPONENT) {
                this.state = 1470;
                this.match(vhdlParser.COMPONENT);
            }

            this.state = 1473;
            this.name();
            break;
        case vhdlParser.ENTITY:
            this.enterOuterAlt(localctx, 2);
            this.state = 1474;
            this.match(vhdlParser.ENTITY);
            this.state = 1475;
            this.name();
            this.state = 1480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.LPAREN) {
                this.state = 1476;
                this.match(vhdlParser.LPAREN);
                this.state = 1477;
                this.identifier();
                this.state = 1478;
                this.match(vhdlParser.RPAREN);
            }

            break;
        case vhdlParser.CONFIGURATION:
            this.enterOuterAlt(localctx, 3);
            this.state = 1482;
            this.match(vhdlParser.CONFIGURATION);
            this.state = 1483;
            this.name();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Instantiation_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_instantiation_list;
    return this;
}

Instantiation_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Instantiation_listContext.prototype.constructor = Instantiation_listContext;

Instantiation_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Instantiation_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Instantiation_listContext.prototype.OTHERS = function() {
    return this.getToken(vhdlParser.OTHERS, 0);
};

Instantiation_listContext.prototype.ALL = function() {
    return this.getToken(vhdlParser.ALL, 0);
};

Instantiation_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInstantiation_list(this);
	}
};

Instantiation_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInstantiation_list(this);
	}
};




vhdlParser.Instantiation_listContext = Instantiation_listContext;

vhdlParser.prototype.instantiation_list = function() {

    var localctx = new Instantiation_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, vhdlParser.RULE_instantiation_list);
    var _la = 0; // Token type
    try {
        this.state = 1496;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1486;
            this.identifier();
            this.state = 1491;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 1487;
                this.match(vhdlParser.COMMA);
                this.state = 1488;
                this.identifier();
                this.state = 1493;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vhdlParser.OTHERS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1494;
            this.match(vhdlParser.OTHERS);
            break;
        case vhdlParser.ALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1495;
            this.match(vhdlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_constant_declaration;
    return this;
}

Interface_constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_constant_declarationContext.prototype.constructor = Interface_constant_declarationContext;

Interface_constant_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_constant_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_constant_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_constant_declarationContext.prototype.CONSTANT = function() {
    return this.getToken(vhdlParser.CONSTANT, 0);
};

Interface_constant_declarationContext.prototype.IN = function() {
    return this.getToken(vhdlParser.IN, 0);
};

Interface_constant_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Interface_constant_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Interface_constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_constant_declaration(this);
	}
};

Interface_constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_constant_declaration(this);
	}
};




vhdlParser.Interface_constant_declarationContext = Interface_constant_declarationContext;

vhdlParser.prototype.interface_constant_declaration = function() {

    var localctx = new Interface_constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, vhdlParser.RULE_interface_constant_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.CONSTANT) {
            this.state = 1498;
            this.match(vhdlParser.CONSTANT);
        }

        this.state = 1501;
        this.identifier_list();
        this.state = 1502;
        this.match(vhdlParser.COLON);
        this.state = 1504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IN) {
            this.state = 1503;
            this.match(vhdlParser.IN);
        }

        this.state = 1506;
        this.subtype_indication();
        this.state = 1509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1507;
            this.match(vhdlParser.VARASGN);
            this.state = 1508;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_declaration;
    return this;
}

Interface_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_declarationContext.prototype.constructor = Interface_declarationContext;

Interface_declarationContext.prototype.interface_constant_declaration = function() {
    return this.getTypedRuleContext(Interface_constant_declarationContext,0);
};

Interface_declarationContext.prototype.interface_signal_declaration = function() {
    return this.getTypedRuleContext(Interface_signal_declarationContext,0);
};

Interface_declarationContext.prototype.interface_variable_declaration = function() {
    return this.getTypedRuleContext(Interface_variable_declarationContext,0);
};

Interface_declarationContext.prototype.interface_file_declaration = function() {
    return this.getTypedRuleContext(Interface_file_declarationContext,0);
};

Interface_declarationContext.prototype.interface_terminal_declaration = function() {
    return this.getTypedRuleContext(Interface_terminal_declarationContext,0);
};

Interface_declarationContext.prototype.interface_quantity_declaration = function() {
    return this.getTypedRuleContext(Interface_quantity_declarationContext,0);
};

Interface_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_declaration(this);
	}
};

Interface_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_declaration(this);
	}
};




vhdlParser.Interface_declarationContext = Interface_declarationContext;

vhdlParser.prototype.interface_declaration = function() {

    var localctx = new Interface_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, vhdlParser.RULE_interface_declaration);
    try {
        this.state = 1517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1511;
            this.interface_constant_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1512;
            this.interface_signal_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1513;
            this.interface_variable_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1514;
            this.interface_file_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1515;
            this.interface_terminal_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1516;
            this.interface_quantity_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_element;
    return this;
}

Interface_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_elementContext.prototype.constructor = Interface_elementContext;

Interface_elementContext.prototype.interface_declaration = function() {
    return this.getTypedRuleContext(Interface_declarationContext,0);
};

Interface_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_element(this);
	}
};

Interface_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_element(this);
	}
};




vhdlParser.Interface_elementContext = Interface_elementContext;

vhdlParser.prototype.interface_element = function() {

    var localctx = new Interface_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, vhdlParser.RULE_interface_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1519;
        this.interface_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_file_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_file_declaration;
    return this;
}

Interface_file_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_file_declarationContext.prototype.constructor = Interface_file_declarationContext;

Interface_file_declarationContext.prototype.FILE = function() {
    return this.getToken(vhdlParser.FILE, 0);
};

Interface_file_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_file_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_file_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_file_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_file_declaration(this);
	}
};

Interface_file_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_file_declaration(this);
	}
};




vhdlParser.Interface_file_declarationContext = Interface_file_declarationContext;

vhdlParser.prototype.interface_file_declaration = function() {

    var localctx = new Interface_file_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, vhdlParser.RULE_interface_file_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1521;
        this.match(vhdlParser.FILE);
        this.state = 1522;
        this.identifier_list();
        this.state = 1523;
        this.match(vhdlParser.COLON);
        this.state = 1524;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_signal_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_signal_list;
    return this;
}

Interface_signal_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_signal_listContext.prototype.constructor = Interface_signal_listContext;

Interface_signal_listContext.prototype.interface_signal_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_signal_declarationContext);
    } else {
        return this.getTypedRuleContext(Interface_signal_declarationContext,i);
    }
};

Interface_signal_listContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Interface_signal_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_signal_list(this);
	}
};

Interface_signal_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_signal_list(this);
	}
};




vhdlParser.Interface_signal_listContext = Interface_signal_listContext;

vhdlParser.prototype.interface_signal_list = function() {

    var localctx = new Interface_signal_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, vhdlParser.RULE_interface_signal_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1526;
        this.interface_signal_declaration();
        this.state = 1531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.SEMI) {
            this.state = 1527;
            this.match(vhdlParser.SEMI);
            this.state = 1528;
            this.interface_signal_declaration();
            this.state = 1533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_port_list;
    return this;
}

Interface_port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_port_listContext.prototype.constructor = Interface_port_listContext;

Interface_port_listContext.prototype.interface_port_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_port_declarationContext);
    } else {
        return this.getTypedRuleContext(Interface_port_declarationContext,i);
    }
};

Interface_port_listContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Interface_port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_port_list(this);
	}
};

Interface_port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_port_list(this);
	}
};




vhdlParser.Interface_port_listContext = Interface_port_listContext;

vhdlParser.prototype.interface_port_list = function() {

    var localctx = new Interface_port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, vhdlParser.RULE_interface_port_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1534;
        this.interface_port_declaration();
        this.state = 1539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.SEMI) {
            this.state = 1535;
            this.match(vhdlParser.SEMI);
            this.state = 1536;
            this.interface_port_declaration();
            this.state = 1541;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_list;
    return this;
}

Interface_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_listContext.prototype.constructor = Interface_listContext;

Interface_listContext.prototype.interface_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_elementContext);
    } else {
        return this.getTypedRuleContext(Interface_elementContext,i);
    }
};

Interface_listContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.SEMI);
    } else {
        return this.getToken(vhdlParser.SEMI, i);
    }
};


Interface_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_list(this);
	}
};

Interface_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_list(this);
	}
};




vhdlParser.Interface_listContext = Interface_listContext;

vhdlParser.prototype.interface_list = function() {

    var localctx = new Interface_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, vhdlParser.RULE_interface_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1542;
        this.interface_element();
        this.state = 1547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.SEMI) {
            this.state = 1543;
            this.match(vhdlParser.SEMI);
            this.state = 1544;
            this.interface_element();
            this.state = 1549;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_quantity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_quantity_declaration;
    return this;
}

Interface_quantity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_quantity_declarationContext.prototype.constructor = Interface_quantity_declarationContext;

Interface_quantity_declarationContext.prototype.QUANTITY = function() {
    return this.getToken(vhdlParser.QUANTITY, 0);
};

Interface_quantity_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_quantity_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_quantity_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_quantity_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Interface_quantity_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Interface_quantity_declarationContext.prototype.IN = function() {
    return this.getToken(vhdlParser.IN, 0);
};

Interface_quantity_declarationContext.prototype.OUT = function() {
    return this.getToken(vhdlParser.OUT, 0);
};

Interface_quantity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_quantity_declaration(this);
	}
};

Interface_quantity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_quantity_declaration(this);
	}
};




vhdlParser.Interface_quantity_declarationContext = Interface_quantity_declarationContext;

vhdlParser.prototype.interface_quantity_declaration = function() {

    var localctx = new Interface_quantity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, vhdlParser.RULE_interface_quantity_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1550;
        this.match(vhdlParser.QUANTITY);
        this.state = 1551;
        this.identifier_list();
        this.state = 1552;
        this.match(vhdlParser.COLON);
        this.state = 1554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IN || _la===vhdlParser.OUT) {
            this.state = 1553;
            _la = this._input.LA(1);
            if(!(_la===vhdlParser.IN || _la===vhdlParser.OUT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1556;
        this.subtype_indication();
        this.state = 1559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1557;
            this.match(vhdlParser.VARASGN);
            this.state = 1558;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_port_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_port_declaration;
    return this;
}

Interface_port_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_port_declarationContext.prototype.constructor = Interface_port_declarationContext;

Interface_port_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_port_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_port_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_port_declarationContext.prototype.signal_mode = function() {
    return this.getTypedRuleContext(Signal_modeContext,0);
};

Interface_port_declarationContext.prototype.BUS = function() {
    return this.getToken(vhdlParser.BUS, 0);
};

Interface_port_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Interface_port_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Interface_port_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_port_declaration(this);
	}
};

Interface_port_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_port_declaration(this);
	}
};




vhdlParser.Interface_port_declarationContext = Interface_port_declarationContext;

vhdlParser.prototype.interface_port_declaration = function() {

    var localctx = new Interface_port_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, vhdlParser.RULE_interface_port_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1561;
        this.identifier_list();
        this.state = 1562;
        this.match(vhdlParser.COLON);
        this.state = 1564;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
            this.state = 1563;
            this.signal_mode();
        }

        this.state = 1566;
        this.subtype_indication();
        this.state = 1568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUS) {
            this.state = 1567;
            this.match(vhdlParser.BUS);
        }

        this.state = 1572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1570;
            this.match(vhdlParser.VARASGN);
            this.state = 1571;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_signal_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_signal_declaration;
    return this;
}

Interface_signal_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_signal_declarationContext.prototype.constructor = Interface_signal_declarationContext;

Interface_signal_declarationContext.prototype.SIGNAL = function() {
    return this.getToken(vhdlParser.SIGNAL, 0);
};

Interface_signal_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_signal_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_signal_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_signal_declarationContext.prototype.signal_mode = function() {
    return this.getTypedRuleContext(Signal_modeContext,0);
};

Interface_signal_declarationContext.prototype.BUS = function() {
    return this.getToken(vhdlParser.BUS, 0);
};

Interface_signal_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Interface_signal_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Interface_signal_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_signal_declaration(this);
	}
};

Interface_signal_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_signal_declaration(this);
	}
};




vhdlParser.Interface_signal_declarationContext = Interface_signal_declarationContext;

vhdlParser.prototype.interface_signal_declaration = function() {

    var localctx = new Interface_signal_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, vhdlParser.RULE_interface_signal_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1574;
        this.match(vhdlParser.SIGNAL);
        this.state = 1575;
        this.identifier_list();
        this.state = 1576;
        this.match(vhdlParser.COLON);
        this.state = 1578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
            this.state = 1577;
            this.signal_mode();
        }

        this.state = 1580;
        this.subtype_indication();
        this.state = 1582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUS) {
            this.state = 1581;
            this.match(vhdlParser.BUS);
        }

        this.state = 1586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1584;
            this.match(vhdlParser.VARASGN);
            this.state = 1585;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_terminal_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_terminal_declaration;
    return this;
}

Interface_terminal_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_terminal_declarationContext.prototype.constructor = Interface_terminal_declarationContext;

Interface_terminal_declarationContext.prototype.TERMINAL = function() {
    return this.getToken(vhdlParser.TERMINAL, 0);
};

Interface_terminal_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_terminal_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_terminal_declarationContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Interface_terminal_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_terminal_declaration(this);
	}
};

Interface_terminal_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_terminal_declaration(this);
	}
};




vhdlParser.Interface_terminal_declarationContext = Interface_terminal_declarationContext;

vhdlParser.prototype.interface_terminal_declaration = function() {

    var localctx = new Interface_terminal_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, vhdlParser.RULE_interface_terminal_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1588;
        this.match(vhdlParser.TERMINAL);
        this.state = 1589;
        this.identifier_list();
        this.state = 1590;
        this.match(vhdlParser.COLON);
        this.state = 1591;
        this.subnature_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interface_variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_interface_variable_declaration;
    return this;
}

Interface_variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_variable_declarationContext.prototype.constructor = Interface_variable_declarationContext;

Interface_variable_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Interface_variable_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Interface_variable_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Interface_variable_declarationContext.prototype.VARIABLE = function() {
    return this.getToken(vhdlParser.VARIABLE, 0);
};

Interface_variable_declarationContext.prototype.signal_mode = function() {
    return this.getTypedRuleContext(Signal_modeContext,0);
};

Interface_variable_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Interface_variable_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Interface_variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterInterface_variable_declaration(this);
	}
};

Interface_variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitInterface_variable_declaration(this);
	}
};




vhdlParser.Interface_variable_declarationContext = Interface_variable_declarationContext;

vhdlParser.prototype.interface_variable_declaration = function() {

    var localctx = new Interface_variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, vhdlParser.RULE_interface_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARIABLE) {
            this.state = 1593;
            this.match(vhdlParser.VARIABLE);
        }

        this.state = 1596;
        this.identifier_list();
        this.state = 1597;
        this.match(vhdlParser.COLON);
        this.state = 1599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0)) {
            this.state = 1598;
            this.signal_mode();
        }

        this.state = 1601;
        this.subtype_indication();
        this.state = 1604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 1602;
            this.match(vhdlParser.VARASGN);
            this.state = 1603;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Iteration_schemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_iteration_scheme;
    return this;
}

Iteration_schemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Iteration_schemeContext.prototype.constructor = Iteration_schemeContext;

Iteration_schemeContext.prototype.WHILE = function() {
    return this.getToken(vhdlParser.WHILE, 0);
};

Iteration_schemeContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Iteration_schemeContext.prototype.FOR = function() {
    return this.getToken(vhdlParser.FOR, 0);
};

Iteration_schemeContext.prototype.parameter_specification = function() {
    return this.getTypedRuleContext(Parameter_specificationContext,0);
};

Iteration_schemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterIteration_scheme(this);
	}
};

Iteration_schemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitIteration_scheme(this);
	}
};




vhdlParser.Iteration_schemeContext = Iteration_schemeContext;

vhdlParser.prototype.iteration_scheme = function() {

    var localctx = new Iteration_schemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, vhdlParser.RULE_iteration_scheme);
    try {
        this.state = 1610;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.WHILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1606;
            this.match(vhdlParser.WHILE);
            this.state = 1607;
            this.condition();
            break;
        case vhdlParser.FOR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1608;
            this.match(vhdlParser.FOR);
            this.state = 1609;
            this.parameter_specification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Label_colonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_label_colon;
    return this;
}

Label_colonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_colonContext.prototype.constructor = Label_colonContext;

Label_colonContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Label_colonContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Label_colonContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLabel_colon(this);
	}
};

Label_colonContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLabel_colon(this);
	}
};




vhdlParser.Label_colonContext = Label_colonContext;

vhdlParser.prototype.label_colon = function() {

    var localctx = new Label_colonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, vhdlParser.RULE_label_colon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1612;
        this.identifier();
        this.state = 1613;
        this.match(vhdlParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Library_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_library_clause;
    return this;
}

Library_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Library_clauseContext.prototype.constructor = Library_clauseContext;

Library_clauseContext.prototype.LIBRARY = function() {
    return this.getToken(vhdlParser.LIBRARY, 0);
};

Library_clauseContext.prototype.logical_name_list = function() {
    return this.getTypedRuleContext(Logical_name_listContext,0);
};

Library_clauseContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Library_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLibrary_clause(this);
	}
};

Library_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLibrary_clause(this);
	}
};




vhdlParser.Library_clauseContext = Library_clauseContext;

vhdlParser.prototype.library_clause = function() {

    var localctx = new Library_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, vhdlParser.RULE_library_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1615;
        this.match(vhdlParser.LIBRARY);
        this.state = 1616;
        this.logical_name_list();
        this.state = 1617;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Library_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_library_unit;
    return this;
}

Library_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Library_unitContext.prototype.constructor = Library_unitContext;

Library_unitContext.prototype.secondary_unit = function() {
    return this.getTypedRuleContext(Secondary_unitContext,0);
};

Library_unitContext.prototype.primary_unit = function() {
    return this.getTypedRuleContext(Primary_unitContext,0);
};

Library_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLibrary_unit(this);
	}
};

Library_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLibrary_unit(this);
	}
};




vhdlParser.Library_unitContext = Library_unitContext;

vhdlParser.prototype.library_unit = function() {

    var localctx = new Library_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, vhdlParser.RULE_library_unit);
    try {
        this.state = 1621;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1619;
            this.secondary_unit();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1620;
            this.primary_unit();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NULL_ = function() {
    return this.getToken(vhdlParser.NULL_, 0);
};

LiteralContext.prototype.BIT_STRING_LITERAL = function() {
    return this.getToken(vhdlParser.BIT_STRING_LITERAL, 0);
};

LiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

LiteralContext.prototype.enumeration_literal = function() {
    return this.getTypedRuleContext(Enumeration_literalContext,0);
};

LiteralContext.prototype.numeric_literal = function() {
    return this.getTypedRuleContext(Numeric_literalContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLiteral(this);
	}
};




vhdlParser.LiteralContext = LiteralContext;

vhdlParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, vhdlParser.RULE_literal);
    try {
        this.state = 1628;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.NULL_:
            this.enterOuterAlt(localctx, 1);
            this.state = 1623;
            this.match(vhdlParser.NULL_);
            break;
        case vhdlParser.BIT_STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1624;
            this.match(vhdlParser.BIT_STRING_LITERAL);
            break;
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1625;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1626;
            this.enumeration_literal();
            break;
        case vhdlParser.BASE_LITERAL:
        case vhdlParser.REAL_LITERAL:
        case vhdlParser.INTEGER:
            this.enterOuterAlt(localctx, 5);
            this.state = 1627;
            this.numeric_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Logical_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_logical_name;
    return this;
}

Logical_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_nameContext.prototype.constructor = Logical_nameContext;

Logical_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Logical_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLogical_name(this);
	}
};

Logical_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLogical_name(this);
	}
};




vhdlParser.Logical_nameContext = Logical_nameContext;

vhdlParser.prototype.logical_name = function() {

    var localctx = new Logical_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, vhdlParser.RULE_logical_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1630;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Logical_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_logical_name_list;
    return this;
}

Logical_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_name_listContext.prototype.constructor = Logical_name_listContext;

Logical_name_listContext.prototype.logical_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Logical_nameContext);
    } else {
        return this.getTypedRuleContext(Logical_nameContext,i);
    }
};

Logical_name_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Logical_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLogical_name_list(this);
	}
};

Logical_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLogical_name_list(this);
	}
};




vhdlParser.Logical_name_listContext = Logical_name_listContext;

vhdlParser.prototype.logical_name_list = function() {

    var localctx = new Logical_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, vhdlParser.RULE_logical_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1632;
        this.logical_name();
        this.state = 1637;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 1633;
            this.match(vhdlParser.COMMA);
            this.state = 1634;
            this.logical_name();
            this.state = 1639;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Logical_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_logical_operator;
    return this;
}

Logical_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Logical_operatorContext.prototype.constructor = Logical_operatorContext;

Logical_operatorContext.prototype.AND = function() {
    return this.getToken(vhdlParser.AND, 0);
};

Logical_operatorContext.prototype.OR = function() {
    return this.getToken(vhdlParser.OR, 0);
};

Logical_operatorContext.prototype.NAND = function() {
    return this.getToken(vhdlParser.NAND, 0);
};

Logical_operatorContext.prototype.NOR = function() {
    return this.getToken(vhdlParser.NOR, 0);
};

Logical_operatorContext.prototype.XOR = function() {
    return this.getToken(vhdlParser.XOR, 0);
};

Logical_operatorContext.prototype.XNOR = function() {
    return this.getToken(vhdlParser.XNOR, 0);
};

Logical_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLogical_operator(this);
	}
};

Logical_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLogical_operator(this);
	}
};




vhdlParser.Logical_operatorContext = Logical_operatorContext;

vhdlParser.prototype.logical_operator = function() {

    var localctx = new Logical_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, vhdlParser.RULE_logical_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1640;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.AND || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (vhdlParser.NAND - 50)) | (1 << (vhdlParser.NOR - 50)) | (1 << (vhdlParser.OR - 50)))) !== 0) || _la===vhdlParser.XNOR || _la===vhdlParser.XOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.LOOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.LOOP);
    } else {
        return this.getToken(vhdlParser.LOOP, i);
    }
};


Loop_statementContext.prototype.sequence_of_statements = function() {
    return this.getTypedRuleContext(Sequence_of_statementsContext,0);
};

Loop_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Loop_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Loop_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Loop_statementContext.prototype.iteration_scheme = function() {
    return this.getTypedRuleContext(Iteration_schemeContext,0);
};

Loop_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitLoop_statement(this);
	}
};




vhdlParser.Loop_statementContext = Loop_statementContext;

vhdlParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, vhdlParser.RULE_loop_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1642;
            this.label_colon();
        }

        this.state = 1646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR || _la===vhdlParser.WHILE) {
            this.state = 1645;
            this.iteration_scheme();
        }

        this.state = 1648;
        this.match(vhdlParser.LOOP);
        this.state = 1649;
        this.sequence_of_statements();
        this.state = 1650;
        this.match(vhdlParser.END);
        this.state = 1651;
        this.match(vhdlParser.LOOP);
        this.state = 1653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1652;
            this.identifier();
        }

        this.state = 1655;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_modeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signal_mode;
    return this;
}

Signal_modeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_modeContext.prototype.constructor = Signal_modeContext;

Signal_modeContext.prototype.IN = function() {
    return this.getToken(vhdlParser.IN, 0);
};

Signal_modeContext.prototype.OUT = function() {
    return this.getToken(vhdlParser.OUT, 0);
};

Signal_modeContext.prototype.INOUT = function() {
    return this.getToken(vhdlParser.INOUT, 0);
};

Signal_modeContext.prototype.BUFFER = function() {
    return this.getToken(vhdlParser.BUFFER, 0);
};

Signal_modeContext.prototype.LINKAGE = function() {
    return this.getToken(vhdlParser.LINKAGE, 0);
};

Signal_modeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignal_mode(this);
	}
};

Signal_modeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignal_mode(this);
	}
};




vhdlParser.Signal_modeContext = Signal_modeContext;

vhdlParser.prototype.signal_mode = function() {

    var localctx = new Signal_modeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, vhdlParser.RULE_signal_mode);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1657;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.BUFFER || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (vhdlParser.IN - 38)) | (1 << (vhdlParser.INOUT - 38)) | (1 << (vhdlParser.LINKAGE - 38)) | (1 << (vhdlParser.OUT - 38)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Multiplying_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_multiplying_operator;
    return this;
}

Multiplying_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiplying_operatorContext.prototype.constructor = Multiplying_operatorContext;

Multiplying_operatorContext.prototype.MUL = function() {
    return this.getToken(vhdlParser.MUL, 0);
};

Multiplying_operatorContext.prototype.DIV = function() {
    return this.getToken(vhdlParser.DIV, 0);
};

Multiplying_operatorContext.prototype.MOD = function() {
    return this.getToken(vhdlParser.MOD, 0);
};

Multiplying_operatorContext.prototype.REM = function() {
    return this.getToken(vhdlParser.REM, 0);
};

Multiplying_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterMultiplying_operator(this);
	}
};

Multiplying_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitMultiplying_operator(this);
	}
};




vhdlParser.Multiplying_operatorContext = Multiplying_operatorContext;

vhdlParser.prototype.multiplying_operator = function() {

    var localctx = new Multiplying_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, vhdlParser.RULE_multiplying_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1659;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.MOD || _la===vhdlParser.REM || _la===vhdlParser.MUL || _la===vhdlParser.DIV)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

NameContext.prototype.name_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Name_partContext);
    } else {
        return this.getTypedRuleContext(Name_partContext,i);
    }
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitName(this);
	}
};




vhdlParser.NameContext = NameContext;

vhdlParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, vhdlParser.RULE_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1663;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.state = 1661;
            this.identifier();
            break;
        case vhdlParser.STRING_LITERAL:
            this.state = 1662;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1668;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1665;
                this.name_part(); 
            }
            this.state = 1670;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Name_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_name_part;
    return this;
}

Name_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_partContext.prototype.constructor = Name_partContext;

Name_partContext.prototype.selected_name_part = function() {
    return this.getTypedRuleContext(Selected_name_partContext,0);
};

Name_partContext.prototype.function_call_or_indexed_name_part = function() {
    return this.getTypedRuleContext(Function_call_or_indexed_name_partContext,0);
};

Name_partContext.prototype.slice_name_part = function() {
    return this.getTypedRuleContext(Slice_name_partContext,0);
};

Name_partContext.prototype.attribute_name_part = function() {
    return this.getTypedRuleContext(Attribute_name_partContext,0);
};

Name_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterName_part(this);
	}
};

Name_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitName_part(this);
	}
};




vhdlParser.Name_partContext = Name_partContext;

vhdlParser.prototype.name_part = function() {

    var localctx = new Name_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, vhdlParser.RULE_name_part);
    try {
        this.state = 1675;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1671;
            this.selected_name_part();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1672;
            this.function_call_or_indexed_name_part();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1673;
            this.slice_name_part();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1674;
            this.attribute_name_part();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Selected_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_selected_name;
    return this;
}

Selected_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_nameContext.prototype.constructor = Selected_nameContext;

Selected_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Selected_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.DOT);
    } else {
        return this.getToken(vhdlParser.DOT, i);
    }
};


Selected_nameContext.prototype.suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuffixContext);
    } else {
        return this.getTypedRuleContext(SuffixContext,i);
    }
};

Selected_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSelected_name(this);
	}
};

Selected_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSelected_name(this);
	}
};




vhdlParser.Selected_nameContext = Selected_nameContext;

vhdlParser.prototype.selected_name = function() {

    var localctx = new Selected_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, vhdlParser.RULE_selected_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1677;
        this.identifier();
        this.state = 1682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.DOT) {
            this.state = 1678;
            this.match(vhdlParser.DOT);
            this.state = 1679;
            this.suffix();
            this.state = 1684;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Selected_name_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_selected_name_part;
    return this;
}

Selected_name_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_name_partContext.prototype.constructor = Selected_name_partContext;

Selected_name_partContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.DOT);
    } else {
        return this.getToken(vhdlParser.DOT, i);
    }
};


Selected_name_partContext.prototype.suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuffixContext);
    } else {
        return this.getTypedRuleContext(SuffixContext,i);
    }
};

Selected_name_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSelected_name_part(this);
	}
};

Selected_name_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSelected_name_part(this);
	}
};




vhdlParser.Selected_name_partContext = Selected_name_partContext;

vhdlParser.prototype.selected_name_part = function() {

    var localctx = new Selected_name_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, vhdlParser.RULE_selected_name_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1687; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1685;
        		this.match(vhdlParser.DOT);
        		this.state = 1686;
        		this.suffix();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1689; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,172, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_or_indexed_name_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_function_call_or_indexed_name_part;
    return this;
}

Function_call_or_indexed_name_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_or_indexed_name_partContext.prototype.constructor = Function_call_or_indexed_name_partContext;

Function_call_or_indexed_name_partContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Function_call_or_indexed_name_partContext.prototype.actual_parameter_part = function() {
    return this.getTypedRuleContext(Actual_parameter_partContext,0);
};

Function_call_or_indexed_name_partContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Function_call_or_indexed_name_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFunction_call_or_indexed_name_part(this);
	}
};

Function_call_or_indexed_name_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFunction_call_or_indexed_name_part(this);
	}
};




vhdlParser.Function_call_or_indexed_name_partContext = Function_call_or_indexed_name_partContext;

vhdlParser.prototype.function_call_or_indexed_name_part = function() {

    var localctx = new Function_call_or_indexed_name_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, vhdlParser.RULE_function_call_or_indexed_name_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1691;
        this.match(vhdlParser.LPAREN);
        this.state = 1692;
        this.actual_parameter_part();
        this.state = 1693;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Slice_name_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_slice_name_part;
    return this;
}

Slice_name_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Slice_name_partContext.prototype.constructor = Slice_name_partContext;

Slice_name_partContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Slice_name_partContext.prototype.discrete_range = function() {
    return this.getTypedRuleContext(Discrete_rangeContext,0);
};

Slice_name_partContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Slice_name_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSlice_name_part(this);
	}
};

Slice_name_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSlice_name_part(this);
	}
};




vhdlParser.Slice_name_partContext = Slice_name_partContext;

vhdlParser.prototype.slice_name_part = function() {

    var localctx = new Slice_name_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, vhdlParser.RULE_slice_name_part);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1695;
        this.match(vhdlParser.LPAREN);
        this.state = 1696;
        this.discrete_range();
        this.state = 1697;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Attribute_name_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_attribute_name_part;
    return this;
}

Attribute_name_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_name_partContext.prototype.constructor = Attribute_name_partContext;

Attribute_name_partContext.prototype.APOSTROPHE = function() {
    return this.getToken(vhdlParser.APOSTROPHE, 0);
};

Attribute_name_partContext.prototype.attribute_designator = function() {
    return this.getTypedRuleContext(Attribute_designatorContext,0);
};

Attribute_name_partContext.prototype.signature = function() {
    return this.getTypedRuleContext(SignatureContext,0);
};

Attribute_name_partContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Attribute_name_partContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Attribute_name_partContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Attribute_name_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterAttribute_name_part(this);
	}
};

Attribute_name_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitAttribute_name_part(this);
	}
};




vhdlParser.Attribute_name_partContext = Attribute_name_partContext;

vhdlParser.prototype.attribute_name_part = function() {

    var localctx = new Attribute_name_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, vhdlParser.RULE_attribute_name_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1700;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LBRACKET) {
            this.state = 1699;
            this.signature();
        }

        this.state = 1702;
        this.match(vhdlParser.APOSTROPHE);
        this.state = 1703;
        this.attribute_designator();
        this.state = 1708;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        if(la_===1) {
            this.state = 1704;
            this.match(vhdlParser.LPAREN);
            this.state = 1705;
            this.expression();
            this.state = 1706;
            this.match(vhdlParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nature_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_nature_declaration;
    return this;
}

Nature_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nature_declarationContext.prototype.constructor = Nature_declarationContext;

Nature_declarationContext.prototype.NATURE = function() {
    return this.getToken(vhdlParser.NATURE, 0);
};

Nature_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Nature_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Nature_declarationContext.prototype.nature_definition = function() {
    return this.getTypedRuleContext(Nature_definitionContext,0);
};

Nature_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Nature_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterNature_declaration(this);
	}
};

Nature_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitNature_declaration(this);
	}
};




vhdlParser.Nature_declarationContext = Nature_declarationContext;

vhdlParser.prototype.nature_declaration = function() {

    var localctx = new Nature_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, vhdlParser.RULE_nature_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1710;
        this.match(vhdlParser.NATURE);
        this.state = 1711;
        this.identifier();
        this.state = 1712;
        this.match(vhdlParser.IS);
        this.state = 1713;
        this.nature_definition();
        this.state = 1714;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_nature_definition;
    return this;
}

Nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nature_definitionContext.prototype.constructor = Nature_definitionContext;

Nature_definitionContext.prototype.scalar_nature_definition = function() {
    return this.getTypedRuleContext(Scalar_nature_definitionContext,0);
};

Nature_definitionContext.prototype.composite_nature_definition = function() {
    return this.getTypedRuleContext(Composite_nature_definitionContext,0);
};

Nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterNature_definition(this);
	}
};

Nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitNature_definition(this);
	}
};




vhdlParser.Nature_definitionContext = Nature_definitionContext;

vhdlParser.prototype.nature_definition = function() {

    var localctx = new Nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, vhdlParser.RULE_nature_definition);
    try {
        this.state = 1718;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1716;
            this.scalar_nature_definition();
            break;
        case vhdlParser.ARRAY:
        case vhdlParser.RECORD:
            this.enterOuterAlt(localctx, 2);
            this.state = 1717;
            this.composite_nature_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nature_element_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_nature_element_declaration;
    return this;
}

Nature_element_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nature_element_declarationContext.prototype.constructor = Nature_element_declarationContext;

Nature_element_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Nature_element_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Nature_element_declarationContext.prototype.element_subnature_definition = function() {
    return this.getTypedRuleContext(Element_subnature_definitionContext,0);
};

Nature_element_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterNature_element_declaration(this);
	}
};

Nature_element_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitNature_element_declaration(this);
	}
};




vhdlParser.Nature_element_declarationContext = Nature_element_declarationContext;

vhdlParser.prototype.nature_element_declaration = function() {

    var localctx = new Nature_element_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, vhdlParser.RULE_nature_element_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.identifier_list();
        this.state = 1721;
        this.match(vhdlParser.COLON);
        this.state = 1722;
        this.element_subnature_definition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Next_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_next_statement;
    return this;
}

Next_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Next_statementContext.prototype.constructor = Next_statementContext;

Next_statementContext.prototype.NEXT = function() {
    return this.getToken(vhdlParser.NEXT, 0);
};

Next_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Next_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Next_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Next_statementContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Next_statementContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Next_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterNext_statement(this);
	}
};

Next_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitNext_statement(this);
	}
};




vhdlParser.Next_statementContext = Next_statementContext;

vhdlParser.prototype.next_statement = function() {

    var localctx = new Next_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, vhdlParser.RULE_next_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1725;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1724;
            this.label_colon();
        }

        this.state = 1727;
        this.match(vhdlParser.NEXT);
        this.state = 1729;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1728;
            this.identifier();
        }

        this.state = 1733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.WHEN) {
            this.state = 1731;
            this.match(vhdlParser.WHEN);
            this.state = 1732;
            this.condition();
        }

        this.state = 1735;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Numeric_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_numeric_literal;
    return this;
}

Numeric_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_literalContext.prototype.constructor = Numeric_literalContext;

Numeric_literalContext.prototype.abstract_literal = function() {
    return this.getTypedRuleContext(Abstract_literalContext,0);
};

Numeric_literalContext.prototype.physical_literal = function() {
    return this.getTypedRuleContext(Physical_literalContext,0);
};

Numeric_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterNumeric_literal(this);
	}
};

Numeric_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitNumeric_literal(this);
	}
};




vhdlParser.Numeric_literalContext = Numeric_literalContext;

vhdlParser.prototype.numeric_literal = function() {

    var localctx = new Numeric_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, vhdlParser.RULE_numeric_literal);
    try {
        this.state = 1739;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1737;
            this.abstract_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1738;
            this.physical_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Object_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_object_declaration;
    return this;
}

Object_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_declarationContext.prototype.constructor = Object_declarationContext;

Object_declarationContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Object_declarationContext.prototype.signal_declaration = function() {
    return this.getTypedRuleContext(Signal_declarationContext,0);
};

Object_declarationContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Object_declarationContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Object_declarationContext.prototype.terminal_declaration = function() {
    return this.getTypedRuleContext(Terminal_declarationContext,0);
};

Object_declarationContext.prototype.quantity_declaration = function() {
    return this.getTypedRuleContext(Quantity_declarationContext,0);
};

Object_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterObject_declaration(this);
	}
};

Object_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitObject_declaration(this);
	}
};




vhdlParser.Object_declarationContext = Object_declarationContext;

vhdlParser.prototype.object_declaration = function() {

    var localctx = new Object_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, vhdlParser.RULE_object_declaration);
    try {
        this.state = 1747;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.CONSTANT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1741;
            this.constant_declaration();
            break;
        case vhdlParser.SIGNAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1742;
            this.signal_declaration();
            break;
        case vhdlParser.SHARED:
        case vhdlParser.VARIABLE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1743;
            this.variable_declaration();
            break;
        case vhdlParser.FILE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1744;
            this.file_declaration();
            break;
        case vhdlParser.TERMINAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 1745;
            this.terminal_declaration();
            break;
        case vhdlParser.QUANTITY:
            this.enterOuterAlt(localctx, 6);
            this.state = 1746;
            this.quantity_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_opts;
    return this;
}

OptsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptsContext.prototype.constructor = OptsContext;

OptsContext.prototype.GUARDED = function() {
    return this.getToken(vhdlParser.GUARDED, 0);
};

OptsContext.prototype.delay_mechanism = function() {
    return this.getTypedRuleContext(Delay_mechanismContext,0);
};

OptsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterOpts(this);
	}
};

OptsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitOpts(this);
	}
};




vhdlParser.OptsContext = OptsContext;

vhdlParser.prototype.opts = function() {

    var localctx = new OptsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, vhdlParser.RULE_opts);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.GUARDED) {
            this.state = 1749;
            this.match(vhdlParser.GUARDED);
        }

        this.state = 1753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.INERTIAL || _la===vhdlParser.REJECT || _la===vhdlParser.TRANSPORT) {
            this.state = 1752;
            this.delay_mechanism();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_body;
    return this;
}

Package_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_bodyContext.prototype.constructor = Package_bodyContext;

Package_bodyContext.prototype.PACKAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.PACKAGE);
    } else {
        return this.getToken(vhdlParser.PACKAGE, i);
    }
};


Package_bodyContext.prototype.BODY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.BODY);
    } else {
        return this.getToken(vhdlParser.BODY, i);
    }
};


Package_bodyContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Package_bodyContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Package_bodyContext.prototype.package_body_declarative_part = function() {
    return this.getTypedRuleContext(Package_body_declarative_partContext,0);
};

Package_bodyContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Package_bodyContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Package_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_body(this);
	}
};

Package_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_body(this);
	}
};




vhdlParser.Package_bodyContext = Package_bodyContext;

vhdlParser.prototype.package_body = function() {

    var localctx = new Package_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, vhdlParser.RULE_package_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1755;
        this.match(vhdlParser.PACKAGE);
        this.state = 1756;
        this.match(vhdlParser.BODY);
        this.state = 1757;
        this.identifier();
        this.state = 1758;
        this.match(vhdlParser.IS);
        this.state = 1759;
        this.package_body_declarative_part();
        this.state = 1760;
        this.match(vhdlParser.END);
        this.state = 1763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PACKAGE) {
            this.state = 1761;
            this.match(vhdlParser.PACKAGE);
            this.state = 1762;
            this.match(vhdlParser.BODY);
        }

        this.state = 1766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1765;
            this.identifier();
        }

        this.state = 1768;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_body_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_body_declarative_item;
    return this;
}

Package_body_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_body_declarative_itemContext.prototype.constructor = Package_body_declarative_itemContext;

Package_body_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Package_body_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Package_body_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Package_body_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_body_declarative_item(this);
	}
};

Package_body_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_body_declarative_item(this);
	}
};




vhdlParser.Package_body_declarative_itemContext = Package_body_declarative_itemContext;

vhdlParser.prototype.package_body_declarative_item = function() {

    var localctx = new Package_body_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, vhdlParser.RULE_package_body_declarative_item);
    try {
        this.state = 1781;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1770;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1771;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1772;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1773;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1774;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1775;
            this.variable_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1776;
            this.file_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1777;
            this.alias_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1778;
            this.use_clause();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1779;
            this.group_template_declaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1780;
            this.group_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_body_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_body_declarative_part;
    return this;
}

Package_body_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_body_declarative_partContext.prototype.constructor = Package_body_declarative_partContext;

Package_body_declarative_partContext.prototype.package_body_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_body_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Package_body_declarative_itemContext,i);
    }
};

Package_body_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_body_declarative_part(this);
	}
};

Package_body_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_body_declarative_part(this);
	}
};




vhdlParser.Package_body_declarative_partContext = Package_body_declarative_partContext;

vhdlParser.prototype.package_body_declarative_part = function() {

    var localctx = new Package_body_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, vhdlParser.RULE_package_body_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1783;
            this.package_body_declarative_item();
            this.state = 1788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_declaration;
    return this;
}

Package_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_declarationContext.prototype.constructor = Package_declarationContext;

Package_declarationContext.prototype.PACKAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.PACKAGE);
    } else {
        return this.getToken(vhdlParser.PACKAGE, i);
    }
};


Package_declarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Package_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Package_declarationContext.prototype.package_declarative_part = function() {
    return this.getTypedRuleContext(Package_declarative_partContext,0);
};

Package_declarationContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Package_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Package_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_declaration(this);
	}
};

Package_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_declaration(this);
	}
};




vhdlParser.Package_declarationContext = Package_declarationContext;

vhdlParser.prototype.package_declaration = function() {

    var localctx = new Package_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, vhdlParser.RULE_package_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1789;
        this.match(vhdlParser.PACKAGE);
        this.state = 1790;
        this.identifier();
        this.state = 1791;
        this.match(vhdlParser.IS);
        this.state = 1792;
        this.package_declarative_part();
        this.state = 1793;
        this.match(vhdlParser.END);
        this.state = 1795;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PACKAGE) {
            this.state = 1794;
            this.match(vhdlParser.PACKAGE);
        }

        this.state = 1798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1797;
            this.identifier();
        }

        this.state = 1800;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_declarative_item;
    return this;
}

Package_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_declarative_itemContext.prototype.constructor = Package_declarative_itemContext;

Package_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Package_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Package_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Package_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Package_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Package_declarative_itemContext.prototype.signal_declaration = function() {
    return this.getTypedRuleContext(Signal_declarationContext,0);
};

Package_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Package_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Package_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Package_declarative_itemContext.prototype.component_declaration = function() {
    return this.getTypedRuleContext(Component_declarationContext,0);
};

Package_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Package_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Package_declarative_itemContext.prototype.disconnection_specification = function() {
    return this.getTypedRuleContext(Disconnection_specificationContext,0);
};

Package_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Package_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Package_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Package_declarative_itemContext.prototype.nature_declaration = function() {
    return this.getTypedRuleContext(Nature_declarationContext,0);
};

Package_declarative_itemContext.prototype.subnature_declaration = function() {
    return this.getTypedRuleContext(Subnature_declarationContext,0);
};

Package_declarative_itemContext.prototype.terminal_declaration = function() {
    return this.getTypedRuleContext(Terminal_declarationContext,0);
};

Package_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_declarative_item(this);
	}
};

Package_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_declarative_item(this);
	}
};




vhdlParser.Package_declarative_itemContext = Package_declarative_itemContext;

vhdlParser.prototype.package_declarative_item = function() {

    var localctx = new Package_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, vhdlParser.RULE_package_declarative_item);
    try {
        this.state = 1821;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1802;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1803;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1804;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1805;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1806;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1807;
            this.signal_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1808;
            this.variable_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1809;
            this.file_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1810;
            this.alias_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1811;
            this.component_declaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1812;
            this.attribute_declaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1813;
            this.attribute_specification();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1814;
            this.disconnection_specification();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1815;
            this.use_clause();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1816;
            this.group_template_declaration();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1817;
            this.group_declaration();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1818;
            this.nature_declaration();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1819;
            this.subnature_declaration();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1820;
            this.terminal_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Package_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_package_declarative_part;
    return this;
}

Package_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_declarative_partContext.prototype.constructor = Package_declarative_partContext;

Package_declarative_partContext.prototype.package_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Package_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Package_declarative_itemContext,i);
    }
};

Package_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPackage_declarative_part(this);
	}
};

Package_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPackage_declarative_part(this);
	}
};




vhdlParser.Package_declarative_partContext = Package_declarative_partContext;

vhdlParser.prototype.package_declarative_part = function() {

    var localctx = new Package_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, vhdlParser.RULE_package_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1826;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.COMPONENT) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.DISCONNECT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (vhdlParser.GROUP - 34)) | (1 << (vhdlParser.IMPURE - 34)) | (1 << (vhdlParser.NATURE - 34)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SIGNAL - 68)) | (1 << (vhdlParser.SUBNATURE - 68)) | (1 << (vhdlParser.SUBTYPE - 68)) | (1 << (vhdlParser.TERMINAL - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1823;
            this.package_declarative_item();
            this.state = 1828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_parameter_specification;
    return this;
}

Parameter_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_specificationContext.prototype.constructor = Parameter_specificationContext;

Parameter_specificationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Parameter_specificationContext.prototype.IN = function() {
    return this.getToken(vhdlParser.IN, 0);
};

Parameter_specificationContext.prototype.discrete_range = function() {
    return this.getTypedRuleContext(Discrete_rangeContext,0);
};

Parameter_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterParameter_specification(this);
	}
};

Parameter_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitParameter_specification(this);
	}
};




vhdlParser.Parameter_specificationContext = Parameter_specificationContext;

vhdlParser.prototype.parameter_specification = function() {

    var localctx = new Parameter_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, vhdlParser.RULE_parameter_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1829;
        this.identifier();
        this.state = 1830;
        this.match(vhdlParser.IN);
        this.state = 1831;
        this.discrete_range();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Physical_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_physical_literal;
    return this;
}

Physical_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Physical_literalContext.prototype.constructor = Physical_literalContext;

Physical_literalContext.prototype.abstract_literal = function() {
    return this.getTypedRuleContext(Abstract_literalContext,0);
};

Physical_literalContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Physical_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPhysical_literal(this);
	}
};

Physical_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPhysical_literal(this);
	}
};




vhdlParser.Physical_literalContext = Physical_literalContext;

vhdlParser.prototype.physical_literal = function() {

    var localctx = new Physical_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, vhdlParser.RULE_physical_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1833;
        this.abstract_literal();

        this.state = 1834;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Physical_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_physical_type_definition;
    return this;
}

Physical_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Physical_type_definitionContext.prototype.constructor = Physical_type_definitionContext;

Physical_type_definitionContext.prototype.range_constraint = function() {
    return this.getTypedRuleContext(Range_constraintContext,0);
};

Physical_type_definitionContext.prototype.UNITS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.UNITS);
    } else {
        return this.getToken(vhdlParser.UNITS, i);
    }
};


Physical_type_definitionContext.prototype.base_unit_declaration = function() {
    return this.getTypedRuleContext(Base_unit_declarationContext,0);
};

Physical_type_definitionContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Physical_type_definitionContext.prototype.secondary_unit_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Secondary_unit_declarationContext);
    } else {
        return this.getTypedRuleContext(Secondary_unit_declarationContext,i);
    }
};

Physical_type_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Physical_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPhysical_type_definition(this);
	}
};

Physical_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPhysical_type_definition(this);
	}
};




vhdlParser.Physical_type_definitionContext = Physical_type_definitionContext;

vhdlParser.prototype.physical_type_definition = function() {

    var localctx = new Physical_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, vhdlParser.RULE_physical_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1836;
        this.range_constraint();
        this.state = 1837;
        this.match(vhdlParser.UNITS);
        this.state = 1838;
        this.base_unit_declaration();
        this.state = 1842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1839;
            this.secondary_unit_declaration();
            this.state = 1844;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1845;
        this.match(vhdlParser.END);
        this.state = 1846;
        this.match(vhdlParser.UNITS);
        this.state = 1848;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1847;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_port_clause;
    return this;
}

Port_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_clauseContext.prototype.constructor = Port_clauseContext;

Port_clauseContext.prototype.PORT = function() {
    return this.getToken(vhdlParser.PORT, 0);
};

Port_clauseContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Port_clauseContext.prototype.port_list = function() {
    return this.getTypedRuleContext(Port_listContext,0);
};

Port_clauseContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Port_clauseContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Port_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPort_clause(this);
	}
};

Port_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPort_clause(this);
	}
};




vhdlParser.Port_clauseContext = Port_clauseContext;

vhdlParser.prototype.port_clause = function() {

    var localctx = new Port_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, vhdlParser.RULE_port_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1850;
        this.match(vhdlParser.PORT);
        this.state = 1851;
        this.match(vhdlParser.LPAREN);
        this.state = 1852;
        this.port_list();
        this.state = 1853;
        this.match(vhdlParser.RPAREN);
        this.state = 1854;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_port_list;
    return this;
}

Port_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_listContext.prototype.constructor = Port_listContext;

Port_listContext.prototype.interface_port_list = function() {
    return this.getTypedRuleContext(Interface_port_listContext,0);
};

Port_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPort_list(this);
	}
};

Port_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPort_list(this);
	}
};




vhdlParser.Port_listContext = Port_listContext;

vhdlParser.prototype.port_list = function() {

    var localctx = new Port_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, vhdlParser.RULE_port_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1856;
        this.interface_port_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Port_map_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_port_map_aspect;
    return this;
}

Port_map_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_map_aspectContext.prototype.constructor = Port_map_aspectContext;

Port_map_aspectContext.prototype.PORT = function() {
    return this.getToken(vhdlParser.PORT, 0);
};

Port_map_aspectContext.prototype.MAP = function() {
    return this.getToken(vhdlParser.MAP, 0);
};

Port_map_aspectContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Port_map_aspectContext.prototype.association_list = function() {
    return this.getTypedRuleContext(Association_listContext,0);
};

Port_map_aspectContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Port_map_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPort_map_aspect(this);
	}
};

Port_map_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPort_map_aspect(this);
	}
};




vhdlParser.Port_map_aspectContext = Port_map_aspectContext;

vhdlParser.prototype.port_map_aspect = function() {

    var localctx = new Port_map_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, vhdlParser.RULE_port_map_aspect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1858;
        this.match(vhdlParser.PORT);
        this.state = 1859;
        this.match(vhdlParser.MAP);
        this.state = 1860;
        this.match(vhdlParser.LPAREN);
        this.state = 1861;
        this.association_list();
        this.state = 1862;
        this.match(vhdlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.qualified_expression = function() {
    return this.getTypedRuleContext(Qualified_expressionContext,0);
};

PrimaryContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

PrimaryContext.prototype.allocator = function() {
    return this.getTypedRuleContext(AllocatorContext,0);
};

PrimaryContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

PrimaryContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPrimary(this);
	}
};




vhdlParser.PrimaryContext = PrimaryContext;

vhdlParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, vhdlParser.RULE_primary);
    try {
        this.state = 1873;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1864;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1865;
            this.qualified_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1866;
            this.match(vhdlParser.LPAREN);
            this.state = 1867;
            this.expression();
            this.state = 1868;
            this.match(vhdlParser.RPAREN);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1870;
            this.allocator();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1871;
            this.aggregate();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1872;
            this.name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Primary_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_primary_unit;
    return this;
}

Primary_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_unitContext.prototype.constructor = Primary_unitContext;

Primary_unitContext.prototype.entity_declaration = function() {
    return this.getTypedRuleContext(Entity_declarationContext,0);
};

Primary_unitContext.prototype.configuration_declaration = function() {
    return this.getTypedRuleContext(Configuration_declarationContext,0);
};

Primary_unitContext.prototype.package_declaration = function() {
    return this.getTypedRuleContext(Package_declarationContext,0);
};

Primary_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterPrimary_unit(this);
	}
};

Primary_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitPrimary_unit(this);
	}
};




vhdlParser.Primary_unitContext = Primary_unitContext;

vhdlParser.prototype.primary_unit = function() {

    var localctx = new Primary_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, vhdlParser.RULE_primary_unit);
    try {
        this.state = 1878;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ENTITY:
            this.enterOuterAlt(localctx, 1);
            this.state = 1875;
            this.entity_declaration();
            break;
        case vhdlParser.CONFIGURATION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1876;
            this.configuration_declaration();
            break;
        case vhdlParser.PACKAGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1877;
            this.package_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedural_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedural_declarative_item;
    return this;
}

Procedural_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_declarative_itemContext.prototype.constructor = Procedural_declarative_itemContext;

Procedural_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Procedural_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Procedural_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Procedural_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Procedural_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedural_declarative_item(this);
	}
};

Procedural_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedural_declarative_item(this);
	}
};




vhdlParser.Procedural_declarative_itemContext = Procedural_declarative_itemContext;

vhdlParser.prototype.procedural_declarative_item = function() {

    var localctx = new Procedural_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, vhdlParser.RULE_procedural_declarative_item);
    try {
        this.state = 1892;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1880;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1881;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1882;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1883;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1884;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1885;
            this.variable_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1886;
            this.alias_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1887;
            this.attribute_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1888;
            this.attribute_specification();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1889;
            this.use_clause();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1890;
            this.group_template_declaration();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1891;
            this.group_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedural_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedural_declarative_part;
    return this;
}

Procedural_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_declarative_partContext.prototype.constructor = Procedural_declarative_partContext;

Procedural_declarative_partContext.prototype.procedural_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Procedural_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Procedural_declarative_itemContext,i);
    }
};

Procedural_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedural_declarative_part(this);
	}
};

Procedural_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedural_declarative_part(this);
	}
};




vhdlParser.Procedural_declarative_partContext = Procedural_declarative_partContext;

vhdlParser.prototype.procedural_declarative_part = function() {

    var localctx = new Procedural_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, vhdlParser.RULE_procedural_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1897;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1894;
            this.procedural_declarative_item();
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedural_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedural_statement_part;
    return this;
}

Procedural_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedural_statement_partContext.prototype.constructor = Procedural_statement_partContext;

Procedural_statement_partContext.prototype.sequential_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequential_statementContext);
    } else {
        return this.getTypedRuleContext(Sequential_statementContext,i);
    }
};

Procedural_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedural_statement_part(this);
	}
};

Procedural_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedural_statement_part(this);
	}
};




vhdlParser.Procedural_statement_partContext = Procedural_statement_partContext;

vhdlParser.prototype.procedural_statement_part = function() {

    var localctx = new Procedural_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, vhdlParser.RULE_procedural_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
            this.state = 1900;
            this.sequential_statement();
            this.state = 1905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedure_call;
    return this;
}

Procedure_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_callContext.prototype.constructor = Procedure_callContext;

Procedure_callContext.prototype.selected_name = function() {
    return this.getTypedRuleContext(Selected_nameContext,0);
};

Procedure_callContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Procedure_callContext.prototype.actual_parameter_part = function() {
    return this.getTypedRuleContext(Actual_parameter_partContext,0);
};

Procedure_callContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Procedure_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedure_call(this);
	}
};

Procedure_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedure_call(this);
	}
};




vhdlParser.Procedure_callContext = Procedure_callContext;

vhdlParser.prototype.procedure_call = function() {

    var localctx = new Procedure_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, vhdlParser.RULE_procedure_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1906;
        this.selected_name();
        this.state = 1911;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 1907;
            this.match(vhdlParser.LPAREN);
            this.state = 1908;
            this.actual_parameter_part();
            this.state = 1909;
            this.match(vhdlParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_call_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedure_call_statement;
    return this;
}

Procedure_call_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_call_statementContext.prototype.constructor = Procedure_call_statementContext;

Procedure_call_statementContext.prototype.procedure_call = function() {
    return this.getTypedRuleContext(Procedure_callContext,0);
};

Procedure_call_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Procedure_call_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Procedure_call_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedure_call_statement(this);
	}
};

Procedure_call_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedure_call_statement(this);
	}
};




vhdlParser.Procedure_call_statementContext = Procedure_call_statementContext;

vhdlParser.prototype.procedure_call_statement = function() {

    var localctx = new Procedure_call_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, vhdlParser.RULE_procedure_call_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1914;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        if(la_===1) {
            this.state = 1913;
            this.label_colon();

        }
        this.state = 1916;
        this.procedure_call();
        this.state = 1917;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Process_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_process_declarative_item;
    return this;
}

Process_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Process_declarative_itemContext.prototype.constructor = Process_declarative_itemContext;

Process_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Process_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Process_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Process_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Process_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Process_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Process_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Process_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Process_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Process_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Process_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Process_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Process_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Process_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcess_declarative_item(this);
	}
};

Process_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcess_declarative_item(this);
	}
};




vhdlParser.Process_declarative_itemContext = Process_declarative_itemContext;

vhdlParser.prototype.process_declarative_item = function() {

    var localctx = new Process_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, vhdlParser.RULE_process_declarative_item);
    try {
        this.state = 1932;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1919;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1920;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1921;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1922;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1923;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1924;
            this.variable_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1925;
            this.file_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1926;
            this.alias_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1927;
            this.attribute_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1928;
            this.attribute_specification();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1929;
            this.use_clause();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1930;
            this.group_template_declaration();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1931;
            this.group_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Process_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_process_declarative_part;
    return this;
}

Process_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Process_declarative_partContext.prototype.constructor = Process_declarative_partContext;

Process_declarative_partContext.prototype.process_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Process_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Process_declarative_itemContext,i);
    }
};

Process_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcess_declarative_part(this);
	}
};

Process_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcess_declarative_part(this);
	}
};




vhdlParser.Process_declarative_partContext = Process_declarative_partContext;

vhdlParser.prototype.process_declarative_part = function() {

    var localctx = new Process_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, vhdlParser.RULE_process_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 1934;
            this.process_declarative_item();
            this.state = 1939;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Process_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_process_statement;
    return this;
}

Process_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Process_statementContext.prototype.constructor = Process_statementContext;

Process_statementContext.prototype.PROCESS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.PROCESS);
    } else {
        return this.getToken(vhdlParser.PROCESS, i);
    }
};


Process_statementContext.prototype.process_declarative_part = function() {
    return this.getTypedRuleContext(Process_declarative_partContext,0);
};

Process_statementContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Process_statementContext.prototype.process_statement_part = function() {
    return this.getTypedRuleContext(Process_statement_partContext,0);
};

Process_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Process_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Process_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Process_statementContext.prototype.POSTPONED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.POSTPONED);
    } else {
        return this.getToken(vhdlParser.POSTPONED, i);
    }
};


Process_statementContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Process_statementContext.prototype.sensitivity_list = function() {
    return this.getTypedRuleContext(Sensitivity_listContext,0);
};

Process_statementContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Process_statementContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Process_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Process_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcess_statement(this);
	}
};

Process_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcess_statement(this);
	}
};




vhdlParser.Process_statementContext = Process_statementContext;

vhdlParser.prototype.process_statement = function() {

    var localctx = new Process_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, vhdlParser.RULE_process_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1940;
            this.label_colon();
        }

        this.state = 1944;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.POSTPONED) {
            this.state = 1943;
            this.match(vhdlParser.POSTPONED);
        }

        this.state = 1946;
        this.match(vhdlParser.PROCESS);
        this.state = 1951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 1947;
            this.match(vhdlParser.LPAREN);
            this.state = 1948;
            this.sensitivity_list();
            this.state = 1949;
            this.match(vhdlParser.RPAREN);
        }

        this.state = 1954;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS) {
            this.state = 1953;
            this.match(vhdlParser.IS);
        }

        this.state = 1956;
        this.process_declarative_part();
        this.state = 1957;
        this.match(vhdlParser.BEGIN);
        this.state = 1958;
        this.process_statement_part();
        this.state = 1959;
        this.match(vhdlParser.END);
        this.state = 1961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.POSTPONED) {
            this.state = 1960;
            this.match(vhdlParser.POSTPONED);
        }

        this.state = 1963;
        this.match(vhdlParser.PROCESS);
        this.state = 1965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 1964;
            this.identifier();
        }

        this.state = 1967;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Process_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_process_statement_part;
    return this;
}

Process_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Process_statement_partContext.prototype.constructor = Process_statement_partContext;

Process_statement_partContext.prototype.sequential_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequential_statementContext);
    } else {
        return this.getTypedRuleContext(Sequential_statementContext,i);
    }
};

Process_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcess_statement_part(this);
	}
};

Process_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcess_statement_part(this);
	}
};




vhdlParser.Process_statement_partContext = Process_statement_partContext;

vhdlParser.prototype.process_statement_part = function() {

    var localctx = new Process_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, vhdlParser.RULE_process_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1972;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
            this.state = 1969;
            this.sequential_statement();
            this.state = 1974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Qualified_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_qualified_expression;
    return this;
}

Qualified_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_expressionContext.prototype.constructor = Qualified_expressionContext;

Qualified_expressionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Qualified_expressionContext.prototype.APOSTROPHE = function() {
    return this.getToken(vhdlParser.APOSTROPHE, 0);
};

Qualified_expressionContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

Qualified_expressionContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Qualified_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Qualified_expressionContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Qualified_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterQualified_expression(this);
	}
};

Qualified_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitQualified_expression(this);
	}
};




vhdlParser.Qualified_expressionContext = Qualified_expressionContext;

vhdlParser.prototype.qualified_expression = function() {

    var localctx = new Qualified_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, vhdlParser.RULE_qualified_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1975;
        this.subtype_indication();
        this.state = 1976;
        this.match(vhdlParser.APOSTROPHE);
        this.state = 1982;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1977;
            this.aggregate();
            break;

        case 2:
            this.state = 1978;
            this.match(vhdlParser.LPAREN);
            this.state = 1979;
            this.expression();
            this.state = 1980;
            this.match(vhdlParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Quantity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_quantity_declaration;
    return this;
}

Quantity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantity_declarationContext.prototype.constructor = Quantity_declarationContext;

Quantity_declarationContext.prototype.free_quantity_declaration = function() {
    return this.getTypedRuleContext(Free_quantity_declarationContext,0);
};

Quantity_declarationContext.prototype.branch_quantity_declaration = function() {
    return this.getTypedRuleContext(Branch_quantity_declarationContext,0);
};

Quantity_declarationContext.prototype.source_quantity_declaration = function() {
    return this.getTypedRuleContext(Source_quantity_declarationContext,0);
};

Quantity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterQuantity_declaration(this);
	}
};

Quantity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitQuantity_declaration(this);
	}
};




vhdlParser.Quantity_declarationContext = Quantity_declarationContext;

vhdlParser.prototype.quantity_declaration = function() {

    var localctx = new Quantity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, vhdlParser.RULE_quantity_declaration);
    try {
        this.state = 1987;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1984;
            this.free_quantity_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1985;
            this.branch_quantity_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1986;
            this.source_quantity_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Quantity_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_quantity_list;
    return this;
}

Quantity_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantity_listContext.prototype.constructor = Quantity_listContext;

Quantity_listContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Quantity_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Quantity_listContext.prototype.OTHERS = function() {
    return this.getToken(vhdlParser.OTHERS, 0);
};

Quantity_listContext.prototype.ALL = function() {
    return this.getToken(vhdlParser.ALL, 0);
};

Quantity_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterQuantity_list(this);
	}
};

Quantity_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitQuantity_list(this);
	}
};




vhdlParser.Quantity_listContext = Quantity_listContext;

vhdlParser.prototype.quantity_list = function() {

    var localctx = new Quantity_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, vhdlParser.RULE_quantity_list);
    var _la = 0; // Token type
    try {
        this.state = 1999;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1989;
            this.name();
            this.state = 1994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 1990;
                this.match(vhdlParser.COMMA);
                this.state = 1991;
                this.name();
                this.state = 1996;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vhdlParser.OTHERS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1997;
            this.match(vhdlParser.OTHERS);
            break;
        case vhdlParser.ALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1998;
            this.match(vhdlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Quantity_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_quantity_specification;
    return this;
}

Quantity_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantity_specificationContext.prototype.constructor = Quantity_specificationContext;

Quantity_specificationContext.prototype.quantity_list = function() {
    return this.getTypedRuleContext(Quantity_listContext,0);
};

Quantity_specificationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Quantity_specificationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Quantity_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterQuantity_specification(this);
	}
};

Quantity_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitQuantity_specification(this);
	}
};




vhdlParser.Quantity_specificationContext = Quantity_specificationContext;

vhdlParser.prototype.quantity_specification = function() {

    var localctx = new Quantity_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, vhdlParser.RULE_quantity_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2001;
        this.quantity_list();
        this.state = 2002;
        this.match(vhdlParser.COLON);
        this.state = 2003;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_range_decl;
    return this;
}

Range_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_declContext.prototype.constructor = Range_declContext;

Range_declContext.prototype.explicit_range = function() {
    return this.getTypedRuleContext(Explicit_rangeContext,0);
};

Range_declContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Range_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRange_decl(this);
	}
};

Range_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRange_decl(this);
	}
};




vhdlParser.Range_declContext = Range_declContext;

vhdlParser.prototype.range_decl = function() {

    var localctx = new Range_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, vhdlParser.RULE_range_decl);
    try {
        this.state = 2007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2005;
            this.explicit_range();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2006;
            this.name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Explicit_rangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_explicit_range;
    return this;
}

Explicit_rangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_rangeContext.prototype.constructor = Explicit_rangeContext;

Explicit_rangeContext.prototype.simple_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_expressionContext);
    } else {
        return this.getTypedRuleContext(Simple_expressionContext,i);
    }
};

Explicit_rangeContext.prototype.direction = function() {
    return this.getTypedRuleContext(DirectionContext,0);
};

Explicit_rangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterExplicit_range(this);
	}
};

Explicit_rangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitExplicit_range(this);
	}
};




vhdlParser.Explicit_rangeContext = Explicit_rangeContext;

vhdlParser.prototype.explicit_range = function() {

    var localctx = new Explicit_rangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, vhdlParser.RULE_explicit_range);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2009;
        this.simple_expression();
        this.state = 2013;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
        if(la_===1) {
            this.state = 2010;
            this.direction();
            this.state = 2011;
            this.simple_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_range_constraint;
    return this;
}

Range_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_constraintContext.prototype.constructor = Range_constraintContext;

Range_constraintContext.prototype.RANGE = function() {
    return this.getToken(vhdlParser.RANGE, 0);
};

Range_constraintContext.prototype.range_decl = function() {
    return this.getTypedRuleContext(Range_declContext,0);
};

Range_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRange_constraint(this);
	}
};

Range_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRange_constraint(this);
	}
};




vhdlParser.Range_constraintContext = Range_constraintContext;

vhdlParser.prototype.range_constraint = function() {

    var localctx = new Range_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, vhdlParser.RULE_range_constraint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2015;
        this.match(vhdlParser.RANGE);
        this.state = 2016;
        this.range_decl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Record_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_record_nature_definition;
    return this;
}

Record_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_nature_definitionContext.prototype.constructor = Record_nature_definitionContext;

Record_nature_definitionContext.prototype.RECORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.RECORD);
    } else {
        return this.getToken(vhdlParser.RECORD, i);
    }
};


Record_nature_definitionContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Record_nature_definitionContext.prototype.nature_element_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Nature_element_declarationContext);
    } else {
        return this.getTypedRuleContext(Nature_element_declarationContext,i);
    }
};

Record_nature_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Record_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRecord_nature_definition(this);
	}
};

Record_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRecord_nature_definition(this);
	}
};




vhdlParser.Record_nature_definitionContext = Record_nature_definitionContext;

vhdlParser.prototype.record_nature_definition = function() {

    var localctx = new Record_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, vhdlParser.RULE_record_nature_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2018;
        this.match(vhdlParser.RECORD);
        this.state = 2020; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2019;
            this.nature_element_declaration();
            this.state = 2022; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER);
        this.state = 2024;
        this.match(vhdlParser.END);
        this.state = 2025;
        this.match(vhdlParser.RECORD);
        this.state = 2027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2026;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Record_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_record_type_definition;
    return this;
}

Record_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_type_definitionContext.prototype.constructor = Record_type_definitionContext;

Record_type_definitionContext.prototype.RECORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.RECORD);
    } else {
        return this.getToken(vhdlParser.RECORD, i);
    }
};


Record_type_definitionContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Record_type_definitionContext.prototype.element_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Element_declarationContext);
    } else {
        return this.getTypedRuleContext(Element_declarationContext,i);
    }
};

Record_type_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Record_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRecord_type_definition(this);
	}
};

Record_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRecord_type_definition(this);
	}
};




vhdlParser.Record_type_definitionContext = Record_type_definitionContext;

vhdlParser.prototype.record_type_definition = function() {

    var localctx = new Record_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, vhdlParser.RULE_record_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2029;
        this.match(vhdlParser.RECORD);
        this.state = 2031; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2030;
            this.element_declaration();
            this.state = 2033; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER);
        this.state = 2035;
        this.match(vhdlParser.END);
        this.state = 2036;
        this.match(vhdlParser.RECORD);
        this.state = 2038;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2037;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RelationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_relation;
    return this;
}

RelationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationContext.prototype.constructor = RelationContext;

RelationContext.prototype.shift_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_expressionContext);
    } else {
        return this.getTypedRuleContext(Shift_expressionContext,i);
    }
};

RelationContext.prototype.relational_operator = function() {
    return this.getTypedRuleContext(Relational_operatorContext,0);
};

RelationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRelation(this);
	}
};

RelationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRelation(this);
	}
};




vhdlParser.RelationContext = RelationContext;

vhdlParser.prototype.relation = function() {

    var localctx = new RelationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, vhdlParser.RULE_relation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2040;
        this.shift_expression();
        this.state = 2044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        if(la_===1) {
            this.state = 2041;
            this.relational_operator();
            this.state = 2042;
            this.shift_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Relational_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_relational_operator;
    return this;
}

Relational_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relational_operatorContext.prototype.constructor = Relational_operatorContext;

Relational_operatorContext.prototype.EQ = function() {
    return this.getToken(vhdlParser.EQ, 0);
};

Relational_operatorContext.prototype.NEQ = function() {
    return this.getToken(vhdlParser.NEQ, 0);
};

Relational_operatorContext.prototype.LOWERTHAN = function() {
    return this.getToken(vhdlParser.LOWERTHAN, 0);
};

Relational_operatorContext.prototype.LE = function() {
    return this.getToken(vhdlParser.LE, 0);
};

Relational_operatorContext.prototype.GREATERTHAN = function() {
    return this.getToken(vhdlParser.GREATERTHAN, 0);
};

Relational_operatorContext.prototype.GE = function() {
    return this.getToken(vhdlParser.GE, 0);
};

Relational_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterRelational_operator(this);
	}
};

Relational_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitRelational_operator(this);
	}
};




vhdlParser.Relational_operatorContext = Relational_operatorContext;

vhdlParser.prototype.relational_operator = function() {

    var localctx = new Relational_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, vhdlParser.RULE_relational_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2046;
        _la = this._input.LA(1);
        if(!(((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (vhdlParser.LE - 131)) | (1 << (vhdlParser.GE - 131)) | (1 << (vhdlParser.NEQ - 131)) | (1 << (vhdlParser.LOWERTHAN - 131)) | (1 << (vhdlParser.GREATERTHAN - 131)) | (1 << (vhdlParser.EQ - 131)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Report_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_report_statement;
    return this;
}

Report_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Report_statementContext.prototype.constructor = Report_statementContext;

Report_statementContext.prototype.REPORT = function() {
    return this.getToken(vhdlParser.REPORT, 0);
};

Report_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Report_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Report_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Report_statementContext.prototype.SEVERITY = function() {
    return this.getToken(vhdlParser.SEVERITY, 0);
};

Report_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterReport_statement(this);
	}
};

Report_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitReport_statement(this);
	}
};




vhdlParser.Report_statementContext = Report_statementContext;

vhdlParser.prototype.report_statement = function() {

    var localctx = new Report_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, vhdlParser.RULE_report_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2048;
            this.label_colon();
        }

        this.state = 2051;
        this.match(vhdlParser.REPORT);
        this.state = 2052;
        this.expression();
        this.state = 2055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.SEVERITY) {
            this.state = 2053;
            this.match(vhdlParser.SEVERITY);
            this.state = 2054;
            this.expression();
        }

        this.state = 2057;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(vhdlParser.RETURN, 0);
};

Return_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Return_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitReturn_statement(this);
	}
};




vhdlParser.Return_statementContext = Return_statementContext;

vhdlParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, vhdlParser.RULE_return_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2060;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2059;
            this.label_colon();
        }

        this.state = 2062;
        this.match(vhdlParser.RETURN);
        this.state = 2064;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ABS || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (vhdlParser.NEW - 52)) | (1 << (vhdlParser.NOT - 52)) | (1 << (vhdlParser.NULL_ - 52)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (vhdlParser.BASE_LITERAL - 112)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 112)) | (1 << (vhdlParser.REAL_LITERAL - 112)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 112)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 112)) | (1 << (vhdlParser.CHARACTER_LITERAL - 112)) | (1 << (vhdlParser.STRING_LITERAL - 112)) | (1 << (vhdlParser.LPAREN - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vhdlParser.PLUS - 148)) | (1 << (vhdlParser.MINUS - 148)) | (1 << (vhdlParser.INTEGER - 148)))) !== 0)) {
            this.state = 2063;
            this.expression();
        }

        this.state = 2066;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scalar_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_scalar_nature_definition;
    return this;
}

Scalar_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_nature_definitionContext.prototype.constructor = Scalar_nature_definitionContext;

Scalar_nature_definitionContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Scalar_nature_definitionContext.prototype.ACROSS = function() {
    return this.getToken(vhdlParser.ACROSS, 0);
};

Scalar_nature_definitionContext.prototype.THROUGH = function() {
    return this.getToken(vhdlParser.THROUGH, 0);
};

Scalar_nature_definitionContext.prototype.REFERENCE = function() {
    return this.getToken(vhdlParser.REFERENCE, 0);
};

Scalar_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterScalar_nature_definition(this);
	}
};

Scalar_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitScalar_nature_definition(this);
	}
};




vhdlParser.Scalar_nature_definitionContext = Scalar_nature_definitionContext;

vhdlParser.prototype.scalar_nature_definition = function() {

    var localctx = new Scalar_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, vhdlParser.RULE_scalar_nature_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2068;
        this.name();
        this.state = 2069;
        this.match(vhdlParser.ACROSS);
        this.state = 2070;
        this.name();
        this.state = 2071;
        this.match(vhdlParser.THROUGH);
        this.state = 2072;
        this.name();
        this.state = 2073;
        this.match(vhdlParser.REFERENCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Scalar_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_scalar_type_definition;
    return this;
}

Scalar_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_type_definitionContext.prototype.constructor = Scalar_type_definitionContext;

Scalar_type_definitionContext.prototype.physical_type_definition = function() {
    return this.getTypedRuleContext(Physical_type_definitionContext,0);
};

Scalar_type_definitionContext.prototype.enumeration_type_definition = function() {
    return this.getTypedRuleContext(Enumeration_type_definitionContext,0);
};

Scalar_type_definitionContext.prototype.range_constraint = function() {
    return this.getTypedRuleContext(Range_constraintContext,0);
};

Scalar_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterScalar_type_definition(this);
	}
};

Scalar_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitScalar_type_definition(this);
	}
};




vhdlParser.Scalar_type_definitionContext = Scalar_type_definitionContext;

vhdlParser.prototype.scalar_type_definition = function() {

    var localctx = new Scalar_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, vhdlParser.RULE_scalar_type_definition);
    try {
        this.state = 2078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2075;
            this.physical_type_definition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2076;
            this.enumeration_type_definition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2077;
            this.range_constraint();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Secondary_unitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_secondary_unit;
    return this;
}

Secondary_unitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Secondary_unitContext.prototype.constructor = Secondary_unitContext;

Secondary_unitContext.prototype.architecture_body = function() {
    return this.getTypedRuleContext(Architecture_bodyContext,0);
};

Secondary_unitContext.prototype.package_body = function() {
    return this.getTypedRuleContext(Package_bodyContext,0);
};

Secondary_unitContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSecondary_unit(this);
	}
};

Secondary_unitContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSecondary_unit(this);
	}
};




vhdlParser.Secondary_unitContext = Secondary_unitContext;

vhdlParser.prototype.secondary_unit = function() {

    var localctx = new Secondary_unitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, vhdlParser.RULE_secondary_unit);
    try {
        this.state = 2082;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ARCHITECTURE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2080;
            this.architecture_body();
            break;
        case vhdlParser.PACKAGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2081;
            this.package_body();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Secondary_unit_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_secondary_unit_declaration;
    return this;
}

Secondary_unit_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Secondary_unit_declarationContext.prototype.constructor = Secondary_unit_declarationContext;

Secondary_unit_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Secondary_unit_declarationContext.prototype.EQ = function() {
    return this.getToken(vhdlParser.EQ, 0);
};

Secondary_unit_declarationContext.prototype.physical_literal = function() {
    return this.getTypedRuleContext(Physical_literalContext,0);
};

Secondary_unit_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Secondary_unit_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSecondary_unit_declaration(this);
	}
};

Secondary_unit_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSecondary_unit_declaration(this);
	}
};




vhdlParser.Secondary_unit_declarationContext = Secondary_unit_declarationContext;

vhdlParser.prototype.secondary_unit_declaration = function() {

    var localctx = new Secondary_unit_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, vhdlParser.RULE_secondary_unit_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2084;
        this.identifier();
        this.state = 2085;
        this.match(vhdlParser.EQ);
        this.state = 2086;
        this.physical_literal();
        this.state = 2087;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Selected_signal_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_selected_signal_assignment;
    return this;
}

Selected_signal_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_signal_assignmentContext.prototype.constructor = Selected_signal_assignmentContext;

Selected_signal_assignmentContext.prototype.WITH = function() {
    return this.getToken(vhdlParser.WITH, 0);
};

Selected_signal_assignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Selected_signal_assignmentContext.prototype.SELECT = function() {
    return this.getToken(vhdlParser.SELECT, 0);
};

Selected_signal_assignmentContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Selected_signal_assignmentContext.prototype.LE = function() {
    return this.getToken(vhdlParser.LE, 0);
};

Selected_signal_assignmentContext.prototype.opts = function() {
    return this.getTypedRuleContext(OptsContext,0);
};

Selected_signal_assignmentContext.prototype.selected_waveforms = function() {
    return this.getTypedRuleContext(Selected_waveformsContext,0);
};

Selected_signal_assignmentContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Selected_signal_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSelected_signal_assignment(this);
	}
};

Selected_signal_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSelected_signal_assignment(this);
	}
};




vhdlParser.Selected_signal_assignmentContext = Selected_signal_assignmentContext;

vhdlParser.prototype.selected_signal_assignment = function() {

    var localctx = new Selected_signal_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, vhdlParser.RULE_selected_signal_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2089;
        this.match(vhdlParser.WITH);
        this.state = 2090;
        this.expression();
        this.state = 2091;
        this.match(vhdlParser.SELECT);
        this.state = 2092;
        this.target();
        this.state = 2093;
        this.match(vhdlParser.LE);
        this.state = 2094;
        this.opts();
        this.state = 2095;
        this.selected_waveforms();
        this.state = 2096;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Selected_waveformsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_selected_waveforms;
    return this;
}

Selected_waveformsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selected_waveformsContext.prototype.constructor = Selected_waveformsContext;

Selected_waveformsContext.prototype.waveform = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WaveformContext);
    } else {
        return this.getTypedRuleContext(WaveformContext,i);
    }
};

Selected_waveformsContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.WHEN);
    } else {
        return this.getToken(vhdlParser.WHEN, i);
    }
};


Selected_waveformsContext.prototype.choices = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ChoicesContext);
    } else {
        return this.getTypedRuleContext(ChoicesContext,i);
    }
};

Selected_waveformsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Selected_waveformsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSelected_waveforms(this);
	}
};

Selected_waveformsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSelected_waveforms(this);
	}
};




vhdlParser.Selected_waveformsContext = Selected_waveformsContext;

vhdlParser.prototype.selected_waveforms = function() {

    var localctx = new Selected_waveformsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, vhdlParser.RULE_selected_waveforms);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2098;
        this.waveform();
        this.state = 2099;
        this.match(vhdlParser.WHEN);
        this.state = 2100;
        this.choices();
        this.state = 2108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 2101;
            this.match(vhdlParser.COMMA);
            this.state = 2102;
            this.waveform();
            this.state = 2103;
            this.match(vhdlParser.WHEN);
            this.state = 2104;
            this.choices();
            this.state = 2110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sensitivity_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_sensitivity_clause;
    return this;
}

Sensitivity_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sensitivity_clauseContext.prototype.constructor = Sensitivity_clauseContext;

Sensitivity_clauseContext.prototype.ON = function() {
    return this.getToken(vhdlParser.ON, 0);
};

Sensitivity_clauseContext.prototype.sensitivity_list = function() {
    return this.getTypedRuleContext(Sensitivity_listContext,0);
};

Sensitivity_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSensitivity_clause(this);
	}
};

Sensitivity_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSensitivity_clause(this);
	}
};




vhdlParser.Sensitivity_clauseContext = Sensitivity_clauseContext;

vhdlParser.prototype.sensitivity_clause = function() {

    var localctx = new Sensitivity_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, vhdlParser.RULE_sensitivity_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2111;
        this.match(vhdlParser.ON);
        this.state = 2112;
        this.sensitivity_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sensitivity_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_sensitivity_list;
    return this;
}

Sensitivity_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sensitivity_listContext.prototype.constructor = Sensitivity_listContext;

Sensitivity_listContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Sensitivity_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Sensitivity_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSensitivity_list(this);
	}
};

Sensitivity_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSensitivity_list(this);
	}
};




vhdlParser.Sensitivity_listContext = Sensitivity_listContext;

vhdlParser.prototype.sensitivity_list = function() {

    var localctx = new Sensitivity_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, vhdlParser.RULE_sensitivity_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2114;
        this.name();
        this.state = 2119;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 2115;
            this.match(vhdlParser.COMMA);
            this.state = 2116;
            this.name();
            this.state = 2121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sequence_of_statementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_sequence_of_statements;
    return this;
}

Sequence_of_statementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequence_of_statementsContext.prototype.constructor = Sequence_of_statementsContext;

Sequence_of_statementsContext.prototype.sequential_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequential_statementContext);
    } else {
        return this.getTypedRuleContext(Sequential_statementContext,i);
    }
};

Sequence_of_statementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSequence_of_statements(this);
	}
};

Sequence_of_statementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSequence_of_statements(this);
	}
};




vhdlParser.Sequence_of_statementsContext = Sequence_of_statementsContext;

vhdlParser.prototype.sequence_of_statements = function() {

    var localctx = new Sequence_of_statementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, vhdlParser.RULE_sequence_of_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
            this.state = 2122;
            this.sequential_statement();
            this.state = 2127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sequential_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_sequential_statement;
    return this;
}

Sequential_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sequential_statementContext.prototype.constructor = Sequential_statementContext;

Sequential_statementContext.prototype.wait_statement = function() {
    return this.getTypedRuleContext(Wait_statementContext,0);
};

Sequential_statementContext.prototype.assertion_statement = function() {
    return this.getTypedRuleContext(Assertion_statementContext,0);
};

Sequential_statementContext.prototype.report_statement = function() {
    return this.getTypedRuleContext(Report_statementContext,0);
};

Sequential_statementContext.prototype.signal_assignment_statement = function() {
    return this.getTypedRuleContext(Signal_assignment_statementContext,0);
};

Sequential_statementContext.prototype.variable_assignment_statement = function() {
    return this.getTypedRuleContext(Variable_assignment_statementContext,0);
};

Sequential_statementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

Sequential_statementContext.prototype.case_statement = function() {
    return this.getTypedRuleContext(Case_statementContext,0);
};

Sequential_statementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

Sequential_statementContext.prototype.next_statement = function() {
    return this.getTypedRuleContext(Next_statementContext,0);
};

Sequential_statementContext.prototype.exit_statement = function() {
    return this.getTypedRuleContext(Exit_statementContext,0);
};

Sequential_statementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

Sequential_statementContext.prototype.NULL_ = function() {
    return this.getToken(vhdlParser.NULL_, 0);
};

Sequential_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Sequential_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Sequential_statementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};

Sequential_statementContext.prototype.procedure_call_statement = function() {
    return this.getTypedRuleContext(Procedure_call_statementContext,0);
};

Sequential_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSequential_statement(this);
	}
};

Sequential_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSequential_statement(this);
	}
};




vhdlParser.Sequential_statementContext = Sequential_statementContext;

vhdlParser.prototype.sequential_statement = function() {

    var localctx = new Sequential_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, vhdlParser.RULE_sequential_statement);
    var _la = 0; // Token type
    try {
        this.state = 2146;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2128;
            this.wait_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2129;
            this.assertion_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2130;
            this.report_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2131;
            this.signal_assignment_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2132;
            this.variable_assignment_statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2133;
            this.if_statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2134;
            this.case_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2135;
            this.loop_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2136;
            this.next_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2137;
            this.exit_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2138;
            this.return_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
                this.state = 2139;
                this.label_colon();
            }

            this.state = 2142;
            this.match(vhdlParser.NULL_);
            this.state = 2143;
            this.match(vhdlParser.SEMI);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2144;
            this.break_statement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2145;
            this.procedure_call_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Shift_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_shift_expression;
    return this;
}

Shift_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_expressionContext.prototype.constructor = Shift_expressionContext;

Shift_expressionContext.prototype.simple_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_expressionContext);
    } else {
        return this.getTypedRuleContext(Simple_expressionContext,i);
    }
};

Shift_expressionContext.prototype.shift_operator = function() {
    return this.getTypedRuleContext(Shift_operatorContext,0);
};

Shift_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterShift_expression(this);
	}
};

Shift_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitShift_expression(this);
	}
};




vhdlParser.Shift_expressionContext = Shift_expressionContext;

vhdlParser.prototype.shift_expression = function() {

    var localctx = new Shift_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, vhdlParser.RULE_shift_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2148;
        this.simple_expression();
        this.state = 2152;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
        if(la_===1) {
            this.state = 2149;
            this.shift_operator();
            this.state = 2150;
            this.simple_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Shift_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_shift_operator;
    return this;
}

Shift_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_operatorContext.prototype.constructor = Shift_operatorContext;

Shift_operatorContext.prototype.SLL = function() {
    return this.getToken(vhdlParser.SLL, 0);
};

Shift_operatorContext.prototype.SRL = function() {
    return this.getToken(vhdlParser.SRL, 0);
};

Shift_operatorContext.prototype.SLA = function() {
    return this.getToken(vhdlParser.SLA, 0);
};

Shift_operatorContext.prototype.SRA = function() {
    return this.getToken(vhdlParser.SRA, 0);
};

Shift_operatorContext.prototype.ROL = function() {
    return this.getToken(vhdlParser.ROL, 0);
};

Shift_operatorContext.prototype.ROR = function() {
    return this.getToken(vhdlParser.ROR, 0);
};

Shift_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterShift_operator(this);
	}
};

Shift_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitShift_operator(this);
	}
};




vhdlParser.Shift_operatorContext = Shift_operatorContext;

vhdlParser.prototype.shift_operator = function() {

    var localctx = new Shift_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, vhdlParser.RULE_shift_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2154;
        _la = this._input.LA(1);
        if(!(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (vhdlParser.ROL - 81)) | (1 << (vhdlParser.ROR - 81)) | (1 << (vhdlParser.SLA - 81)) | (1 << (vhdlParser.SLL - 81)) | (1 << (vhdlParser.SRA - 81)) | (1 << (vhdlParser.SRL - 81)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signal_assignment_statement;
    return this;
}

Signal_assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_assignment_statementContext.prototype.constructor = Signal_assignment_statementContext;

Signal_assignment_statementContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Signal_assignment_statementContext.prototype.LE = function() {
    return this.getToken(vhdlParser.LE, 0);
};

Signal_assignment_statementContext.prototype.waveform = function() {
    return this.getTypedRuleContext(WaveformContext,0);
};

Signal_assignment_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Signal_assignment_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Signal_assignment_statementContext.prototype.delay_mechanism = function() {
    return this.getTypedRuleContext(Delay_mechanismContext,0);
};

Signal_assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignal_assignment_statement(this);
	}
};

Signal_assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignal_assignment_statement(this);
	}
};




vhdlParser.Signal_assignment_statementContext = Signal_assignment_statementContext;

vhdlParser.prototype.signal_assignment_statement = function() {

    var localctx = new Signal_assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, vhdlParser.RULE_signal_assignment_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2157;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
        if(la_===1) {
            this.state = 2156;
            this.label_colon();

        }
        this.state = 2159;
        this.target();
        this.state = 2160;
        this.match(vhdlParser.LE);
        this.state = 2162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.INERTIAL || _la===vhdlParser.REJECT || _la===vhdlParser.TRANSPORT) {
            this.state = 2161;
            this.delay_mechanism();
        }

        this.state = 2164;
        this.waveform();
        this.state = 2165;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signal_declaration;
    return this;
}

Signal_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_declarationContext.prototype.constructor = Signal_declarationContext;

Signal_declarationContext.prototype.SIGNAL = function() {
    return this.getToken(vhdlParser.SIGNAL, 0);
};

Signal_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Signal_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Signal_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Signal_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Signal_declarationContext.prototype.signal_kind = function() {
    return this.getTypedRuleContext(Signal_kindContext,0);
};

Signal_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Signal_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Signal_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignal_declaration(this);
	}
};

Signal_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignal_declaration(this);
	}
};




vhdlParser.Signal_declarationContext = Signal_declarationContext;

vhdlParser.prototype.signal_declaration = function() {

    var localctx = new Signal_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, vhdlParser.RULE_signal_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2167;
        this.match(vhdlParser.SIGNAL);
        this.state = 2168;
        this.identifier_list();
        this.state = 2169;
        this.match(vhdlParser.COLON);
        this.state = 2170;
        this.subtype_indication();
        this.state = 2172;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BUS || _la===vhdlParser.REGISTER) {
            this.state = 2171;
            this.signal_kind();
        }

        this.state = 2176;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 2174;
            this.match(vhdlParser.VARASGN);
            this.state = 2175;
            this.expression();
        }

        this.state = 2178;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_kindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signal_kind;
    return this;
}

Signal_kindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_kindContext.prototype.constructor = Signal_kindContext;

Signal_kindContext.prototype.REGISTER = function() {
    return this.getToken(vhdlParser.REGISTER, 0);
};

Signal_kindContext.prototype.BUS = function() {
    return this.getToken(vhdlParser.BUS, 0);
};

Signal_kindContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignal_kind(this);
	}
};

Signal_kindContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignal_kind(this);
	}
};




vhdlParser.Signal_kindContext = Signal_kindContext;

vhdlParser.prototype.signal_kind = function() {

    var localctx = new Signal_kindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, vhdlParser.RULE_signal_kind);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2180;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.BUS || _la===vhdlParser.REGISTER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signal_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signal_list;
    return this;
}

Signal_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signal_listContext.prototype.constructor = Signal_listContext;

Signal_listContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Signal_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Signal_listContext.prototype.OTHERS = function() {
    return this.getToken(vhdlParser.OTHERS, 0);
};

Signal_listContext.prototype.ALL = function() {
    return this.getToken(vhdlParser.ALL, 0);
};

Signal_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignal_list(this);
	}
};

Signal_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignal_list(this);
	}
};




vhdlParser.Signal_listContext = Signal_listContext;

vhdlParser.prototype.signal_list = function() {

    var localctx = new Signal_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, vhdlParser.RULE_signal_list);
    var _la = 0; // Token type
    try {
        this.state = 2192;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2182;
            this.name();
            this.state = 2187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 2183;
                this.match(vhdlParser.COMMA);
                this.state = 2184;
                this.name();
                this.state = 2189;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vhdlParser.OTHERS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2190;
            this.match(vhdlParser.OTHERS);
            break;
        case vhdlParser.ALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2191;
            this.match(vhdlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_signature;
    return this;
}

SignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignatureContext.prototype.constructor = SignatureContext;

SignatureContext.prototype.LBRACKET = function() {
    return this.getToken(vhdlParser.LBRACKET, 0);
};

SignatureContext.prototype.RBRACKET = function() {
    return this.getToken(vhdlParser.RBRACKET, 0);
};

SignatureContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

SignatureContext.prototype.RETURN = function() {
    return this.getToken(vhdlParser.RETURN, 0);
};

SignatureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


SignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSignature(this);
	}
};

SignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSignature(this);
	}
};




vhdlParser.SignatureContext = SignatureContext;

vhdlParser.prototype.signature = function() {

    var localctx = new SignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, vhdlParser.RULE_signature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2194;
        this.match(vhdlParser.LBRACKET);
        this.state = 2203;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
            this.state = 2195;
            this.name();
            this.state = 2200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 2196;
                this.match(vhdlParser.COMMA);
                this.state = 2197;
                this.name();
                this.state = 2202;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.RETURN) {
            this.state = 2205;
            this.match(vhdlParser.RETURN);
            this.state = 2206;
            this.name();
        }

        this.state = 2209;
        this.match(vhdlParser.RBRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simple_expression;
    return this;
}

Simple_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_expressionContext.prototype.constructor = Simple_expressionContext;

Simple_expressionContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Simple_expressionContext.prototype.adding_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Adding_operatorContext);
    } else {
        return this.getTypedRuleContext(Adding_operatorContext,i);
    }
};

Simple_expressionContext.prototype.PLUS = function() {
    return this.getToken(vhdlParser.PLUS, 0);
};

Simple_expressionContext.prototype.MINUS = function() {
    return this.getToken(vhdlParser.MINUS, 0);
};

Simple_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimple_expression(this);
	}
};

Simple_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimple_expression(this);
	}
};




vhdlParser.Simple_expressionContext = Simple_expressionContext;

vhdlParser.prototype.simple_expression = function() {

    var localctx = new Simple_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, vhdlParser.RULE_simple_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.PLUS || _la===vhdlParser.MINUS) {
            this.state = 2211;
            _la = this._input.LA(1);
            if(!(_la===vhdlParser.PLUS || _la===vhdlParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2214;
        this.term();
        this.state = 2220;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,242,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2215;
                this.adding_operator();
                this.state = 2216;
                this.term(); 
            }
            this.state = 2222;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,242,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simple_simultaneous_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simple_simultaneous_statement;
    return this;
}

Simple_simultaneous_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_simultaneous_statementContext.prototype.constructor = Simple_simultaneous_statementContext;

Simple_simultaneous_statementContext.prototype.simple_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_expressionContext);
    } else {
        return this.getTypedRuleContext(Simple_expressionContext,i);
    }
};

Simple_simultaneous_statementContext.prototype.ASSIGN = function() {
    return this.getToken(vhdlParser.ASSIGN, 0);
};

Simple_simultaneous_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Simple_simultaneous_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Simple_simultaneous_statementContext.prototype.tolerance_aspect = function() {
    return this.getTypedRuleContext(Tolerance_aspectContext,0);
};

Simple_simultaneous_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimple_simultaneous_statement(this);
	}
};

Simple_simultaneous_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimple_simultaneous_statement(this);
	}
};




vhdlParser.Simple_simultaneous_statementContext = Simple_simultaneous_statementContext;

vhdlParser.prototype.simple_simultaneous_statement = function() {

    var localctx = new Simple_simultaneous_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, vhdlParser.RULE_simple_simultaneous_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
        if(la_===1) {
            this.state = 2223;
            this.label_colon();

        }
        this.state = 2226;
        this.simple_expression();
        this.state = 2227;
        this.match(vhdlParser.ASSIGN);
        this.state = 2228;
        this.simple_expression();
        this.state = 2230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.TOLERANCE) {
            this.state = 2229;
            this.tolerance_aspect();
        }

        this.state = 2232;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_alternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_alternative;
    return this;
}

Simultaneous_alternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_alternativeContext.prototype.constructor = Simultaneous_alternativeContext;

Simultaneous_alternativeContext.prototype.WHEN = function() {
    return this.getToken(vhdlParser.WHEN, 0);
};

Simultaneous_alternativeContext.prototype.choices = function() {
    return this.getTypedRuleContext(ChoicesContext,0);
};

Simultaneous_alternativeContext.prototype.ARROW = function() {
    return this.getToken(vhdlParser.ARROW, 0);
};

Simultaneous_alternativeContext.prototype.simultaneous_statement_part = function() {
    return this.getTypedRuleContext(Simultaneous_statement_partContext,0);
};

Simultaneous_alternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_alternative(this);
	}
};

Simultaneous_alternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_alternative(this);
	}
};




vhdlParser.Simultaneous_alternativeContext = Simultaneous_alternativeContext;

vhdlParser.prototype.simultaneous_alternative = function() {

    var localctx = new Simultaneous_alternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, vhdlParser.RULE_simultaneous_alternative);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2234;
        this.match(vhdlParser.WHEN);
        this.state = 2235;
        this.choices();
        this.state = 2236;
        this.match(vhdlParser.ARROW);
        this.state = 2237;
        this.simultaneous_statement_part();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_case_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_case_statement;
    return this;
}

Simultaneous_case_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_case_statementContext.prototype.constructor = Simultaneous_case_statementContext;

Simultaneous_case_statementContext.prototype.CASE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.CASE);
    } else {
        return this.getToken(vhdlParser.CASE, i);
    }
};


Simultaneous_case_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Simultaneous_case_statementContext.prototype.USE = function() {
    return this.getToken(vhdlParser.USE, 0);
};

Simultaneous_case_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Simultaneous_case_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Simultaneous_case_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Simultaneous_case_statementContext.prototype.simultaneous_alternative = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simultaneous_alternativeContext);
    } else {
        return this.getTypedRuleContext(Simultaneous_alternativeContext,i);
    }
};

Simultaneous_case_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Simultaneous_case_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_case_statement(this);
	}
};

Simultaneous_case_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_case_statement(this);
	}
};




vhdlParser.Simultaneous_case_statementContext = Simultaneous_case_statementContext;

vhdlParser.prototype.simultaneous_case_statement = function() {

    var localctx = new Simultaneous_case_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, vhdlParser.RULE_simultaneous_case_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2239;
            this.label_colon();
        }

        this.state = 2242;
        this.match(vhdlParser.CASE);
        this.state = 2243;
        this.expression();
        this.state = 2244;
        this.match(vhdlParser.USE);
        this.state = 2246; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2245;
            this.simultaneous_alternative();
            this.state = 2248; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===vhdlParser.WHEN);
        this.state = 2250;
        this.match(vhdlParser.END);
        this.state = 2251;
        this.match(vhdlParser.CASE);
        this.state = 2253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2252;
            this.identifier();
        }

        this.state = 2255;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_if_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_if_statement;
    return this;
}

Simultaneous_if_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_if_statementContext.prototype.constructor = Simultaneous_if_statementContext;

Simultaneous_if_statementContext.prototype.IF = function() {
    return this.getToken(vhdlParser.IF, 0);
};

Simultaneous_if_statementContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

Simultaneous_if_statementContext.prototype.USE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.USE);
    } else {
        return this.getToken(vhdlParser.USE, i);
    }
};


Simultaneous_if_statementContext.prototype.simultaneous_statement_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simultaneous_statement_partContext);
    } else {
        return this.getTypedRuleContext(Simultaneous_statement_partContext,i);
    }
};

Simultaneous_if_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Simultaneous_if_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Simultaneous_if_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Simultaneous_if_statementContext.prototype.ELSIF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.ELSIF);
    } else {
        return this.getToken(vhdlParser.ELSIF, i);
    }
};


Simultaneous_if_statementContext.prototype.ELSE = function() {
    return this.getToken(vhdlParser.ELSE, 0);
};

Simultaneous_if_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Simultaneous_if_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_if_statement(this);
	}
};

Simultaneous_if_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_if_statement(this);
	}
};




vhdlParser.Simultaneous_if_statementContext = Simultaneous_if_statementContext;

vhdlParser.prototype.simultaneous_if_statement = function() {

    var localctx = new Simultaneous_if_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, vhdlParser.RULE_simultaneous_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2257;
            this.label_colon();
        }

        this.state = 2260;
        this.match(vhdlParser.IF);
        this.state = 2261;
        this.condition();
        this.state = 2262;
        this.match(vhdlParser.USE);
        this.state = 2263;
        this.simultaneous_statement_part();
        this.state = 2271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.ELSIF) {
            this.state = 2264;
            this.match(vhdlParser.ELSIF);
            this.state = 2265;
            this.condition();
            this.state = 2266;
            this.match(vhdlParser.USE);
            this.state = 2267;
            this.simultaneous_statement_part();
            this.state = 2273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ELSE) {
            this.state = 2274;
            this.match(vhdlParser.ELSE);
            this.state = 2275;
            this.simultaneous_statement_part();
        }

        this.state = 2278;
        this.match(vhdlParser.END);
        this.state = 2279;
        this.match(vhdlParser.USE);
        this.state = 2281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2280;
            this.identifier();
        }

        this.state = 2283;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_procedural_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_procedural_statement;
    return this;
}

Simultaneous_procedural_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_procedural_statementContext.prototype.constructor = Simultaneous_procedural_statementContext;

Simultaneous_procedural_statementContext.prototype.PROCEDURAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.PROCEDURAL);
    } else {
        return this.getToken(vhdlParser.PROCEDURAL, i);
    }
};


Simultaneous_procedural_statementContext.prototype.procedural_declarative_part = function() {
    return this.getTypedRuleContext(Procedural_declarative_partContext,0);
};

Simultaneous_procedural_statementContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Simultaneous_procedural_statementContext.prototype.procedural_statement_part = function() {
    return this.getTypedRuleContext(Procedural_statement_partContext,0);
};

Simultaneous_procedural_statementContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Simultaneous_procedural_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Simultaneous_procedural_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Simultaneous_procedural_statementContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Simultaneous_procedural_statementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Simultaneous_procedural_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_procedural_statement(this);
	}
};

Simultaneous_procedural_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_procedural_statement(this);
	}
};




vhdlParser.Simultaneous_procedural_statementContext = Simultaneous_procedural_statementContext;

vhdlParser.prototype.simultaneous_procedural_statement = function() {

    var localctx = new Simultaneous_procedural_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, vhdlParser.RULE_simultaneous_procedural_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2285;
            this.label_colon();
        }

        this.state = 2288;
        this.match(vhdlParser.PROCEDURAL);
        this.state = 2290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS) {
            this.state = 2289;
            this.match(vhdlParser.IS);
        }

        this.state = 2292;
        this.procedural_declarative_part();
        this.state = 2293;
        this.match(vhdlParser.BEGIN);
        this.state = 2294;
        this.procedural_statement_part();
        this.state = 2295;
        this.match(vhdlParser.END);
        this.state = 2296;
        this.match(vhdlParser.PROCEDURAL);
        this.state = 2298;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2297;
            this.identifier();
        }

        this.state = 2300;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_statement;
    return this;
}

Simultaneous_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_statementContext.prototype.constructor = Simultaneous_statementContext;

Simultaneous_statementContext.prototype.simple_simultaneous_statement = function() {
    return this.getTypedRuleContext(Simple_simultaneous_statementContext,0);
};

Simultaneous_statementContext.prototype.simultaneous_if_statement = function() {
    return this.getTypedRuleContext(Simultaneous_if_statementContext,0);
};

Simultaneous_statementContext.prototype.simultaneous_case_statement = function() {
    return this.getTypedRuleContext(Simultaneous_case_statementContext,0);
};

Simultaneous_statementContext.prototype.simultaneous_procedural_statement = function() {
    return this.getTypedRuleContext(Simultaneous_procedural_statementContext,0);
};

Simultaneous_statementContext.prototype.NULL_ = function() {
    return this.getToken(vhdlParser.NULL_, 0);
};

Simultaneous_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Simultaneous_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Simultaneous_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_statement(this);
	}
};

Simultaneous_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_statement(this);
	}
};




vhdlParser.Simultaneous_statementContext = Simultaneous_statementContext;

vhdlParser.prototype.simultaneous_statement = function() {

    var localctx = new Simultaneous_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, vhdlParser.RULE_simultaneous_statement);
    var _la = 0; // Token type
    try {
        this.state = 2311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2302;
            this.simple_simultaneous_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2303;
            this.simultaneous_if_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2304;
            this.simultaneous_case_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2305;
            this.simultaneous_procedural_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
                this.state = 2306;
                this.label_colon();
            }

            this.state = 2309;
            this.match(vhdlParser.NULL_);
            this.state = 2310;
            this.match(vhdlParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Simultaneous_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_simultaneous_statement_part;
    return this;
}

Simultaneous_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simultaneous_statement_partContext.prototype.constructor = Simultaneous_statement_partContext;

Simultaneous_statement_partContext.prototype.simultaneous_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simultaneous_statementContext);
    } else {
        return this.getTypedRuleContext(Simultaneous_statementContext,i);
    }
};

Simultaneous_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSimultaneous_statement_part(this);
	}
};

Simultaneous_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSimultaneous_statement_part(this);
	}
};




vhdlParser.Simultaneous_statement_partContext = Simultaneous_statement_partContext;

vhdlParser.prototype.simultaneous_statement_part = function() {

    var localctx = new Simultaneous_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, vhdlParser.RULE_simultaneous_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.ABS || _la===vhdlParser.CASE || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.NEW - 36)) | (1 << (vhdlParser.NOT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || _la===vhdlParser.PROCEDURAL || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (vhdlParser.BASE_LITERAL - 112)) | (1 << (vhdlParser.BIT_STRING_LITERAL - 112)) | (1 << (vhdlParser.REAL_LITERAL - 112)) | (1 << (vhdlParser.BASIC_IDENTIFIER - 112)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 112)) | (1 << (vhdlParser.CHARACTER_LITERAL - 112)) | (1 << (vhdlParser.STRING_LITERAL - 112)) | (1 << (vhdlParser.LPAREN - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vhdlParser.PLUS - 148)) | (1 << (vhdlParser.MINUS - 148)) | (1 << (vhdlParser.INTEGER - 148)))) !== 0)) {
            this.state = 2313;
            this.simultaneous_statement();
            this.state = 2318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Source_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_source_aspect;
    return this;
}

Source_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Source_aspectContext.prototype.constructor = Source_aspectContext;

Source_aspectContext.prototype.SPECTRUM = function() {
    return this.getToken(vhdlParser.SPECTRUM, 0);
};

Source_aspectContext.prototype.simple_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_expressionContext);
    } else {
        return this.getTypedRuleContext(Simple_expressionContext,i);
    }
};

Source_aspectContext.prototype.COMMA = function() {
    return this.getToken(vhdlParser.COMMA, 0);
};

Source_aspectContext.prototype.NOISE = function() {
    return this.getToken(vhdlParser.NOISE, 0);
};

Source_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSource_aspect(this);
	}
};

Source_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSource_aspect(this);
	}
};




vhdlParser.Source_aspectContext = Source_aspectContext;

vhdlParser.prototype.source_aspect = function() {

    var localctx = new Source_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, vhdlParser.RULE_source_aspect);
    try {
        this.state = 2326;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.SPECTRUM:
            this.enterOuterAlt(localctx, 1);
            this.state = 2319;
            this.match(vhdlParser.SPECTRUM);
            this.state = 2320;
            this.simple_expression();
            this.state = 2321;
            this.match(vhdlParser.COMMA);
            this.state = 2322;
            this.simple_expression();
            break;
        case vhdlParser.NOISE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2324;
            this.match(vhdlParser.NOISE);
            this.state = 2325;
            this.simple_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Source_quantity_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_source_quantity_declaration;
    return this;
}

Source_quantity_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Source_quantity_declarationContext.prototype.constructor = Source_quantity_declarationContext;

Source_quantity_declarationContext.prototype.QUANTITY = function() {
    return this.getToken(vhdlParser.QUANTITY, 0);
};

Source_quantity_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Source_quantity_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Source_quantity_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Source_quantity_declarationContext.prototype.source_aspect = function() {
    return this.getTypedRuleContext(Source_aspectContext,0);
};

Source_quantity_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Source_quantity_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSource_quantity_declaration(this);
	}
};

Source_quantity_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSource_quantity_declaration(this);
	}
};




vhdlParser.Source_quantity_declarationContext = Source_quantity_declarationContext;

vhdlParser.prototype.source_quantity_declaration = function() {

    var localctx = new Source_quantity_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, vhdlParser.RULE_source_quantity_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2328;
        this.match(vhdlParser.QUANTITY);
        this.state = 2329;
        this.identifier_list();
        this.state = 2330;
        this.match(vhdlParser.COLON);
        this.state = 2331;
        this.subtype_indication();
        this.state = 2332;
        this.source_aspect();
        this.state = 2333;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Step_limit_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_step_limit_specification;
    return this;
}

Step_limit_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Step_limit_specificationContext.prototype.constructor = Step_limit_specificationContext;

Step_limit_specificationContext.prototype.LIMIT = function() {
    return this.getToken(vhdlParser.LIMIT, 0);
};

Step_limit_specificationContext.prototype.quantity_specification = function() {
    return this.getTypedRuleContext(Quantity_specificationContext,0);
};

Step_limit_specificationContext.prototype.WITH = function() {
    return this.getToken(vhdlParser.WITH, 0);
};

Step_limit_specificationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Step_limit_specificationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Step_limit_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterStep_limit_specification(this);
	}
};

Step_limit_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitStep_limit_specification(this);
	}
};




vhdlParser.Step_limit_specificationContext = Step_limit_specificationContext;

vhdlParser.prototype.step_limit_specification = function() {

    var localctx = new Step_limit_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, vhdlParser.RULE_step_limit_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2335;
        this.match(vhdlParser.LIMIT);
        this.state = 2336;
        this.quantity_specification();
        this.state = 2337;
        this.match(vhdlParser.WITH);
        this.state = 2338;
        this.expression();
        this.state = 2339;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subnature_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subnature_declaration;
    return this;
}

Subnature_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subnature_declarationContext.prototype.constructor = Subnature_declarationContext;

Subnature_declarationContext.prototype.SUBNATURE = function() {
    return this.getToken(vhdlParser.SUBNATURE, 0);
};

Subnature_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Subnature_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Subnature_declarationContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Subnature_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Subnature_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubnature_declaration(this);
	}
};

Subnature_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubnature_declaration(this);
	}
};




vhdlParser.Subnature_declarationContext = Subnature_declarationContext;

vhdlParser.prototype.subnature_declaration = function() {

    var localctx = new Subnature_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, vhdlParser.RULE_subnature_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2341;
        this.match(vhdlParser.SUBNATURE);
        this.state = 2342;
        this.identifier();
        this.state = 2343;
        this.match(vhdlParser.IS);
        this.state = 2344;
        this.subnature_indication();
        this.state = 2345;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subnature_indicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subnature_indication;
    return this;
}

Subnature_indicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subnature_indicationContext.prototype.constructor = Subnature_indicationContext;

Subnature_indicationContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Subnature_indicationContext.prototype.index_constraint = function() {
    return this.getTypedRuleContext(Index_constraintContext,0);
};

Subnature_indicationContext.prototype.TOLERANCE = function() {
    return this.getToken(vhdlParser.TOLERANCE, 0);
};

Subnature_indicationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Subnature_indicationContext.prototype.ACROSS = function() {
    return this.getToken(vhdlParser.ACROSS, 0);
};

Subnature_indicationContext.prototype.THROUGH = function() {
    return this.getToken(vhdlParser.THROUGH, 0);
};

Subnature_indicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubnature_indication(this);
	}
};

Subnature_indicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubnature_indication(this);
	}
};




vhdlParser.Subnature_indicationContext = Subnature_indicationContext;

vhdlParser.prototype.subnature_indication = function() {

    var localctx = new Subnature_indicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, vhdlParser.RULE_subnature_indication);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2347;
        this.name();
        this.state = 2349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 2348;
            this.index_constraint();
        }

        this.state = 2357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.TOLERANCE) {
            this.state = 2351;
            this.match(vhdlParser.TOLERANCE);
            this.state = 2352;
            this.expression();
            this.state = 2353;
            this.match(vhdlParser.ACROSS);
            this.state = 2354;
            this.expression();
            this.state = 2355;
            this.match(vhdlParser.THROUGH);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_body;
    return this;
}

Subprogram_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_bodyContext.prototype.constructor = Subprogram_bodyContext;

Subprogram_bodyContext.prototype.subprogram_specification = function() {
    return this.getTypedRuleContext(Subprogram_specificationContext,0);
};

Subprogram_bodyContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Subprogram_bodyContext.prototype.subprogram_declarative_part = function() {
    return this.getTypedRuleContext(Subprogram_declarative_partContext,0);
};

Subprogram_bodyContext.prototype.BEGIN = function() {
    return this.getToken(vhdlParser.BEGIN, 0);
};

Subprogram_bodyContext.prototype.subprogram_statement_part = function() {
    return this.getTypedRuleContext(Subprogram_statement_partContext,0);
};

Subprogram_bodyContext.prototype.END = function() {
    return this.getToken(vhdlParser.END, 0);
};

Subprogram_bodyContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Subprogram_bodyContext.prototype.subprogram_kind = function() {
    return this.getTypedRuleContext(Subprogram_kindContext,0);
};

Subprogram_bodyContext.prototype.designator = function() {
    return this.getTypedRuleContext(DesignatorContext,0);
};

Subprogram_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_body(this);
	}
};

Subprogram_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_body(this);
	}
};




vhdlParser.Subprogram_bodyContext = Subprogram_bodyContext;

vhdlParser.prototype.subprogram_body = function() {

    var localctx = new Subprogram_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, vhdlParser.RULE_subprogram_body);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2359;
        this.subprogram_specification();
        this.state = 2360;
        this.match(vhdlParser.IS);
        this.state = 2361;
        this.subprogram_declarative_part();
        this.state = 2362;
        this.match(vhdlParser.BEGIN);
        this.state = 2363;
        this.subprogram_statement_part();
        this.state = 2364;
        this.match(vhdlParser.END);
        this.state = 2366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FUNCTION || _la===vhdlParser.PROCEDURE) {
            this.state = 2365;
            this.subprogram_kind();
        }

        this.state = 2369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)))) !== 0)) {
            this.state = 2368;
            this.designator();
        }

        this.state = 2371;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_declaration;
    return this;
}

Subprogram_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_declarationContext.prototype.constructor = Subprogram_declarationContext;

Subprogram_declarationContext.prototype.subprogram_specification = function() {
    return this.getTypedRuleContext(Subprogram_specificationContext,0);
};

Subprogram_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Subprogram_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_declaration(this);
	}
};

Subprogram_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_declaration(this);
	}
};




vhdlParser.Subprogram_declarationContext = Subprogram_declarationContext;

vhdlParser.prototype.subprogram_declaration = function() {

    var localctx = new Subprogram_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, vhdlParser.RULE_subprogram_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2373;
        this.subprogram_specification();
        this.state = 2374;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_declarative_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_declarative_item;
    return this;
}

Subprogram_declarative_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_declarative_itemContext.prototype.constructor = Subprogram_declarative_itemContext;

Subprogram_declarative_itemContext.prototype.subprogram_declaration = function() {
    return this.getTypedRuleContext(Subprogram_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.subprogram_body = function() {
    return this.getTypedRuleContext(Subprogram_bodyContext,0);
};

Subprogram_declarative_itemContext.prototype.type_declaration = function() {
    return this.getTypedRuleContext(Type_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.subtype_declaration = function() {
    return this.getTypedRuleContext(Subtype_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.file_declaration = function() {
    return this.getTypedRuleContext(File_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.alias_declaration = function() {
    return this.getTypedRuleContext(Alias_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.attribute_declaration = function() {
    return this.getTypedRuleContext(Attribute_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.attribute_specification = function() {
    return this.getTypedRuleContext(Attribute_specificationContext,0);
};

Subprogram_declarative_itemContext.prototype.use_clause = function() {
    return this.getTypedRuleContext(Use_clauseContext,0);
};

Subprogram_declarative_itemContext.prototype.group_template_declaration = function() {
    return this.getTypedRuleContext(Group_template_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.group_declaration = function() {
    return this.getTypedRuleContext(Group_declarationContext,0);
};

Subprogram_declarative_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_declarative_item(this);
	}
};

Subprogram_declarative_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_declarative_item(this);
	}
};




vhdlParser.Subprogram_declarative_itemContext = Subprogram_declarative_itemContext;

vhdlParser.prototype.subprogram_declarative_item = function() {

    var localctx = new Subprogram_declarative_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, vhdlParser.RULE_subprogram_declarative_item);
    try {
        this.state = 2389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2376;
            this.subprogram_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2377;
            this.subprogram_body();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2378;
            this.type_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2379;
            this.subtype_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2380;
            this.constant_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2381;
            this.variable_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2382;
            this.file_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2383;
            this.alias_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2384;
            this.attribute_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2385;
            this.attribute_specification();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2386;
            this.use_clause();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2387;
            this.group_template_declaration();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2388;
            this.group_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_declarative_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_declarative_part;
    return this;
}

Subprogram_declarative_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_declarative_partContext.prototype.constructor = Subprogram_declarative_partContext;

Subprogram_declarative_partContext.prototype.subprogram_declarative_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subprogram_declarative_itemContext);
    } else {
        return this.getTypedRuleContext(Subprogram_declarative_itemContext,i);
    }
};

Subprogram_declarative_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_declarative_part(this);
	}
};

Subprogram_declarative_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_declarative_part(this);
	}
};




vhdlParser.Subprogram_declarative_partContext = Subprogram_declarative_partContext;

vhdlParser.prototype.subprogram_declarative_part = function() {

    var localctx = new Subprogram_declarative_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, vhdlParser.RULE_subprogram_declarative_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ALIAS) | (1 << vhdlParser.ATTRIBUTE) | (1 << vhdlParser.CONSTANT) | (1 << vhdlParser.FILE) | (1 << vhdlParser.FUNCTION))) !== 0) || _la===vhdlParser.GROUP || _la===vhdlParser.IMPURE || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (vhdlParser.PROCEDURE - 68)) | (1 << (vhdlParser.PURE - 68)) | (1 << (vhdlParser.SHARED - 68)) | (1 << (vhdlParser.SUBTYPE - 68)))) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (vhdlParser.TYPE - 100)) | (1 << (vhdlParser.USE - 100)) | (1 << (vhdlParser.VARIABLE - 100)))) !== 0)) {
            this.state = 2391;
            this.subprogram_declarative_item();
            this.state = 2396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_kindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_kind;
    return this;
}

Subprogram_kindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_kindContext.prototype.constructor = Subprogram_kindContext;

Subprogram_kindContext.prototype.PROCEDURE = function() {
    return this.getToken(vhdlParser.PROCEDURE, 0);
};

Subprogram_kindContext.prototype.FUNCTION = function() {
    return this.getToken(vhdlParser.FUNCTION, 0);
};

Subprogram_kindContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_kind(this);
	}
};

Subprogram_kindContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_kind(this);
	}
};




vhdlParser.Subprogram_kindContext = Subprogram_kindContext;

vhdlParser.prototype.subprogram_kind = function() {

    var localctx = new Subprogram_kindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, vhdlParser.RULE_subprogram_kind);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2397;
        _la = this._input.LA(1);
        if(!(_la===vhdlParser.FUNCTION || _la===vhdlParser.PROCEDURE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_specification;
    return this;
}

Subprogram_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_specificationContext.prototype.constructor = Subprogram_specificationContext;

Subprogram_specificationContext.prototype.procedure_specification = function() {
    return this.getTypedRuleContext(Procedure_specificationContext,0);
};

Subprogram_specificationContext.prototype.function_specification = function() {
    return this.getTypedRuleContext(Function_specificationContext,0);
};

Subprogram_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_specification(this);
	}
};

Subprogram_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_specification(this);
	}
};




vhdlParser.Subprogram_specificationContext = Subprogram_specificationContext;

vhdlParser.prototype.subprogram_specification = function() {

    var localctx = new Subprogram_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, vhdlParser.RULE_subprogram_specification);
    try {
        this.state = 2401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.PROCEDURE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2399;
            this.procedure_specification();
            break;
        case vhdlParser.FUNCTION:
        case vhdlParser.IMPURE:
        case vhdlParser.PURE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2400;
            this.function_specification();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Procedure_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_procedure_specification;
    return this;
}

Procedure_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_specificationContext.prototype.constructor = Procedure_specificationContext;

Procedure_specificationContext.prototype.PROCEDURE = function() {
    return this.getToken(vhdlParser.PROCEDURE, 0);
};

Procedure_specificationContext.prototype.designator = function() {
    return this.getTypedRuleContext(DesignatorContext,0);
};

Procedure_specificationContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Procedure_specificationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Procedure_specificationContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Procedure_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterProcedure_specification(this);
	}
};

Procedure_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitProcedure_specification(this);
	}
};




vhdlParser.Procedure_specificationContext = Procedure_specificationContext;

vhdlParser.prototype.procedure_specification = function() {

    var localctx = new Procedure_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, vhdlParser.RULE_procedure_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2403;
        this.match(vhdlParser.PROCEDURE);
        this.state = 2404;
        this.designator();
        this.state = 2409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 2405;
            this.match(vhdlParser.LPAREN);
            this.state = 2406;
            this.formal_parameter_list();
            this.state = 2407;
            this.match(vhdlParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_function_specification;
    return this;
}

Function_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_specificationContext.prototype.constructor = Function_specificationContext;

Function_specificationContext.prototype.FUNCTION = function() {
    return this.getToken(vhdlParser.FUNCTION, 0);
};

Function_specificationContext.prototype.designator = function() {
    return this.getTypedRuleContext(DesignatorContext,0);
};

Function_specificationContext.prototype.RETURN = function() {
    return this.getToken(vhdlParser.RETURN, 0);
};

Function_specificationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Function_specificationContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Function_specificationContext.prototype.formal_parameter_list = function() {
    return this.getTypedRuleContext(Formal_parameter_listContext,0);
};

Function_specificationContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Function_specificationContext.prototype.PURE = function() {
    return this.getToken(vhdlParser.PURE, 0);
};

Function_specificationContext.prototype.IMPURE = function() {
    return this.getToken(vhdlParser.IMPURE, 0);
};

Function_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterFunction_specification(this);
	}
};

Function_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitFunction_specification(this);
	}
};




vhdlParser.Function_specificationContext = Function_specificationContext;

vhdlParser.prototype.function_specification = function() {

    var localctx = new Function_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, vhdlParser.RULE_function_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IMPURE || _la===vhdlParser.PURE) {
            this.state = 2411;
            _la = this._input.LA(1);
            if(!(_la===vhdlParser.IMPURE || _la===vhdlParser.PURE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2414;
        this.match(vhdlParser.FUNCTION);
        this.state = 2415;
        this.designator();
        this.state = 2420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.LPAREN) {
            this.state = 2416;
            this.match(vhdlParser.LPAREN);
            this.state = 2417;
            this.formal_parameter_list();
            this.state = 2418;
            this.match(vhdlParser.RPAREN);
        }

        this.state = 2422;
        this.match(vhdlParser.RETURN);
        this.state = 2423;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subprogram_statement_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subprogram_statement_part;
    return this;
}

Subprogram_statement_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subprogram_statement_partContext.prototype.constructor = Subprogram_statement_partContext;

Subprogram_statement_partContext.prototype.sequential_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sequential_statementContext);
    } else {
        return this.getTypedRuleContext(Sequential_statementContext,i);
    }
};

Subprogram_statement_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubprogram_statement_part(this);
	}
};

Subprogram_statement_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubprogram_statement_part(this);
	}
};




vhdlParser.Subprogram_statement_partContext = Subprogram_statement_partContext;

vhdlParser.prototype.subprogram_statement_part = function() {

    var localctx = new Subprogram_statement_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, vhdlParser.RULE_subprogram_statement_part);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vhdlParser.ASSERT) | (1 << vhdlParser.BREAK) | (1 << vhdlParser.CASE) | (1 << vhdlParser.EXIT) | (1 << vhdlParser.FOR))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (vhdlParser.IF - 36)) | (1 << (vhdlParser.LOOP - 36)) | (1 << (vhdlParser.NEXT - 36)) | (1 << (vhdlParser.NULL_ - 36)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (vhdlParser.REPORT - 79)) | (1 << (vhdlParser.RETURN - 79)) | (1 << (vhdlParser.WAIT - 79)) | (1 << (vhdlParser.WHILE - 79)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (vhdlParser.BASIC_IDENTIFIER - 118)) | (1 << (vhdlParser.EXTENDED_IDENTIFIER - 118)) | (1 << (vhdlParser.STRING_LITERAL - 118)) | (1 << (vhdlParser.LPAREN - 118)))) !== 0)) {
            this.state = 2425;
            this.sequential_statement();
            this.state = 2430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subtype_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subtype_declaration;
    return this;
}

Subtype_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subtype_declarationContext.prototype.constructor = Subtype_declarationContext;

Subtype_declarationContext.prototype.SUBTYPE = function() {
    return this.getToken(vhdlParser.SUBTYPE, 0);
};

Subtype_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Subtype_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Subtype_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Subtype_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Subtype_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubtype_declaration(this);
	}
};

Subtype_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubtype_declaration(this);
	}
};




vhdlParser.Subtype_declarationContext = Subtype_declarationContext;

vhdlParser.prototype.subtype_declaration = function() {

    var localctx = new Subtype_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, vhdlParser.RULE_subtype_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2431;
        this.match(vhdlParser.SUBTYPE);
        this.state = 2432;
        this.identifier();
        this.state = 2433;
        this.match(vhdlParser.IS);
        this.state = 2434;
        this.subtype_indication();
        this.state = 2435;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subtype_indicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_subtype_indication;
    return this;
}

Subtype_indicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subtype_indicationContext.prototype.constructor = Subtype_indicationContext;

Subtype_indicationContext.prototype.selected_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Selected_nameContext);
    } else {
        return this.getTypedRuleContext(Selected_nameContext,i);
    }
};

Subtype_indicationContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

Subtype_indicationContext.prototype.tolerance_aspect = function() {
    return this.getTypedRuleContext(Tolerance_aspectContext,0);
};

Subtype_indicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSubtype_indication(this);
	}
};

Subtype_indicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSubtype_indication(this);
	}
};




vhdlParser.Subtype_indicationContext = Subtype_indicationContext;

vhdlParser.prototype.subtype_indication = function() {

    var localctx = new Subtype_indicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, vhdlParser.RULE_subtype_indication);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2437;
        this.selected_name();
        this.state = 2439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2438;
            this.selected_name();
        }

        this.state = 2442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.RANGE || _la===vhdlParser.LPAREN) {
            this.state = 2441;
            this.constraint();
        }

        this.state = 2445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
        if(la_===1) {
            this.state = 2444;
            this.tolerance_aspect();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_suffix;
    return this;
}

SuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuffixContext.prototype.constructor = SuffixContext;

SuffixContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SuffixContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(vhdlParser.CHARACTER_LITERAL, 0);
};

SuffixContext.prototype.STRING_LITERAL = function() {
    return this.getToken(vhdlParser.STRING_LITERAL, 0);
};

SuffixContext.prototype.ALL = function() {
    return this.getToken(vhdlParser.ALL, 0);
};

SuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterSuffix(this);
	}
};

SuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitSuffix(this);
	}
};




vhdlParser.SuffixContext = SuffixContext;

vhdlParser.prototype.suffix = function() {

    var localctx = new SuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, vhdlParser.RULE_suffix);
    try {
        this.state = 2451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2447;
            this.identifier();
            break;
        case vhdlParser.CHARACTER_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2448;
            this.match(vhdlParser.CHARACTER_LITERAL);
            break;
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2449;
            this.match(vhdlParser.STRING_LITERAL);
            break;
        case vhdlParser.ALL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2450;
            this.match(vhdlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_target;
    return this;
}

TargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TargetContext.prototype.constructor = TargetContext;

TargetContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

TargetContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

TargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTarget(this);
	}
};

TargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTarget(this);
	}
};




vhdlParser.TargetContext = TargetContext;

vhdlParser.prototype.target = function() {

    var localctx = new TargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, vhdlParser.RULE_target);
    try {
        this.state = 2455;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 2453;
            this.name();
            break;
        case vhdlParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2454;
            this.aggregate();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.multiplying_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Multiplying_operatorContext);
    } else {
        return this.getTypedRuleContext(Multiplying_operatorContext,i);
    }
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTerm(this);
	}
};




vhdlParser.TermContext = TermContext;

vhdlParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, vhdlParser.RULE_term);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2457;
        this.factor();
        this.state = 2463;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,275,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2458;
                this.multiplying_operator();
                this.state = 2459;
                this.factor(); 
            }
            this.state = 2465;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,275,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Terminal_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_terminal_aspect;
    return this;
}

Terminal_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Terminal_aspectContext.prototype.constructor = Terminal_aspectContext;

Terminal_aspectContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Terminal_aspectContext.prototype.TO = function() {
    return this.getToken(vhdlParser.TO, 0);
};

Terminal_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTerminal_aspect(this);
	}
};

Terminal_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTerminal_aspect(this);
	}
};




vhdlParser.Terminal_aspectContext = Terminal_aspectContext;

vhdlParser.prototype.terminal_aspect = function() {

    var localctx = new Terminal_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, vhdlParser.RULE_terminal_aspect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2466;
        this.name();
        this.state = 2469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.TO) {
            this.state = 2467;
            this.match(vhdlParser.TO);
            this.state = 2468;
            this.name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Terminal_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_terminal_declaration;
    return this;
}

Terminal_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Terminal_declarationContext.prototype.constructor = Terminal_declarationContext;

Terminal_declarationContext.prototype.TERMINAL = function() {
    return this.getToken(vhdlParser.TERMINAL, 0);
};

Terminal_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Terminal_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Terminal_declarationContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Terminal_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Terminal_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTerminal_declaration(this);
	}
};

Terminal_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTerminal_declaration(this);
	}
};




vhdlParser.Terminal_declarationContext = Terminal_declarationContext;

vhdlParser.prototype.terminal_declaration = function() {

    var localctx = new Terminal_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, vhdlParser.RULE_terminal_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2471;
        this.match(vhdlParser.TERMINAL);
        this.state = 2472;
        this.identifier_list();
        this.state = 2473;
        this.match(vhdlParser.COLON);
        this.state = 2474;
        this.subnature_indication();
        this.state = 2475;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Through_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_through_aspect;
    return this;
}

Through_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Through_aspectContext.prototype.constructor = Through_aspectContext;

Through_aspectContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Through_aspectContext.prototype.THROUGH = function() {
    return this.getToken(vhdlParser.THROUGH, 0);
};

Through_aspectContext.prototype.tolerance_aspect = function() {
    return this.getTypedRuleContext(Tolerance_aspectContext,0);
};

Through_aspectContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Through_aspectContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Through_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterThrough_aspect(this);
	}
};

Through_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitThrough_aspect(this);
	}
};




vhdlParser.Through_aspectContext = Through_aspectContext;

vhdlParser.prototype.through_aspect = function() {

    var localctx = new Through_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, vhdlParser.RULE_through_aspect);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2477;
        this.identifier_list();
        this.state = 2479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.TOLERANCE) {
            this.state = 2478;
            this.tolerance_aspect();
        }

        this.state = 2483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 2481;
            this.match(vhdlParser.VARASGN);
            this.state = 2482;
            this.expression();
        }

        this.state = 2485;
        this.match(vhdlParser.THROUGH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timeout_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_timeout_clause;
    return this;
}

Timeout_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timeout_clauseContext.prototype.constructor = Timeout_clauseContext;

Timeout_clauseContext.prototype.FOR = function() {
    return this.getToken(vhdlParser.FOR, 0);
};

Timeout_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Timeout_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTimeout_clause(this);
	}
};

Timeout_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTimeout_clause(this);
	}
};




vhdlParser.Timeout_clauseContext = Timeout_clauseContext;

vhdlParser.prototype.timeout_clause = function() {

    var localctx = new Timeout_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, vhdlParser.RULE_timeout_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2487;
        this.match(vhdlParser.FOR);
        this.state = 2488;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tolerance_aspectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_tolerance_aspect;
    return this;
}

Tolerance_aspectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tolerance_aspectContext.prototype.constructor = Tolerance_aspectContext;

Tolerance_aspectContext.prototype.TOLERANCE = function() {
    return this.getToken(vhdlParser.TOLERANCE, 0);
};

Tolerance_aspectContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Tolerance_aspectContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterTolerance_aspect(this);
	}
};

Tolerance_aspectContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitTolerance_aspect(this);
	}
};




vhdlParser.Tolerance_aspectContext = Tolerance_aspectContext;

vhdlParser.prototype.tolerance_aspect = function() {

    var localctx = new Tolerance_aspectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, vhdlParser.RULE_tolerance_aspect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2490;
        this.match(vhdlParser.TOLERANCE);
        this.state = 2491;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_type_declaration;
    return this;
}

Type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_declarationContext.prototype.constructor = Type_declarationContext;

Type_declarationContext.prototype.TYPE = function() {
    return this.getToken(vhdlParser.TYPE, 0);
};

Type_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Type_declarationContext.prototype.IS = function() {
    return this.getToken(vhdlParser.IS, 0);
};

Type_declarationContext.prototype.type_definition = function() {
    return this.getTypedRuleContext(Type_definitionContext,0);
};

Type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterType_declaration(this);
	}
};

Type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitType_declaration(this);
	}
};




vhdlParser.Type_declarationContext = Type_declarationContext;

vhdlParser.prototype.type_declaration = function() {

    var localctx = new Type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, vhdlParser.RULE_type_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2493;
        this.match(vhdlParser.TYPE);
        this.state = 2494;
        this.identifier();
        this.state = 2497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.IS) {
            this.state = 2495;
            this.match(vhdlParser.IS);
            this.state = 2496;
            this.type_definition();
        }

        this.state = 2499;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_type_definition;
    return this;
}

Type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_definitionContext.prototype.constructor = Type_definitionContext;

Type_definitionContext.prototype.scalar_type_definition = function() {
    return this.getTypedRuleContext(Scalar_type_definitionContext,0);
};

Type_definitionContext.prototype.composite_type_definition = function() {
    return this.getTypedRuleContext(Composite_type_definitionContext,0);
};

Type_definitionContext.prototype.access_type_definition = function() {
    return this.getTypedRuleContext(Access_type_definitionContext,0);
};

Type_definitionContext.prototype.file_type_definition = function() {
    return this.getTypedRuleContext(File_type_definitionContext,0);
};

Type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterType_definition(this);
	}
};

Type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitType_definition(this);
	}
};




vhdlParser.Type_definitionContext = Type_definitionContext;

vhdlParser.prototype.type_definition = function() {

    var localctx = new Type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, vhdlParser.RULE_type_definition);
    try {
        this.state = 2505;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.RANGE:
        case vhdlParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2501;
            this.scalar_type_definition();
            break;
        case vhdlParser.ARRAY:
        case vhdlParser.RECORD:
            this.enterOuterAlt(localctx, 2);
            this.state = 2502;
            this.composite_type_definition();
            break;
        case vhdlParser.ACCESS:
            this.enterOuterAlt(localctx, 3);
            this.state = 2503;
            this.access_type_definition();
            break;
        case vhdlParser.FILE:
            this.enterOuterAlt(localctx, 4);
            this.state = 2504;
            this.file_type_definition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unconstrained_array_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_unconstrained_array_definition;
    return this;
}

Unconstrained_array_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unconstrained_array_definitionContext.prototype.constructor = Unconstrained_array_definitionContext;

Unconstrained_array_definitionContext.prototype.ARRAY = function() {
    return this.getToken(vhdlParser.ARRAY, 0);
};

Unconstrained_array_definitionContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Unconstrained_array_definitionContext.prototype.index_subtype_definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_subtype_definitionContext);
    } else {
        return this.getTypedRuleContext(Index_subtype_definitionContext,i);
    }
};

Unconstrained_array_definitionContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Unconstrained_array_definitionContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Unconstrained_array_definitionContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Unconstrained_array_definitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Unconstrained_array_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterUnconstrained_array_definition(this);
	}
};

Unconstrained_array_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitUnconstrained_array_definition(this);
	}
};




vhdlParser.Unconstrained_array_definitionContext = Unconstrained_array_definitionContext;

vhdlParser.prototype.unconstrained_array_definition = function() {

    var localctx = new Unconstrained_array_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, vhdlParser.RULE_unconstrained_array_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2507;
        this.match(vhdlParser.ARRAY);
        this.state = 2508;
        this.match(vhdlParser.LPAREN);
        this.state = 2509;
        this.index_subtype_definition();
        this.state = 2514;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 2510;
            this.match(vhdlParser.COMMA);
            this.state = 2511;
            this.index_subtype_definition();
            this.state = 2516;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2517;
        this.match(vhdlParser.RPAREN);
        this.state = 2518;
        this.match(vhdlParser.OF);
        this.state = 2519;
        this.subtype_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unconstrained_nature_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_unconstrained_nature_definition;
    return this;
}

Unconstrained_nature_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unconstrained_nature_definitionContext.prototype.constructor = Unconstrained_nature_definitionContext;

Unconstrained_nature_definitionContext.prototype.ARRAY = function() {
    return this.getToken(vhdlParser.ARRAY, 0);
};

Unconstrained_nature_definitionContext.prototype.LPAREN = function() {
    return this.getToken(vhdlParser.LPAREN, 0);
};

Unconstrained_nature_definitionContext.prototype.index_subtype_definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_subtype_definitionContext);
    } else {
        return this.getTypedRuleContext(Index_subtype_definitionContext,i);
    }
};

Unconstrained_nature_definitionContext.prototype.RPAREN = function() {
    return this.getToken(vhdlParser.RPAREN, 0);
};

Unconstrained_nature_definitionContext.prototype.OF = function() {
    return this.getToken(vhdlParser.OF, 0);
};

Unconstrained_nature_definitionContext.prototype.subnature_indication = function() {
    return this.getTypedRuleContext(Subnature_indicationContext,0);
};

Unconstrained_nature_definitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Unconstrained_nature_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterUnconstrained_nature_definition(this);
	}
};

Unconstrained_nature_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitUnconstrained_nature_definition(this);
	}
};




vhdlParser.Unconstrained_nature_definitionContext = Unconstrained_nature_definitionContext;

vhdlParser.prototype.unconstrained_nature_definition = function() {

    var localctx = new Unconstrained_nature_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, vhdlParser.RULE_unconstrained_nature_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2521;
        this.match(vhdlParser.ARRAY);
        this.state = 2522;
        this.match(vhdlParser.LPAREN);
        this.state = 2523;
        this.index_subtype_definition();
        this.state = 2528;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 2524;
            this.match(vhdlParser.COMMA);
            this.state = 2525;
            this.index_subtype_definition();
            this.state = 2530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2531;
        this.match(vhdlParser.RPAREN);
        this.state = 2532;
        this.match(vhdlParser.OF);
        this.state = 2533;
        this.subnature_indication();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Use_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_use_clause;
    return this;
}

Use_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Use_clauseContext.prototype.constructor = Use_clauseContext;

Use_clauseContext.prototype.USE = function() {
    return this.getToken(vhdlParser.USE, 0);
};

Use_clauseContext.prototype.selected_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Selected_nameContext);
    } else {
        return this.getTypedRuleContext(Selected_nameContext,i);
    }
};

Use_clauseContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Use_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


Use_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterUse_clause(this);
	}
};

Use_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitUse_clause(this);
	}
};




vhdlParser.Use_clauseContext = Use_clauseContext;

vhdlParser.prototype.use_clause = function() {

    var localctx = new Use_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, vhdlParser.RULE_use_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2535;
        this.match(vhdlParser.USE);
        this.state = 2536;
        this.selected_name();
        this.state = 2541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===vhdlParser.COMMA) {
            this.state = 2537;
            this.match(vhdlParser.COMMA);
            this.state = 2538;
            this.selected_name();
            this.state = 2543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2544;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_variable_assignment_statement;
    return this;
}

Variable_assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_assignment_statementContext.prototype.constructor = Variable_assignment_statementContext;

Variable_assignment_statementContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Variable_assignment_statementContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Variable_assignment_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Variable_assignment_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Variable_assignment_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Variable_assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterVariable_assignment_statement(this);
	}
};

Variable_assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitVariable_assignment_statement(this);
	}
};




vhdlParser.Variable_assignment_statementContext = Variable_assignment_statementContext;

vhdlParser.prototype.variable_assignment_statement = function() {

    var localctx = new Variable_assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, vhdlParser.RULE_variable_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2547;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
        if(la_===1) {
            this.state = 2546;
            this.label_colon();

        }
        this.state = 2549;
        this.target();
        this.state = 2550;
        this.match(vhdlParser.VARASGN);
        this.state = 2551;
        this.expression();
        this.state = 2552;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.VARIABLE = function() {
    return this.getToken(vhdlParser.VARIABLE, 0);
};

Variable_declarationContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Variable_declarationContext.prototype.COLON = function() {
    return this.getToken(vhdlParser.COLON, 0);
};

Variable_declarationContext.prototype.subtype_indication = function() {
    return this.getTypedRuleContext(Subtype_indicationContext,0);
};

Variable_declarationContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Variable_declarationContext.prototype.SHARED = function() {
    return this.getToken(vhdlParser.SHARED, 0);
};

Variable_declarationContext.prototype.VARASGN = function() {
    return this.getToken(vhdlParser.VARASGN, 0);
};

Variable_declarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitVariable_declaration(this);
	}
};




vhdlParser.Variable_declarationContext = Variable_declarationContext;

vhdlParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, vhdlParser.RULE_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.SHARED) {
            this.state = 2554;
            this.match(vhdlParser.SHARED);
        }

        this.state = 2557;
        this.match(vhdlParser.VARIABLE);
        this.state = 2558;
        this.identifier_list();
        this.state = 2559;
        this.match(vhdlParser.COLON);
        this.state = 2560;
        this.subtype_indication();
        this.state = 2563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.VARASGN) {
            this.state = 2561;
            this.match(vhdlParser.VARASGN);
            this.state = 2562;
            this.expression();
        }

        this.state = 2565;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Wait_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_wait_statement;
    return this;
}

Wait_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wait_statementContext.prototype.constructor = Wait_statementContext;

Wait_statementContext.prototype.WAIT = function() {
    return this.getToken(vhdlParser.WAIT, 0);
};

Wait_statementContext.prototype.SEMI = function() {
    return this.getToken(vhdlParser.SEMI, 0);
};

Wait_statementContext.prototype.label_colon = function() {
    return this.getTypedRuleContext(Label_colonContext,0);
};

Wait_statementContext.prototype.sensitivity_clause = function() {
    return this.getTypedRuleContext(Sensitivity_clauseContext,0);
};

Wait_statementContext.prototype.condition_clause = function() {
    return this.getTypedRuleContext(Condition_clauseContext,0);
};

Wait_statementContext.prototype.timeout_clause = function() {
    return this.getTypedRuleContext(Timeout_clauseContext,0);
};

Wait_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterWait_statement(this);
	}
};

Wait_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitWait_statement(this);
	}
};




vhdlParser.Wait_statementContext = Wait_statementContext;

vhdlParser.prototype.wait_statement = function() {

    var localctx = new Wait_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, vhdlParser.RULE_wait_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.BASIC_IDENTIFIER || _la===vhdlParser.EXTENDED_IDENTIFIER) {
            this.state = 2567;
            this.label_colon();
        }

        this.state = 2570;
        this.match(vhdlParser.WAIT);
        this.state = 2572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.ON) {
            this.state = 2571;
            this.sensitivity_clause();
        }

        this.state = 2575;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.UNTIL) {
            this.state = 2574;
            this.condition_clause();
        }

        this.state = 2578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.FOR) {
            this.state = 2577;
            this.timeout_clause();
        }

        this.state = 2580;
        this.match(vhdlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WaveformContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_waveform;
    return this;
}

WaveformContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WaveformContext.prototype.constructor = WaveformContext;

WaveformContext.prototype.waveform_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Waveform_elementContext);
    } else {
        return this.getTypedRuleContext(Waveform_elementContext,i);
    }
};

WaveformContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(vhdlParser.COMMA);
    } else {
        return this.getToken(vhdlParser.COMMA, i);
    }
};


WaveformContext.prototype.UNAFFECTED = function() {
    return this.getToken(vhdlParser.UNAFFECTED, 0);
};

WaveformContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterWaveform(this);
	}
};

WaveformContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitWaveform(this);
	}
};




vhdlParser.WaveformContext = WaveformContext;

vhdlParser.prototype.waveform = function() {

    var localctx = new WaveformContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, vhdlParser.RULE_waveform);
    var _la = 0; // Token type
    try {
        this.state = 2591;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case vhdlParser.ABS:
        case vhdlParser.NEW:
        case vhdlParser.NOT:
        case vhdlParser.NULL_:
        case vhdlParser.BASE_LITERAL:
        case vhdlParser.BIT_STRING_LITERAL:
        case vhdlParser.REAL_LITERAL:
        case vhdlParser.BASIC_IDENTIFIER:
        case vhdlParser.EXTENDED_IDENTIFIER:
        case vhdlParser.CHARACTER_LITERAL:
        case vhdlParser.STRING_LITERAL:
        case vhdlParser.LPAREN:
        case vhdlParser.PLUS:
        case vhdlParser.MINUS:
        case vhdlParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2582;
            this.waveform_element();
            this.state = 2587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===vhdlParser.COMMA) {
                this.state = 2583;
                this.match(vhdlParser.COMMA);
                this.state = 2584;
                this.waveform_element();
                this.state = 2589;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case vhdlParser.UNAFFECTED:
            this.enterOuterAlt(localctx, 2);
            this.state = 2590;
            this.match(vhdlParser.UNAFFECTED);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Waveform_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = vhdlParser.RULE_waveform_element;
    return this;
}

Waveform_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Waveform_elementContext.prototype.constructor = Waveform_elementContext;

Waveform_elementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Waveform_elementContext.prototype.AFTER = function() {
    return this.getToken(vhdlParser.AFTER, 0);
};

Waveform_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.enterWaveform_element(this);
	}
};

Waveform_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof vhdlListener ) {
        listener.exitWaveform_element(this);
	}
};




vhdlParser.Waveform_elementContext = Waveform_elementContext;

vhdlParser.prototype.waveform_element = function() {

    var localctx = new Waveform_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, vhdlParser.RULE_waveform_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2593;
        this.expression();
        this.state = 2596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===vhdlParser.AFTER) {
            this.state = 2594;
            this.match(vhdlParser.AFTER);
            this.state = 2595;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.vhdlParser = vhdlParser;
