"use strict";

let vscode  = require("vscode");
let parser  = require("HDLparser");
let filesys = require("HDLfilesys");

function instantiateModuleInteract(indexer, workspacePath) {
    var doc = vscode.window.activeTextEditor.document;
    parser.utils.selectModuleFromAll(indexer.HDLparam, workspacePath).then(selectModule => {
        if (selectModule != null) {
            if (doc.languageId == "systemverilog" || doc.languageId == "verilog") {
                let inst = instantiateVlogModule(selectModule);
                selectInsert(inst);
            } else if (doc.languageId == "vhdl") {
                let inst = instantiateVhdlModule(selectModule);
                selectInsert(inst);
            }
        }
    })
}
exports.instantiateModuleInteract = instantiateModuleInteract;

function selectInsert(content) {
    let editor = vscode.window.activeTextEditor;
    if (editor === undefined) {
        return;
    }
    let selections = editor.selections;
    editor.edit((editBuilder) => {
        selections.forEach((selection) => {
            editBuilder.insert(selection.active, content);
        });
    });
}
exports.selectInsert = selectInsert;

function parseFile(module) {
    let ports = null;
    let params = null;
    let languageId = parser.utils.getLanguageId(module.modulePath);
    let text = filesys.files.readFile(module.modulePath);

    if (!text) {
        return {
            ports : [],
            params : [],
        };
    }

    let content = {
        name : module.moduleName,
        text : text.slice(module.startIndex, module.lastIndex),
        offset : module.startIndex,
    }

    switch (languageId) {
        case "verilog":
        case "systemverilog":
            content.text = parser.vlogParser.del_comments(content.text);
            parser.vlogParser.get_methods(content);
            ports = parser.vlogParser.get_ports(content);
            params = parser.vlogParser.get_params(content);
        break;
        case "vhdl":
            content.text = parser.vlogParser.del_comments(content.text);
            parser.vhdlParser.get_methods(content);
            ports = parser.vhdlParser.get_ports(content);
            params = parser.vhdlParser.get_params(content);
        break;
        default: return[];
    }

    return {
        ports : ports,
        params : params,
    };
}

function instantiateVlogModule(module) {
    // module 2001 style
    let moduleName = module.moduleName;

    let initPortMax_len = 0;
    let initPort = '';

    let result = parseFile(module);

    for (let i = 0; i < result.ports.length; i++) {
        if (result.ports[i].type == "output") {
            if (result.ports[i].portWidth.length > initPortMax_len) {
                initPortMax_len = result.ports[i].portWidth.length;
            }
        }
    }

    for (let i = 0; i < result.ports.length; i++) {
        if (result.ports[i].type == "output") {
            let widthElement = result.ports[i].portWidth;
            let padding = initPortMax_len - widthElement.length + 1;
            if (module.languageId == "vhdl") {
                widthElement = widthElement.replace('(','[').replace(')',']');
                widthElement = widthElement.replace(/downto/mgi,':') + ' '.repeat(padding);
            }
            initPort += `wire ${widthElement}\t${result.ports[i].portName};\n`;
        }
    }

    let paramString = '';
    if (result.params.length > 0) {
        paramString = `#(\n${instantiateVlogParam(result.params)})\n`;
    }
    let portString = '';
    portString = instantiateVlogPort(result.ports);

    let instContent = initPort + "\n";
    instContent += moduleName;
    instContent += " ";
    instContent += paramString;
    instContent += `u_${moduleName}(\n`;
    instContent += portString;
    instContent += ');\n';

    return instContent;
}
exports.instantiateVlogModule = instantiateVlogModule;

function instantiateVhdlModule(module) {
    // module 2001 style
    let moduleName = module.moduleName;

    let result = parseFile(module);

    let paramString = ``;
    if (result.params.length > 0) {
        paramString = `generic map(\n${instantiateVhdlParam(result.params)})\n`;
    }
    let portString = ``;
    portString = `port map(\n${instantiateVhdlPort(result.ports)})`;

    // let instContent = initPort + "\n";
    let instContent = `u_${moduleName} : ${moduleName}\n`;
    instContent += paramString;
    instContent += portString;
    instContent += ';\n';

    return instContent;
}
exports.instantiateVhdlModule = instantiateVhdlModule;

function instantiateVlogPort(ports) {
    let port = '';
    let max_len = 0;
    for (let index = 0; index < ports.length; index++) {
        if (ports[index].portName.length > max_len) {
            max_len = ports[index].portName.length;
        }
    }
    // .NAME(NAME)
    port += `\t//ports\n`;
    for (let i = 0; i < ports.length; i++) {
        let nameElement = ports[i].portName;
        let padding = max_len - nameElement.length + 1;
        nameElement = nameElement + ' '.repeat(padding);
        port += `\t.${nameElement}\t\t( ${nameElement}\t\t)`;
        if (i != ports.length - 1) {
            port += ',';
        }
        port += '\n';
    }
    
    return port;
}

function instantiateVlogParam(params) {
    let param = '';
    let nameMax_len = 0;
    let initMax_len = 0;
    for (let i = 0; i < params.length; i++) {
        if (params[i].paramName.length > nameMax_len) {
            nameMax_len = params[i].paramName.length;
        }
    }

    for (let i = 0; i < params.length; i++) {
        params[i].paramInit = params[i].paramInit.replace(',','');
        if (params[i].paramInit.length > initMax_len) {
            initMax_len = params[i].paramInit.length;
        }
    }
    // .NAME  ( INIT  ),
    for (let i = 0; i < params.length; i++) {
        let elementName = params[i].paramName;
        let elementInit = params[i].paramInit;

        let namePadding = nameMax_len - elementName.length + 1;
        let initPadding = initMax_len - elementInit.length + 1;

        elementName = elementName + ' '.repeat(namePadding);
        elementInit = elementInit + ' '.repeat(initPadding);

        param += `\t.${elementName}\t\t( ${elementInit}\t\t)`;
        if (i !== params.length - 1) {
            param += ',';
            param += '\n';
        }
    }
    return param;
}

function instantiateVhdlPort(ports) {
    let port = '';
    let max_len = 0;
    for (let index = 0; index < ports.length; index++) {
        if (ports[index].portName.length > max_len) {
            max_len = ports[index].portName.length;
        }
    }
    // NAME => NAME,
    port += `\n\t-- ports\n`;
    for (let i = 0; i < ports.length; i++) {
        let nameElement = ports[i].portName;
        let padding = max_len - nameElement.length + 1;
        nameElement = nameElement + ' '.repeat(padding);
        port += `\t${nameElement} => ${ports[i].portName}`;
        if (i !== ports.length - 1) {
            port += ',';
        }
        port += '\n';
    }
    return port;
}

function instantiateVhdlParam(params) {
    let param = '';
    let nameMax_len = 0;
    // let initMax_len = 0;
    for (let i = 0; i < params.length; i++) {
        if (params[i].paramName.length > nameMax_len) {
            nameMax_len = params[i].paramName.length;
        }
    }

    // for (let i = 0; i < params.length; i++) {
    //     params[i].paramInit = params[i].paramInit.replace(',','');
    //     if (params[i].paramInit.length > initMax_len) {
    //         initMax_len = params[i].paramInit.length;
    //     }
    // }
    // NAME => NAME,
    for (let i = 0; i < params.length; i++) {
        let elementName = params[i].paramName;
        let elementInit = params[i].paramInit;

        let namePadding = nameMax_len - elementName.length + 1;
        // let initPadding = initMax_len - elementInit.length + 1;

        elementName = elementName + ' '.repeat(namePadding);
        // elementInit = elementInit + ' '.repeat(initPadding);

        param += `\t${elementName} => ${elementInit}`;
        if (i !== params.length - 1) {
            param += ',';
            param += '\n';
        }
    }
    return param;
}

function instantiateVlogSortPort(ports) {
    let port = '';
    let index = 0;
    let max_len = 0;
    for (index = 0; index < ports.input.length; index++) {
        if (ports.input[index].portName.length > max_len) {
            max_len = ports.input[index].portName.length;
        }
    }
    for (index = 0; index < ports.output.length; index++) {
        if (ports.output[index].portName.length > max_len) {
            max_len = ports.output[index].portName.length;
        }
    }
    for (index = 0; index < ports.inout.length; index++) {
        if (ports.inout[index].portName.length > max_len) {
            max_len = ports.inout[index].portName.length;
        }
    }
    // .NAME(NAME)
    port += `\t//input\n`;
    for (let i = 0; i < ports.input.length; i++) {
        let element = ports.input[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        if (ports.output.length == 0 ) {
            port += `\t.${element}\t\t( ${element}\t\t)`;
            if (i !== ports.input.length - 1) {
                port += ',';
            }
            port += '\n';
        } else {
            port += `\t.${element}\t\t( ${element}\t\t),\n`;
        }
    }

    port += `\n\t//output\n`;
    for (let i = 0; i < ports.output.length; i++) {
        let element = ports.output[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        if (ports.inout.length == 0 ) {
            port += `\t.${element}\t\t( ${element}\t\t)`;
            if (i !== ports.output.length - 1) {
                port += ',';
            }
            port += '\n';
        } else {
            port += `\t.${element}\t\t( ${element}\t\t),\n`;
        }
    }

    port += `\n\t//inout\n`;
    for (let i = 0; i < ports.inout.length; i++) {
        let element = ports.inout[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        port += `\t.${element}\t\t( ${element}\t\t)`;
        if (i !== ports.length - 1) {
            port += ',';
        }
        port += '\n';
    }
    return port;
}

function instantiateVhdlSortPort(ports) {
    let port = '';
    let index = 0;
    let max_len = 0;
    for (index = 0; index < ports.length; index++) {
        if (ports.input[index].portName.length > max_len) {
            max_len = ports[index].portName.length;
        }
    }
    for (index = 0; index < ports.output.length; index++) {
        if (ports.output[index].portName.length > max_len) {
            max_len = ports.output[index].portName.length;
        }
    }
    for (index = 0; index < ports.inout.length; index++) {
        if (ports.inout[index].portName.length > max_len) {
            max_len = ports.inout[index].portName.length;
        }
    }
    // NAME => NAME,
    port += `\t-- input\n`;
    for (let i = 0; i < ports.input.length; i++) {
        let element = ports.input[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        if (ports.output.length == 0 ) {
            port += `\t${element} => ${ports.input[i].portName}`;
            if (i !== ports.input.length - 1) {
                port += ',';
            }
            port += '\n';
        } else {
            port += `\t${element} => ${ports.input[i].portName},\n`;
        }
    }

    port += `\n\t-- output\n`;
    for (let i = 0; i < ports.output.length; i++) {
        let element = ports.output[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        if (ports.inout.length == 0 ) {
            port += `\t${element} => ${ports.output[i].portName}`;
            if (i !== ports.output.length - 1) {
                port += ',';
            }
            port += '\n';
        } else {
            port += `\t${element} => ${ports.output[i].portName},\n`;
        }
    }

    port += `\n\t-- inout\n`;
    for (let i = 0; i < ports.inout.length; i++) {
        let element = ports.inout[i].portName;
        let padding = max_len - element.length + 1;
        element = element + ' '.repeat(padding);
        port += `\t${element} => ${ports.inout[i].portName}`;
        if (i !== ports.length - 1) {
            port += ',';
        }
        port += '\n';
    }
    return port;
}
