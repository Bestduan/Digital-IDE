"use strict";

const fs     = require("fs");
const fspath = require("path");

var fileOperation = {
    log : console.log,

    isillegal : function (path) {
        if (!fs.existsSync(path)) {
            return true;
        }

        let state = fs.statSync(path);
        if (state.isDirectory()) {
            return true;
        }
        return false;
    },

    readFile : function (path) {
        if (this.isillegal(path)) {
            return false;
        }

        let content = fs.readFileSync(path, "utf-8");
        return content;
    },

    writeFile : function (path, content) {
        try {
            let parent = fspath.dirname(path);
            fs.mkdirSync(parent, {recursive:true});
            fs.writeFileSync(path, content);
            return true;
        } 
        catch (error) {
            this.log(error);
        }
    },

    removeFile : function (path) {
        // 如果不存在或者为dir则直接退出
        if (this.isillegal(path)) {
            return false;
        }

        try {
            fs.unlinkSync(path);
        } 
        catch (error) {
            this.log(error);
        }
    },

    moveFile : function (src, dest, cover) {
        if (src == dest) {
            return false;
        }

        // 如果不存在或者不为dir则直接退出
        if (this.isillegal(src)) {
            return false;
        }

        if (!cover) {
            cover = true;
        }
        
        this.copyFile(src, dest, cover);
        try {
            fs.unlinkSync(src);
        } 
        catch (error) {
            this.log(error);
        }
    },

    copyFile : function (src, dest, cover) {
        if (src == dest) {
            return false;
        }

        // 如果不存在或者不为dir则直接退出
        if (this.isillegal(src)) {
            return false;
        }

        if (!cover) {
            cover = true;
        }

        try {
            let parent = fspath.dirname(dest);
            fs.mkdirSync(parent, {recursive:true});
            if (!fs.existsSync(dest)) {
                fs.copyFileSync(src,dest);
            } else {
                if (cover) {
                    fs.copyFileSync(src,dest);
                }
            }
            return true;
        }
        catch (error) {
            this.log(error);
        }
    },

    pickFile : function (filePath, extname, output) {
        if (!fs.existsSync(filePath)) {
            return;
        }
        let file_list = fs.readdirSync(filePath);
        let output_list = [];
        file_list.filter(function (file) {
            if(fspath.extname(file).toLowerCase() === extname){
                output_list.push(file)
            }
        });
        return output_list;
    },

    /**
     * CN: 已经进行存在性的检查，并且同时支持文件和文件夹
     * @param {String} filePath 
     * @param {Array} extname  数组类型 e.g. [".v", ".sv"]
     * @param {Array} output
     * @returns 
     */
    pickAllFile : function (filePath, extname, output) {
        if (!fs.existsSync(filePath)) {
            return ;
        }
        if (!fs.statSync(filePath).isDirectory()) {
            output.push(filePath.replace(/\\/g,"\/"));
            return;
        }
        let file_list = fs.readdirSync(filePath);
        for (let i = 0; i < file_list.length; i++) {
            const element = file_list[i];
            if (fs.statSync(`${filePath}/${element}`).isDirectory()) {
                this.pickAllFile(`${filePath}/${element}`, extname, output);
            } else {
                let ext = fspath.extname(element);
                ext = ext.toLowerCase();
                let result = extname.includes(ext);		
                if(result && ext != '') {
                    output.push(`${filePath}/${element}`.replace(/\\/g,"\/"));
                }
            }
        }
    },

    pullJsonInfo : function (JSON_path) {
        if (this.isillegal(JSON_path)) {
            return {};
        }

        var data = fs.readFileSync(JSON_path, "utf-8");
        let prjinfo = JSON.parse(data);
        return prjinfo;
    },

    pushJsonInfo : function (JSON_path,JSON_data){
        var str = JSON.stringify(JSON_data,null,'\t');
        this.writeFile(JSON_path, str);
        return true;
    },

    isHasAttr : function (obj, attr){
        if (!obj) {
            return false;
        }
        let tempObj = obj;
        attr = attr.replace(/\[(\w+)\]/g, '.$1');
        attr = attr.replace(/^\./, '');
      
        let keyArr = attr.split('.');
        for (let i = 0; i < keyArr.length; i++) {
            const element = keyArr[i];
            if (!tempObj) return false;
            if (element in tempObj) {
                tempObj = tempObj[element];
            } else {
                return false;
            }
        }
        return true;
    },

    isHasValue : function (obj, attr, value){
        if (!obj) {
            return false;
        }
        let tempObj = obj;
        attr = attr.replace(/\[(\w+)\]/g, '.$1');
        attr = attr.replace(/^\./, '');
      
        let keyArr = attr.split('.');
        for (let i = 0; i < keyArr.length; i++) {
            const element = keyArr[i];
            if (!tempObj) return false;
            if (element in tempObj) {
                tempObj = tempObj[element];
                if (i == keyArr.length - 1 && tempObj != value) {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    },
}
module.exports = fileOperation;