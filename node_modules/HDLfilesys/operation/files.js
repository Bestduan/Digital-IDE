"use strict";

const fs = require("fs");
const fspath = require("path");

var fileOperation = {
    log : console.log,

    /**
     * @state finish-test
     * @descriptionCn 非法性检查 存在且为file
     * @descriptionEn Illegality check
     * @param {string} path 
     * @returns {boolean} true: illegal | false: legal
     */
    isillegal : function (path) {
        if (!fs.existsSync(path)) {
            return true;
        }

        let state = fs.statSync(path);
        if (state.isDirectory()) {
            return true;
        }
        return false;
    },

    /**
     * @state finish-test
     * @descriptionCn 检查该地址对应的文件是否存在
     * @param {String} path 文件地址
     * @returns {Boolean} (true : 存在 | false : 不存在)
     */
    isExist : function (path) {
        if (fs.existsSync(path)) {
            return true;
        }
        return false;
    },

    /**
     * @state finish-test
     * @descriptionCn 读取文件内容
     * @param {String} path 文件的绝对地址 ('/'分隔)
     * @returns {String | Boolean} (文件内容 | false 读取失败)
     */
    readFile : function (path) {
        if (this.isillegal(path)) {
            return false;
        }

        try {
            let content = fs.readFileSync(path, "utf-8");
            return content;
        } catch (error) {
            return false;
        }
    },

    /**
     * @state finish-test
     * @descriptionCn 向文件中写入内容
     * @param {String} path 文件的绝对地址 ('/'分隔)
     * @returns {String | Boolean} (文件内容 | false 读取失败)
     */
    writeFile : function (path, content) {
        try {
            let parent = fspath.dirname(path);
            fs.mkdirSync(parent, {recursive:true});
            fs.writeFileSync(path, content);
            return true;
        } catch (error) {
            this.log(error);
            return false;
        }
    },

    /**
     * @state finish-test
     * @descriptionCn 删除指定文件
     * @param {String} path 文件的绝对地址 ('/'分隔)
     * @returns {Boolean} true:成功 | false:失败
     */
    removeFile : function (path) {
        // 如果不存在或者为dir则直接退出
        if (this.isillegal(path)) {
            return false;
        }

        try {
            fs.unlinkSync(path);
        } catch (error) {
            this.log(error);
            return false;
        }
    },

    /**
     * @state finish-test
     * @descriptionCn 移动文件
     * @param {String} src 文件的绝对地址  - 源地址 ('/'分隔)
     * @param {String} dest 文件的绝对地址 - 目的地址 ('/'分隔)
     * @param {Boolean} cover true:覆盖 | false:不覆盖
     * @returns {Boolean} true:成功 | false:失败
     */
    moveFile : function (src, dest, cover) {
        if (src == dest) {
            return false;
        }

        // 如果不存在或者不为dir则直接退出
        if (this.isillegal(src)) {
            return false;
        }

        if (!cover) {
            cover = true;
        }
        
        this.copyFile(src, dest, cover);
        try {
            fs.unlinkSync(src);
        } catch (error) {
            this.log(error);
            return false;
        }
    },

    /**
     * @state finish-test
     * @descriptionCn 复制文件
     * @param {String} src 文件的绝对地址  - 源地址 ('/'分隔)
     * @param {String} dest 文件的绝对地址 - 目的地址 ('/'分隔)
     * @param {Boolean} cover true:覆盖 | false:不覆盖
     * @returns {Boolean} true:成功 | false:失败
     */
    copyFile : function (src, dest, cover) {
        if (src == dest) {
            return false;
        }

        // 如果不存在或者不为dir则直接退出
        if (this.isillegal(src)) {
            return false;
        }

        if (!cover) {
            cover = true;
        }

        try {
            let parent = fspath.dirname(dest);
            fs.mkdirSync(parent, {recursive:true});
            if (!fs.existsSync(dest)) {
                fs.copyFileSync(src,dest);
            } else {
                if (cover) {
                    fs.copyFileSync(src,dest);
                }
            }
            return true;
        } catch (error) {
            this.log(error);
            return false;
        }
    },

    /**
     * @state finish-test
     * @descriptionCn 从指定文件夹下找到指定后缀名的文件
     * @param {String} path 文件夹的绝对地址 ('/'分隔)
     * @param {String} extname 文件的后缀名
     * @param {Array} output 满足后缀文件路径所需要放置的数组
     * @returns {Array} output 参数省缺时，返回新的文件数组
     */
    pickFile : function (path, extname, output) {
        if (!fs.existsSync(path)) {
            return;
        }

        // 检查 file path 是否是文件夹
        let state = fs.statSync(path);
        if (!state.isDirectory()) {
            return [];
        }

        let files = fs.readdirSync(path);
        let outputs = [];
        files.filter(function (file) {
            if(fspath.extname(file).toLowerCase() === extname){
                if (output) {
                    output.push(file);
                }
                outputs.push(file)
            }
        });
        return outputs;
    },

    /**
     * @state finish-test
     * @descriptionCn 从指定文件夹下过滤出指定的要求的文件
     * @param {String} path 文件夹的绝对地址 ('/'分隔)
     * @param {Function} callback 过滤函数
     * @returns {Array} 返回满座要求的文件数组
     */
    filter : function (path, callback) {
        // 检查 file path 是否存在
        if (!fs.existsSync(path)) {
            return [];
        }

        // 检查 file path 是否是文件夹
        let state = fs.statSync(path);
        if (!state.isDirectory()) {
            return [];
        }

        let files = fs.readdirSync(path);
        let output = [];
        files.filter((file) => {
            let result = callback(file);
            if (result) {
                output.push(result);
            }
        });
        return output;
    },

    /**
     * @descriptionCN : 已经进行存在性的检查，并且同时支持文件和文件夹
     * @param {String} path 文件夹的绝对地址 ('/'分隔)
     * @param {Array} extname  数组类型 e.g. [".v", ".sv"]
     * @param {Array} output 满足后缀文件路径所需要放置的数组
     * @returns 用于函数返回，无实际意义
     */
    pickAllFile : function (path, extname, output, ignores) {
        path = path.replace(/\\/g,"\/");
        if (!ignores) {
            ignores = [];
        }
        if (!fs.existsSync(path)) {
            return ;
        }
        if (!fs.statSync(path).isDirectory()) {
            if (this.isIgnore(ignores, path)) {
                return;
            }
            output.push(path);
            return;
        }
        let file_list = fs.readdirSync(path);
        for (let i = 0; i < file_list.length; i++) {
            const element = file_list[i];
            if (fs.statSync(`${path}/${element}`).isDirectory()) {
                this.pickAllFile(`${path}/${element}`, extname, output, ignores);
            } else {
                let ext = fspath.extname(element);
                ext = ext.toLowerCase();
                let result = extname.includes(ext);		
                if(result && ext != '') {
                    if (!this.isIgnore(ignores, `${path}/${element}`)) {
                        output.push(`${path}/${element}`);
                    }
                }
            }
        }
    },

    isIgnore : function (ignores, path) {
        for (let i = 0; i < ignores.length; i++) {
            const element = ignores[i];
            if (path.includes(element)) {
                return true;
            }
        }
        return false;
    },

    /**
     * @descriptionCn 拉取json文件中的属性信息
     * @param {String} path json文件的路径
     * @returns {Object} 获取到的对象信息
     */
    pullJsonInfo : function (path) {
        if (this.isillegal(path)) {
            return {};
        }

        var data = fs.readFileSync(path, "utf-8");
        let obj = JSON.parse(data);
        return obj;
    },

    /**
     * @descriptionCn 将对象内容推送到json文件中去
     * @param {*} path json文件的路径
     * @param {*} obj 
     * @returns 
     */
    pushJsonInfo : function (path, obj){
        var str = JSON.stringify(obj,null,'\t');
        this.writeFile(path, str);
        return true;
    },

    /**
     * @descriptionCn 对对象进行检查是否存在指定的属性
     * @param {Object} obj  待检查的对象
     * @param {String} attr 指定的属性名称
     * @returns {Boolean} (true : 存在 | false : 不存在或对象不存在)
     */
    isHasAttr : function (obj, attr){
        if (!obj) {
            return false;
        }
        let tempObj = obj;
        attr = attr.replace(/\[(\w+)\]/g, '.$1');
        attr = attr.replace(/^\./, '');
      
        let keyArr = attr.split('.');
        for (let i = 0; i < keyArr.length; i++) {
            const element = keyArr[i];
            if (!tempObj) return false;
            if (element in tempObj) {
                tempObj = tempObj[element];
            } else {
                return false;
            }
        }
        return true;
    },

    /**
     * @descriptionCn 对对象进行检查是否存在指定的属性，且属性值是否正确
     * @param {Object} obj  待检查的对象
     * @param {String} attr 指定的属性名称
     * @param {*} value     指定的属性值
     * @returns {Boolean} (true : 存在且正确 | false : 不正确或不存在或对象不存在)
     */
    isHasValue : function (obj, attr, value){
        if (!obj) {
            return false;
        }
        let tempObj = obj;
        attr = attr.replace(/\[(\w+)\]/g, '.$1');
        attr = attr.replace(/^\./, '');
      
        let keyArr = attr.split('.');
        for (let i = 0; i < keyArr.length; i++) {
            const element = keyArr[i];
            if (!tempObj) return false;
            if (element in tempObj) {
                tempObj = tempObj[element];
                if (i == keyArr.length - 1 && tempObj != value) {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    },

    pushObjValue(obj, attr, value) {
        if (!obj) {
            return false;
        }
        let tempObj = obj;
        attr = attr.replace(/\[(\w+)\]/g, '.$1');
        attr = attr.replace(/^\./, '');
      
        let keyArr = attr.split('.');
        for (let i = 0; i < keyArr.length; i++) {
            const element = keyArr[i];
            if (!tempObj) return false;
            if (element in tempObj) {
                tempObj = tempObj[element];
            } else {
                return false;
            }
        }
        return true;
    }
}
module.exports = fileOperation;